LX51 LINKER/LOCATER V4.66.41.0                                                          06/15/2016  10:27:11  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022D99            LJMP     02D99H
000083 022DD0            LJMP     02DD0H
----- FUNCTION CFG_Init (BEGIN) -----
 FILE: '..\cfg\cfg.c'
   37: void CFG_Init(void)
   38: {
   39:     CFG_DB_Init();
   40:     CFG_PWD_Init();
0001DD 0223DE            LJMP     CFG_PWD_Init
----- FUNCTION CFG_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 2


   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
00162C 74FF              MOV      A,#0FFH
00162E F531              MOV      vCRC,A
001630 F532              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
001632 E4                CLR      A
001633 FD                MOV      R5,A
001634 FC                MOV      R4,A
001635         ?C0001?THREAD_PKT:
001635 D3                SETB     C
001636 900045            MOV      DPTR,#vFrame+05H
001639 E0                MOVX     A,@DPTR
00163A 9D                SUBB     A,R5
00163B 900044            MOV      DPTR,#vFrame+04H
00163E E0                MOVX     A,@DPTR
00163F 9C                SUBB     A,R4
001640 4031              JC       ?C0002?THREAD_PKT
   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
001642 E531              MOV      A,vCRC
001644 FF                MOV      R7,A
001645 7448              MOV      A,#LOW vFrame+08H
001647 2D                ADD      A,R5
001648 F582              MOV      DPL,A
00164A 7400              MOV      A,#HIGH vFrame+08H
00164C 3C                ADDC     A,R4
00164D F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 3


00164F E0                MOVX     A,@DPTR
001650 6F                XRL      A,R7
001651 75F002            MOV      B,#02H
001654 A4                MUL      AB
001655 242A              ADD      A,#LOW aCRC16
001657 F582              MOV      DPL,A
001659 E5F0              MOV      A,B
00165B 3409              ADDC     A,#HIGH aCRC16
00165D F583              MOV      DPH,A
00165F E532              MOV      A,vCRC+01H
001661 FE                MOV      R6,A
001662 E4                CLR      A
001663 93                MOVC     A,@A+DPTR
001664 6E                XRL      A,R6
001665 F531              MOV      vCRC,A
001667 7401              MOV      A,#01H
001669 93                MOVC     A,@A+DPTR
00166A F532              MOV      vCRC+01H,A
   82:     }
00166C 0D                INC      R5
00166D BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
001670 0C                INC      R4
001671         ?C0066?THREAD_PKT:
001671 80C2              SJMP     ?C0001?THREAD_PKT
001673         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
001673 AE31              MOV      R6,vCRC
001675 AF32              MOV      R7,vCRC+01H
   85: }
001677 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
001678 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
00167B 1232FD            LCALL    ?L?COM0034
00167E 1207F3            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
001681 C247              CLR      bFlushFIFO
  242:     }
001683 22                RET      
001684         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
001684 90004B            MOV      DPTR,#vFrame+0BH
001687 E0                MOVX     A,@DPTR
001688 2404              ADD      A,#04H
00168A FE                MOV      R6,A
00168B 90004A            MOV      DPTR,#vFrame+0AH
00168E E0                MOVX     A,@DPTR
00168F 3400              ADDC     A,#00H
001691 900044            MOV      DPTR,#vFrame+04H
001694 F0                MOVX     @DPTR,A
001695 A3                INC      DPTR
001696 CE                XCH      A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 4


001697 F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
001698 D12C              ACALL    _thread_pkt_CalcCRC
00169A 900046            MOV      DPTR,#vFrame+06H
00169D EE                MOV      A,R6
00169E F0                MOVX     @DPTR,A
00169F A3                INC      DPTR
0016A0 EF                MOV      A,R7
0016A1 F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
0016A2 C238              CLR      ?_thread_pkt_Dump?BIT
0016A4 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0016A7 123303            LCALL    ?L?COM0035
0016AA 900045            MOV      DPTR,#vFrame+05H
0016AD E0                MOVX     A,@DPTR
0016AE 2408              ADD      A,#08H
0016B0 FD                MOV      R5,A
0016B1 900044            MOV      DPTR,#vFrame+04H
0016B4 E0                MOVX     A,@DPTR
0016B5 3400              ADDC     A,#00H
0016B7 FC                MOV      R4,A
0016B8 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
0016BB 1232FD            LCALL    ?L?COM0034
0016BE 1207F3            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
0016C1 123303            LCALL    ?L?COM0035
0016C4 123473            LCALL    ?L?COM005F
  141:     if (bFlushFIFO)
0016C7 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
0016CA 7BFF              MOV      R3,#0FFH
0016CC 7A08              MOV      R2,#HIGH 01000867H
0016CE 7967              MOV      R1,#LOW 01000867H
0016D0 120262            LCALL    _printf
  145:         return FALSE;
0016D3 C3                CLR      C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 5


0016D4 22                RET      
  146:     }
0016D5         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
0016D5 C3                CLR      C
0016D6 E52E              MOV      A,vBlockLen
0016D8 9408              SUBB     A,#08H
0016DA E4                CLR      A
0016DB 9400              SUBB     A,#00H
0016DD 400E              JC       ?C0013?THREAD_PKT
0016DF 900040            MOV      DPTR,#vFrame
0016E2 E0                MOVX     A,@DPTR
0016E3 6443              XRL      A,#043H
0016E5 7004              JNZ      ?C0067?THREAD_PKT
0016E7 A3                INC      DPTR
0016E8 E0                MOVX     A,@DPTR
0016E9 644C              XRL      A,#04CH
0016EB         ?C0067?THREAD_PKT:
0016EB 601A              JZ       ?C0012?THREAD_PKT
0016ED         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
0016ED 7BFF              MOV      R3,#0FFH
0016EF 7A08              MOV      R2,#HIGH 01000874H
0016F1 7974              MOV      R1,#LOW 01000874H
0016F3 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
0016F6 900040            MOV      DPTR,#vFrame
0016F9 E0                MOVX     A,@DPTR
0016FA F535              MOV      ?_printf?BYTE+04H,A
0016FC A3                INC      DPTR
0016FD E0                MOVX     A,@DPTR
0016FE F536              MOV      ?_printf?BYTE+05H,A
001700 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
001703 D247              SETB     bFlushFIFO
  152:         return FALSE;
001705 C3                CLR      C
001706 22                RET      
  153:     }
001707         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
001707 900042            MOV      DPTR,#vFrame+02H
00170A E0                MOVX     A,@DPTR
00170B 7004              JNZ      ?C0068?THREAD_PKT
00170D A3                INC      DPTR
00170E E0                MOVX     A,@DPTR
00170F 6401              XRL      A,#01H
001711         ?C0068?THREAD_PKT:
001711 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
001713 7BFF              MOV      R3,#0FFH
001715 7A08              MOV      R2,#HIGH 010008A4H
001717 79A4              MOV      R1,#LOW 010008A4H
001719 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
00171C 900042            MOV      DPTR,#vFrame+02H
00171F E4                CLR      A
001720 F0                MOVX     @DPTR,A
001721 A3                INC      DPTR
001722 04                INC      A
001723 F0                MOVX     @DPTR,A
  159:         return FALSE;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 6


001724 C3                CLR      C
001725 22                RET      
  160:     }
001726         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
001726 E52E              MOV      A,vBlockLen
001728 24F8              ADD      A,#0F8H
00172A F52D              MOV      vRxTotalLen+01H,A
00172C E4                CLR      A
00172D 34FF              ADDC     A,#0FFH
00172F F52C              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
001731 E4                CLR      A
001732 F52F              MOV      vElaspedTime,A
001734 F530              MOV      vElaspedTime+01H,A
001736         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
001736 D3                SETB     C
001737 900045            MOV      DPTR,#vFrame+05H
00173A E0                MOVX     A,@DPTR
00173B 952D              SUBB     A,vRxTotalLen+01H
00173D 900044            MOV      DPTR,#vFrame+04H
001740 E0                MOVX     A,@DPTR
001741 952C              SUBB     A,vRxTotalLen
001743 4048              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
001745 7448              MOV      A,#LOW vFrame+08H
001747 252D              ADD      A,vRxTotalLen+01H
001749 F9                MOV      R1,A
00174A 7400              MOV      A,#HIGH vFrame+08H
00174C 352C              ADDC     A,vRxTotalLen
00174E FA                MOV      R2,A
00174F 7B01              MOV      R3,#01H
001751 123473            LCALL    ?L?COM005F
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
001754 E52E              MOV      A,vBlockLen
001756 7028              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
001758 7F01              MOV      R7,#01H
00175A FE                MOV      R6,A
00175B 121A3E            LCALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
00175E 0530              INC      vElaspedTime+01H
001760 E530              MOV      A,vElaspedTime+01H
001762 7002              JNZ      ?C0069?THREAD_PKT
001764 052F              INC      vElaspedTime
001766         ?C0069?THREAD_PKT:
001766 FF                MOV      R7,A
001767 AE2F              MOV      R6,vElaspedTime
001769 E4                CLR      A
00176A FC                MOV      R4,A
00176B FD                MOV      R5,A
00176C 7B50              MOV      R3,#050H
00176E 7AC3              MOV      R2,#0C3H
001770 F9                MOV      R1,A
001771 F8                MOV      R0,A
001772 D3                SETB     C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 7


001773 120607            LCALL    ?C?SLCMP
001776 50BE              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
001778 7BFF              MOV      R3,#0FFH
00177A 7A08              MOV      R2,#HIGH 010008BCH
00177C 79BC              MOV      R1,#LOW 010008BCH
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
00177E 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
001780         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
001780 E52E              MOV      A,vBlockLen
001782 252D              ADD      A,vRxTotalLen+01H
001784 F52D              MOV      vRxTotalLen+01H,A
001786 E4                CLR      A
001787 352C              ADDC     A,vRxTotalLen
001789 F52C              MOV      vRxTotalLen,A
  187:     }
00178B 80A9              SJMP     ?C0015?THREAD_PKT
00178D         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
00178D 900044            MOV      DPTR,#vFrame+04H
001790 E0                MOVX     A,@DPTR
001791 652C              XRL      A,vRxTotalLen
001793 7004              JNZ      ?C0070?THREAD_PKT
001795 A3                INC      DPTR
001796 E0                MOVX     A,@DPTR
001797 652D              XRL      A,vRxTotalLen+01H
001799         ?C0070?THREAD_PKT:
001799 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
00179B 7BFF              MOV      R3,#0FFH
00179D 7A08              MOV      R2,#HIGH 010008D0H
00179F 79D0              MOV      R1,#LOW 010008D0H
0017A1         
0017A1 1233C0            LCALL    ?L?COM004A
0017A4 7401              MOV      A,#01H
0017A6 F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
0017A7 C3                CLR      C
0017A8 22                RET      
  194:     }
0017A9         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
0017A9 D238              SETB     ?_thread_pkt_Dump?BIT
0017AB 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
0017AE D12C              ACALL    _thread_pkt_CalcCRC
0017B0 900046            MOV      DPTR,#vFrame+06H
0017B3 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 8


0017B4 6E                XRL      A,R6
0017B5 7003              JNZ      ?C0071?THREAD_PKT
0017B7 A3                INC      DPTR
0017B8 E0                MOVX     A,@DPTR
0017B9 6F                XRL      A,R7
0017BA         ?C0071?THREAD_PKT:
0017BA 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
0017BC 7BFF              MOV      R3,#0FFH
0017BE 7A08              MOV      R2,#HIGH 010008E8H
0017C0 79E8              MOV      R1,#LOW 010008E8H
0017C2 1233C0            LCALL    ?L?COM004A
0017C5 14                DEC      A
0017C6 F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
0017C7 C3                CLR      C
0017C8 22                RET      
  206:     }
0017C9         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
0017C9 D3                SETB     C
  209: }
0017CA 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0017CB EF                MOV      A,R7
0017CC 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017CF 0509              INC      vSCB_RxPkt+01H
0017D1 E509              MOV      A,vSCB_RxPkt+01H
0017D3 7002              JNZ      ?C0073?THREAD_PKT
0017D5 0508              INC      vSCB_RxPkt
0017D7         ?C0073?THREAD_PKT:
  284: 	}
0017D7         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0017D7 EF                MOV      A,R7
0017D8 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017DB 0509              INC      vSCB_RxPkt+01H
0017DD E509              MOV      A,vSCB_RxPkt+01H
0017DF 7002              JNZ      ?C0074?THREAD_PKT
0017E1 0508              INC      vSCB_RxPkt
0017E3         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0017E3 D247              SETB     bFlushFIFO
  291: 	}
  292: }
0017E5         ?C0047?THREAD_PKT:
0017E5 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 9


----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017E6 E4                CLR      A
0017E7 F50A              MOV      vTCB_Pkt,A
0017E9 F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017EB F508              MOV      vSCB_RxPkt,A
0017ED F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017EF 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
0017F0 121EB7            LCALL    _c2m_WriteAR
  355: }
0017F3 021D29            LJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   27: UINT16 PKT_MDIOM_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
0017F6 1232CC            LCALL    ?L?COM002E
   31: }
0017F9 7E01              MOV      R6,#01H
0017FB 7F40              MOV      R7,#040H
   32: 
0017FD 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900048            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 10


00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24F6              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3408              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24F8              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3408              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 120704            LCALL    ?C?ICALL
  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 940D              SUBB     A,#0DH
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900048            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 11


  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 12069D            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 1216BB            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 12


0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 121678            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  115: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  116: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018B9 AD07              MOV      R5,AR7
  117:     UINT8   vLoop;
  118:     BOOL    vAck;
  119: 
  120:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018BB 7B08              MOV      R3,#08H
0018BD         ?C0001?PKT_I2CM:
  121:     {
  122:         /* transmitting data, MSB first, LSB last */
  123:         CROL(vData, 1);
0018BD 7801              MOV      R0,#01H
0018BF AF05              MOV      R7,AR5
0018C1 EF                MOV      A,R7
0018C2 08                INC      R0
0018C3 8001              SJMP     ?C0371?PKT_I2CM
0018C5         ?C0370?PKT_I2CM:
0018C5 23                RL       A
0018C6         ?C0371?PKT_I2CM:
0018C6 D8FD              DJNZ     R0,?C0370?PKT_I2CM
0018C8 FD                MOV      R5,A
  124:         PKT_I2CM_SET_SDA(vData & 0x1);
0018C9 13                RRC      A
0018CA 9292              MOV      IO_DUT_I2CM_SDA,C
  125: 
  126:         PKT_I2CM_SET_SCL(HIGH);
0018CC 12311D            LCALL    ?L?COM000D
0018CF 1232D4            LCALL    ?L?COM002F
0018D2         ?C0020?PKT_I2CM:
0018D2 20820E            JB       IO_DUT_I2CM_SCL,?C0027?PKT_I2CM
0018D5 1232ED            LCALL    ?L?COM0032
0018D8 7002              JNZ      ?C0372?PKT_I2CM
0018DA 153F              DEC      _loop
0018DC         ?C0372?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 13


0018DC 4E                ORL      A,R6
0018DD 6004              JZ       ?C0027?PKT_I2CM
0018DF 513A              ACALL    ?L?COM0008
0018E1 80EF              SJMP     ?C0020?PKT_I2CM
  127:         PKT_I2CM_SET_SCL(LOW);
0018E3         ?C0027?PKT_I2CM:
0018E3 12311D            LCALL    ?L?COM000D
0018E6 C282              CLR      IO_DUT_I2CM_SCL
0018E8 8000              SJMP     ?C0003?PKT_I2CM
  128:     }
0018EA         ?C0003?PKT_I2CM:
0018EA DBD1              DJNZ     R3,?C0001?PKT_I2CM
0018EC         ?C0036?PKT_I2CM:
  129: 
  130:     /* release SDA */
  131:     PKT_I2CM_SET_SDA(HIGH);
0018EC D292              SETB     IO_DUT_I2CM_SDA
  132: 
  133:     /* check ACK */
  134:     PKT_I2CM_SET_SCL(HIGH);
0018EE 12311D            LCALL    ?L?COM000D
0018F1 1232D4            LCALL    ?L?COM002F
0018F4         ?C0047?PKT_I2CM:
0018F4 20820E            JB       IO_DUT_I2CM_SCL,?C0038?PKT_I2CM
0018F7 1232ED            LCALL    ?L?COM0032
0018FA 7002              JNZ      ?C0374?PKT_I2CM
0018FC 153F              DEC      _loop
0018FE         ?C0374?PKT_I2CM:
0018FE 4E                ORL      A,R6
0018FF 6004              JZ       ?C0038?PKT_I2CM
001901 513A              ACALL    ?L?COM0008
001903 80EF              SJMP     ?C0047?PKT_I2CM
001905         ?C0038?PKT_I2CM:
  135:     vAck = PKT_I2CM_GET_SDA();
001905 A292              MOV      C,IO_DUT_I2CM_SDA
001907 923A              MOV      vAck,C
  136:     PKT_I2CM_SET_SCL(LOW);
001909 12311D            LCALL    ?L?COM000D
00190C C282              CLR      IO_DUT_I2CM_SCL
00190E 8000              SJMP     ?C0050?PKT_I2CM
001910         ?C0050?PKT_I2CM:
  137: 
  138:     return !vAck;
001910 A23A              MOV      C,vAck
001912 B3                CPL      C
  139: }
001913 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  210: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  211: {
001914 123452            LCALL    ?L?COM005B
001917 A3                INC      DPTR
001918 123197            LCALL    ?L?COM0013
  212:     UINT16  vWriteLen = pPayload->vWriteLen;
  213:     UINT16  vReadLen  = pPayload->vReadLen;
00191B 123339            LCALL    ?L?COM003B
  214:     BOOL    bIntState;
  215:     BOOL    bDone = FALSE;
00191E C239              CLR      bDone
  216:     UINT16  vLoop;
  217: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 14


  218:     /* make sure the I2C is ready */
  219:     if (!_pkt_i2cm_CheckReady())
001920 515E              ACALL    _pkt_i2cm_CheckReady
001922 4003              JC       ?C0213?PKT_I2CM
  220:     {
  221:         return bDone;
001924 A239              MOV      C,bDone
001926 22                RET      
  222:     }
001927         ?C0213?PKT_I2CM:
  223: 
  224:     /* lock globally interrupt */
  225:     bIntState = DRV_INT_LockGlobalInterrupt();
001927 30AF05            JNB      EA,?C0215?PKT_I2CM
00192A C2AF              CLR      EA
00192C D3                SETB     C
00192D 8001              SJMP     ?C0216?PKT_I2CM
00192F         ?C0215?PKT_I2CM:
00192F C3                CLR      C
001930         ?C0216?PKT_I2CM:
001930 9238              MOV      bIntState,C
  226: 
  227:     /* send write stream */
  228:     if ((vWriteLen != 0)
001932 E538              MOV      A,vWriteLen+01H
001934 4537              ORL      A,vWriteLen
001936 700C              JNZ      ?C0224?PKT_I2CM
001938 E538              MOV      A,vWriteLen+01H
00193A 4537              ORL      A,vWriteLen
00193C 706C              JNZ      ?C0217?PKT_I2CM
00193E E53A              MOV      A,vReadLen+01H
001940 4539              ORL      A,vReadLen
001942 7066              JNZ      ?C0217?PKT_I2CM
  229:         || ((vWriteLen == 0) && (vReadLen == 0)))
  230:     {
  231:         /* send I2C start */
  232:         _pkt_i2cm_Start();
001944         ?C0224?PKT_I2CM:
001944 D292              SETB     IO_DUT_I2CM_SDA
001946 12311D            LCALL    ?L?COM000D
001949 12337C            LCALL    ?L?COM0040
00194C         ?C0235?PKT_I2CM:
00194C 208211            JB       IO_DUT_I2CM_SCL,?C0239?PKT_I2CM
00194F E53E              MOV      A,_loop+01H
001951 153E              DEC      _loop+01H
001953 AE3D              MOV      R6,_loop
001955 7002              JNZ      ?C0385?PKT_I2CM
001957 153D              DEC      _loop
001959         ?C0385?PKT_I2CM:
001959 4E                ORL      A,R6
00195A 6004              JZ       ?C0239?PKT_I2CM
00195C 513A              ACALL    ?L?COM0008
00195E 80EC              SJMP     ?C0235?PKT_I2CM
001960         ?C0239?PKT_I2CM:
001960 123114            LCALL    ?L?COM000B
001963 C282              CLR      IO_DUT_I2CM_SCL
001965 8000              SJMP     ?C0220?PKT_I2CM
001967         ?C0220?PKT_I2CM:
  233: 
  234:         /* send I2C slave address + write */
  235:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
001967 12346B            LCALL    ?L?COM005E
00196A 54FE              ANL      A,#0FEH
00196C FF                MOV      R7,A
00196D 11B9              ACALL    __pkt_i2cm_TxByte
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 15


00196F 4002              JC       $ + 4H
001971 410E              AJMP     ?C0309?PKT_I2CM
  236:         {
  237:             goto _exit;
  238:         }
001973         ?C0255?PKT_I2CM:
  239: 
  240:         /* send write buffer */
  241:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
001973 E4                CLR      A
001974 F53B              MOV      vLoop,A
001976 F53C              MOV      vLoop+01H,A
001978         ?C0257?PKT_I2CM:
001978 C3                CLR      C
001979 E53C              MOV      A,vLoop+01H
00197B 9538              SUBB     A,vWriteLen+01H
00197D E53B              MOV      A,vLoop
00197F 9537              SUBB     A,vWriteLen
001981 5027              JNC      ?C0217?PKT_I2CM
  242:         {
  243:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
001983 E536              MOV      A,pPayload+01H
001985 2405              ADD      A,#05H
001987 F582              MOV      DPL,A
001989 E4                CLR      A
00198A 3535              ADDC     A,pPayload
00198C F583              MOV      DPH,A
00198E E582              MOV      A,DPL
001990 253C              ADD      A,vLoop+01H
001992 F582              MOV      DPL,A
001994 E583              MOV      A,DPH
001996 353B              ADDC     A,vLoop
001998 F583              MOV      DPH,A
00199A E0                MOVX     A,@DPTR
00199B FF                MOV      R7,A
00199C 11B9              ACALL    __pkt_i2cm_TxByte
00199E 506E              JNC      ?C0309?PKT_I2CM
  244:             {
  245:                 goto _exit;
  246:             }
0019A0         ?C0260?PKT_I2CM:
  247:         }
0019A0         ?C0259?PKT_I2CM:
0019A0 053C              INC      vLoop+01H
0019A2 E53C              MOV      A,vLoop+01H
0019A4 7002              JNZ      ?C0387?PKT_I2CM
0019A6 053B              INC      vLoop
0019A8         ?C0387?PKT_I2CM:
0019A8 80CE              SJMP     ?C0257?PKT_I2CM
  248:     }
0019AA         ?C0217?PKT_I2CM:
  249: 
  250:     /* send read stream */
  251:     if (vReadLen != 0)
0019AA E53A              MOV      A,vReadLen+01H
0019AC 4539              ORL      A,vReadLen
0019AE 605C              JZ       ?C0261?PKT_I2CM
  252:     {
  253:         /* send I2C start/restart */
  254:         _pkt_i2cm_Start();
0019B0 D292              SETB     IO_DUT_I2CM_SDA
0019B2 12311D            LCALL    ?L?COM000D
0019B5 12337C            LCALL    ?L?COM0040
0019B8         ?C0278?PKT_I2CM:
0019B8 208211            JB       IO_DUT_I2CM_SCL,?C0282?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 16


0019BB E53E              MOV      A,_loop+01H
0019BD 153E              DEC      _loop+01H
0019BF AE3D              MOV      R6,_loop
0019C1 7002              JNZ      ?C0388?PKT_I2CM
0019C3 153D              DEC      _loop
0019C5         ?C0388?PKT_I2CM:
0019C5 4E                ORL      A,R6
0019C6 6004              JZ       ?C0282?PKT_I2CM
0019C8 513A              ACALL    ?L?COM0008
0019CA 80EC              SJMP     ?C0278?PKT_I2CM
0019CC         ?C0282?PKT_I2CM:
0019CC 123114            LCALL    ?L?COM000B
0019CF C282              CLR      IO_DUT_I2CM_SCL
0019D1 8000              SJMP     ?C0263?PKT_I2CM
0019D3         ?C0263?PKT_I2CM:
  255: 
  256:         /* send I2C slave address + read */
  257:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
0019D3 12346B            LCALL    ?L?COM005E
0019D6 4401              ORL      A,#01H
0019D8 FF                MOV      R7,A
0019D9 11B9              ACALL    __pkt_i2cm_TxByte
0019DB 5031              JNC      ?C0309?PKT_I2CM
  258:         {
  259:             goto _exit;
  260:         }
0019DD         ?C0298?PKT_I2CM:
  261: 
  262:         /* read data */
  263:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
0019DD E4                CLR      A
0019DE F53B              MOV      vLoop,A
0019E0 F53C              MOV      vLoop+01H,A
0019E2         ?C0299?PKT_I2CM:
0019E2 123463            LCALL    ?L?COM005D
0019E5 9539              SUBB     A,vReadLen
0019E7 5023              JNC      ?C0261?PKT_I2CM
  264:         {
  265:             pPayload->aBuf[vWriteLen+vLoop] =
0019E9 E53A              MOV      A,vReadLen+01H
0019EB 24FF              ADD      A,#0FFH
0019ED FF                MOV      R7,A
0019EE E539              MOV      A,vReadLen
0019F0 34FF              ADDC     A,#0FFH
0019F2 FE                MOV      R6,A
0019F3 EF                MOV      A,R7
0019F4 B53C07            CJNE     A,vLoop+01H,?C0302?PKT_I2CM
0019F7 EE                MOV      A,R6
0019F8 B53B03            CJNE     A,vLoop,?C0302?PKT_I2CM
0019FB D3                SETB     C
0019FC 8001              SJMP     ?C0303?PKT_I2CM
0019FE         ?C0302?PKT_I2CM:
0019FE C3                CLR      C
0019FF         ?C0303?PKT_I2CM:
0019FF 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001A01 F144              ACALL    _pkt_i2cm_RxByte
001A03 1231E8            LCALL    ?L?COM001A
001A06 7002              JNZ      ?C0391?PKT_I2CM
001A08 053B              INC      vLoop
001A0A         ?C0391?PKT_I2CM:
001A0A 80D6              SJMP     ?C0299?PKT_I2CM
  266:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  267:         }
  268:     }
001A0C         ?C0261?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 17


  269: 
  270:     /* I2C stream done */
  271:     bDone = TRUE;
001A0C D239              SETB     bDone
  272: 
  273: _exit:
001A0E         _exit:
  274:     /* send I2C stop */
  275:     _pkt_i2cm_Stop();
001A0E         ?C0309?PKT_I2CM:
001A0E 12311B            LCALL    ?L?COM000C
001A11 12337C            LCALL    ?L?COM0040
001A14         ?C0320?PKT_I2CM:
001A14 208211            JB       IO_DUT_I2CM_SCL,?C0324?PKT_I2CM
001A17 E53E              MOV      A,_loop+01H
001A19 153E              DEC      _loop+01H
001A1B AE3D              MOV      R6,_loop
001A1D 7002              JNZ      ?C0392?PKT_I2CM
001A1F 153D              DEC      _loop
001A21         ?C0392?PKT_I2CM:
001A21 4E                ORL      A,R6
001A22 6004              JZ       ?C0324?PKT_I2CM
001A24 513A              ACALL    ?L?COM0008
001A26 80EC              SJMP     ?C0320?PKT_I2CM
001A28         ?C0324?PKT_I2CM:
001A28 12311D            LCALL    ?L?COM000D
001A2B D292              SETB     IO_DUT_I2CM_SDA
  276: 
  277:     /* unlock globally interrupt */
  278:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001A2D A238              MOV      C,bIntState
001A2F 92AF              MOV      EA,C
  279: 
  280:     return bDone;
001A31 A239              MOV      C,bDone
  281: }
001A33 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001A34 A2A0              MOV      C,IO_DUT_C2M_SDA
001A36 D297              SETB     IO_DUT_C2M_SCL
001A38 9230              MOV      bC2Bit0,C
001A3A         ?L?COM0008:
001A3A 7F01              MOV      R7,#01H
001A3C 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
001A3E 8018              SJMP     ?C0013?DRV_CPU
001A40         ?C0001?DRV_CPU:
   39:     while (--vUsec)
001A40 EF                MOV      A,R7
001A41 1F                DEC      R7
001A42 7001              JNZ      ?C0011?DRV_CPU
001A44 1E                DEC      R6
001A45         ?C0011?DRV_CPU:
001A45 14                DEC      A
001A46 4E                ORL      A,R6
001A47 6014              JZ       ?C0003?DRV_CPU
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 18


   40:     {
   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A49 00                NOP      
001A4A 00                NOP      
001A4B 00                NOP      
001A4C 00                NOP      
001A4D 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A4E 00                NOP      
001A4F 00                NOP      
001A50 00                NOP      
001A51 00                NOP      
001A52 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A53 00                NOP      
001A54 00                NOP      
001A55 00                NOP      
001A56 00                NOP      
001A57 00                NOP      
   45: 		NOP(); NOP(); NOP();
001A58         
001A58 00                NOP      
001A59 00                NOP      
001A5A 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
   49:     }
001A5B 80E3              SJMP     ?C0001?DRV_CPU
   50: }
001A5D         ?C0003?DRV_CPU:
001A5D 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  164: static BOOL _pkt_i2cm_CheckReady(void)
  165: {
  166:     if ((PKT_I2CM_GET_SCL() == HIGH)
  167:         && (PKT_I2CM_GET_SDA() == HIGH))
001A5E 308205            JNB      IO_DUT_I2CM_SCL,?C0120?PKT_I2CM
001A61 309202            JNB      IO_DUT_I2CM_SDA,?C0120?PKT_I2CM
  168:     {
  169:         /* the I2C only can be started, while SCL/SDA is at high level */
  170:         return TRUE;
001A64 D3                SETB     C
001A65 22                RET      
  171:     }
001A66         ?C0120?PKT_I2CM:
  172:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001A66 308271            JNB      IO_DUT_I2CM_SCL,?C0122?PKT_I2CM
001A69 20926E            JB       IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  173:              && (PKT_I2CM_GET_SDA() == LOW))
  174:     {
  175:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  176:          *  we should attempt to reset the I2C bus,
  177:          *  to recover the SDA to idle state.
  178:          *
  179:          * Memory (Management Interface) Reset:
  180:          *  1) Clock up to 9 cycles.
  181:          *  2) Look for SDA high in each cycle while SCL is high.
  182:          *  3) Create a START condition as SDA is high.
  183:          */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 19


  184: 
  185:         UINT8   vLoop;
  186: 
  187:         for (vLoop = 9; vLoop != 0; vLoop--)
001A6C 753F09            MOV      vLoop,#09H
001A6F         ?C0124?PKT_I2CM:
  188:         {
  189:             PKT_I2CM_SET_SCL(LOW);
001A6F 12311D            LCALL    ?L?COM000D
001A72 C282              CLR      IO_DUT_I2CM_SCL
001A74 8000              SJMP     ?C0144?PKT_I2CM
  190:             PKT_I2CM_SET_SCL(HIGH);
001A76         ?C0144?PKT_I2CM:
001A76 12311D            LCALL    ?L?COM000D
001A79 123373            LCALL    ?L?COM003F
001A7C         ?C0149?PKT_I2CM:
001A7C 208211            JB       IO_DUT_I2CM_SCL,?C0126?PKT_I2CM
001A7F E541              MOV      A,_loop+01H
001A81 1541              DEC      _loop+01H
001A83 AE40              MOV      R6,_loop
001A85 7002              JNZ      ?C0381?PKT_I2CM
001A87 1540              DEC      _loop
001A89         ?C0381?PKT_I2CM:
001A89 4E                ORL      A,R6
001A8A 6004              JZ       ?C0126?PKT_I2CM
001A8C 513A              ACALL    ?L?COM0008
001A8E 80EC              SJMP     ?C0149?PKT_I2CM
  191:         }
001A90         ?C0126?PKT_I2CM:
001A90 D53FDC            DJNZ     vLoop,?C0124?PKT_I2CM
001A93         ?C0125?PKT_I2CM:
  192: 
  193:         if (PKT_I2CM_GET_SDA() == HIGH)
001A93 309244            JNB      IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  194:         {
  195:             _pkt_i2cm_Start();
001A96 D292              SETB     IO_DUT_I2CM_SDA
001A98 12311D            LCALL    ?L?COM000D
001A9B 123373            LCALL    ?L?COM003F
001A9E         ?C0168?PKT_I2CM:
001A9E 208211            JB       IO_DUT_I2CM_SCL,?C0172?PKT_I2CM
001AA1 E541              MOV      A,_loop+01H
001AA3 1541              DEC      _loop+01H
001AA5 AE40              MOV      R6,_loop
001AA7 7002              JNZ      ?C0382?PKT_I2CM
001AA9 1540              DEC      _loop
001AAB         ?C0382?PKT_I2CM:
001AAB 4E                ORL      A,R6
001AAC 6004              JZ       ?C0172?PKT_I2CM
001AAE 513A              ACALL    ?L?COM0008
001AB0 80EC              SJMP     ?C0168?PKT_I2CM
001AB2         ?C0172?PKT_I2CM:
001AB2 123114            LCALL    ?L?COM000B
001AB5 C282              CLR      IO_DUT_I2CM_SCL
001AB7 8000              SJMP     ?C0193?PKT_I2CM
  196:             _pkt_i2cm_Stop();
001AB9         ?C0193?PKT_I2CM:
001AB9 12311B            LCALL    ?L?COM000C
001ABC 123373            LCALL    ?L?COM003F
001ABF         ?C0204?PKT_I2CM:
001ABF 208211            JB       IO_DUT_I2CM_SCL,?C0208?PKT_I2CM
001AC2 E541              MOV      A,_loop+01H
001AC4 1541              DEC      _loop+01H
001AC6 AE40              MOV      R6,_loop
001AC8 7002              JNZ      ?C0384?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 20


001ACA 1540              DEC      _loop
001ACC         ?C0384?PKT_I2CM:
001ACC 4E                ORL      A,R6
001ACD 6004              JZ       ?C0208?PKT_I2CM
001ACF 513A              ACALL    ?L?COM0008
001AD1 80EC              SJMP     ?C0204?PKT_I2CM
001AD3         ?C0208?PKT_I2CM:
001AD3 12311D            LCALL    ?L?COM000D
001AD6 D292              SETB     IO_DUT_I2CM_SDA
  197: 
  198:             /* we have successfully recovered the SDA line to idle state */
  199:             return TRUE;
001AD8 D3                SETB     C
001AD9 22                RET      
  200:         }
  201:     }
  202:     else
  203:     {
  204:         /* unsupported stretching on SCL/SDA line, operation fail */
  205:     }
001ADA         ?C0122?PKT_I2CM:
  206: 
  207:     return FALSE;
001ADA C3                CLR      C
  208: }
001ADB 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
  640: (
001ADC 1233D4            LCALL    ?L?COM004D
;---- Variable 'vCount' assigned to Register 'R3' ----
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
001ADF EB                MOV      A,R3
001AE0 7005              JNZ      ?C0962?DRV_C2M
001AE2 7E01              MOV      R6,#01H
001AE4 FF                MOV      R7,A
001AE5 8004              SJMP     ?C0963?DRV_C2M
001AE7         ?C0962?DRV_C2M:
001AE7 EB                MOV      A,R3
001AE8 FF                MOV      R7,A
001AE9 7E00              MOV      R6,#00H
001AEB         ?C0963?DRV_C2M:
001AEB 8E3F              MOV      vLen,R6
001AED 8F40              MOV      vLen+01H,R7
  647:     BOOL    bDone = FALSE;
001AEF C238              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
001AF1 309776            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001AF4 30A073            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
001AF7         ?C0964?DRV_C2M:
  654: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 21


  655:     c2m_WriteAR(vFPDAT);
001AF7 AF16              MOV      R7,vFPDAT
001AF9 D1B7              ACALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
001AFB 7F07              MOV      R7,#07H
001AFD 1231A4            LCALL    ?L?COM0015
001B00         ?C0973?DRV_C2M:
001B00 71FC              ACALL    c2m_ReadAR
001B02 EF                MOV      A,R7
001B03 20E009            JB       ACC.0,?C0971?DRV_C2M
001B06 123124            LCALL    ?L?COM000E
001B09 6004              JZ       ?C0971?DRV_C2M
001B0B 513A              ACALL    ?L?COM0008
001B0D 80F1              SJMP     ?C0973?DRV_C2M
001B0F         ?C0971?DRV_C2M:
001B0F 12328F            LCALL    ?L?COM002A
001B12 7056              JNZ      _exit?DRV_C2M
001B14         ?C0975?DRV_C2M:
001B14         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001B14 E53B              MOV      A,vAddr
001B16 FF                MOV      R7,A
001B17 716D              ACALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001B19 AF3C              MOV      R7,vAddr+01H
001B1B 12319F            LCALL    ?L?COM0014
001B1E         ?C0982?DRV_C2M:
001B1E 71FC              ACALL    c2m_ReadAR
001B20 EF                MOV      A,R7
001B21 20E009            JB       ACC.0,?C0980?DRV_C2M
001B24 123124            LCALL    ?L?COM000E
001B27 6004              JZ       ?C0980?DRV_C2M
001B29 513A              ACALL    ?L?COM0008
001B2B 80F1              SJMP     ?C0982?DRV_C2M
001B2D         ?C0980?DRV_C2M:
001B2D 12328F            LCALL    ?L?COM002A
001B30 7038              JNZ      _exit?DRV_C2M
001B32         ?C0984?DRV_C2M:
001B32         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
001B32 1232ED            LCALL    ?L?COM0032
001B35 7002              JNZ      ?C1018?DRV_C2M
001B37 153F              DEC      vLen
001B39         ?C1018?DRV_C2M:
001B39 4E                ORL      A,R6
001B3A 6015              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
001B3C 053E              INC      pBuf+01H
001B3E E53E              MOV      A,pBuf+01H
001B40 AE3D              MOV      R6,pBuf
001B42 7002              JNZ      ?C1019?DRV_C2M
001B44 053D              INC      pBuf
001B46         ?C1019?DRV_C2M:
001B46 14                DEC      A
001B47 F582              MOV      DPL,A
001B49 8E83              MOV      DPH,R6
001B4B E0                MOVX     A,@DPTR
001B4C FF                MOV      R7,A
001B4D 716D              ACALL    _drv_c2m_WriteData
  666:     }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 22


001B4F 80E1              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
001B51         ?C0992?DRV_C2M:
001B51 1231A7            LCALL    ?L?COM0016
001B54         ?C0993?DRV_C2M:
001B54 71FC              ACALL    c2m_ReadAR
001B56 EF                MOV      A,R7
001B57 20E009            JB       ACC.0,?C0991?DRV_C2M
001B5A 123124            LCALL    ?L?COM000E
001B5D 6004              JZ       ?C0991?DRV_C2M
001B5F 513A              ACALL    ?L?COM0008
001B61 80F1              SJMP     ?C0993?DRV_C2M
001B63         ?C0991?DRV_C2M:
001B63 B129              ACALL    c2m_ReadDR
001B65 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001B68         ?C0995?DRV_C2M:
001B68         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
001B68 D238              SETB     bDone
  669: 
  670: _exit:
001B6A         _exit:
  671:     return bDone;
001B6A A238              MOV      C,bDone
  672: }
001B6C 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
001B6D 122EFA            LCALL    _c2m_WriteDR
  361: }
001B70 754527            MOV      _timeout,#027H
001B73 754610            MOV      _timeout+01H,#010H
001B76         ?C0788?DRV_C2M:
001B76 71FC              ACALL    c2m_ReadAR
001B78 EF                MOV      A,R7
001B79 30E111            JNB      ACC.1,?C0790?DRV_C2M
001B7C E546              MOV      A,_timeout+01H
001B7E 1546              DEC      _timeout+01H
001B80 AE45              MOV      R6,_timeout
001B82 7002              JNZ      ?C1015?DRV_C2M
001B84 1545              DEC      _timeout
001B86         ?C1015?DRV_C2M:
001B86 4E                ORL      A,R6
001B87 6004              JZ       ?C0790?DRV_C2M
001B89 513A              ACALL    ?L?COM0008
001B8B 80E9              SJMP     ?C0788?DRV_C2M
  362: 
001B8D         ?C0790?DRV_C2M:
001B8D 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 23


001B8E AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
001B90 C238              CLR      bDone
  550:     if (!drv_c2m_IsReady())
001B92 309764            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001B95 30A061            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
001B98         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
001B98 AF16              MOV      R7,vFPDAT
001B9A D1B7              ACALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001B9C 7F08              MOV      R7,#08H
001B9E 123267            LCALL    ?L?COM0026
001BA1         ?C0914?DRV_C2M:
001BA1 71FC              ACALL    c2m_ReadAR
001BA3 EF                MOV      A,R7
001BA4 20E00B            JB       ACC.0,?C0912?DRV_C2M
001BA7 7833              MOV      R0,#LOW _timeout
001BA9 123126            LCALL    ?L?COM000F
001BAC 6004              JZ       ?C0912?DRV_C2M
001BAE 513A              ACALL    ?L?COM0008
001BB0 80EF              SJMP     ?C0914?DRV_C2M
001BB2         ?C0912?DRV_C2M:
001BB2 12328F            LCALL    ?L?COM002A
001BB5 7042              JNZ      _exit?DRV_C2M
001BB7         ?C0916?DRV_C2M:
001BB7         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
001BB7 AF03              MOV      R7,AR3
001BB9 123267            LCALL    ?L?COM0026
001BBC         ?C0923?DRV_C2M:
001BBC 71FC              ACALL    c2m_ReadAR
001BBE EF                MOV      A,R7
001BBF 20E00B            JB       ACC.0,?C0921?DRV_C2M
001BC2 7833              MOV      R0,#LOW _timeout
001BC4 123126            LCALL    ?L?COM000F
001BC7 6004              JZ       ?C0921?DRV_C2M
001BC9 513A              ACALL    ?L?COM0008
001BCB 80EF              SJMP     ?C0923?DRV_C2M
001BCD         ?C0921?DRV_C2M:
001BCD 12328F            LCALL    ?L?COM002A
001BD0 7027              JNZ      _exit?DRV_C2M
001BD2         ?C0925?DRV_C2M:
001BD2         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001BD2 E4                CLR      A
001BD3 FF                MOV      R7,A
001BD4 716D              ACALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001BD6 E4                CLR      A
001BD7 753640            MOV      _timeout+03H,#040H
001BDA 75359C            MOV      _timeout+02H,#09CH
001BDD F534              MOV      _timeout+01H,A
001BDF F533              MOV      _timeout,A
001BE1         ?C0932?DRV_C2M:
001BE1 71FC              ACALL    c2m_ReadAR
001BE3 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 24


001BE4 20E00B            JB       ACC.0,?C0930?DRV_C2M
001BE7 7833              MOV      R0,#LOW _timeout
001BE9 123126            LCALL    ?L?COM000F
001BEC 6004              JZ       ?C0930?DRV_C2M
001BEE 513A              ACALL    ?L?COM0008
001BF0 80EF              SJMP     ?C0932?DRV_C2M
001BF2         ?C0930?DRV_C2M:
001BF2 B129              ACALL    c2m_ReadDR
001BF4 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001BF7         ?C0934?DRV_C2M:
001BF7         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
001BF7 D238              SETB     bDone
  564: 
  565: _exit:
001BF9         _exit:
  566:     return bDone;
001BF9 A238              MOV      C,bDone
  567: }
001BFB 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
001BFC C243              CLR      bIns0
001BFE D244              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
001C00 30AF05            JNB      EA,?C0190?DRV_C2M
001C03 C2AF              CLR      EA
001C05 D3                SETB     C
001C06 8001              SJMP     ?C0191?DRV_C2M
001C08         ?C0190?DRV_C2M:
001C08 C3                CLR      C
001C09         ?C0191?DRV_C2M:
001C09 1231B3            LCALL    ?L?COM0017
001C0C 00                NOP      
001C0D 00                NOP      
001C0E 00                NOP      
001C0F 00                NOP      
001C10 12324B            LCALL    ?L?COM0024
001C13 00                NOP      
001C14 00                NOP      
001C15 00                NOP      
001C16 00                NOP      
001C17 1232F4            LCALL    ?L?COM0033
001C1A 00                NOP      
001C1B 00                NOP      
001C1C 00                NOP      
001C1D 00                NOP      
001C1E 12332F            LCALL    ?L?COM003A
001C21 00                NOP      
001C22 D297              SETB     IO_DUT_C2M_SCL
001C24 00                NOP      
001C25 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 25


  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
001C26 00                NOP      
001C27 00                NOP      
001C28 C297              CLR      IO_DUT_C2M_SCL
001C2A 00                NOP      
001C2B 00                NOP      
001C2C A2A0              MOV      C,IO_DUT_C2M_SDA
001C2E D297              SETB     IO_DUT_C2M_SCL
001C30 9230              MOV      bC2Bit0,C
001C32 00                NOP      
001C33 00                NOP      
001C34 C297              CLR      IO_DUT_C2M_SCL
001C36 00                NOP      
001C37 00                NOP      
001C38 A2A0              MOV      C,IO_DUT_C2M_SDA
001C3A D297              SETB     IO_DUT_C2M_SCL
001C3C 9231              MOV      bC2Bit1,C
001C3E 00                NOP      
001C3F 00                NOP      
001C40 C297              CLR      IO_DUT_C2M_SCL
001C42 00                NOP      
001C43 00                NOP      
001C44 A2A0              MOV      C,IO_DUT_C2M_SDA
001C46 D297              SETB     IO_DUT_C2M_SCL
001C48 9232              MOV      bC2Bit2,C
001C4A 00                NOP      
001C4B 00                NOP      
001C4C C297              CLR      IO_DUT_C2M_SCL
001C4E 00                NOP      
001C4F 00                NOP      
001C50 A2A0              MOV      C,IO_DUT_C2M_SDA
001C52 D297              SETB     IO_DUT_C2M_SCL
001C54 9233              MOV      bC2Bit3,C
001C56 00                NOP      
001C57 00                NOP      
001C58 C297              CLR      IO_DUT_C2M_SCL
001C5A 00                NOP      
001C5B 00                NOP      
001C5C A2A0              MOV      C,IO_DUT_C2M_SDA
001C5E D297              SETB     IO_DUT_C2M_SCL
001C60 9234              MOV      bC2Bit4,C
001C62 00                NOP      
001C63 00                NOP      
001C64 C297              CLR      IO_DUT_C2M_SCL
001C66 00                NOP      
001C67 00                NOP      
001C68 A2A0              MOV      C,IO_DUT_C2M_SDA
001C6A D297              SETB     IO_DUT_C2M_SCL
001C6C 9235              MOV      bC2Bit5,C
001C6E 00                NOP      
001C6F 00                NOP      
001C70 C297              CLR      IO_DUT_C2M_SCL
001C72 00                NOP      
001C73 00                NOP      
001C74 A2A0              MOV      C,IO_DUT_C2M_SDA
001C76 D297              SETB     IO_DUT_C2M_SCL
001C78 9236              MOV      bC2Bit6,C
001C7A 00                NOP      
001C7B 00                NOP      
001C7C C297              CLR      IO_DUT_C2M_SCL
001C7E 00                NOP      
001C7F 00                NOP      
001C80 12323A            LCALL    ?L?COM0021
  217:     c2m_RxStop();       /* rx frame stop */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 26


  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
001C83 AF26              MOV      R7,vC2Data
  223: }
001C85 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
  447:     vDevice.U32 = 0xFFFFFFFFUL;
001C86 74FF              MOV      A,#0FFH
001C88 F536              MOV      vDevice+03H,A
001C8A F535              MOV      vDevice+02H,A
001C8C F534              MOV      vDevice+01H,A
001C8E F533              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
001C90 209702            JB       IO_DUT_C2M_SCL,$ + 5H
001C93 A120              AJMP     _exit?DRV_C2M
001C95 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
001C98 A120              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
  453:     }
  454: 
  455:     drv_c2m_Init();
001C9A         ?C0852?DRV_C2M:
001C9A 123296            LCALL    ?L?COM002B
001C9D 53A57F            ANL      P1MDOUT,#07FH
001CA0 7F02              MOV      R7,#02H
001CA2 D1B7              ACALL    _c2m_WriteAR
001CA4 122EFA            LCALL    _c2m_WriteDR
001CA7 7F04              MOV      R7,#04H
001CA9 122EFA            LCALL    _c2m_WriteDR
001CAC 7F01              MOV      R7,#01H
001CAE 122EFA            LCALL    _c2m_WriteDR
001CB1 7F14              MOV      R7,#014H
001CB3 7E00              MOV      R6,#00H
001CB5 1228E0            LCALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
001CB8 E4                CLR      A
001CB9 FF                MOV      R7,A
001CBA 1217F0            LCALL    _drv_c2m_ReadSFR
001CBD 8F33              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
001CBF 7F01              MOV      R7,#01H
001CC1 1217F0            LCALL    _drv_c2m_ReadSFR
001CC4 8F34              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
001CC6 E533              MOV      A,vDevice
001CC8 F4                CPL      A
001CC9 6055              JZ       _exit?DRV_C2M
  462:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 27


  463:         /* no device probed */
  464:         goto _exit;
  465:     }
001CCB         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
001CCB 7516B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
001CCE 12345B            LCALL    ?L?COM005C
001CD1 716D              ACALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
001CD3 F126              ACALL    drv_c2m_ReadData
001CD5 EF                MOV      A,R7
001CD6 640D              XRL      A,#0DH
001CD8 601F              JZ       ?C0863?DRV_C2M
  472:     {
  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
001CDA 7516AD            MOV      vFPDAT,#0ADH
  475:         c2m_WriteAR(vFPDAT);
001CDD 12345B            LCALL    ?L?COM005C
001CE0 123348            LCALL    ?L?COM003C
001CE3         ?C0870?DRV_C2M:
001CE3 71FC              ACALL    c2m_ReadAR
001CE5 EF                MOV      A,R7
001CE6 20E00B            JB       ACC.0,?C0868?DRV_C2M
001CE9 7837              MOV      R0,#LOW _timeout
001CEB 123126            LCALL    ?L?COM000F
001CEE 6004              JZ       ?C0868?DRV_C2M
001CF0 513A              ACALL    ?L?COM0008
001CF2 80EF              SJMP     ?C0870?DRV_C2M
001CF4         ?C0868?DRV_C2M:
001CF4 12328F            LCALL    ?L?COM002A
001CF7 7027              JNZ      _exit?DRV_C2M
001CF9         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
001CF9         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
001CF9 F126              ACALL    drv_c2m_ReadData
001CFB 8F35              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
001CFD AF16              MOV      R7,vFPDAT
001CFF D1B7              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
001D01 7F01              MOV      R7,#01H
001D03 123348            LCALL    ?L?COM003C
001D06         ?C0879?DRV_C2M:
001D06 71FC              ACALL    c2m_ReadAR
001D08 EF                MOV      A,R7
001D09 20E00B            JB       ACC.0,?C0877?DRV_C2M
001D0C 7837              MOV      R0,#LOW _timeout
001D0E 123126            LCALL    ?L?COM000F
001D11 6004              JZ       ?C0877?DRV_C2M
001D13 513A              ACALL    ?L?COM0008
001D15 80EF              SJMP     ?C0879?DRV_C2M
001D17         ?C0877?DRV_C2M:
001D17 B129              ACALL    c2m_ReadDR
001D19 BF0D04            CJNE     R7,#0DH,_exit?DRV_C2M
001D1C         ?C0881?DRV_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 28


001D1C         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
001D1C F126              ACALL    drv_c2m_ReadData
001D1E 8F36              MOV      vDevice+03H,R7
  486: 
  487: _exit:
001D20         _exit:
  488:     return vDevice.U32;
001D20 AF36              MOV      R7,vDevice+03H
001D22 AE35              MOV      R6,vDevice+02H
001D24 AD34              MOV      R5,vDevice+01H
001D26 AC33              MOV      R4,vDevice
  489: }
001D28 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
001D29 C243              CLR      bIns0
001D2B C244              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
001D2D C245              CLR      bLength0
001D2F C246              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
001D31 30AF05            JNB      EA,?C0584?DRV_C2M
001D34 C2AF              CLR      EA
001D36 D3                SETB     C
001D37 8001              SJMP     ?C0585?DRV_C2M
001D39         ?C0584?DRV_C2M:
001D39 C3                CLR      C
001D3A         ?C0585?DRV_C2M:
001D3A 1231B3            LCALL    ?L?COM0017
001D3D 00                NOP      
001D3E 00                NOP      
001D3F 00                NOP      
001D40 00                NOP      
001D41 12324B            LCALL    ?L?COM0024
001D44 00                NOP      
001D45 00                NOP      
001D46 00                NOP      
001D47 00                NOP      
001D48 1232F4            LCALL    ?L?COM0033
001D4B 00                NOP      
001D4C 00                NOP      
001D4D 00                NOP      
001D4E 00                NOP      
001D4F 1233E6            LCALL    ?L?COM004F
001D52 00                NOP      
001D53 00                NOP      
001D54 00                NOP      
001D55 00                NOP      
001D56 1233DD            LCALL    ?L?COM004E
001D59 00                NOP      
001D5A 00                NOP      
001D5B 00                NOP      
001D5C 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 29


001D5D 12332F            LCALL    ?L?COM003A
001D60 00                NOP      
001D61 D297              SETB     IO_DUT_C2M_SCL
001D63 00                NOP      
001D64 00                NOP      
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
001D65 754927            MOV      _timeout,#027H
001D68 754A10            MOV      _timeout+01H,#010H
001D6B         ?C0687?DRV_C2M:
001D6B 00                NOP      
001D6C 00                NOP      
001D6D C297              CLR      IO_DUT_C2M_SCL
001D6F 00                NOP      
001D70 00                NOP      
001D71 5134              ACALL    ?L?COM0007
001D73 20300D            JB       bC2Bit0,?C0700?DRV_C2M
001D76 E54A              MOV      A,_timeout+01H
001D78 154A              DEC      _timeout+01H
001D7A AE49              MOV      R6,_timeout
001D7C 7002              JNZ      ?C1014?DRV_C2M
001D7E 1549              DEC      _timeout
001D80         ?C1014?DRV_C2M:
001D80 4E                ORL      A,R6
001D81 70E8              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
001D83         ?C0700?DRV_C2M:
001D83 00                NOP      
001D84 00                NOP      
001D85 C297              CLR      IO_DUT_C2M_SCL
001D87 00                NOP      
001D88 00                NOP      
001D89 A2A0              MOV      C,IO_DUT_C2M_SDA
001D8B D297              SETB     IO_DUT_C2M_SCL
001D8D 9230              MOV      bC2Bit0,C
001D8F 00                NOP      
001D90 00                NOP      
001D91 C297              CLR      IO_DUT_C2M_SCL
001D93 00                NOP      
001D94 00                NOP      
001D95 A2A0              MOV      C,IO_DUT_C2M_SDA
001D97 D297              SETB     IO_DUT_C2M_SCL
001D99 9231              MOV      bC2Bit1,C
001D9B 00                NOP      
001D9C 00                NOP      
001D9D C297              CLR      IO_DUT_C2M_SCL
001D9F 00                NOP      
001DA0 00                NOP      
001DA1 A2A0              MOV      C,IO_DUT_C2M_SDA
001DA3 D297              SETB     IO_DUT_C2M_SCL
001DA5 9232              MOV      bC2Bit2,C
001DA7 00                NOP      
001DA8 00                NOP      
001DA9 C297              CLR      IO_DUT_C2M_SCL
001DAB 00                NOP      
001DAC 00                NOP      
001DAD A2A0              MOV      C,IO_DUT_C2M_SDA
001DAF D297              SETB     IO_DUT_C2M_SCL
001DB1 9233              MOV      bC2Bit3,C
001DB3 00                NOP      
001DB4 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 30


001DB5 C297              CLR      IO_DUT_C2M_SCL
001DB7 00                NOP      
001DB8 00                NOP      
001DB9 A2A0              MOV      C,IO_DUT_C2M_SDA
001DBB D297              SETB     IO_DUT_C2M_SCL
001DBD 9234              MOV      bC2Bit4,C
001DBF 00                NOP      
001DC0 00                NOP      
001DC1 C297              CLR      IO_DUT_C2M_SCL
001DC3 00                NOP      
001DC4 00                NOP      
001DC5 A2A0              MOV      C,IO_DUT_C2M_SDA
001DC7 D297              SETB     IO_DUT_C2M_SCL
001DC9 9235              MOV      bC2Bit5,C
001DCB 00                NOP      
001DCC 00                NOP      
001DCD C297              CLR      IO_DUT_C2M_SCL
001DCF 00                NOP      
001DD0 00                NOP      
001DD1 A2A0              MOV      C,IO_DUT_C2M_SDA
001DD3 D297              SETB     IO_DUT_C2M_SCL
001DD5 9236              MOV      bC2Bit6,C
001DD7 00                NOP      
001DD8 00                NOP      
001DD9 C297              CLR      IO_DUT_C2M_SCL
001DDB 00                NOP      
001DDC 00                NOP      
001DDD 12323A            LCALL    ?L?COM0021
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
001DE0 AF26              MOV      R7,vC2Data
  272: }
001DE2 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
001DE3 C238              CLR      bDone
  511:     if (!drv_c2m_IsReady())
001DE5 309752            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001DE8 30A04F            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
001DEB         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
001DEB AF16              MOV      R7,vFPDAT
001DED D1B7              ACALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
001DEF 7F03              MOV      R7,#03H
001DF1 123267            LCALL    ?L?COM0026
001DF4         ?C0892?DRV_C2M:
001DF4 71FC              ACALL    c2m_ReadAR
001DF6 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 31


001DF7 20E00B            JB       ACC.0,?C0890?DRV_C2M
001DFA 7833              MOV      R0,#LOW _timeout
001DFC 123126            LCALL    ?L?COM000F
001DFF 6004              JZ       ?C0890?DRV_C2M
001E01 513A              ACALL    ?L?COM0008
001E03 80EF              SJMP     ?C0892?DRV_C2M
001E05         ?C0890?DRV_C2M:
001E05 12328F            LCALL    ?L?COM002A
001E08 7030              JNZ      _exit?DRV_C2M
001E0A         ?C0894?DRV_C2M:
001E0A         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
001E0A 7FDE              MOV      R7,#0DEH
001E0C 716D              ACALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
001E0E 7FAD              MOV      R7,#0ADH
001E10 716D              ACALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
001E12 7FA5              MOV      R7,#0A5H
001E14 716D              ACALL    _drv_c2m_WriteData
  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
001E16 753600            MOV      _timeout+03H,#00H
001E19 75352D            MOV      _timeout+02H,#02DH
001E1C 753431            MOV      _timeout+01H,#031H
001E1F 753301            MOV      _timeout,#01H
001E22         ?C0901?DRV_C2M:
001E22 71FC              ACALL    c2m_ReadAR
001E24 EF                MOV      A,R7
001E25 20E00B            JB       ACC.0,?C0899?DRV_C2M
001E28 7833              MOV      R0,#LOW _timeout
001E2A 123126            LCALL    ?L?COM000F
001E2D 6004              JZ       ?C0899?DRV_C2M
001E2F 513A              ACALL    ?L?COM0008
001E31 80EF              SJMP     ?C0901?DRV_C2M
001E33         ?C0899?DRV_C2M:
001E33 B129              ACALL    c2m_ReadDR
001E35 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001E38         ?C0903?DRV_C2M:
001E38         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
001E38 D238              SETB     bDone
  525: 
  526: _exit:
001E3A         _exit:
  527:     return bDone;
001E3A A238              MOV      C,bDone
  528: }
001E3C 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
001E3D 1233D4            LCALL    ?L?COM004D
;---- Variable 'vCount' assigned to Register 'R3' ----
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
001E40 EB                MOV      A,R3
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 32


001E41 7005              JNZ      ?C0936?DRV_C2M
001E43 7E01              MOV      R6,#01H
001E45 FF                MOV      R7,A
001E46 8004              SJMP     ?C0937?DRV_C2M
001E48         ?C0936?DRV_C2M:
001E48 EB                MOV      A,R3
001E49 FF                MOV      R7,A
001E4A 7E00              MOV      R6,#00H
001E4C         ?C0937?DRV_C2M:
001E4C 8E3F              MOV      vLen,R6
001E4E 8F40              MOV      vLen+01H,R7
  595:     BOOL    bDone = FALSE;
001E50 C238              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
001E52 30975F            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001E55 30A05C            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
001E58         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
001E58 AF16              MOV      R7,vFPDAT
001E5A D1B7              ACALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
001E5C 7F06              MOV      R7,#06H
001E5E 1231A4            LCALL    ?L?COM0015
001E61         ?C0947?DRV_C2M:
001E61 71FC              ACALL    c2m_ReadAR
001E63 EF                MOV      A,R7
001E64 20E009            JB       ACC.0,?C0945?DRV_C2M
001E67 123124            LCALL    ?L?COM000E
001E6A 6004              JZ       ?C0945?DRV_C2M
001E6C 513A              ACALL    ?L?COM0008
001E6E 80F1              SJMP     ?C0947?DRV_C2M
001E70         ?C0945?DRV_C2M:
001E70 12328F            LCALL    ?L?COM002A
001E73 703F              JNZ      _exit?DRV_C2M
001E75         ?C0949?DRV_C2M:
001E75         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001E75 E53D              MOV      A,vAddr
001E77 FF                MOV      R7,A
001E78 716D              ACALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001E7A AF3E              MOV      R7,vAddr+01H
001E7C 12319F            LCALL    ?L?COM0014
001E7F         ?C0956?DRV_C2M:
001E7F 71FC              ACALL    c2m_ReadAR
001E81 EF                MOV      A,R7
001E82 20E009            JB       ACC.0,?C0954?DRV_C2M
001E85 123124            LCALL    ?L?COM000E
001E88 6004              JZ       ?C0954?DRV_C2M
001E8A 513A              ACALL    ?L?COM0008
001E8C 80F1              SJMP     ?C0956?DRV_C2M
001E8E         ?C0954?DRV_C2M:
001E8E B129              ACALL    c2m_ReadDR
001E90 BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
001E93         ?C0958?DRV_C2M:
001E93         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 33


  610:     while (vLen--)
001E93 1232ED            LCALL    ?L?COM0032
001E96 7002              JNZ      ?C1016?DRV_C2M
001E98 153F              DEC      vLen
001E9A         ?C1016?DRV_C2M:
001E9A 4E                ORL      A,R6
001E9B 6015              JZ       ?C0960?DRV_C2M
  611:     {
  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
001E9D F126              ACALL    drv_c2m_ReadData
001E9F 053C              INC      pBuf+01H
001EA1 E53C              MOV      A,pBuf+01H
001EA3 AC3B              MOV      R4,pBuf
001EA5 7002              JNZ      ?C1017?DRV_C2M
001EA7 053B              INC      pBuf
001EA9         ?C1017?DRV_C2M:
001EA9 14                DEC      A
001EAA F582              MOV      DPL,A
001EAC 8C83              MOV      DPH,R4
001EAE EF                MOV      A,R7
001EAF F0                MOVX     @DPTR,A
  614:     }
001EB0 80E1              SJMP     ?C0959?DRV_C2M
001EB2         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
001EB2 D238              SETB     bDone
  616: 
  617: _exit:
001EB4         _exit:
  618:     return bDone;
001EB4 A238              MOV      C,bDone
  619: }
001EB6 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
001EB7 D243              SETB     bIns0
001EB9 D244              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
001EBB 8F26              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
001EBD 30AF05            JNB      EA,?C0007?DRV_C2M
001EC0 C2AF              CLR      EA
001EC2 D3                SETB     C
001EC3 8001              SJMP     ?C0008?DRV_C2M
001EC5         ?C0007?DRV_C2M:
001EC5 C3                CLR      C
001EC6         ?C0008?DRV_C2M:
001EC6 1231B3            LCALL    ?L?COM0017
001EC9 00                NOP      
001ECA 00                NOP      
001ECB 00                NOP      
001ECC 00                NOP      
001ECD 12324B            LCALL    ?L?COM0024
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 34


001ED0 00                NOP      
001ED1 00                NOP      
001ED2 00                NOP      
001ED3 00                NOP      
001ED4 1232F4            LCALL    ?L?COM0033
001ED7 00                NOP      
001ED8 00                NOP      
001ED9 00                NOP      
001EDA 00                NOP      
001EDB 12342E            LCALL    ?L?COM0057
001EDE 00                NOP      
001EDF 00                NOP      
001EE0 00                NOP      
001EE1 00                NOP      
001EE2 123425            LCALL    ?L?COM0056
001EE5 00                NOP      
001EE6 00                NOP      
001EE7 00                NOP      
001EE8 00                NOP      
001EE9 12341C            LCALL    ?L?COM0055
001EEC 00                NOP      
001EED 00                NOP      
001EEE 00                NOP      
001EEF 00                NOP      
001EF0 123413            LCALL    ?L?COM0054
001EF3 00                NOP      
001EF4 00                NOP      
001EF5 00                NOP      
001EF6 00                NOP      
001EF7 12340A            LCALL    ?L?COM0053
001EFA 00                NOP      
001EFB 00                NOP      
001EFC 00                NOP      
001EFD 00                NOP      
001EFE 123401            LCALL    ?L?COM0052
001F01 00                NOP      
001F02 00                NOP      
001F03 00                NOP      
001F04 00                NOP      
001F05 1233F8            LCALL    ?L?COM0051
001F08 00                NOP      
001F09 00                NOP      
001F0A 00                NOP      
001F0B 00                NOP      
001F0C 1233EF            LCALL    ?L?COM0050
001F0F 00                NOP      
001F10 00                NOP      
001F11 00                NOP      
001F12 00                NOP      
001F13 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
  197:     c2m_TxStop();       /* tx frame stop */
001F15 D2A0              SETB     IO_DUT_C2M_SDA
001F17 53A6FE            ANL      P2MDOUT,#0FEH
001F1A 1231BB            LCALL    ?L?COM0018
001F1D 00                NOP      
001F1E 00                NOP      
001F1F 00                NOP      
001F20 00                NOP      
001F21 D297              SETB     IO_DUT_C2M_SCL
001F23 023243            LJMP     ?L?COM0023
  198: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 35


  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
001F26 E4                CLR      A
001F27 754810            MOV      _timeout+03H,#010H
001F2A 754727            MOV      _timeout+02H,#027H
001F2D F546              MOV      _timeout+01H,A
001F2F F545              MOV      _timeout,A
001F31         ?C0794?DRV_C2M:
001F31 71FC              ACALL    c2m_ReadAR
001F33 EF                MOV      A,R7
001F34 20E00B            JB       ACC.0,?C0792?DRV_C2M
001F37 7845              MOV      R0,#LOW _timeout
001F39 123126            LCALL    ?L?COM000F
001F3C 6004              JZ       ?C0792?DRV_C2M
001F3E 513A              ACALL    ?L?COM0008
001F40 80EF              SJMP     ?C0794?DRV_C2M
001F42         ?C0792?DRV_C2M:
  367: }
001F42 A129              AJMP     c2m_ReadDR
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  141: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  142: {
  143:     UINT8   vLoop;
  144:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
001F44 E4                CLR      A
001F45 FD                MOV      R5,A
  145: 
  146:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
001F46 7C08              MOV      R4,#08H
001F48         ?C0062?PKT_I2CM:
  147:     {
  148:         PKT_I2CM_SET_SCL(HIGH);
001F48 12311D            LCALL    ?L?COM000D
001F4B 1232D4            LCALL    ?L?COM002F
001F4E         ?C0075?PKT_I2CM:
001F4E 20820E            JB       IO_DUT_I2CM_SCL,?C0066?PKT_I2CM
001F51 1232ED            LCALL    ?L?COM0032
001F54 7002              JNZ      ?C0376?PKT_I2CM
001F56 153F              DEC      _loop
001F58         ?C0376?PKT_I2CM:
001F58 4E                ORL      A,R6
001F59 6004              JZ       ?C0066?PKT_I2CM
001F5B 513A              ACALL    ?L?COM0008
001F5D 80EF              SJMP     ?C0075?PKT_I2CM
001F5F         ?C0066?PKT_I2CM:
  149:         vData <<= 1;
001F5F ED                MOV      A,R5
001F60 25E0              ADD      A,ACC
001F62 FD                MOV      R5,A
  150:         vData |= PKT_I2CM_GET_SDA();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 36


001F63 A292              MOV      C,IO_DUT_I2CM_SDA
001F65 E4                CLR      A
001F66 33                RLC      A
001F67 4205              ORL      AR5,A
  151:         PKT_I2CM_SET_SCL(LOW);
001F69 12311D            LCALL    ?L?COM000D
001F6C C282              CLR      IO_DUT_I2CM_SCL
001F6E 8000              SJMP     ?C0064?PKT_I2CM
  152:     }
001F70         ?C0064?PKT_I2CM:
001F70 DCD6              DJNZ     R4,?C0062?PKT_I2CM
001F72         ?C0091?PKT_I2CM:
  153: 
  154:     /* send ACK/NAK */
  155:     PKT_I2CM_SET_SDA(bSendNAK);
001F72 A23A              MOV      C,bSendNAK
001F74 9292              MOV      IO_DUT_I2CM_SDA,C
  156:     PKT_I2CM_SET_SCL(HIGH);
001F76 12311D            LCALL    ?L?COM000D
001F79 1232D4            LCALL    ?L?COM002F
001F7C         ?C0102?PKT_I2CM:
001F7C 20820E            JB       IO_DUT_I2CM_SCL,?C0109?PKT_I2CM
001F7F 1232ED            LCALL    ?L?COM0032
001F82 7002              JNZ      ?C0378?PKT_I2CM
001F84 153F              DEC      _loop
001F86         ?C0378?PKT_I2CM:
001F86 4E                ORL      A,R6
001F87 6004              JZ       ?C0109?PKT_I2CM
001F89 513A              ACALL    ?L?COM0008
001F8B 80EF              SJMP     ?C0102?PKT_I2CM
  157:     PKT_I2CM_SET_SCL(LOW);
001F8D         ?C0109?PKT_I2CM:
001F8D 12311D            LCALL    ?L?COM000D
001F90 C282              CLR      IO_DUT_I2CM_SCL
001F92 8000              SJMP     ?C0118?PKT_I2CM
001F94         ?C0118?PKT_I2CM:
  158:     PKT_I2CM_SET_SDA(HIGH);
001F94 D292              SETB     IO_DUT_I2CM_SDA
  159: 
  160:     return vData;
001F96 AF05              MOV      R7,AR5
  161: }
001F98 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
001F99 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
001F9C 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
001F9F         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
001F9F C3                CLR      C
001FA0 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
001FA1         ?C0831?DRV_C2M:
001FA1 123296            LCALL    ?L?COM002B
001FA4 53A57F            ANL      P1MDOUT,#07FH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 37


  425:     return TRUE;
001FA7 D3                SETB     C
  426: }
001FA8 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
001FA9 438E10            ORL      CKCON,#010H
001FAC E4                CLR      A
001FAD F5C8              MOV      TMR2CN,A
001FAF 75CA40            MOV      TMR2RLL,#040H
001FB2 75CC40            MOV      TMR2L,#040H
001FB5 75CBA2            MOV      TMR2RLH,#0A2H
001FB8 75CDA2            MOV      TMR2H,#0A2H
001FBB C2CF              CLR      TF2H
001FBD D2CA              SETB     TR2
001FBF C2BD              CLR      PT2
001FC1 D2AD              SETB     ET2
001FC3 F50F              MOV      vTickCount+03H,A
001FC5 F50E              MOV      vTickCount+02H,A
001FC7 F50D              MOV      vTickCount+01H,A
001FC9 F50C              MOV      vTickCount,A
   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
001FCB 122DEE            LCALL    DRV_USB_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
001FCE 75D107            MOV      REF0CN,#07H
001FD1 7FD0              MOV      R7,#0D0H
001FD3 7E07              MOV      R6,#07H
001FD5 513E              ACALL    _DRV_CPU_DelayUs
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
001FD7 F1E4              ACALL    DRV_ADC_Init
;----                  JMP      DRV_C2M_Init
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 38




----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
001FD9 53A57F            ANL      P1MDOUT,#07FH
001FDC 53A6FE            ANL      P2MDOUT,#0FEH
001FDF D297              SETB     IO_DUT_C2M_SCL
001FE1 D2A0              SETB     IO_DUT_C2M_SDA
  693: 
001FE3 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_ADC_Init (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   88: void DRV_ADC_Init(void)
   89: {
   90:   /* AD0SC value */
   91:   #define AD0SC_VAL (((CORE_CLOCK*10/DRV_ADC_SAR_RATE/1000/ADC_SAR_ConvClock+5)/10-1)&0x1F)
   92: 
   93:     /* default:
   94:      *  positive channel: temperature sensor;
   95:      *  negative channel: GND;
   96:      */
   97:     AMX0P = ADC_CHP_TEMP;
001FE4 75BB1E            MOV      AMX0P,#01EH
   98:     AMX0N = ADC_CHN_GND;
001FE7 75BA1F            MOV      AMX0N,#01FH
   99: 
  100:     /* ADC control:
  101:      *  right justify;
  102:      *  ADC start-of-conversion source is write of '1' to ADC0BUSY;
  103:      *  clear ADC flag;
  104:      *  enable ADC;
  105:      */
  106:     ADC0CF = (AD0SC_VAL<<3) | (0<<2);
001FEA 75BCB8            MOV      ADC0CF,#0B8H
  107:     ADC0CN = 0x80;
001FED 75E880            MOV      ADC0CN,#080H
  108: }
001FF0 22                RET      
----- FUNCTION DRV_ADC_Init (END) -------


----- FUNCTION ?L?COM004C (BEGIN) -----
001FF1 FF                MOV      R7,A
001FF2 E4                CLR      A
001FF3 3438              ADDC     A,#038H
001FF5 FE                MOV      R6,A
----- FUNCTION _CFG_ROM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   77:     return MEMPAGE_PID_INVALID;
   78: }
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
001FF6 8F82              MOV      DPL,R7
001FF8 8E83              MOV      DPH,R6
001FFA 020655            LJMP     ?C?LLDCODE
----- FUNCTION _CFG_ROM_GET32 (END) -------


----- FUNCTION _pkt_i2cm_vs_Stream (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 39


 FILE: '..\pkt\pkt_i2cm.c'
  287: static BOOL pkt_i2cm_vs_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  288: {
002000 123452            LCALL    ?L?COM005B
002003 A3                INC      DPTR
002004 123197            LCALL    ?L?COM0013
  289:     static UINT8 vRegOffset = 0x00;
  290:     UINT16  vWriteLen = pPayload->vWriteLen;
  291:     UINT16  vReadLen  = pPayload->vReadLen;
002007 123339            LCALL    ?L?COM003B
  292: 
  293:     /* send write stream */
  294:     if (vWriteLen != 0)
00200A E538              MOV      A,vWriteLen+01H
00200C 4537              ORL      A,vWriteLen
00200E 6036              JZ       ?C0331?PKT_I2CM
  295:     {
  296:         /* 1st byte is always register offset */
  297:         vRegOffset = pPayload->aBuf[0];
002010 8F82              MOV      DPL,R7
002012 8E83              MOV      DPH,R6
002014 E582              MOV      A,DPL
002016 2405              ADD      A,#05H
002018 F582              MOV      DPL,A
00201A E4                CLR      A
00201B 3583              ADDC     A,DPH
00201D F583              MOV      DPH,A
00201F E0                MOVX     A,@DPTR
002020 F514              MOV      vRegOffset,A
  298:         if (vWriteLen > 0x100)
002022 D3                SETB     C
002023 E538              MOV      A,vWriteLen+01H
002025 9400              SUBB     A,#00H
002027 E537              MOV      A,vWriteLen
002029 9401              SUBB     A,#01H
00202B 4001              JC       ?C0332?PKT_I2CM
  299:         {
  300:             /* write length overflow */
  301:             return FALSE;
00202D 22                RET      
  302:         }
00202E         ?C0332?PKT_I2CM:
  303: 
  304:         /* send write buffer */
  305:         CFG_DB_WriteFlush(vRegOffset, (UINT8)(vWriteLen-1), &(pPayload->aBuf[1]));
00202E E538              MOV      A,vWriteLen+01H
002030 14                DEC      A
002031 FD                MOV      R5,A
002032 E536              MOV      A,pPayload+01H
002034 2406              ADD      A,#06H
002036 FB                MOV      R3,A
002037 E4                CLR      A
002038 3535              ADDC     A,pPayload
00203A FA                MOV      R2,A
00203B AF14              MOV      R7,vRegOffset
00203D 11EF              ACALL    _CFG_DB_WriteFlush
  306:         vRegOffset = (UINT8)(vRegOffset+vWriteLen-1);
00203F E514              MOV      A,vRegOffset
002041 2538              ADD      A,vWriteLen+01H
002043 14                DEC      A
002044 F514              MOV      vRegOffset,A
  307:     }
002046         ?C0331?PKT_I2CM:
  308: 
  309:     /* send read stream */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 40


  310:     if (vReadLen != 0)
002046 E53A              MOV      A,vReadLen+01H
002048 4539              ORL      A,vReadLen
00204A 601B              JZ       ?C0334?PKT_I2CM
  311:     {
  312:         UINT16  vLoop;
  313: 
  314:         /* read data */
  315:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
00204C E4                CLR      A
00204D F53B              MOV      vLoop,A
00204F F53C              MOV      vLoop+01H,A
002051         ?C0335?PKT_I2CM:
002051 123463            LCALL    ?L?COM005D
002054 9539              SUBB     A,vReadLen
002056 500F              JNC      ?C0334?PKT_I2CM
  316:         {
  317:             pPayload->aBuf[vWriteLen+vLoop] = CFG_DB_ReadByte(vRegOffset++);
002058 AF14              MOV      R7,vRegOffset
00205A 0514              INC      vRegOffset
00205C 71EE              ACALL    _CFG_DB_ReadByte
00205E 1231E8            LCALL    ?L?COM001A
002061 7002              JNZ      ?C0393?PKT_I2CM
002063 053B              INC      vLoop
002065         ?C0393?PKT_I2CM:
002065 80EA              SJMP     ?C0335?PKT_I2CM
  318:         }
  319:     }
002067         ?C0334?PKT_I2CM:
  320: 
  321:     return TRUE;
002067 D3                SETB     C
  322: }
002068 22                RET      
----- FUNCTION _pkt_i2cm_vs_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  336: UINT16 PKT_I2CM_Stream(void)
  337: {
  338:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  339:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
002069 753300            MOV      pPayload,#HIGH vFrame+0CH
00206C 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
  340: 
  341:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  342:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
00206F 123327            LCALL    ?L?COM0039
002072 E0                MOVX     A,@DPTR
002073 FE                MOV      R6,A
002074 A3                INC      DPTR
002075 E0                MOVX     A,@DPTR
002076 FF                MOV      R7,A
002077 2405              ADD      A,#05H
002079 FD                MOV      R5,A
00207A E4                CLR      A
00207B 3E                ADDC     A,R6
00207C FC                MOV      R4,A
00207D 90004A            MOV      DPTR,#vFrame+0AH
002080 E0                MOVX     A,@DPTR
002081 B50424            CJNE     A,AR4,?C0361?PKT_I2CM
002084 A3                INC      DPTR
002085 E0                MOVX     A,@DPTR
002086 B5051F            CJNE     A,AR5,?C0361?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 41


002089 123327            LCALL    ?L?COM0039
00208C A3                INC      DPTR
00208D A3                INC      DPTR
00208E E0                MOVX     A,@DPTR
00208F FC                MOV      R4,A
002090 A3                INC      DPTR
002091 E0                MOVX     A,@DPTR
002092 FD                MOV      R5,A
002093 EF                MOV      A,R7
002094 2D                ADD      A,R5
002095 FF                MOV      R7,A
002096 EE                MOV      A,R6
002097 3C                ADDC     A,R4
002098 FE                MOV      R6,A
002099 E4                CLR      A
00209A FC                MOV      R4,A
00209B FD                MOV      R5,A
00209C 7B33              MOV      R3,#033H
00209E 7A04              MOV      R2,#04H
0020A0 F9                MOV      R1,A
0020A1 F8                MOV      R0,A
0020A2 C3                CLR      C
0020A3 120607            LCALL    ?C?SLCMP
0020A6 5005              JNC      ?C0360?PKT_I2CM
0020A8         ?C0361?PKT_I2CM:
  343:     {
  344:         return PKT_REPLY_Fail_InvalidLen;
0020A8 7E03              MOV      R6,#03H
0020AA 7F04              MOV      R7,#04H
0020AC 22                RET      
  345:     }
0020AD         ?C0360?PKT_I2CM:
  346: 
  347:   #if PKT_I2CM_VS_SUPPORT
  348:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
0020AD 853482            MOV      DPL,pPayload+01H
0020B0 853383            MOV      DPH,pPayload
0020B3 E0                MOVX     A,@DPTR
0020B4 AF34              MOV      R7,pPayload+01H
0020B6 AE33              MOV      R6,pPayload
0020B8 B4FE04            CJNE     A,#0FEH,?C0364?PKT_I2CM
0020BB 1100              ACALL    _pkt_i2cm_vs_Stream
0020BD 8003              SJMP     ?C0365?PKT_I2CM
0020BF         ?C0364?PKT_I2CM:
0020BF 121914            LCALL    _pkt_i2cm_Stream
0020C2         ?C0365?PKT_I2CM:
0020C2 5026              JNC      ?C0363?PKT_I2CM
  349:         pkt_i2cm_vs_Stream(pPayload) :
  350:         pkt_i2cm_Stream(pPayload))
  351:   #else
  352:     if (pkt_i2cm_Stream(pPayload))
  353:   #endif
  354:     {
  355:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  356:                            + pPayload->vWriteLen
  357:                            + pPayload->vReadLen);
0020C4 123327            LCALL    ?L?COM0039
0020C7 E0                MOVX     A,@DPTR
0020C8 FE                MOV      R6,A
0020C9 A3                INC      DPTR
0020CA E0                MOVX     A,@DPTR
0020CB 2405              ADD      A,#05H
0020CD FF                MOV      R7,A
0020CE E4                CLR      A
0020CF 3E                ADDC     A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 42


0020D0 FE                MOV      R6,A
0020D1 123327            LCALL    ?L?COM0039
0020D4 A3                INC      DPTR
0020D5 A3                INC      DPTR
0020D6 E0                MOVX     A,@DPTR
0020D7 FC                MOV      R4,A
0020D8 A3                INC      DPTR
0020D9 E0                MOVX     A,@DPTR
0020DA 2F                ADD      A,R7
0020DB FF                MOV      R7,A
0020DC EC                MOV      A,R4
0020DD 3E                ADDC     A,R6
0020DE 90004A            MOV      DPTR,#vFrame+0AH
0020E1 F0                MOVX     @DPTR,A
0020E2 A3                INC      DPTR
0020E3 EF                MOV      A,R7
0020E4 F0                MOVX     @DPTR,A
  358:         return PKT_REPLY_Done_ExecNoError;
0020E5 7E01              MOV      R6,#01H
0020E7 7F40              MOV      R7,#040H
0020E9 22                RET      
  359:     }
0020EA         ?C0363?PKT_I2CM:
  360:     else
  361:     {
  362:         return PKT_REPLY_Fail_I2cNoAck;
0020EA 7E03              MOV      R6,#03H
0020EC 7F40              MOV      R7,#040H
  363:     }
  364: }
0020EE 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _CFG_DB_WriteFlush (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  167: void CFG_DB_WriteFlush
  168: (
0020EF 8F3D              MOV      vOffset,R7
0020F1 8D3E              MOV      vCount,R5
0020F3 8A3F              MOV      pBuf,R2
0020F5 8B40              MOV      pBuf+01H,R3
  169:     IN       UINT8            vOffset,
  170:     IN       UINT8            vCount,
  171:     IN const UINT8 SEG_XDATA *pBuf
  172: )
  173: {
  174:     SINT8   vPID = cfg_db_GetPID(vOffset);
0020F7 91A3              ACALL    _cfg_db_GetPID
0020F9 8F41              MOV      vPID,R7
  175:     UINT8   vPageSize;
  176: 
  177:     if ((vPID == MEMPAGE_PID_INVALID) || (vCount == 0))
0020FB E541              MOV      A,vPID
0020FD F4                CPL      A
0020FE 7002              JNZ      $ + 4H
002100 4101              AJMP     ?C0044?CFG_DB
002102 E53E              MOV      A,vCount
002104 7002              JNZ      $ + 4H
002106 4101              AJMP     ?C0044?CFG_DB
  178:     {
  179:         /* invalid page, or zero flush length */
  180:         return;
  181:     }
002108         ?C0042?CFG_DB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 43


  182: 
  183:     /* limit Rx FIFO length to page boundary */
  184:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
002108 1233B8            LCALL    ?L?COM0048
00210B 4009              JC       ?C0045?CFG_DB
00210D 12339A            LCALL    ?L?COM0045
002110 5004              JNC      ?C0045?CFG_DB
002112 7F20              MOV      R7,#020H
002114 8002              SJMP     ?C0046?CFG_DB
002116         ?C0045?CFG_DB:
002116 7F80              MOV      R7,#080H
002118         ?C0046?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  185:     vOffset  &= (vPageSize - 1);
002118 EF                MOV      A,R7
002119 14                DEC      A
00211A 523D              ANL      vOffset,A
  186:     if (vOffset+vCount > vPageSize)
00211C E53E              MOV      A,vCount
00211E FD                MOV      R5,A
00211F E53D              MOV      A,vOffset
002121 2D                ADD      A,R5
002122 FD                MOV      R5,A
002123 E4                CLR      A
002124 33                RLC      A
002125 FC                MOV      R4,A
002126 EF                MOV      A,R7
002127 FB                MOV      R3,A
002128 D3                SETB     C
002129 ED                MOV      A,R5
00212A 9B                SUBB     A,R3
00212B 7480              MOV      A,#080H
00212D F8                MOV      R0,A
00212E 6C                XRL      A,R4
00212F 98                SUBB     A,R0
002130 4008              JC       ?C0047?CFG_DB
  187:     {
  188:         vCount = (vOffset+vCount) - vPageSize;
002132 E53D              MOV      A,vOffset
002134 253E              ADD      A,vCount
002136 C3                CLR      C
002137 9F                SUBB     A,R7
002138 F53E              MOV      vCount,A
  189:     }
00213A         ?C0047?CFG_DB:
  190: 
  191:     if (vPID == MEMPAGE_PID_DIRECT_FE_60)
00213A E541              MOV      A,vPID
00213C 6401              XRL      A,#01H
00213E 7027              JNZ      ?C0048?CFG_DB
  192:     {
  193:         /* FE.60-7F page */
  194: 
  195:         UINT8   vLoop;
  196:         for (vLoop=0; vLoop<vCount; vLoop++,vOffset++)
002140 F542              MOV      vLoop,A
002142         ?C0049?CFG_DB:
002142 E542              MOV      A,vLoop
002144 C3                CLR      C
002145 953E              SUBB     A,vCount
002147 501C              JNC      ?C0050?CFG_DB
  197:         {
  198:             UINT8   vData = pBuf[vLoop];
002149 123385            LCALL    ?L?COM0041
00214C F543              MOV      vData,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 44


  199: 
  200:             switch (vOffset)
00214E E53D              MOV      A,vOffset
002150 24E5              ADD      A,#0E5H
002152 24FB              ADD      A,#0FBH
002154 5004              JNC      ?C0065?CFG_DB
002156 2408              ADD      A,#08H
002158 7005              JNZ      ?C0051?CFG_DB
  201:             {
  202:                 case CFG(RT_EVB_CTRL):
  203:                     /* EVB/DUT related */
  204:                 case CFG(Vendor_PWD_Entry)+0:
  205:                 case CFG(Vendor_PWD_Entry)+1:
  206:                 case CFG(Vendor_PWD_Entry)+2:
  207:                 case CFG(Vendor_PWD_Entry)+3:
  208:                 case CFG(Vendor_Page_Select):
  209:                     CFG_SETV8(MEMPAGE_PID_DIRECT_FE_60, vOffset, vData);
00215A         ?C0065?CFG_DB:
00215A A83D              MOV      R0,vOffset
00215C E543              MOV      A,vData
00215E F2                MOVX     @R0,A
  210:                     break;
  211: 
  212:                 default:    /* read-only field */
  213:                     /* do nothing */
  214:                     break;
  215:             }
  216:         }
00215F         ?C0051?CFG_DB:
00215F 0542              INC      vLoop
002161 053D              INC      vOffset
002163 80DD              SJMP     ?C0049?CFG_DB
002165         ?C0050?CFG_DB:
  217: 
  218:         /* refresh password level */
  219:         CFG_PWD_RefreshLevel();
002165 6167              AJMP     CFG_PWD_RefreshLevel
  220:     }
002167         ?C0048?CFG_DB:
  221:     else    /* other pages */
  222:     {
  223:         if (vPID == MEMPAGE_PID_DIRECT_FE_00)
002167 E541              MOV      A,vPID
002169 B4061B            CJNE     A,#06H,?C0071?CFG_DB
  224:         {
  225:             if (vOffset+vCount > MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
00216C E53D              MOV      A,vOffset
00216E 253E              ADD      A,vCount
002170 FF                MOV      R7,A
002171 E4                CLR      A
002172 33                RLC      A
002173 FE                MOV      R6,A
002174 D3                SETB     C
002175 EF                MOV      A,R7
002176 9460              SUBB     A,#060H
002178 EE                MOV      A,R6
002179 6480              XRL      A,#080H
00217B 9480              SUBB     A,#080H
00217D 4008              JC       ?C0071?CFG_DB
  226:             {
  227:                 /* cross-write from A2.00-5F to A2.60-7F field,
  228:                  * only accept A2.00-5F field data.
  229:                  */
  230:                 vCount = (vOffset+vCount) - MEMMAP_REAL_OFFSET(DDM_EVB_TEMP);
00217F E53D              MOV      A,vOffset
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 45


002181 253E              ADD      A,vCount
002183 24A0              ADD      A,#0A0H
002185 F53E              MOV      vCount,A
  231:             }
  232:         }
002187         ?C0071?CFG_DB:
  233: 
  234:         /* check password level, to make sure it's writable */
  235:         if (CFG_PWD_GetLevel() >= aPagePwdWriteTable[vPID])
002187 AF41              MOV      R7,vPID
002189 EF                MOV      A,R7
00218A 33                RLC      A
00218B 95E0              SUBB     A,ACC
00218D FE                MOV      R6,A
00218E 7425              MOV      A,#LOW aPagePwdWriteTable
002190 2F                ADD      A,R7
002191 F582              MOV      DPL,A
002193 7416              MOV      A,#HIGH aPagePwdWriteTable
002195 3E                ADDC     A,R6
002196 123440            LCALL    ?L?COM0059
002199 9F                SUBB     A,R7
00219A 4065              JC       ?C0044?CFG_DB
  236:         {
  237:             if (MEMPAGE_IsRAM(vPID))
00219C 1233B9            LCALL    ?L?COM0049
00219F 4031              JC       ?C0074?CFG_DB
0021A1 12339A            LCALL    ?L?COM0045
0021A4 502C              JNC      ?C0074?CFG_DB
  238:             {
  239:                 /* RAM page */
  240: 
  241:                 UINT8   vLoop;
  242:                 for (vLoop=0; vLoop<vCount; vLoop++)
0021A6 E4                CLR      A
0021A7 F542              MOV      vLoop,A
0021A9         ?C0075?CFG_DB:
0021A9 E542              MOV      A,vLoop
0021AB C3                CLR      C
0021AC 953E              SUBB     A,vCount
0021AE 5051              JNC      ?C0044?CFG_DB
  243:                 {
  244:                     CFG_SETV8(vPID, vOffset+vLoop, pBuf[vLoop]);
0021B0 1233B8            LCALL    ?L?COM0048
0021B3 4019              JC       ?C0081?CFG_DB
0021B5 12339A            LCALL    ?L?COM0045
0021B8 5014              JNC      ?C0081?CFG_DB
0021BA 123385            LCALL    ?L?COM0041
0021BD FF                MOV      R7,A
0021BE E53D              MOV      A,vOffset
0021C0 2542              ADD      A,vLoop
0021C2 FE                MOV      R6,A
0021C3 E541              MOV      A,vPID
0021C5 14                DEC      A
0021C6 C4                SWAP     A
0021C7 33                RLC      A
0021C8 54E0              ANL      A,#0E0H
0021CA 2E                ADD      A,R6
0021CB F8                MOV      R0,A
0021CC EF                MOV      A,R7
0021CD F2                MOVX     @R0,A
0021CE         ?C0081?CFG_DB:
0021CE         ?C0086?CFG_DB:
  245:                 }
0021CE         ?C0077?CFG_DB:
0021CE 0542              INC      vLoop
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 46


0021D0 80D7              SJMP     ?C0075?CFG_DB
  246:             }
0021D2         ?C0074?CFG_DB:
  247:             else if (MEMPAGE_IsROM(vPID))
0021D2 C3                CLR      C
0021D3 E541              MOV      A,vPID
0021D5 6480              XRL      A,#080H
0021D7 9483              SUBB     A,#083H
0021D9 4026              JC       ?C0044?CFG_DB
0021DB D3                SETB     C
0021DC E541              MOV      A,vPID
0021DE 6480              XRL      A,#080H
0021E0 9486              SUBB     A,#086H
0021E2 501D              JNC      ?C0044?CFG_DB
  248:             {
  249:                 /* ROM page */
  250:                 EEPROM_MEMCPY(MEMPAGE_ROM_LMA(vPID)+vOffset, pBuf, vCount);
0021E4 AF41              MOV      R7,vPID
0021E6 123437            LCALL    ?L?COM0058
0021E9         ?C0092?CFG_DB:
0021E9 C3                CLR      C
0021EA 33                RLC      A
0021EB CE                XCH      A,R6
0021EC 33                RLC      A
0021ED CE                XCH      A,R6
0021EE D8F9              DJNZ     R0,?C0092?CFG_DB
0021F0 1233AD            LCALL    ?L?COM0047
0021F3 253D              ADD      A,vOffset
0021F5 FF                MOV      R7,A
0021F6 EC                MOV      A,R4
0021F7 3E                ADDC     A,R6
0021F8 FE                MOV      R6,A
0021F9 AB3E              MOV      R3,vCount
0021FB AD40              MOV      R5,pBuf+01H
0021FD AC3F              MOV      R4,pBuf
0021FF 5102              ACALL    _DRV_FLASH_Update
  251:             }
  252:             else
  253:             {
  254:                 /* VIRTUAL page */
  255:                 /* do nothing */
  256:             }
  257:         }
  258:     }
  259: }
002201         ?C0044?CFG_DB:
002201 22                RET      
----- FUNCTION _CFG_DB_WriteFlush (END) -------


----- FUNCTION _DRV_FLASH_Update (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  178: void DRV_FLASH_Update
  179: (
002202 8E44              MOV      vDstAddr,R6
002204 8F45              MOV      vDstAddr+01H,R7
002206 8C46              MOV      pSrcAddr,R4
002208 8D47              MOV      pSrcAddr+01H,R5
;---- Variable 'vLen' assigned to Register 'R1' ----
00220A A903              MOV      R1,AR3
  180:     IN       UINT16           vDstAddr,
  181:     IN const UINT8 SEG_XDATA *pSrcAddr,
  182:     IN       UINT8            vLen
  183: )
  184: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 47


  185:     BOOL   bIntStatus;
  186:     UINT16 vPageBase;
  187:     UINT16 vPageOffset;
  188:     BOOL   bErase;
  189:     UINT8  vLoop;
  190: 
  191:     /* globally lock interrupt */
  192:     bIntStatus = DRV_INT_LockGlobalInterrupt();
00220C 30AF05            JNB      EA,?C0012?DRV_FLASH
00220F C2AF              CLR      EA
002211 D3                SETB     C
002212 8001              SJMP     ?C0013?DRV_FLASH
002214         ?C0012?DRV_FLASH:
002214 C3                CLR      C
002215         ?C0013?DRV_FLASH:
002215 9238              MOV      bIntStatus,C
  193: 
  194:     /* calculate flash page base address & offset of this page */
  195:     vPageBase   = vDstAddr & FLASH_PAGE_MASK;
002217 E544              MOV      A,vDstAddr
002219 54FE              ANL      A,#0FEH
00221B F548              MOV      vPageBase,A
00221D 754900            MOV      vPageBase+01H,#00H
  196:     vPageOffset = vDstAddr & ~FLASH_PAGE_MASK;
002220 E544              MOV      A,vDstAddr
002222 5401              ANL      A,#01H
002224 F54A              MOV      vPageOffset,A
002226 85454B            MOV      vPageOffset+01H,vDstAddr+01H
  197: 
  198:     /* check whether need to erase flash page */
  199:     bErase = FALSE;
002229 C239              CLR      bErase
  200:     for (vLoop = 0; vLoop < vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R7' ----
00222B E4                CLR      A
00222C FF                MOV      R7,A
00222D         ?C0014?DRV_FLASH:
00222D EF                MOV      A,R7
00222E C3                CLR      C
00222F 99                SUBB     A,R1
002230 5033              JNC      ?C0015?DRV_FLASH
  201:     {
  202:         UINT8   vDstData = CODE_U8(vPageBase+vPageOffset+vLoop);
002232 E549              MOV      A,vPageBase+01H
002234 254B              ADD      A,vPageOffset+01H
002236 FD                MOV      R5,A
002237 E548              MOV      A,vPageBase
002239 354A              ADDC     A,vPageOffset
00223B FC                MOV      R4,A
00223C EF                MOV      A,R7
00223D 7A00              MOV      R2,#00H
00223F 2D                ADD      A,R5
002240 FD                MOV      R5,A
002241 EA                MOV      A,R2
002242 3C                ADDC     A,R4
002243 8D82              MOV      DPL,R5
002245 F583              MOV      DPH,A
002247 E4                CLR      A
002248 93                MOVC     A,@A+DPTR
002249 F54C              MOV      vDstData,A
  203:         UINT8   vSrcData = pSrcAddr[vLoop];
00224B E547              MOV      A,pSrcAddr+01H
00224D 2F                ADD      A,R7
00224E F582              MOV      DPL,A
002250 E4                CLR      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 48


002251 3546              ADDC     A,pSrcAddr
002253 F583              MOV      DPH,A
002255 E0                MOVX     A,@DPTR
002256 F54D              MOV      vSrcData,A
  204: 
  205:         if ((vDstData&vSrcData) != vSrcData)
002258 554C              ANL      A,vDstData
00225A 654D              XRL      A,vSrcData
00225C 6004              JZ       ?C0016?DRV_FLASH
  206:         {
  207:             bErase = TRUE;
00225E D239              SETB     bErase
  208:             break;
002260 8003              SJMP     ?C0015?DRV_FLASH
  209:         }
  210:     }
002262         ?C0016?DRV_FLASH:
002262 0F                INC      R7
002263 80C8              SJMP     ?C0014?DRV_FLASH
002265         ?C0015?DRV_FLASH:
  211: 
  212:     if (!bErase)
002265 20390B            JB       bErase,?C0018?DRV_FLASH
  213:     {
  214:         /* no need to erase,
  215:           * just write the new data into flash is OK.
  216:           */
  217:         drv_flash_WriteBytes(vDstAddr, (UINT16)pSrcAddr, vLen, FALSE);
002268 123357            LCALL    ?L?COM003D
00226B AF45              MOV      R7,vDstAddr+01H
00226D AE44              MOV      R6,vDstAddr
00226F 51EA              ACALL    _drv_flash_WriteBytes
  218:     }
002271 806E              SJMP     ?C0022?DRV_FLASH
002273         ?C0018?DRV_FLASH:
  219:     else
  220:     {
  221:         UINT16 vCacheAddr;
  222: 
  223:         /* prepare cache page content, to be the final flash page content:
  224:          *  1) copy other content into cache page;
  225:          *  2) update cache page with new data;
  226:          */
  227:         vCacheAddr  = FLASH_CACHE_PAGE;
002273 754C3A            MOV      vCacheAddr,#03AH
002276 754D00            MOV      vCacheAddr+01H,#00H
  228:         drv_flash_WriteBytes(vCacheAddr, vPageBase, vPageOffset, TRUE);
002279 D23A              SETB     ?_drv_flash_WriteBytes?BIT
00227B AB4B              MOV      R3,vPageOffset+01H
00227D AA4A              MOV      R2,vPageOffset
00227F AD49              MOV      R5,vPageBase+01H
002281 AC48              MOV      R4,vPageBase
002283 51E6              ACALL    ?L?COM0044
  229:         vCacheAddr += vPageOffset;
002285 E54B              MOV      A,vPageOffset+01H
002287 254D              ADD      A,vCacheAddr+01H
002289 F54D              MOV      vCacheAddr+01H,A
00228B E54A              MOV      A,vPageOffset
00228D 354C              ADDC     A,vCacheAddr
00228F F54C              MOV      vCacheAddr,A
  230:         drv_flash_WriteBytes(vCacheAddr, (UINT16)pSrcAddr, vLen, FALSE);
002291 123357            LCALL    ?L?COM003D
002294 51E6              ACALL    ?L?COM0044
  231:         vCacheAddr += vLen;
002296 E9                MOV      A,R1
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 49


002297 FF                MOV      R7,A
002298 7E00              MOV      R6,#00H
00229A 254D              ADD      A,vCacheAddr+01H
00229C F54D              MOV      vCacheAddr+01H,A
00229E EE                MOV      A,R6
00229F 354C              ADDC     A,vCacheAddr
0022A1 F54C              MOV      vCacheAddr,A
  232:         drv_flash_WriteBytes(vCacheAddr,
  233:                              vDstAddr + vLen,
  234:                              (FLASH_PAGE_SIZE-1) - (vPageOffset+vLen),
  235:                              TRUE);
0022A3 E545              MOV      A,vDstAddr+01H
0022A5 2F                ADD      A,R7
0022A6 FD                MOV      R5,A
0022A7 EE                MOV      A,R6
0022A8 3544              ADDC     A,vDstAddr
0022AA FC                MOV      R4,A
0022AB E54B              MOV      A,vPageOffset+01H
0022AD 2F                ADD      A,R7
0022AE FF                MOV      R7,A
0022AF EE                MOV      A,R6
0022B0 354A              ADDC     A,vPageOffset
0022B2 FE                MOV      R6,A
0022B3 C3                CLR      C
0022B4 74FF              MOV      A,#0FFH
0022B6 9F                SUBB     A,R7
0022B7 FB                MOV      R3,A
0022B8 7401              MOV      A,#01H
0022BA 9E                SUBB     A,R6
0022BB FA                MOV      R2,A
0022BC D23A              SETB     ?_drv_flash_WriteBytes?BIT
0022BE 51E6              ACALL    ?L?COM0044
  236: 
  237:         /* erase target flash page */
  238:         drv_flash_ErasePage(vPageBase);
0022C0 E4                CLR      A
0022C1 FB                MOV      R3,A
0022C2 7D03              MOV      R5,#03H
0022C4 AF49              MOV      R7,vPageBase+01H
0022C6 AE48              MOV      R6,vPageBase
0022C8 7144              ACALL    _drv_flash_Control
  239: 
  240:         /* copy cache page content into target flash page */
  241:         drv_flash_WriteBytes(vPageBase,
  242:                              FLASH_CACHE_PAGE,
  243:                              FLASH_PAGE_SIZE,
  244:                              TRUE);
0022CA D23A              SETB     ?_drv_flash_WriteBytes?BIT
0022CC 7A02              MOV      R2,#02H
0022CE 7D00              MOV      R5,#00H
0022D0 7C3A              MOV      R4,#03AH
0022D2 AF49              MOV      R7,vPageBase+01H
0022D4 AE48              MOV      R6,vPageBase
0022D6 51EA              ACALL    _drv_flash_WriteBytes
  245: 
  246:         /* erase flash cache page */
  247:         drv_flash_ErasePage(FLASH_CACHE_PAGE);
0022D8 E4                CLR      A
0022D9 FB                MOV      R3,A
0022DA 7D03              MOV      R5,#03H
0022DC FF                MOV      R7,A
0022DD 7E3A              MOV      R6,#03AH
0022DF 7144              ACALL    _drv_flash_Control
  248:     }
0022E1         ?C0022?DRV_FLASH:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 50


  249: 
  250:     /* restore interrupt status */
  251:     DRV_INT_UnlockGlobalInterrupt(bIntStatus);
0022E1 A238              MOV      C,bIntStatus
0022E3 92AF              MOV      EA,C
  252: }
0022E5 22                RET      
----- FUNCTION _DRV_FLASH_Update (END) -------


----- FUNCTION ?L?COM0044 (BEGIN) -----
0022E6 AF4D              MOV      R7,vCacheAddr+01H
0022E8 AE4C              MOV      R6,vCacheAddr
----- FUNCTION _drv_flash_WriteBytes (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  140: static void drv_flash_WriteBytes
  141: (
0022EA 8E4E              MOV      vDstAddr,R6
0022EC 8F4F              MOV      vDstAddr+01H,R7
0022EE 8C50              MOV      vSrcAddr,R4
0022F0 8D51              MOV      vSrcAddr+01H,R5
0022F2 8A52              MOV      vLen,R2
0022F4 8B53              MOV      vLen+01H,R3
  142:     IN UINT16     vDstAddr,
  143:     IN UINT16     vSrcAddr,
  144:     IN UINT16     vLen,
  145:     IN BOOL       bSrcFlash
  146: )
  147: {
  148:     for (; vLen-- != 0; vDstAddr++,vSrcAddr++)
0022F6         ?C0005?DRV_FLASH:
0022F6 E553              MOV      A,vLen+01H
0022F8 1553              DEC      vLen+01H
0022FA AE52              MOV      R6,vLen
0022FC 7002              JNZ      ?C0024?DRV_FLASH
0022FE 1552              DEC      vLen
002300         ?C0024?DRV_FLASH:
002300 4E                ORL      A,R6
002301 6040              JZ       ?C0011?DRV_FLASH
  149:     {
  150:         UINT8 vData = (bSrcFlash? CODE_U8(vSrcAddr) : XDATA_U8(vSrcAddr));
002303 303A0B            JNB      bSrcFlash,?C0008?DRV_FLASH
002306 855182            MOV      DPL,vSrcAddr+01H
002309 855083            MOV      DPH,vSrcAddr
00230C E4                CLR      A
00230D 93                MOVC     A,@A+DPTR
00230E FF                MOV      R7,A
00230F 8008              SJMP     ?C0009?DRV_FLASH
002311         ?C0008?DRV_FLASH:
002311 855182            MOV      DPL,vSrcAddr+01H
002314 855083            MOV      DPH,vSrcAddr
002317 E0                MOVX     A,@DPTR
002318 FF                MOV      R7,A
002319         ?C0009?DRV_FLASH:
002319 8F54              MOV      vData,R7
  151:         if (CODE_U8(vDstAddr) != vData)
00231B 854F82            MOV      DPL,vDstAddr+01H
00231E 854E83            MOV      DPH,vDstAddr
002321 E4                CLR      A
002322 93                MOVC     A,@A+DPTR
002323 6554              XRL      A,vData
002325 600A              JZ       ?C0007?DRV_FLASH
  152:         {
  153:             drv_flash_WriteByte(vDstAddr, vData);
002327 AB54              MOV      R3,vData
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 51


002329 7D01              MOV      R5,#01H
00232B AF4F              MOV      R7,vDstAddr+01H
00232D AE4E              MOV      R6,vDstAddr
00232F 7144              ACALL    _drv_flash_Control
  154:         }
  155:     }
002331         ?C0007?DRV_FLASH:
002331 054F              INC      vDstAddr+01H
002333 E54F              MOV      A,vDstAddr+01H
002335 7002              JNZ      ?C0025?DRV_FLASH
002337 054E              INC      vDstAddr
002339         ?C0025?DRV_FLASH:
002339 0551              INC      vSrcAddr+01H
00233B E551              MOV      A,vSrcAddr+01H
00233D 7002              JNZ      ?C0026?DRV_FLASH
00233F 0550              INC      vSrcAddr
002341         ?C0026?DRV_FLASH:
002341 80B3              SJMP     ?C0005?DRV_FLASH
  156: }
002343         ?C0011?DRV_FLASH:
002343 22                RET      
----- FUNCTION _drv_flash_WriteBytes (END) -------


----- FUNCTION _drv_flash_Control (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
   60: static void drv_flash_Control(UINT16 vFlashAddr, UINT8 vPSCTL, UINT8 vData)
   61: {
002344 8E55              MOV      vFlashAddr,R6
002346 8F56              MOV      vFlashAddr+01H,R7
;---- Variable 'vData' assigned to Register 'R3' ----
;---- Variable 'vPSCTL' assigned to Register 'R5' ----
   62:   #if DRV_WATCHDOG_SUPPORT
   63:     /* kick watchdog, to prevent watchdog reset MCU */
   64:     DRV_WATCHDOG_Kick();
   65:   #endif
   66: 
   67:     /* Force Enable VDD Monitor as a reset source */
   68:     DRV_RESET_EnableVDDMonitor();
002348 75FF80            MOV      VDM0CN,#080H
00234B 75EF06            MOV      RSTSRC,#06H
   69: 
   70:     /* enable flash erase/write */
   71:     PSCTL = vPSCTL;
00234E 8D8F              MOV      PSCTL,R5
   72: 
   73:     /* write KEYs to unlock flash */
   74:     FLKEY = FLASH_KEY_1;
002350 A2AF              MOV      C,EA
002352 E4                CLR      A
002353 33                RLC      A
002354 24A5              ADD      A,#0A5H
002356 F5B7              MOV      FLKEY,A
   75:     FLKEY = FLASH_KEY_2;
002358 75B7F1            MOV      FLKEY,#0F1H
   76: 
   77:     /* write data into flash */
   78:     XDATA_U8(vFlashAddr) = vData;
00235B 855682            MOV      DPL,vFlashAddr+01H
00235E 855583            MOV      DPH,vFlashAddr
002361 EB                MOV      A,R3
002362 F0                MOVX     @DPTR,A
   79: 
   80:     /* disable flash erase/write */
   81:     PSCTL = 0x00;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 52


002363 E4                CLR      A
002364 F58F              MOV      PSCTL,A
   82: }
002366 22                RET      
----- FUNCTION _drv_flash_Control (END) -------


----- FUNCTION CFG_PWD_RefreshLevel (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   38: void CFG_PWD_RefreshLevel(void)
   39: {
   40:     UINT32  vPasswd = CFG_GET(Vendor_PWD_Entry);
   41: 
002367 7F1B              MOV      R7,#01BH
002369 7E00              MOV      R6,#00H
00236B F119              ACALL    _CFG_RAM_GET32
00236D 8F47              MOV      vPasswd+03H,R7
00236F 8E46              MOV      vPasswd+02H,R6
002371 8D45              MOV      vPasswd+01H,R5
002373 8C44              MOV      vPasswd,R4
   42:     switch (vPasswd)
002375 1206CA            LCALL    ?C?LCASE
002378 238E              DW       ?C0005?CFG_PWD
00237A F626              DW       0F626H
00237C 52A7              DW       052A7H
00237E 2396              DW       ?C0013?CFG_PWD
002380 FC54              DW       0FC54H
002382 D402              DW       0D402H
002384 2392              DW       ?C0009?CFG_PWD
002386 FDE7              DW       0FDE7H
002388 554F              DW       0554FH
00238A 0000              DW       00H
00238C 239A              DW       ?C0014?CFG_PWD
   43:     {
   44:         case CFG_PWD_REBOOT:    /* reboot password */
00238E         ?C0005?CFG_PWD:
   45:             DRV_RESET_SoftwareReset();
00238E 75EF12            MOV      RSTSRC,#012H
   46:             break;
002391 22                RET      
   47: 
   48:         case CFG_PWD_FACTORY:   /* factory password */
002392         ?C0009?CFG_PWD:
   49:             PWD_LEVEL_SET(CFG_PWD_LEVEL_FACTORY);
002392 751508            MOV      vCfgPwdLevel,#08H
   50:             break;
002395 22                RET      
   51: 
   52:         case CFG_PWD_OEM:       /* OEM password */
002396         ?C0013?CFG_PWD:
   53:             PWD_LEVEL_SET(CFG_PWD_LEVEL_OEM);
002396 751504            MOV      vCfgPwdLevel,#04H
   54:             break;
002399 22                RET      
   55: 
   56:         default:
00239A         ?C0014?CFG_PWD:
   57:             if (vPasswd == CFG_GET(Vendor_PWD_UserRW))
00239A 7F7C              MOV      R7,#07CH
00239C 123316            LCALL    ?L?COM0038
00239F 7004              JNZ      ?C0015?CFG_PWD
   58:             {
   59:                 /* UserRW password */
   60:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRW);
0023A1 751502            MOV      vCfgPwdLevel,#02H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 53


   61:             }
0023A4 22                RET      
0023A5         ?C0015?CFG_PWD:
   62:             else if (vPasswd == CFG_GET(Vendor_PWD_UserRO))
0023A5 7F78              MOV      R7,#078H
0023A7 123316            LCALL    ?L?COM0038
0023AA 7004              JNZ      ?C0027?CFG_PWD
   63:             {
   64:                 /* UserRO password */
   65:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRO);
0023AC 751501            MOV      vCfgPwdLevel,#01H
   66:             }
0023AF 22                RET      
   67:             else
   68:             {
0023B0         ?C0027?CFG_PWD:
   69:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_NORMAL);
0023B0 E4                CLR      A
0023B1 F515              MOV      vCfgPwdLevel,A
   70:             }
   71:             break;
   72:     }
   73: }
0023B3 22                RET      
----- FUNCTION CFG_PWD_RefreshLevel (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  328: UINT16 PKT_I2CM_Inspect(void)
  329: {
  330:     _pkt_i2cm_Init();
  331: 
0023B4 12311D            LCALL    ?L?COM000D
0023B7 D282              SETB     IO_DUT_I2CM_SCL
0023B9 753301            MOV      _loop,#01H
0023BC 7534F4            MOV      _loop+01H,#0F4H
0023BF         ?C0351?PKT_I2CM:
0023BF 208212            JB       IO_DUT_I2CM_SCL,?C0355?PKT_I2CM
0023C2 E534              MOV      A,_loop+01H
0023C4 1534              DEC      _loop+01H
0023C6 AE33              MOV      R6,_loop
0023C8 7002              JNZ      ?C0394?PKT_I2CM
0023CA 1533              DEC      _loop
0023CC         ?C0394?PKT_I2CM:
0023CC 4E                ORL      A,R6
0023CD 6005              JZ       ?C0355?PKT_I2CM
0023CF 121A3A            LCALL    ?L?COM0008
0023D2 80EB              SJMP     ?C0351?PKT_I2CM
0023D4         ?C0355?PKT_I2CM:
0023D4 D292              SETB     IO_DUT_I2CM_SDA
  332:     PKT_SetPayloadSize(0x00);
0023D6 1232CC            LCALL    ?L?COM002E
  333:     return PKT_REPLY_Done_ExecNoError;
0023D9 7E01              MOV      R6,#01H
0023DB 7F40              MOV      R7,#040H
  334: }
0023DD 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION CFG_PWD_Init (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   90: void CFG_PWD_Init(void)
   91: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 54


   92:     /* set default password */
   93:     CFG_SET(Vendor_PWD_Entry, CFG_PWD_DEFAULT);
0023DE         ?C0045?CFG_PWD:
0023DE E4                CLR      A
0023DF F531              MOV      ?_CFG_RAM_SET32?BYTE+05H,A
0023E1 F530              MOV      ?_CFG_RAM_SET32?BYTE+04H,A
0023E3 F52F              MOV      ?_CFG_RAM_SET32?BYTE+03H,A
0023E5 F52E              MOV      ?_CFG_RAM_SET32?BYTE+02H,A
0023E7 7F1B              MOV      R7,#01BH
0023E9 FE                MOV      R6,A
0023EA F143              ACALL    _CFG_RAM_SET32
0023EC         ?C0030?CFG_PWD:
   94: 
   95:     /* refresh password level */
   96:     CFG_PWD_RefreshLevel();
0023EC 6167              AJMP     CFG_PWD_RefreshLevel
----- FUNCTION CFG_PWD_Init (END) -------


----- FUNCTION _CFG_DB_ReadByte (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   95: UINT8 CFG_DB_ReadByte(IN UINT8 vOffset)
   96: {
;---- Variable 'vOffset' assigned to Register 'R5' ----
0023EE AD07              MOV      R5,AR7
   97:     SINT8   vPID = cfg_db_GetPID(vOffset);
   98:     UINT8   vPageSize;
0023F0 91A3              ACALL    _cfg_db_GetPID
;---- Variable 'vPID' assigned to Register 'R6' ----
0023F2 AE07              MOV      R6,AR7
   99: 
  100:     if (vPID == MEMPAGE_PID_INVALID)
0023F4 BEFF03            CJNE     R6,#0FFH,?C0020?CFG_DB
  101:     {
  102:         /* invalid page */
  103:         return (UINT8)I2CS_INVALID_DATA;
0023F7 7FAA              MOV      R7,#0AAH
0023F9 22                RET      
  104:     }
0023FA         ?C0020?CFG_DB:
  105: 
  106:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
0023FA C3                CLR      C
0023FB EE                MOV      A,R6
0023FC 6480              XRL      A,#080H
0023FE 9481              SUBB     A,#081H
002400 400C              JC       ?C0022?CFG_DB
002402 D3                SETB     C
002403 EE                MOV      A,R6
002404 6480              XRL      A,#080H
002406 9482              SUBB     A,#082H
002408 5004              JNC      ?C0022?CFG_DB
00240A 7F20              MOV      R7,#020H
00240C 8002              SJMP     ?C0023?CFG_DB
00240E         ?C0022?CFG_DB:
00240E 7F80              MOV      R7,#080H
002410         ?C0023?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  107:     vOffset  &= (vPageSize - 1);
002410 EF                MOV      A,R7
002411 14                DEC      A
002412 5205              ANL      AR5,A
  108: 
  109:     /* check password level, to make sure it's readable */
  110:     if (CFG_PWD_GetLevel() >= aPagePwdReadTable[vPID])
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 55


002414 EE                MOV      A,R6
002415 FB                MOV      R3,A
002416 33                RLC      A
002417 95E0              SUBB     A,ACC
002419 FA                MOV      R2,A
00241A 741E              MOV      A,#LOW aPagePwdReadTable
00241C 2B                ADD      A,R3
00241D F582              MOV      DPL,A
00241F 7416              MOV      A,#HIGH aPagePwdReadTable
002421 3A                ADDC     A,R2
002422 123440            LCALL    ?L?COM0059
002425 9F                SUBB     A,R7
002426 4078              JC       ?C0024?CFG_DB
  111:     {
  112:         /* password check pass */
  113:         switch (vPID)
002428 EE                MOV      A,R6
002429 6014              JZ       ?C0033?CFG_DB
00242B 14                DEC      A
00242C 7027              JNZ      ?C0025?CFG_DB
  114:         {
  115:             case MEMPAGE_PID_DIRECT_FE_60:
00242E         ?C0026?CFG_DB:
  116:                 switch (vOffset)
00242E ED                MOV      A,R5
00242F 24E5              ADD      A,#0E5H
002431 24FD              ADD      A,#0FDH
002433 5004              JNC      ?C0030?CFG_DB
002435 6005              JZ       ?C0031?CFG_DB
002437 801C              SJMP     ?C0025?CFG_DB
  117:                 {
  118:                     /* for security reason,
  119:                      *  the password entry is write-only field.
  120:                      */
  121:                     case CFG(Vendor_PWD_Entry)+0:
  122:                     case CFG(Vendor_PWD_Entry)+1:
  123:                     case CFG(Vendor_PWD_Entry)+2: return 0x00;
002439         ?C0030?CFG_DB:
002439 7F00              MOV      R7,#00H
00243B 22                RET      
  124:                     case CFG(Vendor_PWD_Entry)+3: return CFG_PWD_GetLevel();
00243C         ?C0031?CFG_DB:
00243C AF15              MOV      R7,vCfgPwdLevel
00243E 22                RET      
  125: 
  126:                     default:
  127:                         break;
  128:                 }
  129:                 break;
  130: 
  131:             case MEMPAGE_PID_EXTEND_FE_FF:
00243F         ?C0033?CFG_DB:
  132:                 return (((vOffset >= CFG_HEAD(Vendor_FwVersion))
  133:                             && (vOffset <= CFG_TAIL(Vendor_FwVersion)))?
  134:                         FW_VERSION(vOffset-CFG_HEAD(Vendor_FwVersion)):
  135:                         (UINT8)I2CS_INVALID_DATA);
00243F ED                MOV      A,R5
002440 C3                CLR      C
002441 9478              SUBB     A,#078H
002443 400D              JC       ?C0034?CFG_DB
002445 ED                MOV      A,R5
002446 D3                SETB     C
002447 947F              SUBB     A,#07FH
002449 5007              JNC      ?C0034?CFG_DB
00244B ED                MOV      A,R5
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 56


00244C 900170            MOV      DPTR,#__sig-070H
00244F 93                MOVC     A,@A+DPTR
002450 FF                MOV      R7,A
002451 22                RET      
002452         ?C0034?CFG_DB:
002452 7FAA              MOV      R7,#0AAH
002454 22                RET      
  136: 
  137:             default:
  138:                 break;
  139:         }
002455         ?C0025?CFG_DB:
  140: 
  141:         return CFG_GETV8(vPID, vOffset);
002455 C3                CLR      C
002456 EE                MOV      A,R6
002457 6480              XRL      A,#080H
002459 9481              SUBB     A,#081H
00245B 4014              JC       ?C0037?CFG_DB
00245D D3                SETB     C
00245E EE                MOV      A,R6
00245F 6480              XRL      A,#080H
002461 9482              SUBB     A,#082H
002463 500C              JNC      ?C0037?CFG_DB
002465 EE                MOV      A,R6
002466 14                DEC      A
002467 C4                SWAP     A
002468 33                RLC      A
002469 54E0              ANL      A,#0E0H
00246B 2D                ADD      A,R5
00246C F8                MOV      R0,A
00246D E2                MOVX     A,@R0
00246E FF                MOV      R7,A
00246F 802E              SJMP     ?C0038?CFG_DB
002471         ?C0037?CFG_DB:
002471 C3                CLR      C
002472 EE                MOV      A,R6
002473 6480              XRL      A,#080H
002475 9483              SUBB     A,#083H
002477 4024              JC       ?C0039?CFG_DB
002479 D3                SETB     C
00247A EE                MOV      A,R6
00247B 6480              XRL      A,#080H
00247D 9486              SUBB     A,#086H
00247F 501C              JNC      ?C0039?CFG_DB
002481 AF06              MOV      R7,AR6
002483 123437            LCALL    ?L?COM0058
002486         ?C0091?CFG_DB:
002486 C3                CLR      C
002487 33                RLC      A
002488 CE                XCH      A,R6
002489 33                RLC      A
00248A CE                XCH      A,R6
00248B D8F9              DJNZ     R0,?C0091?CFG_DB
00248D 1233AD            LCALL    ?L?COM0047
002490 2D                ADD      A,R5
002491 FF                MOV      R7,A
002492 EC                MOV      A,R4
002493 3E                ADDC     A,R6
002494 8F82              MOV      DPL,R7
002496 F583              MOV      DPH,A
002498 E4                CLR      A
002499 93                MOVC     A,@A+DPTR
00249A FF                MOV      R7,A
00249B 8002              SJMP     ?C0040?CFG_DB
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 57


00249D         ?C0039?CFG_DB:
00249D 7FAA              MOV      R7,#0AAH
00249F         ?C0040?CFG_DB:
00249F         ?C0038?CFG_DB:
00249F 22                RET      
  142:     }
0024A0         ?C0024?CFG_DB:
  143:     else
  144:     {
  145:         /* password check fail */
  146:         return (UINT8)I2CS_INVALID_DATA;
0024A0 7FAA              MOV      R7,#0AAH
  147:     }
  148: }
0024A2 22                RET      
----- FUNCTION _CFG_DB_ReadByte (END) -------


----- FUNCTION _cfg_db_GetPID (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   42: static SINT8 cfg_db_GetPID(IN UINT8 vOffset)
   43: {
;---- Variable 'vOffset' assigned to Register 'R7' ----
   44:     if (vOffset < MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
   45:     {
0024A3 EF                MOV      A,R7
0024A4 C3                CLR      C
0024A5 9460              SUBB     A,#060H
0024A7 5003              JNC      ?C0007?CFG_DB
   46:         return MEMPAGE_PID_DIRECT_FE_00;
   47:     }
0024A9 7F06              MOV      R7,#06H
0024AB 22                RET      
   48:     else if (vOffset < I2CS_PAGE_SIZE)
0024AC         ?C0007?CFG_DB:
   49:     {
0024AC EF                MOV      A,R7
0024AD C3                CLR      C
0024AE 9480              SUBB     A,#080H
0024B0 5003              JNC      ?C0010?CFG_DB
   50:         return MEMPAGE_PID_DIRECT_FE_60;
   51:     }
0024B2 7F01              MOV      R7,#01H
0024B4 22                RET      
   52:     else
0024B5         ?C0010?CFG_DB:
   53:     {
   54:         switch (CFG_GET8(Vendor_Page_Select))
0024B5 781F              MOV      R0,#01FH
0024B7 E2                MOVX     A,@R0
0024B8 2480              ADD      A,#080H
0024BA 6017              JZ       ?C0015?CFG_DB
0024BC 14                DEC      A
0024BD 6017              JZ       ?C0016?CFG_DB
0024BF 14                DEC      A
0024C0 6017              JZ       ?C0017?CFG_DB
0024C2 2483              ADD      A,#083H
0024C4 6016              JZ       ?C0018?CFG_DB
0024C6 243F              ADD      A,#03FH
0024C8 7015              JNZ      ?C0009?CFG_DB
   55:         {
   56:             /* RAM pages */
   57:             case 0xC0:
0024CA         ?C0013?CFG_DB:
   58:                 if (vOffset < I2CS_PAGE_SIZE+CFG_RAM_PAGE_SIZE)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 58


0024CA EF                MOV      A,R7
0024CB C3                CLR      C
0024CC 94A0              SUBB     A,#0A0H
0024CE 500F              JNC      ?C0009?CFG_DB
   59:                 {
   60:                     return MEMPAGE_PID_EXTEND_FE_C0;
0024D0 7F02              MOV      R7,#02H
0024D2 22                RET      
   61:                 }
   62:                 break;
   63: 
   64:             /* ROM pages */
   65:             case 0x80: return MEMPAGE_PID_EXTEND_FE_80;
0024D3         ?C0015?CFG_DB:
0024D3 7F03              MOV      R7,#03H
0024D5 22                RET      
   66:             case 0x81: return MEMPAGE_PID_EXTEND_FE_81;
0024D6         ?C0016?CFG_DB:
0024D6 7F04              MOV      R7,#04H
0024D8 22                RET      
   67:             case 0x82: return MEMPAGE_PID_EXTEND_FE_82;
0024D9         ?C0017?CFG_DB:
0024D9 7F05              MOV      R7,#05H
0024DB 22                RET      
   68: 
   69:             /* virtual pages */
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
0024DC         ?C0018?CFG_DB:
0024DC 7F00              MOV      R7,#00H
0024DE 22                RET      
   71: 
   72:             default:
   73:                 break;
   74:         }
   75:     }
0024DF         ?C0009?CFG_DB:
   76: 
   77:     return MEMPAGE_PID_INVALID;
0024DF 7FFF              MOV      R7,#0FFH
   78: }
0024E1 22                RET      
----- FUNCTION _cfg_db_GetPID (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   33: UINT16 PKT_MDIOM_Probe(void)
   34: {
   35:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   36:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
0024E2 90004C            MOV      DPTR,#vFrame+0CH
   37: 
   38:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
0024E5 E0                MOVX     A,@DPTR
0024E6 FF                MOV      R7,A
0024E7 A3                INC      DPTR
0024E8 E0                MOVX     A,@DPTR
0024E9 FD                MOV      R5,A
0024EA 7A04              MOV      R2,#HIGH vData
0024EC 7BEA              MOV      R3,#LOW vData
0024EE 91F9              ACALL    _DRV_MDIOM_FrameRead
0024F0 7E01              MOV      R6,#01H
0024F2 4002              JC       ?C0005?PKT_MDIOM
   39:                              pPayload->vDevAddr,
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 59


   40:                              &vData))
   41:     {
   42:         return PKT_REPLY_Fail_MdioNoAck;
0024F4 7E03              MOV      R6,#03H
   43:     }
0024F6         ?C0005?PKT_MDIOM:
   44: 
   45:     return PKT_REPLY_Done_ExecNoError;
0024F6 7F40              MOV      R7,#040H
   46: }
0024F8 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  516: BOOL DRV_MDIOM_FrameRead
  517: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
0024F9 8B82              MOV      DPL,R3
0024FB 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  518:     IN  UINT8               vPortAddr,
  519:     IN  UINT8               vDevAddr,
  520:     OUT UINT16 SEG_XDATA   *pData
  521: )
  522: {
  523:     BOOL    bIntState;
  524: 
  525:     /* create MDIO frame: Read */
  526:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
0024FD B187              ACALL    _drv_mdiom_CreateReadFrame
  527: 
  528:     /* lock globally interrupt */
  529:     bIntState = DRV_INT_LockGlobalInterrupt();
0024FF 30AF05            JNB      EA,?C2483?DRV_MDIOM
002502 C2AF              CLR      EA
002504 D3                SETB     C
002505 8001              SJMP     ?C2484?DRV_MDIOM
002507         ?C2483?DRV_MDIOM:
002507 C3                CLR      C
002508         ?C2484?DRV_MDIOM:
002508 9238              MOV      bIntState,C
  530: 
  531:     /* transmit frame: Read */
  532:     drv_mdiom_RxDataFrame();
00250A B118              ACALL    drv_mdiom_RxDataFrame
  533: 
  534:     /* unlock globally interrupt */
  535:     DRV_INT_UnlockGlobalInterrupt(bIntState);
00250C A238              MOV      C,bIntState
00250E 12330A            LCALL    ?L?COM0036
002511 4003              JC       ?C2488?DRV_MDIOM
002513 D3                SETB     C
002514 8001              SJMP     ?C2489?DRV_MDIOM
002516         ?C2488?DRV_MDIOM:
002516 C3                CLR      C
002517         ?C2489?DRV_MDIOM:
  536: 
  537:     /* check read status */
  538:     *pData = vMdioData;
  539:     return drv_mdiom_IsReadSuccess();
  540: }
002517 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 60


----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  332: static void drv_mdiom_RxDataFrame(void)
  333: {
  334:     drv_mdiom_StartFrame();
  335:     drv_mdiom_TxPreamble();
002518 122F92            LCALL    ?L?COM0001
00251B 122FE0            LCALL    ?L?COM0002
00251E 123039            LCALL    ?L?COM0003
  336:     drv_mdiom_TxStartFrame();
  337:     drv_mdiom_TxOperationCode();
  338:     drv_mdiom_TxPortAddress();
  339:     drv_mdiom_TxDeviceAddress();
  340:     drv_mdiom_RxTurnAround();
002521 00                NOP      
002522 00                NOP      
002523 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002525 D294              SETB     IO_DUT_MDIOM_SDA_OUT
002527 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002529 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
00252B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00252D 00                NOP      
00252E 00                NOP      
00252F 12316C            LCALL    ?L?COM0011
002532 9200              MOV      bMdioTurnAround0,C
  341:     drv_mdiom_RxData();
002534 12316C            LCALL    ?L?COM0011
002537 9227              MOV      bMdioData15,C
002539 12316C            LCALL    ?L?COM0011
00253C 9226              MOV      bMdioData14,C
00253E 12316C            LCALL    ?L?COM0011
002541 9225              MOV      bMdioData13,C
002543 12316C            LCALL    ?L?COM0011
002546 9224              MOV      bMdioData12,C
002548 12316C            LCALL    ?L?COM0011
00254B 9223              MOV      bMdioData11,C
00254D 12316C            LCALL    ?L?COM0011
002550 9222              MOV      bMdioData10,C
002552 12316C            LCALL    ?L?COM0011
002555 9221              MOV      bMdioData9,C
002557 12316C            LCALL    ?L?COM0011
00255A 9220              MOV      bMdioData8,C
00255C 12316C            LCALL    ?L?COM0011
00255F 922F              MOV      bMdioData7,C
002561 12316C            LCALL    ?L?COM0011
002564 922E              MOV      bMdioData6,C
002566 12316C            LCALL    ?L?COM0011
002569 922D              MOV      bMdioData5,C
00256B 12316C            LCALL    ?L?COM0011
00256E 922C              MOV      bMdioData4,C
002570 12316C            LCALL    ?L?COM0011
002573 922B              MOV      bMdioData3,C
002575 12316C            LCALL    ?L?COM0011
002578 922A              MOV      bMdioData2,C
00257A 12316C            LCALL    ?L?COM0011
00257D 9229              MOV      bMdioData1,C
00257F 12316C            LCALL    ?L?COM0011
002582 9228              MOV      bMdioData0,C
  342:     drv_mdiom_StopFrame();
002584 0232E4            LJMP     ?L?COM0031
  343: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 61




----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  378: static void drv_mdiom_CreateReadFrame
  379: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  380:     IN UINT8    vPortAddr,
  381:     IN UINT8    vDevAddr
  382: )
  383: {
  384:     drv_mdiom_SetStartFrame(0, 0);
002587 C20F              CLR      bMdioStartFrame1
002589 C20E              CLR      bMdioStartFrame0
  385:     drv_mdiom_SetOperationCode(1, 1);
00258B D20D              SETB     bMdioOperationCode1
00258D D20C              SETB     bMdioOperationCode0
  386:     drv_mdiom_SetPortAddress(vPortAddr);
00258F 1230B2            LCALL    ?L?COM0006
002592 0233CB            LJMP     ?L?COM004B
  387:     drv_mdiom_SetDeviceAddress(vDevAddr);
  388:     drv_mdiom_SetTurnAround(1, 1);
  389:     drv_mdiom_SetData(0xFFFF);
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  611: BOOL DRV_MDIOM_Read
  612: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  613:     IN  UINT8               vPortAddr,
  614:     IN  UINT8               vDevAddr,
  615:     IN  UINT16              vRegAddr,
  616:     IN  UINT16              vDataLen,
  617:     OUT UINT16 SEG_XDATA   *pDataBuf
  618: )
  619: {
  620:     BOOL    bResult = TRUE;
002595 D238              SETB     bResult
  621:     BOOL    bIntState;
  622: 
  623:     /* create MDIO frame: Address */
  624:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002597 D147              ACALL    _drv_mdiom_CreateAddrFrame
  625: 
  626:     /* lock globally interrupt */
  627:     bIntState = DRV_INT_LockGlobalInterrupt();
002599 30AF05            JNB      EA,?C2499?DRV_MDIOM
00259C C2AF              CLR      EA
00259E D3                SETB     C
00259F 8001              SJMP     ?C2500?DRV_MDIOM
0025A1         ?C2499?DRV_MDIOM:
0025A1 C3                CLR      C
0025A2         ?C2500?DRV_MDIOM:
0025A2 9239              MOV      bIntState,C
  628: 
  629:     /* transmit frame: Address */
  630:     drv_mdiom_TxAddrFrame();
0025A4 B1DF              ACALL    drv_mdiom_TxAddrFrame
  631: 
  632:     /* create MDIO frame: Post-Read-Increment-Address */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 62


  633:     drv_mdiom_SetOperationCode(1, 0);
0025A6 D20D              SETB     bMdioOperationCode1
0025A8 C20C              CLR      bMdioOperationCode0
0025AA         ?C2504?DRV_MDIOM:
  634: 
  635:     /* transmit frame: Post-Read-Increment-Address */
  636:     while (vDataLen-- != 0)
0025AA E53A              MOV      A,vDataLen+01H
0025AC 153A              DEC      vDataLen+01H
0025AE AE39              MOV      R6,vDataLen
0025B0 7002              JNZ      ?C2544?DRV_MDIOM
0025B2 1539              DEC      vDataLen
0025B4         ?C2544?DRV_MDIOM:
0025B4 4E                ORL      A,R6
0025B5 6021              JZ       ?C2511?DRV_MDIOM
  637:     {
  638:         drv_mdiom_RxDataFrame();
0025B7 B118              ACALL    drv_mdiom_RxDataFrame
  639: 
  640:         /* check read status */
  641:         *pDataBuf++ = vMdioData;
0025B9 E53C              MOV      A,pDataBuf+01H
0025BB FF                MOV      R7,A
0025BC 2402              ADD      A,#02H
0025BE F53C              MOV      pDataBuf+01H,A
0025C0 E53B              MOV      A,pDataBuf
0025C2 FE                MOV      R6,A
0025C3 3400              ADDC     A,#00H
0025C5 F53B              MOV      pDataBuf,A
0025C7 8F82              MOV      DPL,R7
0025C9 8E83              MOV      DPH,R6
0025CB 12330C            LCALL    ?L?COM0037
0025CE 4003              JC       ?C2507?DRV_MDIOM
0025D0 D3                SETB     C
0025D1 8001              SJMP     ?C2508?DRV_MDIOM
0025D3         ?C2507?DRV_MDIOM:
0025D3 C3                CLR      C
0025D4         ?C2508?DRV_MDIOM:
0025D4 40D4              JC       ?C2504?DRV_MDIOM
  642:         if (!drv_mdiom_IsReadSuccess())
  643:         {
  644:             bResult = FALSE;
0025D6 C238              CLR      bResult
  645:             break;
  646:         }
  647:     }
0025D8         ?C2511?DRV_MDIOM:
  648: 
  649:     /* unlock globally interrupt */
  650:     DRV_INT_UnlockGlobalInterrupt(bIntState);
0025D8 A239              MOV      C,bIntState
0025DA 92AF              MOV      EA,C
  651: 
  652:     return bResult;
0025DC A238              MOV      C,bResult
  653: }
0025DE 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  306: static void drv_mdiom_TxAddrFrame(void)
  307: {
  308:     drv_mdiom_StartFrame();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 63


  309:     drv_mdiom_TxPreamble();
0025DF 122F92            LCALL    ?L?COM0001
0025E2 122FE0            LCALL    ?L?COM0002
0025E5 123039            LCALL    ?L?COM0003
  310:     drv_mdiom_TxStartFrame();
  311:     drv_mdiom_TxOperationCode();
  312:     drv_mdiom_TxPortAddress();
  313:     drv_mdiom_TxDeviceAddress();
  314:     drv_mdiom_TxTurnAround();
0025E8 A201              MOV      C,bMdioTurnAround1
0025EA 1230A9            LCALL    ?L?COM0004
0025ED A200              MOV      C,bMdioTurnAround0
0025EF 1230A9            LCALL    ?L?COM0004
  315:     drv_mdiom_TxAddr();
0025F2 A217              MOV      C,bMdioAddr15
0025F4 1230A9            LCALL    ?L?COM0004
0025F7 A216              MOV      C,bMdioAddr14
0025F9 1230A9            LCALL    ?L?COM0004
0025FC A215              MOV      C,bMdioAddr13
0025FE 1230A9            LCALL    ?L?COM0004
002601 A214              MOV      C,bMdioAddr12
002603 1230A9            LCALL    ?L?COM0004
002606 A213              MOV      C,bMdioAddr11
002608 1230A9            LCALL    ?L?COM0004
00260B A212              MOV      C,bMdioAddr10
00260D 1230A9            LCALL    ?L?COM0004
002610 A211              MOV      C,bMdioAddr9
002612 1230A9            LCALL    ?L?COM0004
002615 A210              MOV      C,bMdioAddr8
002617 1230A9            LCALL    ?L?COM0004
00261A A21F              MOV      C,bMdioAddr7
00261C 1230A9            LCALL    ?L?COM0004
00261F A21E              MOV      C,bMdioAddr6
002621 1230A9            LCALL    ?L?COM0004
002624 A21D              MOV      C,bMdioAddr5
002626 1230A9            LCALL    ?L?COM0004
002629 A21C              MOV      C,bMdioAddr4
00262B 1230A9            LCALL    ?L?COM0004
00262E A21B              MOV      C,bMdioAddr3
002630 1230A9            LCALL    ?L?COM0004
002633 A21A              MOV      C,bMdioAddr2
002635 1230A9            LCALL    ?L?COM0004
002638 A219              MOV      C,bMdioAddr1
00263A 1230A9            LCALL    ?L?COM0004
00263D A218              MOV      C,bMdioAddr0
00263F 1230A9            LCALL    ?L?COM0004
002642 00                NOP      
002643 00                NOP      
  316:     drv_mdiom_StopFrame();
002644 0232E4            LJMP     ?L?COM0031
  317: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  346: static void drv_mdiom_CreateAddrFrame
  347: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  348:     IN UINT8    vPortAddr,
  349:     IN UINT8    vDevAddr,
  350:     IN UINT16   vRegAddr
  351: )
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 64


  352: {
  353:     drv_mdiom_SetStartFrame(0, 0);
002647 C20F              CLR      bMdioStartFrame1
002649 C20E              CLR      bMdioStartFrame0
  354:     drv_mdiom_SetOperationCode(0, 0);
00264B C20D              CLR      bMdioOperationCode1
00264D 1230B0            LCALL    ?L?COM0005
002650 C200              CLR      bMdioTurnAround0
  355:     drv_mdiom_SetPortAddress(vPortAddr);
  356:     drv_mdiom_SetDeviceAddress(vDevAddr);
  357:     drv_mdiom_SetTurnAround(1, 0);
  358:     drv_mdiom_SetAddr(vRegAddr);
002652 8A22              MOV      vMdioAddr,R2
002654 8B23              MOV      vMdioAddr+01H,R3
  359: }
002656 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------


----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  675: BOOL DRV_MDIOM_Write
  676: (
002657 8A37              MOV      vRegAddr,R2
002659 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
00265B AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
00265D AC07              MOV      R4,AR7
  677:     IN       UINT8              vPortAddr,
  678:     IN       UINT8              vDevAddr,
  679:     IN       UINT16             vRegAddr,
  680:     IN       UINT16             vDataLen,
  681:     IN const UINT16 SEG_XDATA  *pDataBuf
  682: )
  683: {
  684:     BOOL    bIntState;
  685: 
  686:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
00265F         ?C2513?DRV_MDIOM:
00265F E53A              MOV      A,vDataLen+01H
002661 153A              DEC      vDataLen+01H
002663 AA39              MOV      R2,vDataLen
002665 7002              JNZ      ?C2545?DRV_MDIOM
002667 1539              DEC      vDataLen
002669         ?C2545?DRV_MDIOM:
002669 4A                ORL      A,R2
00266A 6043              JZ       ?C2514?DRV_MDIOM
  687:     {
  688:         /* prepare MDIO data */
  689:         drv_mdiom_SetData(*pDataBuf);
00266C 853C82            MOV      DPL,pDataBuf+01H
00266F 853B83            MOV      DPH,pDataBuf
002672 E0                MOVX     A,@DPTR
002673 F524              MOV      vMdioData,A
002675 A3                INC      DPTR
002676 E0                MOVX     A,@DPTR
002677 F525              MOV      vMdioData+01H,A
  690: 
  691:         /* create MDIO frame: Address */
  692:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002679 AF04              MOV      R7,AR4
00267B AD06              MOV      R5,AR6
00267D AB38              MOV      R3,vRegAddr+01H
00267F AA37              MOV      R2,vRegAddr
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 65


002681 D147              ACALL    _drv_mdiom_CreateAddrFrame
  693: 
  694:         /* lock globally interrupt */
  695:         bIntState = DRV_INT_LockGlobalInterrupt();
002683 30AF05            JNB      EA,?C2519?DRV_MDIOM
002686 C2AF              CLR      EA
002688 D3                SETB     C
002689 8001              SJMP     ?C2520?DRV_MDIOM
00268B         ?C2519?DRV_MDIOM:
00268B C3                CLR      C
00268C         ?C2520?DRV_MDIOM:
00268C 9238              MOV      bIntState,C
  696: 
  697:         /* transmit frame: Address */
  698:         drv_mdiom_TxAddrFrame();
00268E B1DF              ACALL    drv_mdiom_TxAddrFrame
  699: 
  700:         /* create MDIO frame: Write */
  701:         drv_mdiom_SetOperationCode(0, 1);
002690 C20D              CLR      bMdioOperationCode1
002692 D20C              SETB     bMdioOperationCode0
  702: 
  703:         /* transmit frame: Write */
  704:         drv_mdiom_TxDataFrame();
002694 D1B1              ACALL    drv_mdiom_TxDataFrame
  705: 
  706:         /* unlock globally interrupt */
  707:         DRV_INT_UnlockGlobalInterrupt(bIntState);
002696 A238              MOV      C,bIntState
002698 92AF              MOV      EA,C
  708:     }
00269A 0538              INC      vRegAddr+01H
00269C E538              MOV      A,vRegAddr+01H
00269E 7002              JNZ      ?C2546?DRV_MDIOM
0026A0 0537              INC      vRegAddr
0026A2         ?C2546?DRV_MDIOM:
0026A2 7402              MOV      A,#02H
0026A4 253C              ADD      A,pDataBuf+01H
0026A6 F53C              MOV      pDataBuf+01H,A
0026A8 E4                CLR      A
0026A9 353B              ADDC     A,pDataBuf
0026AB F53B              MOV      pDataBuf,A
0026AD 80B0              SJMP     ?C2513?DRV_MDIOM
0026AF         ?C2514?DRV_MDIOM:
  709: 
  710:     return TRUE;
0026AF D3                SETB     C
  711: }
0026B0 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  319: static void drv_mdiom_TxDataFrame(void)
  320: {
  321:     drv_mdiom_StartFrame();
  322:     drv_mdiom_TxPreamble();
0026B1 122F92            LCALL    ?L?COM0001
0026B4 122FE0            LCALL    ?L?COM0002
0026B7 123039            LCALL    ?L?COM0003
  323:     drv_mdiom_TxStartFrame();
  324:     drv_mdiom_TxOperationCode();
  325:     drv_mdiom_TxPortAddress();
  326:     drv_mdiom_TxDeviceAddress();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 66


  327:     drv_mdiom_TxTurnAround();
0026BA A201              MOV      C,bMdioTurnAround1
0026BC 1230A9            LCALL    ?L?COM0004
0026BF A200              MOV      C,bMdioTurnAround0
0026C1 1230A9            LCALL    ?L?COM0004
  328:     drv_mdiom_TxData();
0026C4 A227              MOV      C,bMdioData15
0026C6 1230A9            LCALL    ?L?COM0004
0026C9 A226              MOV      C,bMdioData14
0026CB 1230A9            LCALL    ?L?COM0004
0026CE A225              MOV      C,bMdioData13
0026D0 1230A9            LCALL    ?L?COM0004
0026D3 A224              MOV      C,bMdioData12
0026D5 1230A9            LCALL    ?L?COM0004
0026D8 A223              MOV      C,bMdioData11
0026DA 1230A9            LCALL    ?L?COM0004
0026DD A222              MOV      C,bMdioData10
0026DF 1230A9            LCALL    ?L?COM0004
0026E2 A221              MOV      C,bMdioData9
0026E4 1230A9            LCALL    ?L?COM0004
0026E7 A220              MOV      C,bMdioData8
0026E9 1230A9            LCALL    ?L?COM0004
0026EC A22F              MOV      C,bMdioData7
0026EE 1230A9            LCALL    ?L?COM0004
0026F1 A22E              MOV      C,bMdioData6
0026F3 1230A9            LCALL    ?L?COM0004
0026F6 A22D              MOV      C,bMdioData5
0026F8 1230A9            LCALL    ?L?COM0004
0026FB A22C              MOV      C,bMdioData4
0026FD 1230A9            LCALL    ?L?COM0004
002700 A22B              MOV      C,bMdioData3
002702 1230A9            LCALL    ?L?COM0004
002705 A22A              MOV      C,bMdioData2
002707 1230A9            LCALL    ?L?COM0004
00270A A229              MOV      C,bMdioData1
00270C 1230A9            LCALL    ?L?COM0004
00270F A228              MOV      C,bMdioData0
002711 1230A9            LCALL    ?L?COM0004
002714 00                NOP      
002715 00                NOP      
  329:     drv_mdiom_StopFrame();
002716 0232E4            LJMP     ?L?COM0031
  330: }
----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION _CFG_RAM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   76: 
   77:     return MEMPAGE_PID_INVALID;
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
002719 A807              MOV      R0,AR7
00271B E2                MOVX     A,@R0
00271C FC                MOV      R4,A
00271D 08                INC      R0
00271E E2                MOVX     A,@R0
00271F FD                MOV      R5,A
002720 08                INC      R0
002721 E2                MOVX     A,@R0
002722 FE                MOV      R6,A
002723 08                INC      R0
002724 E2                MOVX     A,@R0
002725 FF                MOV      R7,A
002726 22                RET      
----- FUNCTION _CFG_RAM_GET32 (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 67




----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   48: UINT16 PKT_MDIOM_Read(void)
   49: {
   50:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   51: 
002727 123130            LCALL    ?L?COM0010
00272A B195              ACALL    _DRV_MDIOM_Read
00272C 7E01              MOV      R6,#01H
00272E 4002              JC       ?C0007?PKT_MDIOM
   52:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   53:                         pPayload->vDevAddr,
   54:                         pPayload->vOffset,
   55:                         pPayload->vDataCount,
   56:                         pPayload->aData))
   57:     {
   58:         return PKT_REPLY_Fail_MdioNoAck;
002730 7E03              MOV      R6,#03H
   59:     }
002732         ?C0007?PKT_MDIOM:
   60: 
   61:     return PKT_REPLY_Done_ExecNoError;
002732 7F40              MOV      R7,#040H
   62: }
002734 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   64: UINT16 PKT_MDIOM_Write(void)
   65: {
   66:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   67: 
002735 123130            LCALL    ?L?COM0010
002738 D157              ACALL    _DRV_MDIOM_Write
00273A 7E01              MOV      R6,#01H
00273C 4002              JC       ?C0009?PKT_MDIOM
   68:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   69:                          pPayload->vDevAddr,
   70:                          pPayload->vOffset,
   71:                          pPayload->vDataCount,
   72:                          pPayload->aData))
   73:     {
   74:         return PKT_REPLY_Fail_MdioNoAck;
00273E 7E03              MOV      R6,#03H
   75:     }
002740         ?C0009?PKT_MDIOM:
   76: 
   77:     return PKT_REPLY_Done_ExecNoError;
002740 7F40              MOV      R7,#040H
   78: }
002742 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION _CFG_RAM_SET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   78: }
   79: 
;---- Variable 'vAddr' assigned to Register 'R2/R3' ----
002743 AB07              MOV      R3,AR7
002745 AF31              MOV      R7,vData+03H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 68


002747 AE30              MOV      R6,vData+02H
002749 AD2F              MOV      R5,vData+01H
00274B AC2E              MOV      R4,vData
00274D A803              MOV      R0,AR3
00274F 020691            LJMP     ?C?LSTPDATA
----- FUNCTION _CFG_RAM_SET32 (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
002752 1232CC            LCALL    ?L?COM002E
   31: }
002755 7E01              MOV      R6,#01H
002757 7F40              MOV      R7,#040H
   32: 
002759 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
00275A 1232CC            LCALL    ?L?COM002E
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
00275D 121F99            LCALL    DRV_C2M_Reset
002760 7E03              MOV      R6,#03H
002762 5002              JNC      ?C0008?PKT_C2M
002764 7E01              MOV      R6,#01H
002766         ?C0008?PKT_C2M:
002766 7F40              MOV      R7,#040H
   39: }
002768 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
002769 121C86            LCALL    DRV_C2M_Probe
00276C 90004C            MOV      DPTR,#vFrame+0CH
00276F 120685            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
002772 90004A            MOV      DPTR,#vFrame+0AH
002775 E4                CLR      A
002776 F0                MOVX     @DPTR,A
002777 A3                INC      DPTR
002778 7404              MOV      A,#04H
00277A F0                MOVX     @DPTR,A
   46: }
00277B 7E01              MOV      R6,#01H
00277D 7F40              MOV      R7,#040H
   47: 
00277F 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 69




----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
002780 1232CC            LCALL    ?L?COM002E
   52:             PKT_REPLY_Done_ExecNoError :
   53:             PKT_REPLY_Fail_ExecErrorCode0);
002783 121DE3            LCALL    DRV_C2M_ChipErase
002786 7E03              MOV      R6,#03H
002788 5002              JNC      ?C0018?PKT_C2M
00278A 7E01              MOV      R6,#01H
00278C         ?C0018?PKT_C2M:
00278C 7F40              MOV      R7,#040H
   54: }
00278E 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
00278F 90004A            MOV      DPTR,#vFrame+0AH
002792 E0                MOVX     A,@DPTR
002793 7004              JNZ      ?C0043?PKT_C2M
002795 A3                INC      DPTR
002796 E0                MOVX     A,@DPTR
002797 6401              XRL      A,#01H
002799         ?C0043?PKT_C2M:
002799 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
00279B 7E03              MOV      R6,#03H
00279D 7F04              MOV      R7,#04H
00279F 22                RET      
   62: 
0027A0         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
0027A0 90004C            MOV      DPTR,#vFrame+0CH
0027A3 E0                MOVX     A,@DPTR
0027A4 FF                MOV      R7,A
0027A5 121B8E            LCALL    _DRV_C2M_PageErase
0027A8 7E03              MOV      R6,#03H
0027AA 5002              JNC      ?C0023?PKT_C2M
0027AC 7E01              MOV      R6,#01H
0027AE         ?C0023?PKT_C2M:
0027AE 7F40              MOV      R7,#040H
   66: }
0027B0 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 70


   41: 
0027B1 752B01            MOV      PT_YIELD_FLAG,#01H
0027B4         ?C0001?THREAD_IDLE:
0027B4 E510              MOV      A,vTCB_Idle
0027B6 7038              JNZ      ?C0002?THREAD_IDLE
0027B8 E511              MOV      A,vTCB_Idle+01H
0027BA 24CF              ADD      A,#0CFH
0027BC 601F              JZ       ?C0012?THREAD_IDLE
0027BE 2431              ADD      A,#031H
0027C0 702E              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
0027C2         ?C0004?THREAD_IDLE:
   43:     {
   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
0027C2 122A89            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
0027C5 E50F              MOV      A,vTickCount+03H
0027C7 2432              ADD      A,#032H
0027C9 FF                MOV      R7,A
0027CA E4                CLR      A
0027CB 350E              ADDC     A,vTickCount+02H
0027CD 123449            LCALL    ?L?COM005A
0027D0 FC                MOV      R4,A
0027D1 9004FC            MOV      DPTR,#vEndTick
0027D4 120685            LCALL    ?C?LSTXDATA
0027D7 751000            MOV      vTCB_Idle,#00H
0027DA 751131            MOV      vTCB_Idle+01H,#031H
0027DD         ?C0012?THREAD_IDLE:
0027DD 00                NOP      
0027DE 9004FC            MOV      DPTR,#vEndTick
0027E1 12320E            LCALL    ?L?COM001B
0027E4 7F00              MOV      R7,#00H
0027E6 5002              JNC      ?C0014?THREAD_IDLE
0027E8 7F01              MOV      R7,#01H
0027EA         ?C0014?THREAD_IDLE:
0027EA         ?C0015?THREAD_IDLE:
0027EA EF                MOV      A,R7
0027EB 60D5              JZ       ?C0004?THREAD_IDLE
0027ED 7F00              MOV      R7,#00H
0027EF 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
0027F0         ?C0002?THREAD_IDLE:
0027F0 E4                CLR      A
0027F1 F52B              MOV      PT_YIELD_FLAG,A
0027F3 F510              MOV      vTCB_Idle,A
0027F5 F511              MOV      vTCB_Idle+01H,A
0027F7 7F03              MOV      R7,#03H
   53: }
0027F9 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   80: void thread_LED_Init(void)
   81: {
   82:     PT_INIT(&vTCB_LED);
   83: }
0027FA E4                CLR      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 71


0027FB F512              MOV      vTCB_LED,A
0027FD F513              MOV      vTCB_LED+01H,A
   84: 
0027FF 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002800 123173            LCALL    ?L?COM0012
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
002803 90004A            MOV      DPTR,#vFrame+0AH
002806 E0                MOVX     A,@DPTR
002807 7004              JNZ      ?C0044?PKT_C2M
002809 A3                INC      DPTR
00280A E0                MOVX     A,@DPTR
00280B 6406              XRL      A,#06H
00280D         ?C0044?PKT_C2M:
00280D 700B              JNZ      ?C0026?PKT_C2M
00280F D3                SETB     C
002810 E538              MOV      A,vLen+01H
002812 9432              SUBB     A,#032H
002814 E537              MOV      A,vLen
002816 9404              SUBB     A,#04H
002818 4005              JC       ?C0030?PKT_C2M
00281A         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
00281A 7E03              MOV      R6,#03H
00281C 7F04              MOV      R7,#04H
00281E 22                RET      
   79:     }
00281F         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
00281F E538              MOV      A,vLen+01H
002821 2406              ADD      A,#06H
002823 90004B            MOV      DPTR,#vFrame+0BH
002826 F0                MOVX     @DPTR,A
002827 E4                CLR      A
002828 3537              ADDC     A,vLen
00282A 90004A            MOV      DPTR,#vFrame+0AH
00282D F0                MOVX     @DPTR,A
00282E         ?C0031?PKT_C2M:
   83:     while (vLen != 0)
00282E E538              MOV      A,vLen+01H
002830 4537              ORL      A,vLen
002832 602E              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
002834 C3                CLR      C
002835 E537              MOV      A,vLen
002837 9401              SUBB     A,#01H
002839 5006              JNC      ?C0033?PKT_C2M
00283B AE37              MOV      R6,vLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 72


00283D AF38              MOV      R7,vLen+01H
00283F 8004              SJMP     ?C0034?PKT_C2M
002841         ?C0033?PKT_C2M:
002841 7E01              MOV      R6,#01H
002843 7F00              MOV      R7,#00H
002845         ?C0034?PKT_C2M:
002845 8E39              MOV      vReadLen,R6
002847 8F3A              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
002849 AB3A              MOV      R3,vReadLen+01H
00284B AD36              MOV      R5,vAddr+01H
00284D AC35              MOV      R4,vAddr
00284F AF34              MOV      R7,pBuf+01H
002851 AE33              MOV      R6,pBuf
002853 121E3D            LCALL    _DRV_C2M_FlashRead
002856 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
002858 7E03              MOV      R6,#03H
00285A 7F40              MOV      R7,#040H
00285C 22                RET      
   94:         }
00285D         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
00285D 1231C2            LCALL    ?L?COM0019
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
002860 80CC              SJMP     ?C0031?PKT_C2M
002862         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
002862 7E01              MOV      R6,#01H
002864 7F40              MOV      R7,#040H
  102: }
002866 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002867 123173            LCALL    ?L?COM0012
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
00286A 2406              ADD      A,#06H
00286C FF                MOV      R7,A
00286D E4                CLR      A
00286E 3537              ADDC     A,vLen
002870 FE                MOV      R6,A
002871 90004A            MOV      DPTR,#vFrame+0AH
002874 E0                MOVX     A,@DPTR
002875 6E                XRL      A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 73


002876 7003              JNZ      ?C0045?PKT_C2M
002878 A3                INC      DPTR
002879 E0                MOVX     A,@DPTR
00287A 6F                XRL      A,R7
00287B         ?C0045?PKT_C2M:
00287B 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
00287D 7E03              MOV      R6,#03H
00287F 7F04              MOV      R7,#04H
002881 22                RET      
  114:     }
002882         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
002882 E538              MOV      A,vLen+01H
002884 4537              ORL      A,vLen
002886 602E              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002888 C3                CLR      C
002889 E537              MOV      A,vLen
00288B 9401              SUBB     A,#01H
00288D 5006              JNC      ?C0040?PKT_C2M
00288F AE37              MOV      R6,vLen
002891 AF38              MOV      R7,vLen+01H
002893 8004              SJMP     ?C0041?PKT_C2M
002895         ?C0040?PKT_C2M:
002895 7E01              MOV      R6,#01H
002897 7F00              MOV      R7,#00H
002899         ?C0041?PKT_C2M:
002899 8E39              MOV      vWriteLen,R6
00289B 8F3A              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
00289D AB3A              MOV      R3,vWriteLen+01H
00289F AD34              MOV      R5,pBuf+01H
0028A1 AC33              MOV      R4,pBuf
0028A3 AF36              MOV      R7,vAddr+01H
0028A5 AE35              MOV      R6,vAddr
0028A7 121ADC            LCALL    _DRV_C2M_FlashWrite
0028AA 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
0028AC 7E03              MOV      R6,#03H
0028AE 7F40              MOV      R7,#040H
0028B0 22                RET      
  128:         }
0028B1         ?C0042?PKT_C2M:
  129: 
  130:         pBuf  += vWriteLen;
0028B1 1231C2            LCALL    ?L?COM0019
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
0028B4 80CC              SJMP     ?C0038?PKT_C2M
0028B6         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
0028B6 7E01              MOV      R6,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 74


0028B8 7F40              MOV      R7,#040H
  136: }
0028BA 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
0028BB E4                CLR      A
0028BC F510              MOV      vTCB_Idle,A
0028BE F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
0028C0 1201DD            LCALL    CFG_Init
   76:     DRV_Init();
0028C3 121FA9            LCALL    DRV_Init
;----                  JMP      APL_Init
   77:     APL_Init();
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
  183: void APL_Init(void)
  184: {
  185:     /* copy initial setting */
  186:     CFG_SET(RT_EVB_CTRL, CFG_GET(INIT_RT_EVB_CTRL));
0028C6         ?C0598?APL:
0028C6 903860            MOV      DPTR,#03860H
0028C9 E4                CLR      A
0028CA 93                MOVC     A,@A+DPTR
0028CB FF                MOV      R7,A
0028CC 7818              MOV      R0,#018H
0028CE EF                MOV      A,R7
0028CF F2                MOVX     @R0,A
0028D0         ?C0619?APL:
  187: 
  188:     /* enable PWM_VBUF output */
  189:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
0028D0 7818              MOV      R0,#018H
0028D2 E2                MOVX     A,@R0
0028D3 FF                MOV      R7,A
0028D4 E4                CLR      A
0028D5 8FFC              MOV      PCA0CPH0,R7
0028D7         ?C0618?APL:
  190:     DRV_CPU_DelayMs(10);
0028D7 7F0A              MOV      R7,#0AH
0028D9 7E00              MOV      R6,#00H
0028DB 11E0              ACALL    _DRV_CPU_DelayMs
  191:     DRV_IO_Write(IO(IO_VBUF_OEn), LOW);
0028DD C291              CLR      IO_VBUF_OEn
  192: }
0028DF 22                RET      
----- FUNCTION APL_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 75


0028E0 8F82              MOV      DPL,R7
0028E2 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
   70:     if (DRV_INT_IsGlobalInterruptEnable())
0028E4 30AF23            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
0028E7 EF                MOV      A,R7
0028E8 250F              ADD      A,vTickCount+03H
0028EA F53E              MOV      vStopTick+03H,A
0028EC EE                MOV      A,R6
0028ED 350E              ADDC     A,vTickCount+02H
0028EF F53D              MOV      vStopTick+02H,A
0028F1 E4                CLR      A
0028F2 350D              ADDC     A,vTickCount+01H
0028F4 F53C              MOV      vStopTick+01H,A
0028F6 E4                CLR      A
0028F7 350C              ADDC     A,vTickCount
0028F9 F53B              MOV      vStopTick,A
0028FB         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
0028FB AF3E              MOV      R7,vStopTick+03H
0028FD AE3D              MOV      R6,vStopTick+02H
0028FF AD3C              MOV      R5,vStopTick+01H
002901 AC3B              MOV      R4,vStopTick
002903 123219            LCALL    ?L?COM001C
002906 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
002908 80F1              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
00290A         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
00290A E582              MOV      A,DPL
00290C 1582              DEC      DPL
00290E AE83              MOV      R6,DPH
002910 7002              JNZ      ?C0012?DRV_CPU
002912 1583              DEC      DPH
002914         ?C0012?DRV_CPU:
002914 4E                ORL      A,R6
002915 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
002917 7FE8              MOV      R7,#0E8H
002919 7E03              MOV      R6,#03H
00291B 121A3E            LCALL    _DRV_CPU_DelayUs
   91:     	}
00291E 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
002920         ?C0010?DRV_CPU:
002920 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 76



----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
002921 752B01            MOV      PT_YIELD_FLAG,#01H
002924         ?C0001?THREAD_LED:
002924 E512              MOV      A,vTCB_LED
002926 7054              JNZ      ?C0002?THREAD_LED
002928 E513              MOV      A,vTCB_LED+01H
00292A 24C5              ADD      A,#0C5H
00292C 603B              JZ       ?C0029?THREAD_LED
00292E 243B              ADD      A,#03BH
002930 704A              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
002932         ?C0004?THREAD_LED:
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
002932 7819              MOV      R0,#019H
002934 E2                MOVX     A,@R0
002935 C4                SWAP     A
002936 13                RRC      A
002937 13                RRC      A
002938 13                RRC      A
002939 5401              ANL      A,#01H
00293B 123228            LCALL    ?L?COM001E
00293E 123366            LCALL    ?L?COM003E
002941 7006              JNZ      ?C0016?THREAD_LED
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_1_OUT), HIGH);
002943 D293              SETB     IO_LED_1_OUT
   48:             DRV_IO_Write(IO(IO_LED_2_OUT), LOW);
002945 C286              CLR      IO_LED_2_OUT
   49:         }
002947 8004              SJMP     ?C0022?THREAD_LED
   50:         else
   51:       #endif
   52:         {
002949         ?C0016?THREAD_LED:
   53:             /* system running abnormally */
   54:             DRV_IO_Write(IO(IO_LED_1_OUT), LOW);
002949 C293              CLR      IO_LED_1_OUT
   55:             DRV_IO_Write(IO(IO_LED_2_OUT), HIGH);
00294B D286              SETB     IO_LED_2_OUT
   56:         }
00294D         ?C0022?THREAD_LED:
   57: 
   58:         DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
00294D 63A008            XRL      P2,#08H
   59:         OS_SLEEP_MS(&vTCB_LED, 500);
002950 E50F              MOV      A,vTickCount+03H
002952 24F4              ADD      A,#0F4H
002954 FF                MOV      R7,A
002955 E50E              MOV      A,vTickCount+02H
002957 3401              ADDC     A,#01H
002959 123449            LCALL    ?L?COM005A
00295C FC                MOV      R4,A
00295D 900500            MOV      DPTR,#vEndTick
002960 120685            LCALL    ?C?LSTXDATA
002963 751200            MOV      vTCB_LED,#00H
002966 75133B            MOV      vTCB_LED+01H,#03BH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 77


002969         ?C0029?THREAD_LED:
002969 00                NOP      
00296A 900500            MOV      DPTR,#vEndTick
00296D 12320E            LCALL    ?L?COM001B
002970 7F00              MOV      R7,#00H
002972 5002              JNC      ?C0031?THREAD_LED
002974 7F01              MOV      R7,#01H
002976         ?C0031?THREAD_LED:
002976         ?C0032?THREAD_LED:
002976 EF                MOV      A,R7
002977 60B9              JZ       ?C0004?THREAD_LED
002979 7F00              MOV      R7,#00H
00297B 22                RET      
   60:     }
   61: 
   62:     PT_END(&vTCB_LED);
00297C         ?C0002?THREAD_LED:
00297C E4                CLR      A
00297D F52B              MOV      PT_YIELD_FLAG,A
00297F F512              MOV      vTCB_LED,A
002981 F513              MOV      vTCB_LED+01H,A
002983 7F03              MOV      R7,#03H
   63: }
002985 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
002986 D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
002988 0215C6            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   61: void main(void)
   62: {
   63: 	/* previous init */
   64: 	DRV_PreInit();
00298B 31BE              ACALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
00298D 31A8              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
00298F 3186              ACALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 78


   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
002991         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
002991 E4                CLR      A
002992 F52A              MOV      i,A
002994         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
002994 E52A              MOV      A,i
002996 75F006            MOV      B,#06H
002999 A4                MUL      AB
00299A 240C              ADD      A,#LOW aThreadList
00299C F582              MOV      DPL,A
00299E E4                CLR      A
00299F 3416              ADDC     A,#HIGH aThreadList
0029A1 1232AB            LCALL    ?L?COM002C
0029A4 40EE              JC       ?C0003?OS
0029A6 80E9              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
0029A8 E4                CLR      A
0029A9 F52A              MOV      i,A
0029AB         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
0029AB E52A              MOV      A,i
0029AD 75F006            MOV      B,#06H
0029B0 A4                MUL      AB
0029B1 240F              ADD      A,#LOW aThreadList+03H
0029B3 F582              MOV      DPL,A
0029B5 E4                CLR      A
0029B6 3416              ADDC     A,#HIGH aThreadList+03H
0029B8 1232AB            LCALL    ?L?COM002C
0029BB 40EE              JC       ?C0007?OS
   83:     }
   84: }
0029BD 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
0029BE E4                CLR      A
0029BF F5A8              MOV      IE,A
0029C1 F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 79


   94:     DRV_CLOCK_Init();
0029C3 75B283            MOV      OSCICN,#083H
0029C6         ?C0026?DRV:
0029C6 E5B2              MOV      A,OSCICN
0029C8 C4                SWAP     A
0029C9 13                RRC      A
0029CA 13                RRC      A
0029CB 5403              ANL      A,#03H
0029CD 13                RRC      A
0029CE 50F6              JNC      ?C0026?DRV
0029D0         ?C0027?DRV:
0029D0 75B980            MOV      CLKMUL,#080H
0029D3 7F05              MOV      R7,#05H
0029D5 7E00              MOV      R6,#00H
0029D7 121A3E            LCALL    _DRV_CPU_DelayUs
0029DA 43B9C0            ORL      CLKMUL,#0C0H
0029DD         ?C0028?DRV:
0029DD E5B9              MOV      A,CLKMUL
0029DF C4                SWAP     A
0029E0 13                RRC      A
0029E1 5407              ANL      A,#07H
0029E3 13                RRC      A
0029E4 50F7              JNC      ?C0028?DRV
0029E6         ?C0029?DRV:
0029E6 75A902            MOV      CLKSEL,#02H
0029E9 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
0029EC 514E              ACALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
0029EE 438E08            ORL      CKCON,#08H
0029F1 E589              MOV      A,TMOD
0029F3 540F              ANL      A,#0FH
0029F5 4420              ORL      A,#020H
0029F7 F589              MOV      TMOD,A
0029F9 758D98            MOV      TH1,#098H
0029FC D28E              SETB     TR1
0029FE AFD4              MOV      R7,P0SKIP
002A00 EF                MOV      A,R7
002A01 54EF              ANL      A,#0EFH
002A03 FF                MOV      R7,A
002A04 8FD4              MOV      P0SKIP,R7
002A06 AFD4              MOV      R7,P0SKIP
002A08 EF                MOV      A,R7
002A09 54DF              ANL      A,#0DFH
002A0B FF                MOV      R7,A
002A0C 8FD4              MOV      P0SKIP,R7
002A0E 43E101            ORL      XBR0,#01H
002A11 759802            MOV      SCON0,#02H
;----                  JMP      DRV_PCA_Init
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_PCA_Init (BEGIN) -----
 FILE: '..\drv\drv_pca.c'
   37: void DRV_PCA_Init(void)
   38: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 80


   39:     UINT8   vPCA0ME = 0x00;
   40: 
;---- Variable 'vPCA0ME' assigned to Register 'R3' ----
002A14 E4                CLR      A
002A15 FB                MOV      R3,A
   41:     /* PCA channel init */
   42:   #define DECLARE_PCA(_name,_ch,_io,_mode,_init,_desc)                      \
   43:     do {                                                                    \
   44:         DRV_PCA_Write(_name, _init);                                        \
   45:         DRV_PCA_SetMode(_name, _mode);                                      \
   46:                                                                             \
   47:         if (_mode != PCA_MODE_DISABLE)                                      \
   48:         {                                                                   \
   49:             /* force no-skip this PCA channel for GPIO */                   \
   50:             drv_io_SetSkip(_PCA_IO(_name), DISABLE);                        \
   51:             vPCA0ME++;                                                      \
   52:         }                                                                   \
   53:     } while (0);
   54:   #include "cfg_hw_def.h"
   55:   #undef DECLARE_PCA
   56: 
   57:     /* init PCA0:
   58:      *  reset PCA counter;
   59:      *  PCA clock source: defined by DRV_PCA_SOURCE_CLOCK;
   60:      *  enable PCA;
   61:      */
   62:     PCA0H  = 0x00;
   63:     PCA0L  = 0x00;
   64:     PCA0MD = (DRV_PCA_SOURCE_CLOCK<<1);
   65:     PCA0CN = 0x40;
   66: 
   67:     /* enable CEXn at cross-bar */
   68:     XBR1 |= (vPCA0ME&0x7);
   69: }
   70: 
   71: #endif
   72: 
   72: 
002A16 75FCFF            MOV      PCA0CPH0,#0FFH
002A19         ?C0011?DRV_PCA:
002A19 75DA42            MOV      PCA0CPM0,#042H
002A1C AFD4              MOV      R7,P0SKIP
002A1E EF                MOV      A,R7
002A1F 54FD              ANL      A,#0FDH
002A21 FF                MOV      R7,A
002A22 8FD4              MOV      P0SKIP,R7
002A24 0B                INC      R3
   72: 
002A25         ?C0022?DRV_PCA:
002A25 E4                CLR      A
002A26 F5E9              MOV      PCA0CPL1,A
002A28 F5EA              MOV      PCA0CPH1,A
002A2A         ?C0026?DRV_PCA:
002A2A E4                CLR      A
002A2B F5DB              MOV      PCA0CPM1,A
002A2D         ?C0037?DRV_PCA:
002A2D E4                CLR      A
002A2E F5EB              MOV      PCA0CPL2,A
002A30 F5EC              MOV      PCA0CPH2,A
002A32         ?C0041?DRV_PCA:
002A32 E4                CLR      A
002A33 F5DC              MOV      PCA0CPM2,A
002A35         ?C0052?DRV_PCA:
002A35 E4                CLR      A
002A36 F5ED              MOV      PCA0CPL3,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 81


002A38 F5EE              MOV      PCA0CPH3,A
002A3A         ?C0056?DRV_PCA:
002A3A E4                CLR      A
002A3B F5DD              MOV      PCA0CPM3,A
002A3D         ?C0047?DRV_PCA:
002A3D E4                CLR      A
002A3E F5FA              MOV      PCA0H,A
002A40 F5F9              MOV      PCA0L,A
002A42 75D908            MOV      PCA0MD,#08H
002A45 75D840            MOV      PCA0CN,#040H
002A48 EB                MOV      A,R3
002A49 5407              ANL      A,#07H
002A4B 42E2              ORL      XBR1,A
002A4D 22                RET      
----- FUNCTION DRV_PCA_Init (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
002A4E 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
002A51 7590F7            MOV      P1,#0F7H
   42:     P2      = _PORT_INIT(P2);
002A54 75A0FF            MOV      P2,#0FFH
   43:     P3      = _PORT_INIT(P3);
002A57 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
002A5A 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
002A5D 75F2FE            MOV      P1MDIN,#0FEH
   46:     P2MDIN  = _PORT_MDIN(P2);
002A60 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
002A63 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
002A66 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
002A69 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
002A6C 75A60A            MOV      P2MDOUT,#0AH
   51:     P3MDOUT = _PORT_MDOUT(P3);
002A6F E4                CLR      A
002A70 F5A7              MOV      P3MDOUT,A
   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
002A72 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
002A75 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
002A78 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
002A7B F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
002A7D 75E240            MOV      XBR1,#040H
   61: }
002A80 22                RET      
----- FUNCTION DRV_IO_Init (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 82



----- FUNCTION _CFG_RAM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   73:                 break;
   74:         }
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
002A81 A807              MOV      R0,AR7
002A83 E2                MOVX     A,@R0
002A84 FE                MOV      R6,A
002A85 08                INC      R0
002A86 E2                MOVX     A,@R0
002A87 FF                MOV      R7,A
002A88 22                RET      
----- FUNCTION _CFG_RAM_GET16 (END) -------


----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
  109: void APL_Entry(void)
  110: {
  111:     /* PWM_VBUF */
  112:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
002A89 7818              MOV      R0,#018H
002A8B E2                MOVX     A,@R0
002A8C FF                MOV      R7,A
002A8D 8FFC              MOV      PCA0CPH0,R7
002A8F         ?C0163?APL:
  113: 
  114: 	/* DDM */
  115: 	CFG_SET_DDM(DDM_EVB_TEMP, apl_ddm_GetEVBTemp());
002A8F 915E              ACALL    apl_ddm_GetEVBTemp
002A91 AC06              MOV      R4,AR6
002A93 AD07              MOV      R5,AR7
002A95 E4                CLR      A
002A96 FF                MOV      R7,A
002A97 FE                MOV      R6,A
002A98 9156              ACALL    _CFG_RAM_SET16
002A9A         ?C0170?APL:
  116: 	CFG_SET_DDM(DDM_EVB_VCC,  apl_ddm_GetEVBVCC());
002A9A B122              ACALL    apl_ddm_GetEVBVCC
002A9C AC06              MOV      R4,AR6
002A9E AD07              MOV      R5,AR7
002AA0 7F02              MOV      R7,#02H
002AA2 7E00              MOV      R6,#00H
002AA4 9156              ACALL    _CFG_RAM_SET16
002AA6         ?C0177?APL:
  117: 	CFG_SET_DDM(DDM_EVB_VBUF, apl_ddm_GetEVBVBUF());
002AA6 B137              ACALL    apl_ddm_GetEVBVBUF
002AA8 AC06              MOV      R4,AR6
002AAA AD07              MOV      R5,AR7
002AAC 7F04              MOV      R7,#04H
002AAE 7E00              MOV      R6,#00H
002AB0 9156              ACALL    _CFG_RAM_SET16
002AB2         ?C0176?APL:
  118: 
  119:     /* RT_EVB_STAT */
  120:   #if 1
  121:     /* EVB Temperature */
  122:     if (((SINT16)CFG_GET(DDM_EVB_TEMP) > (SINT16)CFG_GET(DDM_EVB_TEMP_Max)) ||
  123:         ((SINT16)CFG_GET(DDM_EVB_TEMP) < (SINT16)CFG_GET(DDM_EVB_TEMP_Min)))
002AB2 7F40              MOV      R7,#040H
002AB4 1232DD            LCALL    ?L?COM0030
002AB7 C006              PUSH     AR6
002AB9 C007              PUSH     AR7
002ABB FF                MOV      R7,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 83


002ABC 123231            LCALL    ?L?COM0020
002ABF D007              POP      AR7
002AC1 D006              POP      AR6
002AC3 D3                SETB     C
002AC4 1233A2            LCALL    ?L?COM0046
002AC7 5017              JNC      ?C0219?APL
002AC9 7F42              MOV      R7,#042H
002ACB 1232DD            LCALL    ?L?COM0030
002ACE C006              PUSH     AR6
002AD0 C007              PUSH     AR7
002AD2 FF                MOV      R7,A
002AD3 123231            LCALL    ?L?COM0020
002AD6 D007              POP      AR7
002AD8 D006              POP      AR6
002ADA C3                CLR      C
002ADB 1233A2            LCALL    ?L?COM0046
002ADE 500D              JNC      ?C0267?APL
  124:     {
  125:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, LOW);
002AE0         ?C0219?APL:
002AE0 E4                CLR      A
002AE1 F52C              MOV      _v,A
002AE3 7819              MOV      R0,#019H
002AE5 E2                MOVX     A,@R0
002AE6 123102            LCALL    ?L?COM000A
002AE9 6020              JZ       ?C0231?APL
002AEB 800B              SJMP     ?C0626?APL
  126:     }
  127:     else
  128:     {
  129:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, HIGH);
002AED         ?C0267?APL:
002AED 752C01            MOV      _v,#01H
002AF0 7819              MOV      R0,#019H
002AF2 E2                MOVX     A,@R0
002AF3 123102            LCALL    ?L?COM000A
002AF6 6013              JZ       ?C0231?APL
002AF8         
002AF8 7819              MOV      R0,#019H
002AFA E2                MOVX     A,@R0
002AFB FF                MOV      R7,A
002AFC EF                MOV      A,R7
002AFD 54FE              ANL      A,#0FEH
002AFF FB                MOV      R3,A
002B00 E52C              MOV      A,_v
002B02 5401              ANL      A,#01H
002B04 FF                MOV      R7,A
002B05 EF                MOV      A,R7
002B06 4B                ORL      A,R3
002B07 FF                MOV      R7,A
002B08 E4                CLR      A
002B09 EF                MOV      A,R7
002B0A F2                MOVX     @R0,A
  130:     }
002B0B         ?C0231?APL:
  131: 
  132:     /* EVB VCC */
  133:     if (((UINT16)CFG_GET(DDM_EVB_VCC) > (UINT16)CFG_GET(DDM_EVB_VCC_Max)) ||
  134:         ((UINT16)CFG_GET(DDM_EVB_VCC) < (UINT16)CFG_GET(DDM_EVB_VCC_Min)))
002B0B 7F44              MOV      R7,#044H
002B0D 1232DD            LCALL    ?L?COM0030
002B10 C006              PUSH     AR6
002B12 C007              PUSH     AR7
002B14 7F02              MOV      R7,#02H
002B16 123231            LCALL    ?L?COM0020
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 84


002B19 D007              POP      AR7
002B1B D006              POP      AR6
002B1D D3                SETB     C
002B1E ED                MOV      A,R5
002B1F 9F                SUBB     A,R7
002B20 EC                MOV      A,R4
002B21 9E                SUBB     A,R6
002B22 5019              JNC      ?C0316?APL
002B24 7F46              MOV      R7,#046H
002B26 1232DD            LCALL    ?L?COM0030
002B29 C006              PUSH     AR6
002B2B C007              PUSH     AR7
002B2D 7F02              MOV      R7,#02H
002B2F 123231            LCALL    ?L?COM0020
002B32 D007              POP      AR7
002B34 D006              POP      AR6
002B36 C3                CLR      C
002B37 ED                MOV      A,R5
002B38 9F                SUBB     A,R7
002B39 EC                MOV      A,R4
002B3A 9E                SUBB     A,R6
002B3B 500F              JNC      ?C0364?APL
  135:     {
  136:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, LOW);
002B3D         ?C0316?APL:
002B3D E4                CLR      A
002B3E F52C              MOV      _v,A
002B40 7819              MOV      R0,#019H
002B42 E2                MOVX     A,@R0
002B43 C3                CLR      C
002B44 13                RRC      A
002B45 123102            LCALL    ?L?COM000A
002B48 6033              JZ       ?C0328?APL
002B4A 800D              SJMP     ?C0627?APL
  137:     }
  138:     else
  139:     {
  140:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, HIGH);
002B4C         ?C0364?APL:
002B4C 752C01            MOV      _v,#01H
002B4F 7819              MOV      R0,#019H
002B51 E2                MOVX     A,@R0
002B52 C3                CLR      C
002B53 13                RRC      A
002B54 123102            LCALL    ?L?COM000A
002B57 6024              JZ       ?C0328?APL
002B59         
002B59 123225            LCALL    ?L?COM001D
002B5C 54FD              ANL      A,#0FDH
002B5E FF                MOV      R7,A
002B5F C004              PUSH     AR4
002B61 C005              PUSH     AR5
002B63 C006              PUSH     AR6
002B65 C007              PUSH     AR7
002B67 E52C              MOV      A,_v
002B69 5401              ANL      A,#01H
002B6B FF                MOV      R7,A
002B6C E4                CLR      A
002B6D 7801              MOV      R0,#01H
002B6F 120642            LCALL    ?C?LSHL
002B72 D003              POP      AR3
002B74 D002              POP      AR2
002B76 D001              POP      AR1
002B78 D000              POP      AR0
002B7A 123276            LCALL    ?L?COM0027
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 85


  141:     }
002B7D         ?C0328?APL:
  142: 
  143:     /* EVB VBUF */
  144:     if (((UINT16)CFG_GET(DDM_EVB_VBUF) > (UINT16)CFG_GET(DDM_EVB_VBUF_Max)) ||
  145:         ((UINT16)CFG_GET(DDM_EVB_VBUF) < (UINT16)CFG_GET(DDM_EVB_VBUF_Min)))
002B7D 7F48              MOV      R7,#048H
002B7F 1232DD            LCALL    ?L?COM0030
002B82 C006              PUSH     AR6
002B84 C007              PUSH     AR7
002B86 12322F            LCALL    ?L?COM001F
002B89 D007              POP      AR7
002B8B D006              POP      AR6
002B8D D3                SETB     C
002B8E ED                MOV      A,R5
002B8F 9F                SUBB     A,R7
002B90 EC                MOV      A,R4
002B91 9E                SUBB     A,R6
002B92 5017              JNC      ?C0413?APL
002B94 7F4A              MOV      R7,#04AH
002B96 1232DD            LCALL    ?L?COM0030
002B99 C006              PUSH     AR6
002B9B C007              PUSH     AR7
002B9D 12322F            LCALL    ?L?COM001F
002BA0 D007              POP      AR7
002BA2 D006              POP      AR6
002BA4 C3                CLR      C
002BA5 ED                MOV      A,R5
002BA6 9F                SUBB     A,R7
002BA7 EC                MOV      A,R4
002BA8 9E                SUBB     A,R6
002BA9 500D              JNC      ?C0461?APL
  146:     {
  147:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, LOW);
002BAB         ?C0413?APL:
002BAB E4                CLR      A
002BAC F52C              MOV      _v,A
002BAE 123392            LCALL    ?L?COM0042
002BB1 123102            LCALL    ?L?COM000A
002BB4 6031              JZ       ?C0425?APL
002BB6 800B              SJMP     ?C0628?APL
  148:     }
  149:     else
  150:     {
  151:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, HIGH);
002BB8         ?C0461?APL:
002BB8 752C01            MOV      _v,#01H
002BBB 123392            LCALL    ?L?COM0042
002BBE 123102            LCALL    ?L?COM000A
002BC1 6024              JZ       ?C0425?APL
002BC3         
002BC3 123225            LCALL    ?L?COM001D
002BC6 54FB              ANL      A,#0FBH
002BC8 FF                MOV      R7,A
002BC9 C004              PUSH     AR4
002BCB C005              PUSH     AR5
002BCD C006              PUSH     AR6
002BCF C007              PUSH     AR7
002BD1 E52C              MOV      A,_v
002BD3 5401              ANL      A,#01H
002BD5 FF                MOV      R7,A
002BD6 E4                CLR      A
002BD7 7802              MOV      R0,#02H
002BD9 120642            LCALL    ?C?LSHL
002BDC D003              POP      AR3
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 86


002BDE D002              POP      AR2
002BE0 D001              POP      AR1
002BE2 D000              POP      AR0
002BE4 123276            LCALL    ?L?COM0027
  152:     }
002BE7         ?C0425?APL:
  153: 
  154:     /* EVB Global Ready */
  155:     if ((CFG_GET(RT_EVB_STAT_EVB_TEMP_Ready) == HIGH) &&
  156:         (CFG_GET(RT_EVB_STAT_EVB_VCC_Ready)  == HIGH) &&
  157:         (CFG_GET(RT_EVB_STAT_EVB_VBUF_Ready) == HIGH))
002BE7 123225            LCALL    ?L?COM001D
002BEA 123366            LCALL    ?L?COM003E
002BED 702E              JNZ      ?C0557?APL
002BEF 7819              MOV      R0,#019H
002BF1 E2                MOVX     A,@R0
002BF2 C3                CLR      C
002BF3 13                RRC      A
002BF4 123228            LCALL    ?L?COM001E
002BF7 5401              ANL      A,#01H
002BF9 FF                MOV      R7,A
002BFA E4                CLR      A
002BFB F8                MOV      R0,A
002BFC C3                CLR      C
002BFD 12061D            LCALL    ?C?ULCMP
002C00 701B              JNZ      ?C0557?APL
002C02 123392            LCALL    ?L?COM0042
002C05 123228            LCALL    ?L?COM001E
002C08 5401              ANL      A,#01H
002C0A FF                MOV      R7,A
002C0B E4                CLR      A
002C0C F8                MOV      R0,A
002C0D C3                CLR      C
002C0E 12061D            LCALL    ?C?ULCMP
002C11 700A              JNZ      ?C0557?APL
  158:     {
  159:         CFG_SET(RT_EVB_STAT_Global_Ready, HIGH);
002C13         ?C0509?APL:
002C13 752C01            MOV      _v,#01H
002C16 1230F9            LCALL    ?L?COM0009
002C19 602E              JZ       ?C0569?APL
002C1B 8008              SJMP     ?C0629?APL
  160:     }
  161:     else
  162:     {
  163:         CFG_SET(RT_EVB_STAT_Global_Ready, LOW);
002C1D         ?C0557?APL:
002C1D E4                CLR      A
002C1E F52C              MOV      _v,A
002C20 1230F9            LCALL    ?L?COM0009
002C23 6024              JZ       ?C0569?APL
002C25         
002C25 123225            LCALL    ?L?COM001D
002C28 547F              ANL      A,#07FH
002C2A FF                MOV      R7,A
002C2B C004              PUSH     AR4
002C2D C005              PUSH     AR5
002C2F C006              PUSH     AR6
002C31 C007              PUSH     AR7
002C33 E52C              MOV      A,_v
002C35 5401              ANL      A,#01H
002C37 FF                MOV      R7,A
002C38 E4                CLR      A
002C39 7807              MOV      R0,#07H
002C3B 120642            LCALL    ?C?LSHL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 87


002C3E D003              POP      AR3
002C40 D002              POP      AR2
002C42 D001              POP      AR1
002C44 D000              POP      AR0
002C46 123276            LCALL    ?L?COM0027
  164:     }
  165:   #endif
  166: }
002C49         ?C0569?APL:
002C49 22                RET      
----- FUNCTION APL_Entry (END) -------


----- FUNCTION _CFG_ROM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   74:         }
   75:     }
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
002C4A 8F82              MOV      DPL,R7
002C4C 8E83              MOV      DPH,R6
002C4E E4                CLR      A
002C4F 93                MOVC     A,@A+DPTR
002C50 FE                MOV      R6,A
002C51 7401              MOV      A,#01H
002C53 93                MOVC     A,@A+DPTR
002C54 FF                MOV      R7,A
002C55 22                RET      
----- FUNCTION _CFG_ROM_GET16 (END) -------


----- FUNCTION _CFG_RAM_SET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   75:     }
   76: 
;---- Variable 'vData' assigned to Register 'R4/R5' ----
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
002C56 A807              MOV      R0,AR7
002C58 EC                MOV      A,R4
002C59 F2                MOVX     @R0,A
002C5A 08                INC      R0
002C5B ED                MOV      A,R5
002C5C F2                MOVX     @R0,A
002C5D 22                RET      
----- FUNCTION _CFG_RAM_SET16 (END) -------


----- FUNCTION apl_ddm_GetEVBTemp (BEGIN) -----
 FILE: '..\apl\apl.c'
   50: static UINT16 apl_ddm_GetEVBTemp(void)
   51: {
   52:     UINT16  vRawADC;
   53: 
   54:     /* get raw ADC value, and record it */
   55:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_TEMP));
002C5E 7B03              MOV      R3,#03H
002C60 7D1F              MOV      R5,#01FH
002C62 7F1E              MOV      R7,#01EH
002C64 1232C0            LCALL    ?L?COM002D
002C67 7F20              MOV      R7,#020H
002C69 7E00              MOV      R6,#00H
002C6B 9156              ACALL    _CFG_RAM_SET16
002C6D         ?C0013?APL:
   56:     CFG_SET(DDM_ADC_EVB_TEMP, vRawADC);
   57: 
   58:     /* calibration */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 88


   59:     return apl_ddm_Calibrate(vRawADC,
   60:                              GET_SLOPE_DELTA(DDM_EVB_TEMP_Slope),
   61:                              TRUE);
002C6D D238              SETB     ?_apl_ddm_Calibrate?BIT
002C6F E4                CLR      A
002C70 FD                MOV      R5,A
;----                  JMP      ?L?COM0043
   62: }
----- FUNCTION apl_ddm_GetEVBTemp (END) -------


----- FUNCTION ?L?COM0043 (BEGIN) -----
002C71 AF2E              MOV      R7,vRawADC+01H
002C73 AE2D              MOV      R6,vRawADC
----- FUNCTION _apl_ddm_Calibrate (BEGIN) -----
 FILE: '..\apl\apl.c'
   28: static UINT16 apl_ddm_Calibrate
   29: (
002C75 8E30              MOV      vRawADC,R6
002C77 8F31              MOV      vRawADC+01H,R7
002C79 8D32              MOV      vSlopeDelta,R5
   30:     IN UINT16   vRawADC,
   31:     IN UINT8    vSlopeDelta,
   32:     IN BOOL     bSignDDM
   33: )
   34: {
   35:     SINT64  vTmpData;
   36:     SINT32  vTmpSlope, vTmpOffset;
   37: 
   38:     vTmpSlope  = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Slope,  vSlopeDelta);
002C7B E4                CLR      A
002C7C 2532              ADD      A,vSlopeDelta
002C7E 121FF1            LCALL    ?L?COM004C
002C81 8F3A              MOV      vTmpSlope+03H,R7
002C83 8E39              MOV      vTmpSlope+02H,R6
002C85 8D38              MOV      vTmpSlope+01H,R5
002C87 8C37              MOV      vTmpSlope,R4
   39:     vTmpOffset = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Offset, vSlopeDelta);
002C89 E532              MOV      A,vSlopeDelta
002C8B 2404              ADD      A,#04H
002C8D 121FF1            LCALL    ?L?COM004C
002C90 8F3E              MOV      vTmpOffset+03H,R7
002C92 8E3D              MOV      vTmpOffset+02H,R6
002C94 8D3C              MOV      vTmpOffset+01H,R5
002C96 8C3B              MOV      vTmpOffset,R4
   40: 
   41:     vTmpData = (((SINT64)vTmpSlope * vRawADC) >> Slope_ZoomIn_ShiftBits)
002C98 AE30              MOV      R6,vRawADC
002C9A AF31              MOV      R7,vRawADC+01H
002C9C E4                CLR      A
002C9D FC                MOV      R4,A
002C9E FD                MOV      R5,A
002C9F AB3A              MOV      R3,vTmpSlope+03H
002CA1 AA39              MOV      R2,vTmpSlope+02H
002CA3 A938              MOV      R1,vTmpSlope+01H
002CA5 A837              MOV      R0,vTmpSlope
002CA7 1205B8            LCALL    ?C?LMUL
002CAA 7808              MOV      R0,#08H
002CAC 12062E            LCALL    ?C?SLSHR
002CAF EF                MOV      A,R7
002CB0 253E              ADD      A,vTmpOffset+03H
002CB2 F536              MOV      vTmpData+03H,A
002CB4 EE                MOV      A,R6
002CB5 353D              ADDC     A,vTmpOffset+02H
002CB7 F535              MOV      vTmpData+02H,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 89


002CB9 ED                MOV      A,R5
002CBA 353C              ADDC     A,vTmpOffset+01H
002CBC F534              MOV      vTmpData+01H,A
002CBE EC                MOV      A,R4
002CBF 353B              ADDC     A,vTmpOffset
002CC1 F533              MOV      vTmpData,A
   42:                 + vTmpOffset;
   43: 
   44:     /* limit the calibrated value to 16-bit formatting,
   45:      *  to strictly follow MSA Standard.
   46:      */
   47:     return (UINT16)(bSignDDM? LIMIT_S16(vTmpData): LIMIT_U16(vTmpData));
002CC3 303831            JNB      bSignDDM,?C0001?APL
002CC6 E4                CLR      A
002CC7 7FFF              MOV      R7,#0FFH
002CC9 7E7F              MOV      R6,#07FH
002CCB 123284            LCALL    ?L?COM0028
002CCE C3                CLR      C
002CCF 120607            LCALL    ?C?SLCMP
002CD2 4006              JC       ?C0003?APL
002CD4 7E7F              MOV      R6,#07FH
002CD6 7FFF              MOV      R7,#0FFH
002CD8 8047              SJMP     ?C0002?APL
002CDA         ?C0003?APL:
002CDA 7F00              MOV      R7,#00H
002CDC 7E80              MOV      R6,#080H
002CDE 7DFF              MOV      R5,#0FFH
002CE0 7CFF              MOV      R4,#0FFH
002CE2 123286            LCALL    ?L?COM0029
002CE5 D3                SETB     C
002CE6 120607            LCALL    ?C?SLCMP
002CE9 5006              JNC      ?C0005?APL
002CEB 7E80              MOV      R6,#080H
002CED 7F00              MOV      R7,#00H
002CEF 8004              SJMP     ?C0006?APL
002CF1         ?C0005?APL:
002CF1 AE35              MOV      R6,vTmpData+02H
002CF3 AF36              MOV      R7,vTmpData+03H
002CF5         ?C0006?APL:
002CF5         ?C0004?APL:
002CF5 802A              SJMP     ?C0002?APL
002CF7         ?C0001?APL:
002CF7 E4                CLR      A
002CF8 7FFF              MOV      R7,#0FFH
002CFA 7EFF              MOV      R6,#0FFH
002CFC 123284            LCALL    ?L?COM0028
002CFF C3                CLR      C
002D00 120607            LCALL    ?C?SLCMP
002D03 4006              JC       ?C0007?APL
002D05 7EFF              MOV      R6,#0FFH
002D07 7FFF              MOV      R7,#0FFH
002D09 8016              SJMP     ?C0008?APL
002D0B         ?C0007?APL:
002D0B E4                CLR      A
002D0C FF                MOV      R7,A
002D0D FE                MOV      R6,A
002D0E 123284            LCALL    ?L?COM0028
002D11 D3                SETB     C
002D12 120607            LCALL    ?C?SLCMP
002D15 5006              JNC      ?C0009?APL
002D17 7E00              MOV      R6,#00H
002D19 7F00              MOV      R7,#00H
002D1B 8004              SJMP     ?C0010?APL
002D1D         ?C0009?APL:
002D1D AE35              MOV      R6,vTmpData+02H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 90


002D1F AF36              MOV      R7,vTmpData+03H
002D21         ?C0010?APL:
002D21         ?C0008?APL:
002D21         ?C0002?APL:
   48: }
002D21 22                RET      
----- FUNCTION _apl_ddm_Calibrate (END) -------


----- FUNCTION apl_ddm_GetEVBVCC (BEGIN) -----
 FILE: '..\apl\apl.c'
   64: static UINT16 apl_ddm_GetEVBVCC(void)
   65: {
   66:     UINT16  vRawADC;
   67: 
   68:     /* get raw ADC value, and record it */
   69:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VCC));
002D22 7B03              MOV      R3,#03H
002D24 7D1E              MOV      R5,#01EH
002D26 7F1F              MOV      R7,#01FH
002D28 1232C0            LCALL    ?L?COM002D
002D2B 7F22              MOV      R7,#022H
002D2D 7E00              MOV      R6,#00H
002D2F 9156              ACALL    _CFG_RAM_SET16
002D31         ?C0061?APL:
   70:     CFG_SET(DDM_ADC_EVB_VCC, vRawADC);
   71: 
   72:     /* calibration */
   73:     return apl_ddm_Calibrate(vRawADC,
   74:                              GET_SLOPE_DELTA(DDM_EVB_VCC_Slope),
   75:                              FALSE);
002D31 C238              CLR      ?_apl_ddm_Calibrate?BIT
002D33 7D08              MOV      R5,#08H
002D35 8171              AJMP     ?L?COM0043
   76: }
----- FUNCTION apl_ddm_GetEVBVCC (END) -------


----- FUNCTION apl_ddm_GetEVBVBUF (BEGIN) -----
 FILE: '..\apl\apl.c'
   78: static UINT16 apl_ddm_GetEVBVBUF(void)
   79: {
   80:     UINT16  vRawADC;
   81: 
   82:     /* get raw ADC value, and record it */
   83:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VBUF));
002D37 7B03              MOV      R3,#03H
002D39 7D1F              MOV      R5,#01FH
002D3B 7F0A              MOV      R7,#0AH
002D3D 1232C0            LCALL    ?L?COM002D
002D40 7F24              MOV      R7,#024H
002D42 7E00              MOV      R6,#00H
002D44 9156              ACALL    _CFG_RAM_SET16
002D46         ?C0109?APL:
   84:     CFG_SET(DDM_ADC_EVB_VBUF, vRawADC);
   85: 
   86:     /* calibration */
   87:     return apl_ddm_Calibrate(vRawADC,
   88:                              GET_SLOPE_DELTA(DDM_EVB_VBUF_Slope),
   89:                              FALSE);
002D46 C238              CLR      ?_apl_ddm_Calibrate?BIT
002D48 7D10              MOV      R5,#010H
002D4A 8171              AJMP     ?L?COM0043
   90: }
----- FUNCTION apl_ddm_GetEVBVBUF (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 91




----- FUNCTION _DRV_ADC_Sample (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   39: SINT16 DRV_ADC_Sample(UINT8 vPositive, UINT8 vNegative, UINT8 vAvgNum)
   40: {
;---- Variable 'vPositive' assigned to Register 'R7' ----
;---- Variable 'vAvgNum' assigned to Register 'R3' ----
;---- Variable 'vNegative' assigned to Register 'R5' ----
   41:     SINT16  vAdcSum;
   42:     UINT8   vLoop;
   43: 
   44:     /* select positive/negative channel */
   45:     AMX0P = vPositive;
002D4C 8FBB              MOV      AMX0P,R7
   46:     AMX0N = vNegative;
002D4E 8DBA              MOV      AMX0N,R5
   47: 
   48:     /* wait for ADC input stable */
   49:     DRV_CPU_DelayUs(ADC_SettlingTime);
002D50 7FC8              MOV      R7,#0C8H
002D52 7E00              MOV      R6,#00H
002D54 121A3E            LCALL    _DRV_CPU_DelayUs
   50: 
   51:     /* sampling */
   52:     vAdcSum = 0;
;---- Variable 'vAdcSum' assigned to Register 'R4/R5' ----
002D57 E4                CLR      A
002D58 FD                MOV      R5,A
002D59 FC                MOV      R4,A
   53:     for (vLoop = (1<<vAvgNum); vLoop > 0; vLoop--)
002D5A 04                INC      A
002D5B A803              MOV      R0,AR3
002D5D 08                INC      R0
002D5E 8002              SJMP     ?C0009?DRV_ADC
002D60         ?C0008?DRV_ADC:
002D60 C3                CLR      C
002D61 33                RLC      A
002D62         ?C0009?DRV_ADC:
002D62 D8FC              DJNZ     R0,?C0008?DRV_ADC
;---- Variable 'vLoop' assigned to Register 'R2' ----
002D64 FA                MOV      R2,A
002D65         ?C0001?DRV_ADC:
002D65 EA                MOV      A,R2
002D66 D3                SETB     C
002D67 9400              SUBB     A,#00H
002D69 401A              JC       ?C0002?DRV_ADC
   54:     {
   55:         /* clear the ADC last converted flag */
   56:         AD0INT = 0;
002D6B C2ED              CLR      AD0INT
   57: 
   58:         /* start a new ADC converting */
   59:         AD0BUSY = 1;
002D6D D2EC              SETB     AD0BUSY
002D6F         ?C0004?DRV_ADC:
   60: 
   61:         /* waiting for ADC converted */
   62:         while (!AD0INT)
002D6F 30EDFD            JNB      AD0INT,?C0004?DRV_ADC
   63:         {}
002D72         ?C0005?DRV_ADC:
   64: 
   65:         /* sum the ADC result */
   66:         vAdcSum += (SINT16)(((UINT16)ADC0H<<8)|ADC0L);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 92


002D72 AFBE              MOV      R7,ADC0H
002D74 EF                MOV      A,R7
002D75 FE                MOV      R6,A
002D76 A9BD              MOV      R1,ADC0L
002D78 E9                MOV      A,R1
002D79 F582              MOV      DPL,A
002D7B E582              MOV      A,DPL
002D7D 2D                ADD      A,R5
002D7E FD                MOV      R5,A
002D7F EE                MOV      A,R6
002D80 3C                ADDC     A,R4
002D81 FC                MOV      R4,A
   67:     }
002D82 1A                DEC      R2
002D83 80E0              SJMP     ?C0001?DRV_ADC
002D85         ?C0002?DRV_ADC:
   68: 
   69:     /* calculate the averaged value */
   70:     return (vAdcSum>>vAvgNum);
002D85 AF03              MOV      R7,AR3
002D87 ED                MOV      A,R5
002D88 AE04              MOV      R6,AR4
002D8A A807              MOV      R0,AR7
002D8C 08                INC      R0
002D8D 8006              SJMP     ?C0011?DRV_ADC
002D8F         ?C0010?DRV_ADC:
002D8F CE                XCH      A,R6
002D90 A2E7              MOV      C,ACC.7
002D92 13                RRC      A
002D93 CE                XCH      A,R6
002D94 13                RRC      A
002D95         ?C0011?DRV_ADC:
002D95 D8F8              DJNZ     R0,?C0010?DRV_ADC
002D97 FF                MOV      R7,A
   71: }
002D98 22                RET      
----- FUNCTION _DRV_ADC_Sample (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
002D99 C0E0              PUSH     ACC
002D9B C0D0              PUSH     PSW
002D9D 75D000            MOV      PSW,#00H
002DA0 C004              PUSH     AR4
002DA2 C005              PUSH     AR5
002DA4 C006              PUSH     AR6
002DA6 C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
002DA8 C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
002DAA AF0F              MOV      R7,vTickCount+03H
002DAC AE0E              MOV      R6,vTickCount+02H
002DAE AD0D              MOV      R5,vTickCount+01H
002DB0 AC0C              MOV      R4,vTickCount
002DB2 EF                MOV      A,R7
002DB3 2401              ADD      A,#01H
002DB5 F50F              MOV      vTickCount+03H,A
002DB7 E4                CLR      A
002DB8 3E                ADDC     A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 93


002DB9 F50E              MOV      vTickCount+02H,A
002DBB E4                CLR      A
002DBC 3D                ADDC     A,R5
002DBD F50D              MOV      vTickCount+01H,A
002DBF E4                CLR      A
002DC0 3C                ADDC     A,R4
002DC1 F50C              MOV      vTickCount,A
   45: }
002DC3 D007              POP      AR7
002DC5 D006              POP      AR6
002DC7 D005              POP      AR5
002DC9 D004              POP      AR4
002DCB D0D0              POP      PSW
002DCD D0E0              POP      ACC
002DCF 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
002DD0 C0E0              PUSH     ACC
002DD2 C083              PUSH     DPH
002DD4 C082              PUSH     DPL
002DD6 C0D0              PUSH     PSW
002DD8 75D000            MOV      PSW,#00H
002DDB C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
002DDD 121601            LCALL    Get_Interrupt_Source
002DE0 1217CB            LCALL    _thread_Pkt_Notify
   69:   #endif
   70: }
002DE3 D007              POP      AR7
002DE5 D0D0              POP      PSW
002DE7 D082              POP      DPL
002DE9 D083              POP      DPH
002DEB D0E0              POP      ACC
002DED 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   43: void DRV_USB_Init(void)
   44: {
   45:     UINT8   vData;
   46:     UINT8   vLoop;
   47: 
   48:     /* init USB manufacture string */
   49:     aManufacturerStr[1] = 0x03;
002DEE 900485            MOV      DPTR,#aManufacturerStr+01H
002DF1 7403              MOV      A,#03H
002DF3 F0                MOVX     @DPTR,A
   50:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002DF4 7F02              MOV      R7,#02H
002DF6         ?C0001?DRV_USB:
002DF6 EF                MOV      A,R7
002DF7 C3                CLR      C
002DF8 9422              SUBB     A,#022H
002DFA 5030              JNC      ?C0002?DRV_USB
   51:     {
   52:         vData = CFG_GETO8(EE_Vendor_Name, (vLoop>>1)-1);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 94


002DFC EF                MOV      A,R7
002DFD C3                CLR      C
002DFE 13                RRC      A
002DFF C3                CLR      C
002E00 9401              SUBB     A,#01H
002E02 2490              ADD      A,#090H
002E04 123257            LCALL    ?L?COM0025
002E07 4023              JC       ?C0002?DRV_USB
002E09 E52B              MOV      A,vData
002E0B 947F              SUBB     A,#07FH
002E0D 501D              JNC      ?C0002?DRV_USB
   53: 
   54:         if ((vData < 0x20) || (vData >= 0x7F))
   55:         {
   56:             break;
   57:         }
002E0F         ?C0004?DRV_USB:
   58: 
   59:         aManufacturerStr[vLoop+0] = vData;
002E0F 7484              MOV      A,#LOW aManufacturerStr
002E11 2F                ADD      A,R7
002E12 F582              MOV      DPL,A
002E14 E4                CLR      A
002E15 3404              ADDC     A,#HIGH aManufacturerStr
002E17 F583              MOV      DPH,A
002E19 E52B              MOV      A,vData
002E1B F0                MOVX     @DPTR,A
   60:         aManufacturerStr[vLoop+1] = 0;
002E1C 7485              MOV      A,#LOW aManufacturerStr+01H
002E1E 2F                ADD      A,R7
002E1F F582              MOV      DPL,A
002E21 E4                CLR      A
002E22 3404              ADDC     A,#HIGH aManufacturerStr+01H
002E24 F583              MOV      DPH,A
002E26 E4                CLR      A
002E27 F0                MOVX     @DPTR,A
   61:     }
002E28 0F                INC      R7
002E29 0F                INC      R7
002E2A 80CA              SJMP     ?C0001?DRV_USB
002E2C         ?C0002?DRV_USB:
   62:     aManufacturerStr[0] = vLoop;
002E2C 900484            MOV      DPTR,#aManufacturerStr
002E2F EF                MOV      A,R7
002E30 F0                MOVX     @DPTR,A
   63: 
   64:     /* init USB product string */
   65:     aProductStr[1] = 0x03;
002E31 9004A7            MOV      DPTR,#aProductStr+01H
002E34 7403              MOV      A,#03H
002E36 F0                MOVX     @DPTR,A
   66:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
002E37 7F02              MOV      R7,#02H
002E39         ?C0006?DRV_USB:
002E39 EF                MOV      A,R7
002E3A C3                CLR      C
002E3B 9422              SUBB     A,#022H
002E3D 5030              JNC      ?C0007?DRV_USB
   67:     {
   68:         vData = CFG_GETO8(EE_Vendor_PN, (vLoop>>1)-1);
002E3F EF                MOV      A,R7
002E40 C3                CLR      C
002E41 13                RRC      A
002E42 C3                CLR      C
002E43 9401              SUBB     A,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 95


002E45 24A0              ADD      A,#0A0H
002E47 123257            LCALL    ?L?COM0025
002E4A 4023              JC       ?C0007?DRV_USB
002E4C E52B              MOV      A,vData
002E4E 947F              SUBB     A,#07FH
002E50 501D              JNC      ?C0007?DRV_USB
   69: 
   70:         if ((vData < 0x20) || (vData >= 0x7F))
   71:         {
   72:             break;
   73:         }
002E52         ?C0009?DRV_USB:
   74: 
   75:         aProductStr[vLoop+0] = vData;
002E52 74A6              MOV      A,#LOW aProductStr
002E54 2F                ADD      A,R7
002E55 F582              MOV      DPL,A
002E57 E4                CLR      A
002E58 3404              ADDC     A,#HIGH aProductStr
002E5A F583              MOV      DPH,A
002E5C E52B              MOV      A,vData
002E5E F0                MOVX     @DPTR,A
   76:         aProductStr[vLoop+1] = 0;
002E5F 74A7              MOV      A,#LOW aProductStr+01H
002E61 2F                ADD      A,R7
002E62 F582              MOV      DPL,A
002E64 E4                CLR      A
002E65 3404              ADDC     A,#HIGH aProductStr+01H
002E67 F583              MOV      DPH,A
002E69 E4                CLR      A
002E6A F0                MOVX     @DPTR,A
   77:     }
002E6B 0F                INC      R7
002E6C 0F                INC      R7
002E6D 80CA              SJMP     ?C0006?DRV_USB
002E6F         ?C0007?DRV_USB:
   78:     aProductStr[0] = vLoop;
002E6F 9004A6            MOV      DPTR,#aProductStr
002E72 EF                MOV      A,R7
002E73 F0                MOVX     @DPTR,A
   79: 
   80:     /* init USB serial number string */
   81:     aSerialNumberStr[1] = 0x03;
002E74 9004C9            MOV      DPTR,#aSerialNumberStr+01H
002E77 7403              MOV      A,#03H
002E79 F0                MOVX     @DPTR,A
   82:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
002E7A 7F02              MOV      R7,#02H
002E7C         ?C0011?DRV_USB:
002E7C EF                MOV      A,R7
002E7D C3                CLR      C
002E7E 9422              SUBB     A,#022H
002E80 5030              JNC      ?C0012?DRV_USB
   83:     {
   84:         vData = CFG_GETO8(EE_Vendor_SN, (vLoop>>1)-1);
002E82 EF                MOV      A,R7
002E83 C3                CLR      C
002E84 13                RRC      A
002E85 C3                CLR      C
002E86 9401              SUBB     A,#01H
002E88 24B0              ADD      A,#0B0H
002E8A 123257            LCALL    ?L?COM0025
002E8D 4023              JC       ?C0012?DRV_USB
002E8F E52B              MOV      A,vData
002E91 947F              SUBB     A,#07FH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 96


002E93 501D              JNC      ?C0012?DRV_USB
   85: 
   86:         if ((vData < 0x20) || (vData >= 0x7F))
   87:         {
   88:             break;
   89:         }
002E95         ?C0014?DRV_USB:
   90: 
   91:         aSerialNumberStr[vLoop+0] = vData;
002E95 74C8              MOV      A,#LOW aSerialNumberStr
002E97 2F                ADD      A,R7
002E98 F582              MOV      DPL,A
002E9A E4                CLR      A
002E9B 3404              ADDC     A,#HIGH aSerialNumberStr
002E9D F583              MOV      DPH,A
002E9F E52B              MOV      A,vData
002EA1 F0                MOVX     @DPTR,A
   92:         aSerialNumberStr[vLoop+1] = 0;
002EA2 74C9              MOV      A,#LOW aSerialNumberStr+01H
002EA4 2F                ADD      A,R7
002EA5 F582              MOV      DPL,A
002EA7 E4                CLR      A
002EA8 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002EAA F583              MOV      DPH,A
002EAC E4                CLR      A
002EAD F0                MOVX     @DPTR,A
   93:     }
002EAE 0F                INC      R7
002EAF 0F                INC      R7
002EB0 80CA              SJMP     ?C0011?DRV_USB
002EB2         ?C0012?DRV_USB:
   94:     aSerialNumberStr[0] = vLoop;
002EB2 9004C8            MOV      DPTR,#aSerialNumberStr
002EB5 EF                MOV      A,R7
002EB6 F0                MOVX     @DPTR,A
   95: 
   96:     /* set USB0 to the high priority level interrupt */
   97:     EIP1 |= (1<<1);
002EB7 43F602            ORL      EIP1,#02H
   98: 
   99:     /* init USB device */
  100:     USB_Clock_Start();
002EBA 120046            LCALL    USB_Clock_Start
  101:     USB_Init(DRV_USB_VID,
002EBD 9004F1            MOV      DPTR,#?_USB_Init?BYTE+07H
002EC0 7401              MOV      A,#01H
002EC2 F0                MOVX     @DPTR,A
002EC3 A3                INC      DPTR
002EC4 7404              MOV      A,#HIGH aProductStr
002EC6 F0                MOVX     @DPTR,A
002EC7 A3                INC      DPTR
002EC8 74A6              MOV      A,#LOW aProductStr
002ECA F0                MOVX     @DPTR,A
002ECB A3                INC      DPTR
002ECC 7401              MOV      A,#01H
002ECE F0                MOVX     @DPTR,A
002ECF A3                INC      DPTR
002ED0 7404              MOV      A,#HIGH aSerialNumberStr
002ED2 F0                MOVX     @DPTR,A
002ED3 A3                INC      DPTR
002ED4 74C8              MOV      A,#LOW aSerialNumberStr
002ED6 F0                MOVX     @DPTR,A
002ED7 A3                INC      DPTR
002ED8 74FA              MOV      A,#0FAH
002EDA F0                MOVX     @DPTR,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 97


002EDB A3                INC      DPTR
002EDC 7480              MOV      A,#080H
002EDE F0                MOVX     @DPTR,A
002EDF A3                INC      DPTR
002EE0 7401              MOV      A,#01H
002EE2 F0                MOVX     @DPTR,A
002EE3 A3                INC      DPTR
002EE4 E4                CLR      A
002EE5 F0                MOVX     @DPTR,A
002EE6 7B01              MOV      R3,#01H
002EE8 7A04              MOV      R2,#HIGH aManufacturerStr
002EEA 7984              MOV      R1,#LOW aManufacturerStr
002EEC 7D61              MOV      R5,#061H
002EEE 7CEA              MOV      R4,#0EAH
002EF0 7FC4              MOV      R7,#0C4H
002EF2 7E10              MOV      R6,#010H
002EF4 120E90            LCALL    _USB_Init
  102:              DRV_USB_PID,
  103:              aManufacturerStr,
  104:              aProductStr,
  105:              aSerialNumberStr,
  106:              0xFA,      /* maximum current: 500mA */
  107:              0x80,      /* bus-powered, remote wakeup is unsupported */
  108:              0x100);    /* device release number 1.00 */
  109: 
  110:     /* the USB_Init() API will auto-enable global interrupt,
  111:      * disable it here, and will be enabled later.
  112:      */
  113:     DRV_INT_GlobalDisableInterrupt();
002EF7 C2AF              CLR      EA
  114: }
002EF9 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
  230:     c2m_SetIns(0x1);    /* instruction: write data */
002EFA D243              SETB     bIns0
002EFC C244              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
002EFE C245              CLR      bLength0
002F00 C246              CLR      bLength1
  232:     c2m_SetData(vData);
002F02 8F26              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
002F04 30AF05            JNB      EA,?C0355?DRV_C2M
002F07 C2AF              CLR      EA
002F09 D3                SETB     C
002F0A 8001              SJMP     ?C0356?DRV_C2M
002F0C         ?C0355?DRV_C2M:
002F0C C3                CLR      C
002F0D         ?C0356?DRV_C2M:
002F0D 1231B3            LCALL    ?L?COM0017
002F10 00                NOP      
002F11 00                NOP      
002F12 00                NOP      
002F13 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 98


002F14 12324B            LCALL    ?L?COM0024
002F17 00                NOP      
002F18 00                NOP      
002F19 00                NOP      
002F1A 00                NOP      
002F1B 1232F4            LCALL    ?L?COM0033
002F1E 00                NOP      
002F1F 00                NOP      
002F20 00                NOP      
002F21 00                NOP      
002F22 1233E6            LCALL    ?L?COM004F
002F25 00                NOP      
002F26 00                NOP      
002F27 00                NOP      
002F28 00                NOP      
002F29 1233DD            LCALL    ?L?COM004E
002F2C 00                NOP      
002F2D 00                NOP      
002F2E 00                NOP      
002F2F 00                NOP      
002F30 12342E            LCALL    ?L?COM0057
002F33 00                NOP      
002F34 00                NOP      
002F35 00                NOP      
002F36 00                NOP      
002F37 123425            LCALL    ?L?COM0056
002F3A 00                NOP      
002F3B 00                NOP      
002F3C 00                NOP      
002F3D 00                NOP      
002F3E 12341C            LCALL    ?L?COM0055
002F41 00                NOP      
002F42 00                NOP      
002F43 00                NOP      
002F44 00                NOP      
002F45 123413            LCALL    ?L?COM0054
002F48 00                NOP      
002F49 00                NOP      
002F4A 00                NOP      
002F4B 00                NOP      
002F4C 12340A            LCALL    ?L?COM0053
002F4F 00                NOP      
002F50 00                NOP      
002F51 00                NOP      
002F52 00                NOP      
002F53 123401            LCALL    ?L?COM0052
002F56 00                NOP      
002F57 00                NOP      
002F58 00                NOP      
002F59 00                NOP      
002F5A 1233F8            LCALL    ?L?COM0051
002F5D 00                NOP      
002F5E 00                NOP      
002F5F 00                NOP      
002F60 00                NOP      
002F61 1233EF            LCALL    ?L?COM0050
002F64 00                NOP      
002F65 00                NOP      
002F66 00                NOP      
002F67 00                NOP      
002F68 12332F            LCALL    ?L?COM003A
002F6B 00                NOP      
002F6C D297              SETB     IO_DUT_C2M_SCL
002F6E 00                NOP      
002F6F 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 99


  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
  240:     c2m_TxByte();       /* tx address */
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
002F70 754727            MOV      _timeout,#027H
002F73 754810            MOV      _timeout+01H,#010H
002F76         ?C0557?DRV_C2M:
002F76 00                NOP      
002F77 00                NOP      
002F78 C297              CLR      IO_DUT_C2M_SCL
002F7A 00                NOP      
002F7B 00                NOP      
002F7C 121A34            LCALL    ?L?COM0007
002F7F 20300D            JB       bC2Bit0,?C0570?DRV_C2M
002F82 E548              MOV      A,_timeout+01H
002F84 1548              DEC      _timeout+01H
002F86 AE47              MOV      R6,_timeout
002F88 7002              JNZ      ?C1013?DRV_C2M
002F8A 1547              DEC      _timeout
002F8C         ?C1013?DRV_C2M:
002F8C 4E                ORL      A,R6
002F8D 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
002F8F         ?C0570?DRV_C2M:
002F8F 023240            LJMP     ?L?COM0022
  244: 
  245:     /* unlock globally interrupt */
  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
002F92 C283              CLR      IO_DUT_MDIOM_SCL_OEn
002F94 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
002F96 A248              MOV      C,bMdioPreamble
002F98 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F9A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F9C C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F9E A248              MOV      C,bMdioPreamble
002FA0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FA2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FA4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FA6 A248              MOV      C,bMdioPreamble
002FA8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FAA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FAC C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FAE A248              MOV      C,bMdioPreamble
002FB0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FB2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FB4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FB6 A248              MOV      C,bMdioPreamble
002FB8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FBA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FBC C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FBE A248              MOV      C,bMdioPreamble
002FC0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FC2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FC4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FC6 A248              MOV      C,bMdioPreamble
002FC8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FCA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FCC C296              CLR      IO_DUT_MDIOM_SCL_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 100


002FCE A248              MOV      C,bMdioPreamble
002FD0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FD2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FD4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FD6 A248              MOV      C,bMdioPreamble
002FD8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FDA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FDC C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FDE A248              MOV      C,bMdioPreamble
002FE0         ?L?COM0002:
002FE0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FE2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FE4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FE6 A248              MOV      C,bMdioPreamble
002FE8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FEA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FEC C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FEE A248              MOV      C,bMdioPreamble
002FF0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FF2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FF4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FF6 A248              MOV      C,bMdioPreamble
002FF8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FFA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FFC C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FFE A248              MOV      C,bMdioPreamble
003000 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003002 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003004 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003006 A248              MOV      C,bMdioPreamble
003008 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00300A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00300C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00300E A248              MOV      C,bMdioPreamble
003010 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003012 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003014 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003016 A248              MOV      C,bMdioPreamble
003018 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00301A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00301C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00301E A248              MOV      C,bMdioPreamble
003020 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003022 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003024 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003026 A248              MOV      C,bMdioPreamble
003028 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00302A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00302C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00302E A248              MOV      C,bMdioPreamble
003030 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003032 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003034 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003036 A248              MOV      C,bMdioPreamble
003038 22                RET      
----- FUNCTION ?L?COM0001 (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
003039 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00303B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00303D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00303F A20F              MOV      C,bMdioStartFrame1
003041 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003043 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 101


003045 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003047 A20E              MOV      C,bMdioStartFrame0
003049 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00304B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00304D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00304F A20D              MOV      C,bMdioOperationCode1
003051 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003053 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003055 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003057 A20C              MOV      C,bMdioOperationCode0
003059 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00305B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00305D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00305F A20B              MOV      C,bMdioPortAddr4
003061 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003063 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003065 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003067 A20A              MOV      C,bMdioPortAddr3
003069 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00306B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00306D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00306F A209              MOV      C,bMdioPortAddr2
003071 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003073 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003075 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003077 A208              MOV      C,bMdioPortAddr1
003079 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00307B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00307D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00307F A207              MOV      C,bMdioPortAddr0
003081 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003083 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003085 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003087 A206              MOV      C,bMdioDeviceAddr4
003089 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00308B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00308D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00308F A205              MOV      C,bMdioDeviceAddr3
003091 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003093 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003095 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003097 A204              MOV      C,bMdioDeviceAddr2
003099 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00309B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00309D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00309F A203              MOV      C,bMdioDeviceAddr1
0030A1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030A3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030A5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030A7 A202              MOV      C,bMdioDeviceAddr0
0030A9         ?L?COM0004:
0030A9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030AB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030AD C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030AF 22                RET      
----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
0030B0 C20C              CLR      bMdioOperationCode0
0030B2         ?L?COM0006:
0030B2 EF                MOV      A,R7
0030B3 C4                SWAP     A
0030B4 540F              ANL      A,#0FH
0030B6 13                RRC      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 102


0030B7 920B              MOV      bMdioPortAddr4,C
0030B9 EF                MOV      A,R7
0030BA 13                RRC      A
0030BB 13                RRC      A
0030BC 13                RRC      A
0030BD 541F              ANL      A,#01FH
0030BF 13                RRC      A
0030C0 920A              MOV      bMdioPortAddr3,C
0030C2 EF                MOV      A,R7
0030C3 13                RRC      A
0030C4 13                RRC      A
0030C5 543F              ANL      A,#03FH
0030C7 13                RRC      A
0030C8 9209              MOV      bMdioPortAddr2,C
0030CA EF                MOV      A,R7
0030CB C3                CLR      C
0030CC 13                RRC      A
0030CD 13                RRC      A
0030CE 9208              MOV      bMdioPortAddr1,C
0030D0 EF                MOV      A,R7
0030D1 13                RRC      A
0030D2 9207              MOV      bMdioPortAddr0,C
0030D4 ED                MOV      A,R5
0030D5 C4                SWAP     A
0030D6 540F              ANL      A,#0FH
0030D8 13                RRC      A
0030D9 9206              MOV      bMdioDeviceAddr4,C
0030DB ED                MOV      A,R5
0030DC 13                RRC      A
0030DD 13                RRC      A
0030DE 13                RRC      A
0030DF 541F              ANL      A,#01FH
0030E1 13                RRC      A
0030E2 9205              MOV      bMdioDeviceAddr3,C
0030E4 ED                MOV      A,R5
0030E5 13                RRC      A
0030E6 13                RRC      A
0030E7 543F              ANL      A,#03FH
0030E9 13                RRC      A
0030EA 9204              MOV      bMdioDeviceAddr2,C
0030EC ED                MOV      A,R5
0030ED C3                CLR      C
0030EE 13                RRC      A
0030EF 13                RRC      A
0030F0 9203              MOV      bMdioDeviceAddr1,C
0030F2 ED                MOV      A,R5
0030F3 13                RRC      A
0030F4 9202              MOV      bMdioDeviceAddr0,C
0030F6 D201              SETB     bMdioTurnAround1
0030F8 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
0030F9 7819              MOV      R0,#019H
0030FB E2                MOVX     A,@R0
0030FC C4                SWAP     A
0030FD 13                RRC      A
0030FE 13                RRC      A
0030FF 13                RRC      A
003100 5401              ANL      A,#01H
003102         ?L?COM000A:
003102 FF                MOV      R7,A
003103 EF                MOV      A,R7
003104 5401              ANL      A,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 103


003106 FB                MOV      R3,A
003107 E4                CLR      A
003108 FA                MOV      R2,A
003109 F9                MOV      R1,A
00310A F8                MOV      R0,A
00310B AF2C              MOV      R7,_v
00310D FC                MOV      R4,A
00310E FD                MOV      R5,A
00310F FE                MOV      R6,A
003110 C3                CLR      C
003111 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
003114 7F03              MOV      R7,#03H
003116 7E00              MOV      R6,#00H
003118 121A3E            LCALL    _DRV_CPU_DelayUs
00311B         ?L?COM000C:
00311B C292              CLR      IO_DUT_I2CM_SDA
00311D         ?L?COM000D:
00311D 7F03              MOV      R7,#03H
00311F 7E00              MOV      R6,#00H
003121 021A3E            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000E (BEGIN) -----
003124 7841              MOV      R0,#LOW _timeout
003126         ?L?COM000F:
003126 74FF              MOV      A,#0FFH
003128 120667            LCALL    ?C?LLDIIDATA8
00312B EC                MOV      A,R4
00312C 4D                ORL      A,R5
00312D 4E                ORL      A,R6
00312E 4F                ORL      A,R7
00312F 22                RET      
----- FUNCTION ?L?COM000E (END) -------


----- FUNCTION ?L?COM0010 (BEGIN) -----
003130 753300            MOV      pPayload,#HIGH vFrame+0CH
003133 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
003136 853482            MOV      DPL,pPayload+01H
003139 853383            MOV      DPH,pPayload
00313C E0                MOVX     A,@DPTR
00313D FF                MOV      R7,A
00313E A3                INC      DPTR
00313F E0                MOVX     A,@DPTR
003140 FD                MOV      R5,A
003141 853482            MOV      DPL,pPayload+01H
003144 853383            MOV      DPH,pPayload
003147 A3                INC      DPTR
003148 A3                INC      DPTR
003149 E0                MOVX     A,@DPTR
00314A FA                MOV      R2,A
00314B A3                INC      DPTR
00314C E0                MOVX     A,@DPTR
00314D FB                MOV      R3,A
00314E E534              MOV      A,pPayload+01H
003150 2404              ADD      A,#04H
003152 F582              MOV      DPL,A
003154 E4                CLR      A
003155 3533              ADDC     A,pPayload
003157 F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 104


003159 E0                MOVX     A,@DPTR
00315A F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
00315C A3                INC      DPTR
00315D E0                MOVX     A,@DPTR
00315E F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
003160 E534              MOV      A,pPayload+01H
003162 2406              ADD      A,#06H
003164 F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
003166 E4                CLR      A
003167 3533              ADDC     A,pPayload
003169 F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
00316B 22                RET      
----- FUNCTION ?L?COM0010 (END) -------


----- FUNCTION ?L?COM0011 (BEGIN) -----
00316C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00316E A280              MOV      C,IO_DUT_MDIOM_SDA_IN
003170 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003172 22                RET      
----- FUNCTION ?L?COM0011 (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
003173 7B4C              MOV      R3,#LOW vFrame+0CH
003175 7A00              MOV      R2,#HIGH vFrame+0CH
003177 EB                MOV      A,R3
003178 2406              ADD      A,#06H
00317A F534              MOV      pBuf+01H,A
00317C E4                CLR      A
00317D 3A                ADDC     A,R2
00317E F533              MOV      pBuf,A
003180 8B82              MOV      DPL,R3
003182 8A83              MOV      DPH,R2
003184 A3                INC      DPTR
003185 A3                INC      DPTR
003186 E0                MOVX     A,@DPTR
003187 FE                MOV      R6,A
003188 A3                INC      DPTR
003189 E0                MOVX     A,@DPTR
00318A 8E35              MOV      vAddr,R6
00318C F536              MOV      vAddr+01H,A
00318E EB                MOV      A,R3
00318F 2404              ADD      A,#04H
003191 F582              MOV      DPL,A
003193 E4                CLR      A
003194 3A                ADDC     A,R2
003195 F583              MOV      DPH,A
003197         ?L?COM0013:
003197 E0                MOVX     A,@DPTR
003198 F537              MOV      vLen,A
00319A A3                INC      DPTR
00319B E0                MOVX     A,@DPTR
00319C F538              MOV      vLen+01H,A
00319E 22                RET      
----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
00319F 121B6D            LCALL    _drv_c2m_WriteData
0031A2 AF03              MOV      R7,AR3
0031A4         ?L?COM0015:
0031A4 121B6D            LCALL    _drv_c2m_WriteData
0031A7         ?L?COM0016:
0031A7 E4                CLR      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 105


0031A8 754410            MOV      _timeout+03H,#010H
0031AB 754327            MOV      _timeout+02H,#027H
0031AE F542              MOV      _timeout+01H,A
0031B0 F541              MOV      _timeout,A
0031B2 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM0017 (BEGIN) -----
0031B3 9239              MOV      bIntState,C
0031B5 53A6FE            ANL      P2MDOUT,#0FEH
0031B8 43A580            ORL      P1MDOUT,#080H
0031BB         ?L?COM0018:
0031BB A241              MOV      C,bHigh
0031BD 92A0              MOV      IO_DUT_C2M_SDA,C
0031BF C297              CLR      IO_DUT_C2M_SCL
0031C1 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM0019 (BEGIN) -----
0031C2 E53A              MOV      A,vWriteLen+01H
0031C4 2534              ADD      A,pBuf+01H
0031C6 F534              MOV      pBuf+01H,A
0031C8 E539              MOV      A,vWriteLen
0031CA 3533              ADDC     A,pBuf
0031CC F533              MOV      pBuf,A
0031CE E53A              MOV      A,vWriteLen+01H
0031D0 2536              ADD      A,vAddr+01H
0031D2 F536              MOV      vAddr+01H,A
0031D4 E539              MOV      A,vWriteLen
0031D6 3535              ADDC     A,vAddr
0031D8 F535              MOV      vAddr,A
0031DA C3                CLR      C
0031DB E538              MOV      A,vLen+01H
0031DD 953A              SUBB     A,vWriteLen+01H
0031DF F538              MOV      vLen+01H,A
0031E1 E537              MOV      A,vLen
0031E3 9539              SUBB     A,vWriteLen
0031E5 F537              MOV      vLen,A
0031E7 22                RET      
----- FUNCTION ?L?COM0019 (END) -------


----- FUNCTION ?L?COM001A (BEGIN) -----
0031E8 E538              MOV      A,vWriteLen+01H
0031EA 253C              ADD      A,vLoop+01H
0031EC FD                MOV      R5,A
0031ED E537              MOV      A,vWriteLen
0031EF 353B              ADDC     A,vLoop
0031F1 FC                MOV      R4,A
0031F2 E536              MOV      A,pPayload+01H
0031F4 2405              ADD      A,#05H
0031F6 F582              MOV      DPL,A
0031F8 E4                CLR      A
0031F9 3535              ADDC     A,pPayload
0031FB F583              MOV      DPH,A
0031FD E582              MOV      A,DPL
0031FF 2D                ADD      A,R5
003200 F582              MOV      DPL,A
003202 E583              MOV      A,DPH
003204 3C                ADDC     A,R4
003205 F583              MOV      DPH,A
003207 EF                MOV      A,R7
003208 F0                MOVX     @DPTR,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 106


003209 053C              INC      vLoop+01H
00320B E53C              MOV      A,vLoop+01H
00320D 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001B (BEGIN) -----
00320E E0                MOVX     A,@DPTR
00320F FC                MOV      R4,A
003210 A3                INC      DPTR
003211 E0                MOVX     A,@DPTR
003212 FD                MOV      R5,A
003213 A3                INC      DPTR
003214 E0                MOVX     A,@DPTR
003215 FE                MOV      R6,A
003216 A3                INC      DPTR
003217 E0                MOVX     A,@DPTR
003218 FF                MOV      R7,A
003219         ?L?COM001C:
003219 AB0F              MOV      R3,vTickCount+03H
00321B AA0E              MOV      R2,vTickCount+02H
00321D A90D              MOV      R1,vTickCount+01H
00321F A80C              MOV      R0,vTickCount
003221 C3                CLR      C
003222 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM001B (END) -------


----- FUNCTION ?L?COM001D (BEGIN) -----
003225 7819              MOV      R0,#019H
003227 E2                MOVX     A,@R0
003228         ?L?COM001E:
003228 FF                MOV      R7,A
003229 E4                CLR      A
00322A FC                MOV      R4,A
00322B FD                MOV      R5,A
00322C FE                MOV      R6,A
00322D EF                MOV      A,R7
00322E 22                RET      
----- FUNCTION ?L?COM001D (END) -------


----- FUNCTION ?L?COM001F (BEGIN) -----
00322F 7F04              MOV      R7,#04H
003231         ?L?COM0020:
003231 FE                MOV      R6,A
003232 122A81            LCALL    _CFG_RAM_GET16
003235 AD07              MOV      R5,AR7
003237 AC06              MOV      R4,AR6
003239 22                RET      
----- FUNCTION ?L?COM001F (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
00323A A2A0              MOV      C,IO_DUT_C2M_SDA
00323C D297              SETB     IO_DUT_C2M_SCL
00323E 9237              MOV      bC2Bit7,C
003240         ?L?COM0022:
003240 53A6FE            ANL      P2MDOUT,#0FEH
003243         ?L?COM0023:
003243 53A57F            ANL      P1MDOUT,#07FH
003246 A239              MOV      C,bIntState
003248 92AF              MOV      EA,C
00324A 22                RET      
----- FUNCTION ?L?COM0021 (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 107




----- FUNCTION ?L?COM0024 (BEGIN) -----
00324B D297              SETB     IO_DUT_C2M_SCL
00324D 43A601            ORL      P2MDOUT,#01H
003250 A243              MOV      C,bIns0
003252 92A0              MOV      IO_DUT_C2M_SDA,C
003254 C297              CLR      IO_DUT_C2M_SCL
003256 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
003257 FD                MOV      R5,A
003258 E4                CLR      A
003259 3439              ADDC     A,#039H
00325B 8D82              MOV      DPL,R5
00325D F583              MOV      DPH,A
00325F E4                CLR      A
003260 93                MOVC     A,@A+DPTR
003261 F52B              MOV      vData,A
003263 C3                CLR      C
003264 9420              SUBB     A,#020H
003266 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
003267 121B6D            LCALL    _drv_c2m_WriteData
00326A E4                CLR      A
00326B 753610            MOV      _timeout+03H,#010H
00326E 753527            MOV      _timeout+02H,#027H
003271 F534              MOV      _timeout+01H,A
003273 F533              MOV      _timeout,A
003275 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
003276 EF                MOV      A,R7
003277 4B                ORL      A,R3
003278 FF                MOV      R7,A
003279 EE                MOV      A,R6
00327A 4A                ORL      A,R2
00327B ED                MOV      A,R5
00327C 49                ORL      A,R1
00327D EC                MOV      A,R4
00327E 48                ORL      A,R0
00327F 7819              MOV      R0,#019H
003281 EF                MOV      A,R7
003282 F2                MOVX     @R0,A
003283 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
003284 FD                MOV      R5,A
003285 FC                MOV      R4,A
003286         ?L?COM0029:
003286 AB36              MOV      R3,vTmpData+03H
003288 AA35              MOV      R2,vTmpData+02H
00328A A934              MOV      R1,vTmpData+01H
00328C A833              MOV      R0,vTmpData
00328E 22                RET      
----- FUNCTION ?L?COM0028 (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 108




----- FUNCTION ?L?COM002A (BEGIN) -----
00328F 121D29            LCALL    c2m_ReadDR
003292 EF                MOV      A,R7
003293 640D              XRL      A,#0DH
003295 22                RET      
----- FUNCTION ?L?COM002A (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
003296 43A580            ORL      P1MDOUT,#080H
003299 C297              CLR      IO_DUT_C2M_SCL
00329B 7F14              MOV      R7,#014H
00329D 7E00              MOV      R6,#00H
00329F 121A3E            LCALL    _DRV_CPU_DelayUs
0032A2 D297              SETB     IO_DUT_C2M_SCL
0032A4 7F02              MOV      R7,#02H
0032A6 7E00              MOV      R6,#00H
0032A8 021A3E            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
0032AB F583              MOV      DPH,A
0032AD 7401              MOV      A,#01H
0032AF 93                MOVC     A,@A+DPTR
0032B0 FA                MOV      R2,A
0032B1 7402              MOV      A,#02H
0032B3 93                MOVC     A,@A+DPTR
0032B4 F9                MOV      R1,A
0032B5 120704            LCALL    ?C?ICALL
0032B8 052A              INC      i
0032BA E52A              MOV      A,i
0032BC C3                CLR      C
0032BD 9403              SUBB     A,#03H
0032BF 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
0032C0 122D4C            LCALL    _DRV_ADC_Sample
0032C3 8E2D              MOV      vRawADC,R6
0032C5 8F2E              MOV      vRawADC+01H,R7
0032C7 AD2E              MOV      R5,vRawADC+01H
0032C9 AC2D              MOV      R4,vRawADC
0032CB 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
0032CC E4                CLR      A
0032CD 90004A            MOV      DPTR,#vFrame+0AH
0032D0 F0                MOVX     @DPTR,A
0032D1 A3                INC      DPTR
0032D2 F0                MOVX     @DPTR,A
0032D3 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
0032D4 D282              SETB     IO_DUT_I2CM_SCL
0032D6 753F01            MOV      _loop,#01H
0032D9 7540F4            MOV      _loop+01H,#0F4H
0032DC 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 109


----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
0032DD 7E38              MOV      R6,#038H
0032DF 122C4A            LCALL    _CFG_ROM_GET16
0032E2 E4                CLR      A
0032E3 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
0032E4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0032E6 D294              SETB     IO_DUT_MDIOM_SDA_OUT
0032E8 D283              SETB     IO_DUT_MDIOM_SCL_OEn
0032EA D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
0032EC 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
0032ED E540              MOV      A,vLen+01H
0032EF 1540              DEC      vLen+01H
0032F1 AE3F              MOV      R6,vLen
0032F3 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0033 (BEGIN) -----
0032F4 D297              SETB     IO_DUT_C2M_SCL
0032F6 A244              MOV      C,bIns1
0032F8 92A0              MOV      IO_DUT_C2M_SDA,C
0032FA C297              CLR      IO_DUT_C2M_SCL
0032FC 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
0032FD 7E04              MOV      R6,#04H
0032FF 7F44              MOV      R7,#044H
003301 7D00              MOV      R5,#00H
003303         ?L?COM0035:
003303 7B01              MOV      R3,#01H
003305 7A00              MOV      R2,#HIGH vFrame
003307 7940              MOV      R1,#LOW vFrame
003309 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0036 (BEGIN) -----
00330A 92AF              MOV      EA,C
00330C         ?L?COM0037:
00330C E524              MOV      A,vMdioData
00330E F0                MOVX     @DPTR,A
00330F A3                INC      DPTR
003310 E525              MOV      A,vMdioData+01H
003312 F0                MOVX     @DPTR,A
003313 A200              MOV      C,bMdioTurnAround0
003315 22                RET      
----- FUNCTION ?L?COM0036 (END) -------


----- FUNCTION ?L?COM0038 (BEGIN) -----
003316 7E38              MOV      R6,#038H
003318 121FF6            LCALL    _CFG_ROM_GET32
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 110


00331B AB47              MOV      R3,vPasswd+03H
00331D AA46              MOV      R2,vPasswd+02H
00331F A945              MOV      R1,vPasswd+01H
003321 A844              MOV      R0,vPasswd
003323 C3                CLR      C
003324 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0038 (END) -------


----- FUNCTION ?L?COM0039 (BEGIN) -----
003327 853482            MOV      DPL,pPayload+01H
00332A 853383            MOV      DPH,pPayload
00332D A3                INC      DPTR
00332E 22                RET      
----- FUNCTION ?L?COM0039 (END) -------


----- FUNCTION ?L?COM003A (BEGIN) -----
00332F D297              SETB     IO_DUT_C2M_SCL
003331 53A6FE            ANL      P2MDOUT,#0FEH
003334 D2A0              SETB     IO_DUT_C2M_SDA
003336 C297              CLR      IO_DUT_C2M_SCL
003338 22                RET      
----- FUNCTION ?L?COM003A (END) -------


----- FUNCTION ?L?COM003B (BEGIN) -----
003339 8F82              MOV      DPL,R7
00333B 8E83              MOV      DPH,R6
00333D A3                INC      DPTR
00333E A3                INC      DPTR
00333F A3                INC      DPTR
003340 E0                MOVX     A,@DPTR
003341 F539              MOV      vReadLen,A
003343 A3                INC      DPTR
003344 E0                MOVX     A,@DPTR
003345 F53A              MOV      vReadLen+01H,A
003347 22                RET      
----- FUNCTION ?L?COM003B (END) -------


----- FUNCTION ?L?COM003C (BEGIN) -----
003348 121B6D            LCALL    _drv_c2m_WriteData
00334B E4                CLR      A
00334C 753A10            MOV      _timeout+03H,#010H
00334F 753927            MOV      _timeout+02H,#027H
003352 F538              MOV      _timeout+01H,A
003354 F537              MOV      _timeout,A
003356 22                RET      
----- FUNCTION ?L?COM003C (END) -------


----- FUNCTION ?L?COM003D (BEGIN) -----
003357 AE46              MOV      R6,pSrcAddr
003359 AF47              MOV      R7,pSrcAddr+01H
00335B AD07              MOV      R5,AR7
00335D AC06              MOV      R4,AR6
00335F E9                MOV      A,R1
003360 FB                MOV      R3,A
003361 7A00              MOV      R2,#00H
003363 C23A              CLR      ?_drv_flash_WriteBytes?BIT
003365 22                RET      
----- FUNCTION ?L?COM003D (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 111


----- FUNCTION ?L?COM003E (BEGIN) -----
003366 5401              ANL      A,#01H
003368 FF                MOV      R7,A
003369 E4                CLR      A
00336A 7B01              MOV      R3,#01H
00336C FA                MOV      R2,A
00336D F9                MOV      R1,A
00336E F8                MOV      R0,A
00336F C3                CLR      C
003370 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM003E (END) -------


----- FUNCTION ?L?COM003F (BEGIN) -----
003373 D282              SETB     IO_DUT_I2CM_SCL
003375 754001            MOV      _loop,#01H
003378 7541F4            MOV      _loop+01H,#0F4H
00337B 22                RET      
----- FUNCTION ?L?COM003F (END) -------


----- FUNCTION ?L?COM0040 (BEGIN) -----
00337C D282              SETB     IO_DUT_I2CM_SCL
00337E 753D01            MOV      _loop,#01H
003381 753EF4            MOV      _loop+01H,#0F4H
003384 22                RET      
----- FUNCTION ?L?COM0040 (END) -------


----- FUNCTION ?L?COM0041 (BEGIN) -----
003385 E540              MOV      A,pBuf+01H
003387 2542              ADD      A,vLoop
003389 F582              MOV      DPL,A
00338B E4                CLR      A
00338C 353F              ADDC     A,pBuf
00338E F583              MOV      DPH,A
003390 E0                MOVX     A,@DPTR
003391 22                RET      
----- FUNCTION ?L?COM0041 (END) -------


----- FUNCTION ?L?COM0042 (BEGIN) -----
003392 7819              MOV      R0,#019H
003394 E2                MOVX     A,@R0
003395 13                RRC      A
003396 13                RRC      A
003397 543F              ANL      A,#03FH
003399 22                RET      
----- FUNCTION ?L?COM0042 (END) -------


----- FUNCTION ?L?COM0045 (BEGIN) -----
00339A D3                SETB     C
00339B E541              MOV      A,vPID
00339D 6480              XRL      A,#080H
00339F 9482              SUBB     A,#082H
0033A1 22                RET      
----- FUNCTION ?L?COM0045 (END) -------


----- FUNCTION ?L?COM0046 (BEGIN) -----
0033A2 ED                MOV      A,R5
0033A3 9F                SUBB     A,R7
0033A4 EE                MOV      A,R6
0033A5 6480              XRL      A,#080H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 112


0033A7 F8                MOV      R0,A
0033A8 EC                MOV      A,R4
0033A9 6480              XRL      A,#080H
0033AB 98                SUBB     A,R0
0033AC 22                RET      
----- FUNCTION ?L?COM0046 (END) -------


----- FUNCTION ?L?COM0047 (BEGIN) -----
0033AD 2480              ADD      A,#080H
0033AF FF                MOV      R7,A
0033B0 EE                MOV      A,R6
0033B1 3436              ADDC     A,#036H
0033B3 FE                MOV      R6,A
0033B4 7C00              MOV      R4,#00H
0033B6 EF                MOV      A,R7
0033B7 22                RET      
----- FUNCTION ?L?COM0047 (END) -------


----- FUNCTION ?L?COM0048 (BEGIN) -----
0033B8 C3                CLR      C
0033B9         ?L?COM0049:
0033B9 E541              MOV      A,vPID
0033BB 6480              XRL      A,#080H
0033BD 9481              SUBB     A,#081H
0033BF 22                RET      
----- FUNCTION ?L?COM0048 (END) -------


----- FUNCTION ?L?COM004A (BEGIN) -----
0033C0 120262            LCALL    _printf
0033C3 900048            MOV      DPTR,#vFrame+08H
0033C6 7403              MOV      A,#03H
0033C8 F0                MOVX     @DPTR,A
0033C9 A3                INC      DPTR
0033CA 22                RET      
----- FUNCTION ?L?COM004A (END) -------


----- FUNCTION ?L?COM004B (BEGIN) -----
0033CB D200              SETB     bMdioTurnAround0
0033CD 74FF              MOV      A,#0FFH
0033CF F524              MOV      vMdioData,A
0033D1 F525              MOV      vMdioData+01H,A
0033D3 22                RET      
----- FUNCTION ?L?COM004B (END) -------


----- FUNCTION ?L?COM004D (BEGIN) -----
0033D4 8E3B              MOV      vAddr,R6
0033D6 8F3C              MOV      vAddr+01H,R7
0033D8 8C3D              MOV      pBuf,R4
0033DA 8D3E              MOV      pBuf+01H,R5
0033DC 22                RET      
----- FUNCTION ?L?COM004D (END) -------


----- FUNCTION ?L?COM004E (BEGIN) -----
0033DD D297              SETB     IO_DUT_C2M_SCL
0033DF A246              MOV      C,bLength1
0033E1 92A0              MOV      IO_DUT_C2M_SDA,C
0033E3 C297              CLR      IO_DUT_C2M_SCL
0033E5 22                RET      
----- FUNCTION ?L?COM004E (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 113




----- FUNCTION ?L?COM004F (BEGIN) -----
0033E6 D297              SETB     IO_DUT_C2M_SCL
0033E8 A245              MOV      C,bLength0
0033EA 92A0              MOV      IO_DUT_C2M_SDA,C
0033EC C297              CLR      IO_DUT_C2M_SCL
0033EE 22                RET      
----- FUNCTION ?L?COM004F (END) -------


----- FUNCTION ?L?COM0050 (BEGIN) -----
0033EF D297              SETB     IO_DUT_C2M_SCL
0033F1 A237              MOV      C,bC2Bit7
0033F3 92A0              MOV      IO_DUT_C2M_SDA,C
0033F5 C297              CLR      IO_DUT_C2M_SCL
0033F7 22                RET      
----- FUNCTION ?L?COM0050 (END) -------


----- FUNCTION ?L?COM0051 (BEGIN) -----
0033F8 D297              SETB     IO_DUT_C2M_SCL
0033FA A236              MOV      C,bC2Bit6
0033FC 92A0              MOV      IO_DUT_C2M_SDA,C
0033FE C297              CLR      IO_DUT_C2M_SCL
003400 22                RET      
----- FUNCTION ?L?COM0051 (END) -------


----- FUNCTION ?L?COM0052 (BEGIN) -----
003401 D297              SETB     IO_DUT_C2M_SCL
003403 A235              MOV      C,bC2Bit5
003405 92A0              MOV      IO_DUT_C2M_SDA,C
003407 C297              CLR      IO_DUT_C2M_SCL
003409 22                RET      
----- FUNCTION ?L?COM0052 (END) -------


----- FUNCTION ?L?COM0053 (BEGIN) -----
00340A D297              SETB     IO_DUT_C2M_SCL
00340C A234              MOV      C,bC2Bit4
00340E 92A0              MOV      IO_DUT_C2M_SDA,C
003410 C297              CLR      IO_DUT_C2M_SCL
003412 22                RET      
----- FUNCTION ?L?COM0053 (END) -------


----- FUNCTION ?L?COM0054 (BEGIN) -----
003413 D297              SETB     IO_DUT_C2M_SCL
003415 A233              MOV      C,bC2Bit3
003417 92A0              MOV      IO_DUT_C2M_SDA,C
003419 C297              CLR      IO_DUT_C2M_SCL
00341B 22                RET      
----- FUNCTION ?L?COM0054 (END) -------


----- FUNCTION ?L?COM0055 (BEGIN) -----
00341C D297              SETB     IO_DUT_C2M_SCL
00341E A232              MOV      C,bC2Bit2
003420 92A0              MOV      IO_DUT_C2M_SDA,C
003422 C297              CLR      IO_DUT_C2M_SCL
003424 22                RET      
----- FUNCTION ?L?COM0055 (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 114


----- FUNCTION ?L?COM0056 (BEGIN) -----
003425 D297              SETB     IO_DUT_C2M_SCL
003427 A231              MOV      C,bC2Bit1
003429 92A0              MOV      IO_DUT_C2M_SDA,C
00342B C297              CLR      IO_DUT_C2M_SCL
00342D 22                RET      
----- FUNCTION ?L?COM0056 (END) -------


----- FUNCTION ?L?COM0057 (BEGIN) -----
00342E D297              SETB     IO_DUT_C2M_SCL
003430 A230              MOV      C,bC2Bit0
003432 92A0              MOV      IO_DUT_C2M_SDA,C
003434 C297              CLR      IO_DUT_C2M_SCL
003436 22                RET      
----- FUNCTION ?L?COM0057 (END) -------


----- FUNCTION ?L?COM0058 (BEGIN) -----
003437 EF                MOV      A,R7
003438 33                RLC      A
003439 95E0              SUBB     A,ACC
00343B FE                MOV      R6,A
00343C EF                MOV      A,R7
00343D 7807              MOV      R0,#07H
00343F 22                RET      
----- FUNCTION ?L?COM0058 (END) -------


----- FUNCTION ?L?COM0059 (BEGIN) -----
003440 F583              MOV      DPH,A
003442 E4                CLR      A
003443 93                MOVC     A,@A+DPTR
003444 FF                MOV      R7,A
003445 E515              MOV      A,vCfgPwdLevel
003447 C3                CLR      C
003448 22                RET      
----- FUNCTION ?L?COM0059 (END) -------


----- FUNCTION ?L?COM005A (BEGIN) -----
003449 FE                MOV      R6,A
00344A E4                CLR      A
00344B 350D              ADDC     A,vTickCount+01H
00344D FD                MOV      R5,A
00344E E4                CLR      A
00344F 350C              ADDC     A,vTickCount
003451 22                RET      
----- FUNCTION ?L?COM005A (END) -------


----- FUNCTION ?L?COM005B (BEGIN) -----
003452 8E35              MOV      pPayload,R6
003454 8F36              MOV      pPayload+01H,R7
003456 8F82              MOV      DPL,R7
003458 8E83              MOV      DPH,R6
00345A 22                RET      
----- FUNCTION ?L?COM005B (END) -------


----- FUNCTION ?L?COM005C (BEGIN) -----
00345B AF16              MOV      R7,vFPDAT
00345D 121EB7            LCALL    _c2m_WriteAR
003460 7F02              MOV      R7,#02H
003462 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/15/2016  10:27:11  PAGE 115


----- FUNCTION ?L?COM005C (END) -------


----- FUNCTION ?L?COM005D (BEGIN) -----
003463 C3                CLR      C
003464 E53C              MOV      A,vLoop+01H
003466 953A              SUBB     A,vReadLen+01H
003468 E53B              MOV      A,vLoop
00346A 22                RET      
----- FUNCTION ?L?COM005D (END) -------


----- FUNCTION ?L?COM005E (BEGIN) -----
00346B 853682            MOV      DPL,pPayload+01H
00346E 853583            MOV      DPH,pPayload
003471 E0                MOVX     A,@DPTR
003472 22                RET      
----- FUNCTION ?L?COM005E (END) -------


----- FUNCTION ?L?COM005F (BEGIN) -----
003473 7D40              MOV      R5,#040H
003475 1210D5            LCALL    _Block_Read
003478 8F2E              MOV      vBlockLen,R7
00347A 22                RET      
----- FUNCTION ?L?COM005F (END) -------


