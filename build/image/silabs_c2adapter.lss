LX51 LINKER/LOCATER V4.66.41.0                                                          06/14/2016  14:04:18  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022C42            LJMP     02C42H
----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
   36: void APL_Entry(void)
   37: {
   38:     /* do nothing */
   39: }
000042 22                RET      
----- FUNCTION APL_Entry (END) -------


000083 0217D6            LJMP     017D6H
----- FUNCTION CFG_Init (BEGIN) -----
 FILE: '..\cfg\cfg.c'
   37: void CFG_Init(void)
   38: {
   39:     CFG_DB_Init();
   40:     CFG_PWD_Init();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 2


0001DD 021FD3            LJMP     CFG_PWD_Init
----- FUNCTION CFG_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
0015B6 74FF              MOV      A,#0FFH
0015B8 F531              MOV      vCRC,A
0015BA F532              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
0015BC E4                CLR      A
0015BD FD                MOV      R5,A
0015BE FC                MOV      R4,A
0015BF         ?C0001?THREAD_PKT:
0015BF D3                SETB     C
0015C0 900045            MOV      DPTR,#vFrame+05H
0015C3 E0                MOVX     A,@DPTR
0015C4 9D                SUBB     A,R5
0015C5 900044            MOV      DPTR,#vFrame+04H
0015C8 E0                MOVX     A,@DPTR
0015C9 9C                SUBB     A,R4
0015CA 4031              JC       ?C0002?THREAD_PKT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 3


   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
0015CC E531              MOV      A,vCRC
0015CE FF                MOV      R7,A
0015CF 7448              MOV      A,#LOW vFrame+08H
0015D1 2D                ADD      A,R5
0015D2 F582              MOV      DPL,A
0015D4 7400              MOV      A,#HIGH vFrame+08H
0015D6 3C                ADDC     A,R4
0015D7 F583              MOV      DPH,A
0015D9 E0                MOVX     A,@DPTR
0015DA 6F                XRL      A,R7
0015DB 75F002            MOV      B,#02H
0015DE A4                MUL      AB
0015DF 241F              ADD      A,#LOW aCRC16
0015E1 F582              MOV      DPL,A
0015E3 E5F0              MOV      A,B
0015E5 3406              ADDC     A,#HIGH aCRC16
0015E7 F583              MOV      DPH,A
0015E9 E532              MOV      A,vCRC+01H
0015EB FE                MOV      R6,A
0015EC E4                CLR      A
0015ED 93                MOVC     A,@A+DPTR
0015EE 6E                XRL      A,R6
0015EF F531              MOV      vCRC,A
0015F1 7401              MOV      A,#01H
0015F3 93                MOVC     A,@A+DPTR
0015F4 F532              MOV      vCRC+01H,A
   82:     }
0015F6 0D                INC      R5
0015F7 BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
0015FA 0C                INC      R4
0015FB         ?C0066?THREAD_PKT:
0015FB 80C2              SJMP     ?C0001?THREAD_PKT
0015FD         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
0015FD AE31              MOV      R6,vCRC
0015FF AF32              MOV      R7,vCRC+01H
   85: }
001601 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
001602 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
001605 123091            LCALL    ?L?COM0027
001608 120A40            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
00160B C247              CLR      bFlushFIFO
  242:     }
00160D 22                RET      
00160E         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
00160E 90004B            MOV      DPTR,#vFrame+0BH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 4


001611 E0                MOVX     A,@DPTR
001612 2404              ADD      A,#04H
001614 FE                MOV      R6,A
001615 90004A            MOV      DPTR,#vFrame+0AH
001618 E0                MOVX     A,@DPTR
001619 3400              ADDC     A,#00H
00161B 900044            MOV      DPTR,#vFrame+04H
00161E F0                MOVX     @DPTR,A
00161F A3                INC      DPTR
001620 CE                XCH      A,R6
001621 F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
001622 B1B6              ACALL    _thread_pkt_CalcCRC
001624 900046            MOV      DPTR,#vFrame+06H
001627 EE                MOV      A,R6
001628 F0                MOVX     @DPTR,A
001629 A3                INC      DPTR
00162A EF                MOV      A,R7
00162B F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
00162C C238              CLR      ?_thread_pkt_Dump?BIT
00162E 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
001631 123097            LCALL    ?L?COM0028
001634 900045            MOV      DPTR,#vFrame+05H
001637 E0                MOVX     A,@DPTR
001638 2408              ADD      A,#08H
00163A FD                MOV      R5,A
00163B 900044            MOV      DPTR,#vFrame+04H
00163E E0                MOVX     A,@DPTR
00163F 3400              ADDC     A,#00H
001641 FC                MOV      R4,A
001642 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
001645 123091            LCALL    ?L?COM0027
001648 120A40            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
00164B 123097            LCALL    ?L?COM0028
00164E 123169            LCALL    ?L?COM0048
  141:     if (bFlushFIFO)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 5


001651 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
001654 7BFF              MOV      R3,#0FFH
001656 7A05              MOV      R2,#HIGH 0100055CH
001658 795C              MOV      R1,#LOW 0100055CH
00165A 120262            LCALL    _printf
  145:         return FALSE;
00165D C3                CLR      C
00165E 22                RET      
  146:     }
00165F         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
00165F C3                CLR      C
001660 E52E              MOV      A,vBlockLen
001662 9408              SUBB     A,#08H
001664 E4                CLR      A
001665 9400              SUBB     A,#00H
001667 400E              JC       ?C0013?THREAD_PKT
001669 900040            MOV      DPTR,#vFrame
00166C E0                MOVX     A,@DPTR
00166D 6443              XRL      A,#043H
00166F 7004              JNZ      ?C0067?THREAD_PKT
001671 A3                INC      DPTR
001672 E0                MOVX     A,@DPTR
001673 644C              XRL      A,#04CH
001675         ?C0067?THREAD_PKT:
001675 601A              JZ       ?C0012?THREAD_PKT
001677         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
001677 7BFF              MOV      R3,#0FFH
001679 7A05              MOV      R2,#HIGH 01000569H
00167B 7969              MOV      R1,#LOW 01000569H
00167D 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
001680 900040            MOV      DPTR,#vFrame
001683 E0                MOVX     A,@DPTR
001684 F535              MOV      ?_printf?BYTE+04H,A
001686 A3                INC      DPTR
001687 E0                MOVX     A,@DPTR
001688 F536              MOV      ?_printf?BYTE+05H,A
00168A 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
00168D D247              SETB     bFlushFIFO
  152:         return FALSE;
00168F C3                CLR      C
001690 22                RET      
  153:     }
001691         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
001691 900042            MOV      DPTR,#vFrame+02H
001694 E0                MOVX     A,@DPTR
001695 7004              JNZ      ?C0068?THREAD_PKT
001697 A3                INC      DPTR
001698 E0                MOVX     A,@DPTR
001699 6401              XRL      A,#01H
00169B         ?C0068?THREAD_PKT:
00169B 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
00169D 7BFF              MOV      R3,#0FFH
00169F 7A05              MOV      R2,#HIGH 01000599H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 6


0016A1 7999              MOV      R1,#LOW 01000599H
0016A3 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
0016A6 900042            MOV      DPTR,#vFrame+02H
0016A9 E4                CLR      A
0016AA F0                MOVX     @DPTR,A
0016AB A3                INC      DPTR
0016AC 04                INC      A
0016AD F0                MOVX     @DPTR,A
  159:         return FALSE;
0016AE C3                CLR      C
0016AF 22                RET      
  160:     }
0016B0         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
0016B0 E52E              MOV      A,vBlockLen
0016B2 24F8              ADD      A,#0F8H
0016B4 F52D              MOV      vRxTotalLen+01H,A
0016B6 E4                CLR      A
0016B7 34FF              ADDC     A,#0FFH
0016B9 F52C              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
0016BB E4                CLR      A
0016BC F52F              MOV      vElaspedTime,A
0016BE F530              MOV      vElaspedTime+01H,A
0016C0         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
0016C0 D3                SETB     C
0016C1 900045            MOV      DPTR,#vFrame+05H
0016C4 E0                MOVX     A,@DPTR
0016C5 952D              SUBB     A,vRxTotalLen+01H
0016C7 900044            MOV      DPTR,#vFrame+04H
0016CA E0                MOVX     A,@DPTR
0016CB 952C              SUBB     A,vRxTotalLen
0016CD 4047              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
0016CF 7448              MOV      A,#LOW vFrame+08H
0016D1 252D              ADD      A,vRxTotalLen+01H
0016D3 F9                MOV      R1,A
0016D4 7400              MOV      A,#HIGH vFrame+08H
0016D6 352C              ADDC     A,vRxTotalLen
0016D8 FA                MOV      R2,A
0016D9 7B01              MOV      R3,#01H
0016DB 123169            LCALL    ?L?COM0048
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
0016DE E52E              MOV      A,vBlockLen
0016E0 7027              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
0016E2 7F01              MOV      R7,#01H
0016E4 FE                MOV      R6,A
0016E5 F15E              ACALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
0016E7 0530              INC      vElaspedTime+01H
0016E9 E530              MOV      A,vElaspedTime+01H
0016EB 7002              JNZ      ?C0069?THREAD_PKT
0016ED 052F              INC      vElaspedTime
0016EF         ?C0069?THREAD_PKT:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 7


0016EF FF                MOV      R7,A
0016F0 AE2F              MOV      R6,vElaspedTime
0016F2 E4                CLR      A
0016F3 FC                MOV      R4,A
0016F4 FD                MOV      R5,A
0016F5 7B50              MOV      R3,#050H
0016F7 7AC3              MOV      R2,#0C3H
0016F9 F9                MOV      R1,A
0016FA F8                MOV      R0,A
0016FB D3                SETB     C
0016FC 12087B            LCALL    ?C?SLCMP
0016FF 50BF              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
001701 7BFF              MOV      R3,#0FFH
001703 7A05              MOV      R2,#HIGH 010005B1H
001705 79B1              MOV      R1,#LOW 010005B1H
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
001707 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
001709         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
001709 E52E              MOV      A,vBlockLen
00170B 252D              ADD      A,vRxTotalLen+01H
00170D F52D              MOV      vRxTotalLen+01H,A
00170F E4                CLR      A
001710 352C              ADDC     A,vRxTotalLen
001712 F52C              MOV      vRxTotalLen,A
  187:     }
001714 80AA              SJMP     ?C0015?THREAD_PKT
001716         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
001716 900044            MOV      DPTR,#vFrame+04H
001719 E0                MOVX     A,@DPTR
00171A 652C              XRL      A,vRxTotalLen
00171C 7004              JNZ      ?C0070?THREAD_PKT
00171E A3                INC      DPTR
00171F E0                MOVX     A,@DPTR
001720 652D              XRL      A,vRxTotalLen+01H
001722         ?C0070?THREAD_PKT:
001722 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
001724 7BFF              MOV      R3,#0FFH
001726 7A05              MOV      R2,#HIGH 010005C5H
001728 79C5              MOV      R1,#LOW 010005C5H
00172A         
00172A 123112            LCALL    ?L?COM003B
00172D 7401              MOV      A,#01H
00172F F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
001730 C3                CLR      C
001731 22                RET      
  194:     }
001732         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 8


  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
001732 D238              SETB     ?_thread_pkt_Dump?BIT
001734 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
001737 B1B6              ACALL    _thread_pkt_CalcCRC
001739 900046            MOV      DPTR,#vFrame+06H
00173C E0                MOVX     A,@DPTR
00173D 6E                XRL      A,R6
00173E 7003              JNZ      ?C0071?THREAD_PKT
001740 A3                INC      DPTR
001741 E0                MOVX     A,@DPTR
001742 6F                XRL      A,R7
001743         ?C0071?THREAD_PKT:
001743 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
001745 7BFF              MOV      R3,#0FFH
001747 7A05              MOV      R2,#HIGH 010005DDH
001749 79DD              MOV      R1,#LOW 010005DDH
00174B 123112            LCALL    ?L?COM003B
00174E 14                DEC      A
00174F F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
001750 C3                CLR      C
001751 22                RET      
  206:     }
001752         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
001752 D3                SETB     C
  209: }
001753 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001754 A2A0              MOV      C,IO_DUT_C2M_SDA
001756 D297              SETB     IO_DUT_C2M_SCL
001758 9230              MOV      bC2Bit0,C
00175A         ?L?COM0008:
00175A 7F01              MOV      R7,#01H
00175C 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
00175E 8018              SJMP     ?C0013?DRV_CPU
001760         ?C0001?DRV_CPU:
   39:     while (--vUsec)
001760 EF                MOV      A,R7
001761 1F                DEC      R7
001762 7001              JNZ      ?C0011?DRV_CPU
001764 1E                DEC      R6
001765         ?C0011?DRV_CPU:
001765 14                DEC      A
001766 4E                ORL      A,R6
001767 6014              JZ       ?C0003?DRV_CPU
   40:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 9


   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001769 00                NOP      
00176A 00                NOP      
00176B 00                NOP      
00176C 00                NOP      
00176D 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
00176E 00                NOP      
00176F 00                NOP      
001770 00                NOP      
001771 00                NOP      
001772 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
001773 00                NOP      
001774 00                NOP      
001775 00                NOP      
001776 00                NOP      
001777 00                NOP      
   45: 		NOP(); NOP(); NOP();
001778         
001778 00                NOP      
001779 00                NOP      
00177A 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
   49:     }
00177B 80E3              SJMP     ?C0001?DRV_CPU
   50: }
00177D         ?C0003?DRV_CPU:
00177D 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
00177E 122C79            LCALL    _c2m_WriteDR
  361: }
001781 754527            MOV      _timeout,#027H
001784 754610            MOV      _timeout+01H,#010H
001787         ?C0788?DRV_C2M:
001787 1225BF            LCALL    c2m_ReadAR
00178A EF                MOV      A,R7
00178B 30E111            JNB      ACC.1,?C0790?DRV_C2M
00178E E546              MOV      A,_timeout+01H
001790 1546              DEC      _timeout+01H
001792 AE45              MOV      R6,_timeout
001794 7002              JNZ      ?C1015?DRV_C2M
001796 1545              DEC      _timeout
001798         ?C1015?DRV_C2M:
001798 4E                ORL      A,R6
001799 6004              JZ       ?C0790?DRV_C2M
00179B F15A              ACALL    ?L?COM0008
00179D 80E8              SJMP     ?C0788?DRV_C2M
  362: 
00179F         ?C0790?DRV_C2M:
00179F 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 10



----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
0017A0 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
0017A3 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
0017A6         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
0017A6 C3                CLR      C
0017A7 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
0017A8         ?C0831?DRV_C2M:
0017A8 123043            LCALL    ?L?COM001E
  425:     return TRUE;
0017AB D3                SETB     C
  426: }
0017AC 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0017AD EF                MOV      A,R7
0017AE 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017B1 0509              INC      vSCB_RxPkt+01H
0017B3 E509              MOV      A,vSCB_RxPkt+01H
0017B5 7002              JNZ      ?C0073?THREAD_PKT
0017B7 0508              INC      vSCB_RxPkt
0017B9         ?C0073?THREAD_PKT:
  284: 	}
0017B9         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0017B9 EF                MOV      A,R7
0017BA 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017BD 0509              INC      vSCB_RxPkt+01H
0017BF E509              MOV      A,vSCB_RxPkt+01H
0017C1 7002              JNZ      ?C0074?THREAD_PKT
0017C3 0508              INC      vSCB_RxPkt
0017C5         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0017C5 D247              SETB     bFlushFIFO
  291: 	}
  292: }
0017C7         ?C0047?THREAD_PKT:
0017C7 22                RET      
----- FUNCTION _thread_Pkt_Notify (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 11


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
0017C8 123070            LCALL    ?L?COM0022
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
0017CB F1A0              ACALL    DRV_C2M_Reset
0017CD 7E03              MOV      R6,#03H
0017CF 5002              JNC      ?C0008?PKT_C2M
0017D1 7E01              MOV      R6,#01H
0017D3         ?C0008?PKT_C2M:
0017D3 7F40              MOV      R7,#040H
   39: }
0017D5 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
0017D6 C0E0              PUSH     ACC
0017D8 C083              PUSH     DPH
0017DA C082              PUSH     DPL
0017DC C0D0              PUSH     PSW
0017DE 75D000            MOV      PSW,#00H
0017E1 C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
0017E3 B18B              ACALL    Get_Interrupt_Source
0017E5 F1AD              ACALL    _thread_Pkt_Notify
   69:   #endif
   70: }
0017E7 D007              POP      AR7
0017E9 D0D0              POP      PSW
0017EB D082              POP      DPL
0017ED D083              POP      DPH
0017EF D0E0              POP      ACC
0017F1 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017F2 E4                CLR      A
0017F3 F50A              MOV      vTCB_Pkt,A
0017F5 F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017F7 F508              MOV      vSCB_RxPkt,A
0017F9 F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017FB 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
   56: void APL_Init(void)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 12


   57: {
   58:     /* perform entry once */
   59:     APL_Entry();
0017FC 020042            LJMP     APL_Entry
----- FUNCTION APL_Init (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900048            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24EB              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3405              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24ED              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3405              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 120951            LCALL    ?C?ICALL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 13


  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 940D              SUBB     A,#0DH
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900048            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 1208EA            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 14


001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 121645            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 121602            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  127: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  128: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018B9 AD07              MOV      R5,AR7
  129:     UINT8   vLoop;
  130:     BOOL    vAck;
  131: 
  132:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018BB 7B08              MOV      R3,#08H
0018BD         ?C0001?PKT_I2CM:
  133:     {
  134:         /* transmitting data, MSB first, LSB last */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 15


  135:         CROL(vData, 1);
0018BD 7801              MOV      R0,#01H
0018BF AF05              MOV      R7,AR5
0018C1 EF                MOV      A,R7
0018C2 08                INC      R0
0018C3 8001              SJMP     ?C0659?PKT_I2CM
0018C5         ?C0658?PKT_I2CM:
0018C5 23                RL       A
0018C6         ?C0659?PKT_I2CM:
0018C6 D8FD              DJNZ     R0,?C0658?PKT_I2CM
0018C8 FD                MOV      R5,A
  136:         PKT_I2CM_SET_SDA(vData & 0x1);
0018C9 13                RRC      A
0018CA 9292              MOV      IO_DUT_I2CM_SDA,C
  137: 
  138:         PKT_I2CM_SET_SCL(HIGH);
0018CC 00                NOP      
0018CD 00                NOP      
0018CE 00                NOP      
0018CF 00                NOP      
0018D0 00                NOP      
0018D1 00                NOP      
0018D2 00                NOP      
0018D3 00                NOP      
0018D4 00                NOP      
0018D5 00                NOP      
0018D6 00                NOP      
0018D7 00                NOP      
0018D8 00                NOP      
0018D9 00                NOP      
0018DA 123088            LCALL    ?L?COM0026
0018DD         ?C0032?PKT_I2CM:
0018DD 20820F            JB       IO_DUT_I2CM_SCL,?C0042?PKT_I2CM
0018E0 123081            LCALL    ?L?COM0024
0018E3 7002              JNZ      ?C0660?PKT_I2CM
0018E5 153F              DEC      _loop
0018E7         ?C0660?PKT_I2CM:
0018E7 4E                ORL      A,R6
0018E8 6005              JZ       ?C0042?PKT_I2CM
0018EA 12175A            LCALL    ?L?COM0008
0018ED 80EE              SJMP     ?C0032?PKT_I2CM
  139:         PKT_I2CM_SET_SCL(LOW);
0018EF         ?C0042?PKT_I2CM:
0018EF 00                NOP      
0018F0 00                NOP      
0018F1 00                NOP      
0018F2 00                NOP      
0018F3 00                NOP      
0018F4 00                NOP      
0018F5 00                NOP      
0018F6 00                NOP      
0018F7 00                NOP      
0018F8 00                NOP      
0018F9 00                NOP      
0018FA 00                NOP      
0018FB 00                NOP      
0018FC 00                NOP      
0018FD C282              CLR      IO_DUT_I2CM_SCL
0018FF 8000              SJMP     ?C0003?PKT_I2CM
  140:     }
001901         ?C0003?PKT_I2CM:
001901 1B                DEC      R3
001902 EB                MOV      A,R3
001903 70B8              JNZ      ?C0001?PKT_I2CM
001905         ?C0060?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 16


  141: 
  142:     /* release SDA */
  143:     PKT_I2CM_SET_SDA(HIGH);
001905 D292              SETB     IO_DUT_I2CM_SDA
  144: 
  145:     /* check ACK */
  146:     PKT_I2CM_SET_SCL(HIGH);
001907 00                NOP      
001908 00                NOP      
001909 00                NOP      
00190A 00                NOP      
00190B 00                NOP      
00190C 00                NOP      
00190D 00                NOP      
00190E 00                NOP      
00190F 00                NOP      
001910 00                NOP      
001911 00                NOP      
001912 00                NOP      
001913 00                NOP      
001914 00                NOP      
001915 123088            LCALL    ?L?COM0026
001918         ?C0083?PKT_I2CM:
001918 20820F            JB       IO_DUT_I2CM_SCL,?C0062?PKT_I2CM
00191B 123081            LCALL    ?L?COM0024
00191E 7002              JNZ      ?C0662?PKT_I2CM
001920 153F              DEC      _loop
001922         ?C0662?PKT_I2CM:
001922 4E                ORL      A,R6
001923 6005              JZ       ?C0062?PKT_I2CM
001925 12175A            LCALL    ?L?COM0008
001928 80EE              SJMP     ?C0083?PKT_I2CM
00192A         ?C0062?PKT_I2CM:
  147:     vAck = PKT_I2CM_GET_SDA();
00192A A292              MOV      C,IO_DUT_I2CM_SDA
00192C 923A              MOV      vAck,C
  148:     PKT_I2CM_SET_SCL(LOW);
00192E 00                NOP      
00192F 00                NOP      
001930 00                NOP      
001931 00                NOP      
001932 00                NOP      
001933 00                NOP      
001934 00                NOP      
001935 00                NOP      
001936 00                NOP      
001937 00                NOP      
001938 00                NOP      
001939 00                NOP      
00193A 00                NOP      
00193B 00                NOP      
00193C C282              CLR      IO_DUT_I2CM_SCL
00193E 8000              SJMP     ?C0086?PKT_I2CM
001940         ?C0086?PKT_I2CM:
  149: 
  150:     return !vAck;
001940 A23A              MOV      C,vAck
001942 B3                CPL      C
  151: }
001943 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 17


  222: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  223: {
001944 123131            LCALL    ?L?COM0041
001947 122EA9            LCALL    ?L?COM000E
  224:     UINT16  vWriteLen = pPayload->vWriteLen;
  225:     UINT16  vReadLen  = pPayload->vReadLen;
00194A 1230C3            LCALL    ?L?COM0030
  226:     BOOL    bIntState;
  227:     BOOL    bDone = FALSE;
00194D C239              CLR      bDone
  228:     UINT16  vLoop;
  229: 
  230:     /* make sure the I2C is ready */
  231:     if (!_pkt_i2cm_CheckReady())
00194F 714D              ACALL    _pkt_i2cm_CheckReady
001951 4003              JC       ?C0393?PKT_I2CM
  232:     {
  233:         return bDone;
001953 A239              MOV      C,bDone
001955 22                RET      
  234:     }
001956         ?C0393?PKT_I2CM:
  235: 
  236:     /* lock globally interrupt */
  237:     bIntState = DRV_INT_LockGlobalInterrupt();
001956 30AF05            JNB      EA,?C0395?PKT_I2CM
001959 C2AF              CLR      EA
00195B D3                SETB     C
00195C 8001              SJMP     ?C0396?PKT_I2CM
00195E         ?C0395?PKT_I2CM:
00195E C3                CLR      C
00195F         ?C0396?PKT_I2CM:
00195F 9238              MOV      bIntState,C
  238: 
  239:     /* send write stream */
  240:     if ((vWriteLen != 0)
001961 E538              MOV      A,vWriteLen+01H
001963 4537              ORL      A,vWriteLen
001965 7010              JNZ      ?C0404?PKT_I2CM
001967 E538              MOV      A,vWriteLen+01H
001969 4537              ORL      A,vWriteLen
00196B 6002              JZ       $ + 4H
00196D 4103              AJMP     ?C0397?PKT_I2CM
00196F E53A              MOV      A,vReadLen+01H
001971 4539              ORL      A,vReadLen
001973 6002              JZ       $ + 4H
001975 4103              AJMP     ?C0397?PKT_I2CM
  241:         || ((vWriteLen == 0) && (vReadLen == 0)))
  242:     {
  243:         /* send I2C start */
  244:         _pkt_i2cm_Start();
001977         ?C0404?PKT_I2CM:
001977 D292              SETB     IO_DUT_I2CM_SDA
001979 00                NOP      
00197A 00                NOP      
00197B 00                NOP      
00197C 00                NOP      
00197D 00                NOP      
00197E 00                NOP      
00197F 00                NOP      
001980 00                NOP      
001981 00                NOP      
001982 00                NOP      
001983 00                NOP      
001984 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 18


001985 00                NOP      
001986 00                NOP      
001987 1230F0            LCALL    ?L?COM0034
00198A         ?C0427?PKT_I2CM:
00198A 20820F            JB       IO_DUT_I2CM_SCL,?C0434?PKT_I2CM
00198D 12313B            LCALL    ?L?COM0042
001990 7002              JNZ      ?C0673?PKT_I2CM
001992 153D              DEC      _loop
001994         ?C0673?PKT_I2CM:
001994 4E                ORL      A,R6
001995 6005              JZ       ?C0434?PKT_I2CM
001997 12175A            LCALL    ?L?COM0008
00199A 80EE              SJMP     ?C0427?PKT_I2CM
00199C         ?C0434?PKT_I2CM:
00199C 00                NOP      
00199D 00                NOP      
00199E 00                NOP      
00199F 00                NOP      
0019A0 00                NOP      
0019A1 00                NOP      
0019A2 00                NOP      
0019A3 00                NOP      
0019A4 00                NOP      
0019A5 00                NOP      
0019A6 00                NOP      
0019A7 00                NOP      
0019A8 00                NOP      
0019A9 00                NOP      
0019AA C292              CLR      IO_DUT_I2CM_SDA
0019AC 00                NOP      
0019AD 00                NOP      
0019AE 00                NOP      
0019AF 00                NOP      
0019B0 00                NOP      
0019B1 00                NOP      
0019B2 00                NOP      
0019B3 00                NOP      
0019B4 00                NOP      
0019B5 00                NOP      
0019B6 00                NOP      
0019B7 00                NOP      
0019B8 00                NOP      
0019B9 00                NOP      
0019BA C282              CLR      IO_DUT_I2CM_SCL
0019BC 8000              SJMP     ?C0400?PKT_I2CM
0019BE         ?C0400?PKT_I2CM:
  245: 
  246:         /* send I2C slave address + write */
  247:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
0019BE 123161            LCALL    ?L?COM0047
0019C1 54FE              ANL      A,#0FEH
0019C3 FF                MOV      R7,A
0019C4 11B9              ACALL    __pkt_i2cm_TxByte
0019C6 4002              JC       $ + 4H
0019C8 418C              AJMP     ?C0561?PKT_I2CM
  248:         {
  249:             goto _exit;
  250:         }
0019CA         ?C0471?PKT_I2CM:
  251: 
  252:         /* send write buffer */
  253:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
0019CA E4                CLR      A
0019CB F53B              MOV      vLoop,A
0019CD F53C              MOV      vLoop+01H,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 19


0019CF         ?C0473?PKT_I2CM:
0019CF C3                CLR      C
0019D0 E53C              MOV      A,vLoop+01H
0019D2 9538              SUBB     A,vWriteLen+01H
0019D4 E53B              MOV      A,vLoop
0019D6 9537              SUBB     A,vWriteLen
0019D8 5029              JNC      ?C0397?PKT_I2CM
  254:         {
  255:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
0019DA E536              MOV      A,pPayload+01H
0019DC 2405              ADD      A,#05H
0019DE F582              MOV      DPL,A
0019E0 E4                CLR      A
0019E1 3535              ADDC     A,pPayload
0019E3 F583              MOV      DPH,A
0019E5 E582              MOV      A,DPL
0019E7 253C              ADD      A,vLoop+01H
0019E9 F582              MOV      DPL,A
0019EB E583              MOV      A,DPH
0019ED 353B              ADDC     A,vLoop
0019EF F583              MOV      DPH,A
0019F1 E0                MOVX     A,@DPTR
0019F2 FF                MOV      R7,A
0019F3 11B9              ACALL    __pkt_i2cm_TxByte
0019F5 4002              JC       $ + 4H
0019F7 418C              AJMP     ?C0561?PKT_I2CM
  256:             {
  257:                 goto _exit;
  258:             }
0019F9         ?C0476?PKT_I2CM:
  259:         }
0019F9         ?C0475?PKT_I2CM:
0019F9 053C              INC      vLoop+01H
0019FB E53C              MOV      A,vLoop+01H
0019FD 7002              JNZ      ?C0675?PKT_I2CM
0019FF 053B              INC      vLoop
001A01         ?C0675?PKT_I2CM:
001A01 80CC              SJMP     ?C0473?PKT_I2CM
  260:     }
001A03         ?C0397?PKT_I2CM:
  261: 
  262:     /* send read stream */
  263:     if (vReadLen != 0)
001A03 E53A              MOV      A,vReadLen+01H
001A05 4539              ORL      A,vReadLen
001A07 7002              JNZ      $ + 4H
001A09 418A              AJMP     ?C0477?PKT_I2CM
  264:     {
  265:         /* send I2C start/restart */
  266:         _pkt_i2cm_Start();
001A0B D292              SETB     IO_DUT_I2CM_SDA
001A0D 00                NOP      
001A0E 00                NOP      
001A0F 00                NOP      
001A10 00                NOP      
001A11 00                NOP      
001A12 00                NOP      
001A13 00                NOP      
001A14 00                NOP      
001A15 00                NOP      
001A16 00                NOP      
001A17 00                NOP      
001A18 00                NOP      
001A19 00                NOP      
001A1A 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 20


001A1B 1230F0            LCALL    ?L?COM0034
001A1E         ?C0506?PKT_I2CM:
001A1E 20820F            JB       IO_DUT_I2CM_SCL,?C0513?PKT_I2CM
001A21 12313B            LCALL    ?L?COM0042
001A24 7002              JNZ      ?C0676?PKT_I2CM
001A26 153D              DEC      _loop
001A28         ?C0676?PKT_I2CM:
001A28 4E                ORL      A,R6
001A29 6005              JZ       ?C0513?PKT_I2CM
001A2B 12175A            LCALL    ?L?COM0008
001A2E 80EE              SJMP     ?C0506?PKT_I2CM
001A30         ?C0513?PKT_I2CM:
001A30 00                NOP      
001A31 00                NOP      
001A32 00                NOP      
001A33 00                NOP      
001A34 00                NOP      
001A35 00                NOP      
001A36 00                NOP      
001A37 00                NOP      
001A38 00                NOP      
001A39 00                NOP      
001A3A 00                NOP      
001A3B 00                NOP      
001A3C 00                NOP      
001A3D 00                NOP      
001A3E C292              CLR      IO_DUT_I2CM_SDA
001A40 00                NOP      
001A41 00                NOP      
001A42 00                NOP      
001A43 00                NOP      
001A44 00                NOP      
001A45 00                NOP      
001A46 00                NOP      
001A47 00                NOP      
001A48 00                NOP      
001A49 00                NOP      
001A4A 00                NOP      
001A4B 00                NOP      
001A4C 00                NOP      
001A4D 00                NOP      
001A4E C282              CLR      IO_DUT_I2CM_SCL
001A50 8000              SJMP     ?C0479?PKT_I2CM
001A52         ?C0479?PKT_I2CM:
  267: 
  268:         /* send I2C slave address + read */
  269:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
001A52 123161            LCALL    ?L?COM0047
001A55 4401              ORL      A,#01H
001A57 FF                MOV      R7,A
001A58 11B9              ACALL    __pkt_i2cm_TxByte
001A5A 5030              JNC      ?C0561?PKT_I2CM
  270:         {
  271:             goto _exit;
  272:         }
001A5C         ?C0550?PKT_I2CM:
  273: 
  274:         /* read data */
  275:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001A5C E4                CLR      A
001A5D F53B              MOV      vLoop,A
001A5F F53C              MOV      vLoop+01H,A
001A61         ?C0551?PKT_I2CM:
001A61 123127            LCALL    ?L?COM0040
001A64 5024              JNC      ?C0477?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 21


  276:         {
  277:             pPayload->aBuf[vWriteLen+vLoop] =
001A66 E53A              MOV      A,vReadLen+01H
001A68 24FF              ADD      A,#0FFH
001A6A FF                MOV      R7,A
001A6B E539              MOV      A,vReadLen
001A6D 34FF              ADDC     A,#0FFH
001A6F FE                MOV      R6,A
001A70 EF                MOV      A,R7
001A71 B53C07            CJNE     A,vLoop+01H,?C0554?PKT_I2CM
001A74 EE                MOV      A,R6
001A75 B53B03            CJNE     A,vLoop,?C0554?PKT_I2CM
001A78 D3                SETB     C
001A79 8001              SJMP     ?C0555?PKT_I2CM
001A7B         ?C0554?PKT_I2CM:
001A7B C3                CLR      C
001A7C         ?C0555?PKT_I2CM:
001A7C 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001A7E 122000            LCALL    _pkt_i2cm_RxByte
001A81 12300E            LCALL    ?L?COM0015
001A84 7002              JNZ      ?C0679?PKT_I2CM
001A86 053B              INC      vLoop
001A88         ?C0679?PKT_I2CM:
001A88 80D7              SJMP     ?C0551?PKT_I2CM
  278:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  279:         }
  280:     }
001A8A         ?C0477?PKT_I2CM:
  281: 
  282:     /* I2C stream done */
  283:     bDone = TRUE;
001A8A D239              SETB     bDone
  284: 
  285: _exit:
001A8C         _exit:
  286:     /* send I2C stop */
  287:     _pkt_i2cm_Stop();
001A8C         ?C0561?PKT_I2CM:
001A8C C292              CLR      IO_DUT_I2CM_SDA
001A8E 00                NOP      
001A8F 00                NOP      
001A90 00                NOP      
001A91 00                NOP      
001A92 00                NOP      
001A93 00                NOP      
001A94 00                NOP      
001A95 00                NOP      
001A96 00                NOP      
001A97 00                NOP      
001A98 00                NOP      
001A99 00                NOP      
001A9A 00                NOP      
001A9B 00                NOP      
001A9C 1230F0            LCALL    ?L?COM0034
001A9F         ?C0584?PKT_I2CM:
001A9F 20820F            JB       IO_DUT_I2CM_SCL,?C0591?PKT_I2CM
001AA2 12313B            LCALL    ?L?COM0042
001AA5 7002              JNZ      ?C0680?PKT_I2CM
001AA7 153D              DEC      _loop
001AA9         ?C0680?PKT_I2CM:
001AA9 4E                ORL      A,R6
001AAA 6005              JZ       ?C0591?PKT_I2CM
001AAC 12175A            LCALL    ?L?COM0008
001AAF 80EE              SJMP     ?C0584?PKT_I2CM
001AB1         ?C0591?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 22


001AB1 00                NOP      
001AB2 00                NOP      
001AB3 00                NOP      
001AB4 00                NOP      
001AB5 00                NOP      
001AB6 00                NOP      
001AB7 00                NOP      
001AB8 00                NOP      
001AB9 00                NOP      
001ABA 00                NOP      
001ABB 00                NOP      
001ABC 00                NOP      
001ABD 00                NOP      
001ABE 00                NOP      
001ABF D292              SETB     IO_DUT_I2CM_SDA
  288: 
  289:     /* unlock globally interrupt */
  290:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001AC1 A238              MOV      C,bIntState
001AC3 92AF              MOV      EA,C
  291: 
  292:     return bDone;
001AC5 A239              MOV      C,bDone
  293: }
001AC7 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  348: UINT16 PKT_I2CM_Stream(void)
  349: {
  350:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  351:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
001AC8 753300            MOV      pPayload,#HIGH vFrame+0CH
001ACB 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
  352: 
  353:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  354:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
001ACE 1230BB            LCALL    ?L?COM002C
001AD1 E0                MOVX     A,@DPTR
001AD2 FE                MOV      R6,A
001AD3 A3                INC      DPTR
001AD4 E0                MOVX     A,@DPTR
001AD5 FF                MOV      R7,A
001AD6 2405              ADD      A,#05H
001AD8 FD                MOV      R5,A
001AD9 E4                CLR      A
001ADA 3E                ADDC     A,R6
001ADB FC                MOV      R4,A
001ADC 90004A            MOV      DPTR,#vFrame+0AH
001ADF E0                MOVX     A,@DPTR
001AE0 B50424            CJNE     A,AR4,?C0649?PKT_I2CM
001AE3 A3                INC      DPTR
001AE4 E0                MOVX     A,@DPTR
001AE5 B5051F            CJNE     A,AR5,?C0649?PKT_I2CM
001AE8 1230BB            LCALL    ?L?COM002C
001AEB A3                INC      DPTR
001AEC A3                INC      DPTR
001AED E0                MOVX     A,@DPTR
001AEE FC                MOV      R4,A
001AEF A3                INC      DPTR
001AF0 E0                MOVX     A,@DPTR
001AF1 FD                MOV      R5,A
001AF2 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 23


001AF3 2D                ADD      A,R5
001AF4 FF                MOV      R7,A
001AF5 EE                MOV      A,R6
001AF6 3C                ADDC     A,R4
001AF7 FE                MOV      R6,A
001AF8 E4                CLR      A
001AF9 FC                MOV      R4,A
001AFA FD                MOV      R5,A
001AFB 7B33              MOV      R3,#033H
001AFD 7A04              MOV      R2,#04H
001AFF F9                MOV      R1,A
001B00 F8                MOV      R0,A
001B01 C3                CLR      C
001B02 12087B            LCALL    ?C?SLCMP
001B05 5005              JNC      ?C0648?PKT_I2CM
001B07         ?C0649?PKT_I2CM:
  355:     {
  356:         return PKT_REPLY_Fail_InvalidLen;
001B07 7E03              MOV      R6,#03H
001B09 7F04              MOV      R7,#04H
001B0B 22                RET      
  357:     }
001B0C         ?C0648?PKT_I2CM:
  358: 
  359:   #if PKT_I2CM_VS_SUPPORT
  360:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
001B0C 853482            MOV      DPL,pPayload+01H
001B0F 853383            MOV      DPH,pPayload
001B12 E0                MOVX     A,@DPTR
001B13 AF34              MOV      R7,pPayload+01H
001B15 AE33              MOV      R6,pPayload
001B17 B4FE04            CJNE     A,#0FEH,?C0652?PKT_I2CM
001B1A 911F              ACALL    _pkt_i2cm_vs_Stream
001B1C 8002              SJMP     ?C0653?PKT_I2CM
001B1E         ?C0652?PKT_I2CM:
001B1E 3144              ACALL    _pkt_i2cm_Stream
001B20         ?C0653?PKT_I2CM:
001B20 5026              JNC      ?C0651?PKT_I2CM
  361:         pkt_i2cm_vs_Stream(pPayload) :
  362:         pkt_i2cm_Stream(pPayload))
  363:   #else
  364:     if (pkt_i2cm_Stream(pPayload))
  365:   #endif
  366:     {
  367:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  368:                            + pPayload->vWriteLen
  369:                            + pPayload->vReadLen);
001B22 1230BB            LCALL    ?L?COM002C
001B25 E0                MOVX     A,@DPTR
001B26 FE                MOV      R6,A
001B27 A3                INC      DPTR
001B28 E0                MOVX     A,@DPTR
001B29 2405              ADD      A,#05H
001B2B FF                MOV      R7,A
001B2C E4                CLR      A
001B2D 3E                ADDC     A,R6
001B2E FE                MOV      R6,A
001B2F 1230BB            LCALL    ?L?COM002C
001B32 A3                INC      DPTR
001B33 A3                INC      DPTR
001B34 E0                MOVX     A,@DPTR
001B35 FC                MOV      R4,A
001B36 A3                INC      DPTR
001B37 E0                MOVX     A,@DPTR
001B38 2F                ADD      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 24


001B39 FF                MOV      R7,A
001B3A EC                MOV      A,R4
001B3B 3E                ADDC     A,R6
001B3C 90004A            MOV      DPTR,#vFrame+0AH
001B3F F0                MOVX     @DPTR,A
001B40 A3                INC      DPTR
001B41 EF                MOV      A,R7
001B42 F0                MOVX     @DPTR,A
  370:         return PKT_REPLY_Done_ExecNoError;
001B43 7E01              MOV      R6,#01H
001B45 7F40              MOV      R7,#040H
001B47 22                RET      
  371:     }
001B48         ?C0651?PKT_I2CM:
  372:     else
  373:     {
  374:         return PKT_REPLY_Fail_I2cNoAck;
001B48 7E03              MOV      R6,#03H
001B4A 7F40              MOV      R7,#040H
  375:     }
  376: }
001B4C 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  176: static BOOL _pkt_i2cm_CheckReady(void)
  177: {
  178:     if ((PKT_I2CM_GET_SCL() == HIGH)
  179:         && (PKT_I2CM_GET_SDA() == HIGH))
001B4D 308205            JNB      IO_DUT_I2CM_SCL,?C0216?PKT_I2CM
001B50 309202            JNB      IO_DUT_I2CM_SDA,?C0216?PKT_I2CM
  180:     {
  181:         /* the I2C only can be started, while SCL/SDA is at high level */
  182:         return TRUE;
001B53 D3                SETB     C
001B54 22                RET      
  183:     }
001B55         ?C0216?PKT_I2CM:
  184:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001B55 208202            JB       IO_DUT_I2CM_SCL,$ + 5H
001B58 811D              AJMP     ?C0218?PKT_I2CM
001B5A 309202            JNB      IO_DUT_I2CM_SDA,$ + 5H
001B5D 811D              AJMP     ?C0218?PKT_I2CM
  185:              && (PKT_I2CM_GET_SDA() == LOW))
  186:     {
  187:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  188:          *  we should attempt to reset the I2C bus,
  189:          *  to recover the SDA to idle state.
  190:          *
  191:          * Memory (Management Interface) Reset:
  192:          *  1) Clock up to 9 cycles.
  193:          *  2) Look for SDA high in each cycle while SCL is high.
  194:          *  3) Create a START condition as SDA is high.
  195:          */
  196: 
  197:         UINT8   vLoop;
  198: 
  199:         for (vLoop = 9; vLoop != 0; vLoop--)
001B5F 753F09            MOV      vLoop,#09H
001B62         ?C0220?PKT_I2CM:
  200:         {
  201:             PKT_I2CM_SET_SCL(LOW);
001B62 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 25


001B63 00                NOP      
001B64 00                NOP      
001B65 00                NOP      
001B66 00                NOP      
001B67 00                NOP      
001B68 00                NOP      
001B69 00                NOP      
001B6A 00                NOP      
001B6B 00                NOP      
001B6C 00                NOP      
001B6D 00                NOP      
001B6E 00                NOP      
001B6F 00                NOP      
001B70 C282              CLR      IO_DUT_I2CM_SCL
001B72 8000              SJMP     ?C0255?PKT_I2CM
  202:             PKT_I2CM_SET_SCL(HIGH);
001B74         ?C0255?PKT_I2CM:
001B74 00                NOP      
001B75 00                NOP      
001B76 00                NOP      
001B77 00                NOP      
001B78 00                NOP      
001B79 00                NOP      
001B7A 00                NOP      
001B7B 00                NOP      
001B7C 00                NOP      
001B7D 00                NOP      
001B7E 00                NOP      
001B7F 00                NOP      
001B80 00                NOP      
001B81 00                NOP      
001B82 1230F9            LCALL    ?L?COM0035
001B85         ?C0269?PKT_I2CM:
001B85 20820F            JB       IO_DUT_I2CM_SCL,?C0222?PKT_I2CM
001B88 123142            LCALL    ?L?COM0043
001B8B 7002              JNZ      ?C0669?PKT_I2CM
001B8D 1540              DEC      _loop
001B8F         ?C0669?PKT_I2CM:
001B8F 4E                ORL      A,R6
001B90 6005              JZ       ?C0222?PKT_I2CM
001B92 12175A            LCALL    ?L?COM0008
001B95 80EE              SJMP     ?C0269?PKT_I2CM
  203:         }
001B97         ?C0222?PKT_I2CM:
001B97 D53FC8            DJNZ     vLoop,?C0220?PKT_I2CM
001B9A         ?C0221?PKT_I2CM:
  204: 
  205:         if (PKT_I2CM_GET_SDA() == HIGH)
001B9A 209202            JB       IO_DUT_I2CM_SDA,$ + 5H
001B9D 811D              AJMP     ?C0218?PKT_I2CM
  206:         {
  207:             _pkt_i2cm_Start();
001B9F D292              SETB     IO_DUT_I2CM_SDA
001BA1 00                NOP      
001BA2 00                NOP      
001BA3 00                NOP      
001BA4 00                NOP      
001BA5 00                NOP      
001BA6 00                NOP      
001BA7 00                NOP      
001BA8 00                NOP      
001BA9 00                NOP      
001BAA 00                NOP      
001BAB 00                NOP      
001BAC 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 26


001BAD 00                NOP      
001BAE 00                NOP      
001BAF 1230F9            LCALL    ?L?COM0035
001BB2         ?C0300?PKT_I2CM:
001BB2 20820F            JB       IO_DUT_I2CM_SCL,?C0307?PKT_I2CM
001BB5 123142            LCALL    ?L?COM0043
001BB8 7002              JNZ      ?C0670?PKT_I2CM
001BBA 1540              DEC      _loop
001BBC         ?C0670?PKT_I2CM:
001BBC 4E                ORL      A,R6
001BBD 6005              JZ       ?C0307?PKT_I2CM
001BBF 12175A            LCALL    ?L?COM0008
001BC2 80EE              SJMP     ?C0300?PKT_I2CM
001BC4         ?C0307?PKT_I2CM:
001BC4 00                NOP      
001BC5 00                NOP      
001BC6 00                NOP      
001BC7 00                NOP      
001BC8 00                NOP      
001BC9 00                NOP      
001BCA 00                NOP      
001BCB 00                NOP      
001BCC 00                NOP      
001BCD 00                NOP      
001BCE 00                NOP      
001BCF 00                NOP      
001BD0 00                NOP      
001BD1 00                NOP      
001BD2 C292              CLR      IO_DUT_I2CM_SDA
001BD4 00                NOP      
001BD5 00                NOP      
001BD6 00                NOP      
001BD7 00                NOP      
001BD8 00                NOP      
001BD9 00                NOP      
001BDA 00                NOP      
001BDB 00                NOP      
001BDC 00                NOP      
001BDD 00                NOP      
001BDE 00                NOP      
001BDF 00                NOP      
001BE0 00                NOP      
001BE1 00                NOP      
001BE2 C282              CLR      IO_DUT_I2CM_SCL
001BE4 8000              SJMP     ?C0349?PKT_I2CM
  208:             _pkt_i2cm_Stop();
001BE6         ?C0349?PKT_I2CM:
001BE6 C292              CLR      IO_DUT_I2CM_SDA
001BE8 00                NOP      
001BE9 00                NOP      
001BEA 00                NOP      
001BEB 00                NOP      
001BEC 00                NOP      
001BED 00                NOP      
001BEE 00                NOP      
001BEF 00                NOP      
001BF0 00                NOP      
001BF1 00                NOP      
001BF2 00                NOP      
001BF3 00                NOP      
001BF4 00                NOP      
001BF5 00                NOP      
001BF6 1230F9            LCALL    ?L?COM0035
001BF9         ?C0372?PKT_I2CM:
001BF9 20820F            JB       IO_DUT_I2CM_SCL,?C0379?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 27


001BFC 123142            LCALL    ?L?COM0043
001BFF 7002              JNZ      ?C0672?PKT_I2CM
001C01 1540              DEC      _loop
001C03         ?C0672?PKT_I2CM:
001C03 4E                ORL      A,R6
001C04 6005              JZ       ?C0379?PKT_I2CM
001C06 12175A            LCALL    ?L?COM0008
001C09 80EE              SJMP     ?C0372?PKT_I2CM
001C0B         ?C0379?PKT_I2CM:
001C0B 00                NOP      
001C0C 00                NOP      
001C0D 00                NOP      
001C0E 00                NOP      
001C0F 00                NOP      
001C10 00                NOP      
001C11 00                NOP      
001C12 00                NOP      
001C13 00                NOP      
001C14 00                NOP      
001C15 00                NOP      
001C16 00                NOP      
001C17 00                NOP      
001C18 00                NOP      
001C19 D292              SETB     IO_DUT_I2CM_SDA
  209: 
  210:             /* we have successfully recovered the SDA line to idle state */
  211:             return TRUE;
001C1B D3                SETB     C
001C1C 22                RET      
  212:         }
  213:     }
  214:     else
  215:     {
  216:         /* unsupported stretching on SCL/SDA line, operation fail */
  217:     }
001C1D         ?C0218?PKT_I2CM:
  218: 
  219:     return FALSE;
001C1D C3                CLR      C
  220: }
001C1E 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _pkt_i2cm_vs_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  299: static BOOL pkt_i2cm_vs_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  300: {
001C1F 123131            LCALL    ?L?COM0041
001C22 122EA9            LCALL    ?L?COM000E
  301:     static UINT8 vRegOffset = 0x00;
  302:     UINT16  vWriteLen = pPayload->vWriteLen;
  303:     UINT16  vReadLen  = pPayload->vReadLen;
001C25 1230C3            LCALL    ?L?COM0030
  304: 
  305:     /* send write stream */
  306:     if (vWriteLen != 0)
001C28 E538              MOV      A,vWriteLen+01H
001C2A 4537              ORL      A,vWriteLen
001C2C 6036              JZ       ?C0607?PKT_I2CM
  307:     {
  308:         /* 1st byte is always register offset */
  309:         vRegOffset = pPayload->aBuf[0];
001C2E 8F82              MOV      DPL,R7
001C30 8E83              MOV      DPH,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 28


001C32 E582              MOV      A,DPL
001C34 2405              ADD      A,#05H
001C36 F582              MOV      DPL,A
001C38 E4                CLR      A
001C39 3583              ADDC     A,DPH
001C3B F583              MOV      DPH,A
001C3D E0                MOVX     A,@DPTR
001C3E F514              MOV      vRegOffset,A
  310:         if (vWriteLen > 0x100)
001C40 D3                SETB     C
001C41 E538              MOV      A,vWriteLen+01H
001C43 9400              SUBB     A,#00H
001C45 E537              MOV      A,vWriteLen
001C47 9401              SUBB     A,#01H
001C49 4001              JC       ?C0608?PKT_I2CM
  311:         {
  312:             /* write length overflow */
  313:             return FALSE;
001C4B 22                RET      
  314:         }
001C4C         ?C0608?PKT_I2CM:
  315: 
  316:         /* send write buffer */
  317:         CFG_DB_WriteFlush(vRegOffset, (UINT8)(vWriteLen-1), &(pPayload->aBuf[1]));
001C4C E538              MOV      A,vWriteLen+01H
001C4E 14                DEC      A
001C4F FD                MOV      R5,A
001C50 E536              MOV      A,pPayload+01H
001C52 2406              ADD      A,#06H
001C54 FB                MOV      R3,A
001C55 E4                CLR      A
001C56 3535              ADDC     A,pPayload
001C58 FA                MOV      R2,A
001C59 AF14              MOV      R7,vRegOffset
001C5B 9186              ACALL    _CFG_DB_WriteFlush
  318:         vRegOffset = (UINT8)(vRegOffset+vWriteLen-1);
001C5D E514              MOV      A,vRegOffset
001C5F 2538              ADD      A,vWriteLen+01H
001C61 14                DEC      A
001C62 F514              MOV      vRegOffset,A
  319:     }
001C64         ?C0607?PKT_I2CM:
  320: 
  321:     /* send read stream */
  322:     if (vReadLen != 0)
001C64 E53A              MOV      A,vReadLen+01H
001C66 4539              ORL      A,vReadLen
001C68 601A              JZ       ?C0610?PKT_I2CM
  323:     {
  324:         UINT16  vLoop;
  325: 
  326:         /* read data */
  327:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001C6A E4                CLR      A
001C6B F53B              MOV      vLoop,A
001C6D F53C              MOV      vLoop+01H,A
001C6F         ?C0611?PKT_I2CM:
001C6F 123127            LCALL    ?L?COM0040
001C72 5010              JNC      ?C0610?PKT_I2CM
  328:         {
  329:             pPayload->aBuf[vWriteLen+vLoop] = CFG_DB_ReadByte(vRegOffset++);
001C74 AF14              MOV      R7,vRegOffset
001C76 0514              INC      vRegOffset
001C78 122A2D            LCALL    _CFG_DB_ReadByte
001C7B 12300E            LCALL    ?L?COM0015
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 29


001C7E 7002              JNZ      ?C0681?PKT_I2CM
001C80 053B              INC      vLoop
001C82         ?C0681?PKT_I2CM:
001C82 80EB              SJMP     ?C0611?PKT_I2CM
  330:         }
  331:     }
001C84         ?C0610?PKT_I2CM:
  332: 
  333:     return TRUE;
001C84 D3                SETB     C
  334: }
001C85 22                RET      
----- FUNCTION _pkt_i2cm_vs_Stream (END) -------


----- FUNCTION _CFG_DB_WriteFlush (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  167: void CFG_DB_WriteFlush
  168: (
001C86 8F3D              MOV      vOffset,R7
001C88 8D3E              MOV      vCount,R5
001C8A 8A3F              MOV      pBuf,R2
001C8C 8B40              MOV      pBuf+01H,R3
  169:     IN       UINT8            vOffset,
  170:     IN       UINT8            vCount,
  171:     IN const UINT8 SEG_XDATA *pBuf
  172: )
  173: {
  174:     SINT8   vPID = cfg_db_GetPID(vOffset);
001C8E F140              ACALL    _cfg_db_GetPID
001C90 8F41              MOV      vPID,R7
  175:     UINT8   vPageSize;
  176: 
  177:     if ((vPID == MEMPAGE_PID_INVALID) || (vCount == 0))
001C92 E541              MOV      A,vPID
001C94 F4                CPL      A
001C95 7002              JNZ      $ + 4H
001C97 A1BC              AJMP     ?C0056?CFG_DB
001C99 E53E              MOV      A,vCount
001C9B 7002              JNZ      $ + 4H
001C9D A1BC              AJMP     ?C0056?CFG_DB
  178:     {
  179:         /* invalid page, or zero flush length */
  180:         return;
  181:     }
001C9F         ?C0054?CFG_DB:
  182: 
  183:     /* limit Rx FIFO length to page boundary */
  184:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
001C9F 12310A            LCALL    ?L?COM0039
001CA2 4009              JC       ?C0057?CFG_DB
001CA4 123102            LCALL    ?L?COM0038
001CA7 5004              JNC      ?C0057?CFG_DB
001CA9 7F20              MOV      R7,#020H
001CAB 8002              SJMP     ?C0058?CFG_DB
001CAD         ?C0057?CFG_DB:
001CAD 7F80              MOV      R7,#080H
001CAF         ?C0058?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  185:     vOffset  &= (vPageSize - 1);
001CAF EF                MOV      A,R7
001CB0 14                DEC      A
001CB1 523D              ANL      vOffset,A
  186:     if (vOffset+vCount > vPageSize)
001CB3 E53E              MOV      A,vCount
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 30


001CB5 FD                MOV      R5,A
001CB6 E53D              MOV      A,vOffset
001CB8 2D                ADD      A,R5
001CB9 FD                MOV      R5,A
001CBA E4                CLR      A
001CBB 33                RLC      A
001CBC FC                MOV      R4,A
001CBD EF                MOV      A,R7
001CBE FB                MOV      R3,A
001CBF D3                SETB     C
001CC0 ED                MOV      A,R5
001CC1 9B                SUBB     A,R3
001CC2 7480              MOV      A,#080H
001CC4 F8                MOV      R0,A
001CC5 6C                XRL      A,R4
001CC6 98                SUBB     A,R0
001CC7 4008              JC       ?C0059?CFG_DB
  187:     {
  188:         vCount = (vOffset+vCount) - vPageSize;
001CC9 E53D              MOV      A,vOffset
001CCB 253E              ADD      A,vCount
001CCD C3                CLR      C
001CCE 9F                SUBB     A,R7
001CCF F53E              MOV      vCount,A
  189:     }
001CD1         ?C0059?CFG_DB:
  190: 
  191:     if (vPID == MEMPAGE_PID_DIRECT_FE_60)
001CD1 E541              MOV      A,vPID
001CD3 6401              XRL      A,#01H
001CD5 7027              JNZ      ?C0060?CFG_DB
  192:     {
  193:         /* A2.40-7F page */
  194: 
  195:         UINT8   vLoop;
  196:         for (vLoop=0; vLoop<vCount; vLoop++,vOffset++)
001CD7 F542              MOV      vLoop,A
001CD9         ?C0061?CFG_DB:
001CD9 E542              MOV      A,vLoop
001CDB C3                CLR      C
001CDC 953E              SUBB     A,vCount
001CDE 501C              JNC      ?C0062?CFG_DB
  197:         {
  198:             UINT8   vData = pBuf[vLoop];
001CE0 123063            LCALL    ?L?COM0020
001CE3 F543              MOV      vData,A
  199: 
  200:             switch (vOffset)
001CE5 E53D              MOV      A,vOffset
001CE7 24E5              ADD      A,#0E5H
001CE9 24FB              ADD      A,#0FBH
001CEB 5004              JNC      ?C0077?CFG_DB
001CED 2408              ADD      A,#08H
001CEF 7005              JNZ      ?C0063?CFG_DB
  201:             {
  202:                 case CFG(RT_EVB_CTRL):
  203:                     /* EVB/DUT related */
  204:                 case CFG(Vendor_PWD_Entry)+0:
  205:                 case CFG(Vendor_PWD_Entry)+1:
  206:                 case CFG(Vendor_PWD_Entry)+2:
  207:                 case CFG(Vendor_PWD_Entry)+3:
  208:                 case CFG(Vendor_Page_Select):
  209:                     CFG_SETV8(MEMPAGE_PID_DIRECT_FE_60, vOffset, vData);
001CF1         ?C0077?CFG_DB:
001CF1 A83D              MOV      R0,vOffset
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 31


001CF3 E543              MOV      A,vData
001CF5 F2                MOVX     @R0,A
  210:                     break;
  211: 
  212:                 default:    /* read-only field */
  213:                     /* do nothing */
  214:                     break;
  215:             }
  216:         }
001CF6         ?C0063?CFG_DB:
001CF6 0542              INC      vLoop
001CF8 053D              INC      vOffset
001CFA 80DD              SJMP     ?C0061?CFG_DB
001CFC         ?C0062?CFG_DB:
  217: 
  218:         /* refresh password level */
  219:         CFG_PWD_RefreshLevel();
001CFC E17F              AJMP     CFG_PWD_RefreshLevel
  220:     }
001CFE         ?C0060?CFG_DB:
  221:     else    /* other pages */
  222:     {
  223:         if (vPID == MEMPAGE_PID_DIRECT_FE_00)
001CFE E541              MOV      A,vPID
001D00 B4061B            CJNE     A,#06H,?C0083?CFG_DB
  224:         {
  225:             if (vOffset+vCount > MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
001D03 E53D              MOV      A,vOffset
001D05 253E              ADD      A,vCount
001D07 FF                MOV      R7,A
001D08 E4                CLR      A
001D09 33                RLC      A
001D0A FE                MOV      R6,A
001D0B D3                SETB     C
001D0C EF                MOV      A,R7
001D0D 9460              SUBB     A,#060H
001D0F EE                MOV      A,R6
001D10 6480              XRL      A,#080H
001D12 9480              SUBB     A,#080H
001D14 4008              JC       ?C0083?CFG_DB
  226:             {
  227:                 /* cross-write from A2.00-5F to A2.60-7F field,
  228:                  * only accept A2.00-5F field data.
  229:                  */
  230:                 vCount = (vOffset+vCount) - MEMMAP_REAL_OFFSET(DDM_EVB_TEMP);
001D16 E53D              MOV      A,vOffset
001D18 253E              ADD      A,vCount
001D1A 24A0              ADD      A,#0A0H
001D1C F53E              MOV      vCount,A
  231:             }
  232:         }
001D1E         ?C0083?CFG_DB:
  233: 
  234:         /* check password level, to make sure it's writable */
  235:         if (CFG_PWD_GetLevel() >= aPagePwdWriteTable[vPID])
001D1E AF41              MOV      R7,vPID
001D20 EF                MOV      A,R7
001D21 33                RLC      A
001D22 95E0              SUBB     A,ACC
001D24 FE                MOV      R6,A
001D25 74AF              MOV      A,#LOW aPagePwdWriteTable
001D27 2F                ADD      A,R7
001D28 F582              MOV      DPL,A
001D2A 7415              MOV      A,#HIGH aPagePwdWriteTable
001D2C 3E                ADDC     A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 32


001D2D 122EC4            LCALL    ?L?COM003F
001D30 5002              JNC      $ + 4H
001D32 A1BC              AJMP     ?C0056?CFG_DB
  236:         {
  237:             if (MEMPAGE_IsRAM(vPID))
001D34 12310B            LCALL    ?L?COM003A
001D37 405B              JC       ?C0086?CFG_DB
001D39 123102            LCALL    ?L?COM0038
001D3C 5056              JNC      ?C0086?CFG_DB
  238:             {
  239:                 /* RAM page */
  240: 
  241:                 UINT8   vLoop;
  242:                 for (vLoop=0; vLoop<vCount; vLoop++)
001D3E E4                CLR      A
001D3F F542              MOV      vLoop,A
001D41         ?C0087?CFG_DB:
001D41 E542              MOV      A,vLoop
001D43 C3                CLR      C
001D44 953E              SUBB     A,vCount
001D46 5074              JNC      ?C0056?CFG_DB
  243:                 {
  244:                     CFG_SETV8(vPID, vOffset+vLoop, pBuf[vLoop]);
001D48 12310A            LCALL    ?L?COM0039
001D4B 401B              JC       ?C0093?CFG_DB
001D4D 123102            LCALL    ?L?COM0038
001D50 5016              JNC      ?C0093?CFG_DB
001D52 123063            LCALL    ?L?COM0020
001D55 FF                MOV      R7,A
001D56 E53D              MOV      A,vOffset
001D58 2542              ADD      A,vLoop
001D5A FE                MOV      R6,A
001D5B E541              MOV      A,vPID
001D5D 14                DEC      A
001D5E C4                SWAP     A
001D5F 33                RLC      A
001D60 54E0              ANL      A,#0E0H
001D62 2E                ADD      A,R6
001D63 F8                MOV      R0,A
001D64 EF                MOV      A,R7
001D65 F2                MOVX     @R0,A
001D66 8028              SJMP     ?C0089?CFG_DB
001D68         ?C0093?CFG_DB:
001D68 123159            LCALL    ?L?COM0046
001D6B 4023              JC       ?C0089?CFG_DB
001D6D 123151            LCALL    ?L?COM0045
001D70 501E              JNC      ?C0089?CFG_DB
001D72 122E22            LCALL    ?L?COM002E
001D75         ?C0107?CFG_DB:
001D75 C3                CLR      C
001D76 33                RLC      A
001D77 CE                XCH      A,R6
001D78 33                RLC      A
001D79 CE                XCH      A,R6
001D7A D8F9              DJNZ     R0,?C0107?CFG_DB
001D7C 122E1A            LCALL    ?L?COM0037
001D7F E53D              MOV      A,vOffset
001D81 2542              ADD      A,vLoop
001D83 7C00              MOV      R4,#00H
001D85 2F                ADD      A,R7
001D86 FF                MOV      R7,A
001D87 EC                MOV      A,R4
001D88 3E                ADDC     A,R6
001D89 FE                MOV      R6,A
001D8A 123063            LCALL    ?L?COM0020
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 33


001D8D FD                MOV      R5,A
001D8E F136              ACALL    _CFG_ROM_SET8
  245:                 }
001D90         ?C0089?CFG_DB:
001D90 0542              INC      vLoop
001D92 80AD              SJMP     ?C0087?CFG_DB
  246:             }
001D94         ?C0086?CFG_DB:
  247:             else if (MEMPAGE_IsROM(vPID))
001D94 123159            LCALL    ?L?COM0046
001D97 4023              JC       ?C0056?CFG_DB
001D99 123151            LCALL    ?L?COM0045
001D9C 501E              JNC      ?C0056?CFG_DB
  248:             {
  249:                 /* ROM page */
  250:                 EEPROM_MEMCPY(MEMPAGE_ROM_LMA(vPID)+vOffset, pBuf, vCount);
001D9E 122E22            LCALL    ?L?COM002E
001DA1         ?C0108?CFG_DB:
001DA1 C3                CLR      C
001DA2 33                RLC      A
001DA3 CE                XCH      A,R6
001DA4 33                RLC      A
001DA5 CE                XCH      A,R6
001DA6 D8F9              DJNZ     R0,?C0108?CFG_DB
001DA8 122E1A            LCALL    ?L?COM0037
001DAB 7C00              MOV      R4,#00H
001DAD EF                MOV      A,R7
001DAE 253D              ADD      A,vOffset
001DB0 FF                MOV      R7,A
001DB1 EC                MOV      A,R4
001DB2 3E                ADDC     A,R6
001DB3 FE                MOV      R6,A
001DB4 AB40              MOV      R3,pBuf+01H
001DB6 AA3F              MOV      R2,pBuf
001DB8 AD3E              MOV      R5,vCount
001DBA B1BD              ACALL    _DRV_FLASH_Update
  251:             }
  252:             else
  253:             {
  254:                 /* VIRTUAL page */
  255:                 /* do nothing */
  256:             }
  257:         }
  258:     }
  259: }
001DBC         ?C0056?CFG_DB:
001DBC 22                RET      
----- FUNCTION _CFG_DB_WriteFlush (END) -------


----- FUNCTION _DRV_FLASH_Update (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  179: void DRV_FLASH_Update
  180: (
001DBD 8E45              MOV      vFlashAddr,R6
001DBF 8F46              MOV      vFlashAddr+01H,R7
001DC1 8A47              MOV      pBuf,R2
001DC3 8B48              MOV      pBuf+01H,R3
;---- Variable 'vLen' assigned to Register 'R1' ----
001DC5 A905              MOV      R1,AR5
  181:     IN       UINT16           vFlashAddr,
  182:     IN       UINT8            vLen,
  183:     IN const UINT8 SEG_XDATA *pBuf
  184: )
  185: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 34


  186:     UINT8  bIntStatus;
  187:     UINT8  bErase;
  188:     UINT8  vLoop;
  189:     UINT16 vPageBase;
  190:     UINT16 vPageOffset;
  191: 
  192:     /* globally lock interrupt */
  193:     bIntStatus = DRV_INT_LockGlobalInterrupt();
001DC7 30AF05            JNB      EA,?C0011?DRV_FLASH
001DCA C2AF              CLR      EA
001DCC D3                SETB     C
001DCD 8001              SJMP     ?C0012?DRV_FLASH
001DCF         ?C0011?DRV_FLASH:
001DCF C3                CLR      C
001DD0         ?C0012?DRV_FLASH:
001DD0 E4                CLR      A
001DD1 33                RLC      A
001DD2 F549              MOV      bIntStatus,A
  194: 
  195:     /* calculate flash page base address & offset of this page */
  196:     vPageBase   = vFlashAddr & FLASH_PAGE_MASK;
001DD4 E545              MOV      A,vFlashAddr
001DD6 54FE              ANL      A,#0FEH
001DD8 F54A              MOV      vPageBase,A
001DDA 754B00            MOV      vPageBase+01H,#00H
  197:     vPageOffset = vFlashAddr & ~FLASH_PAGE_MASK;
001DDD E545              MOV      A,vFlashAddr
001DDF 5401              ANL      A,#01H
001DE1 F54C              MOV      vPageOffset,A
001DE3 85464D            MOV      vPageOffset+01H,vFlashAddr+01H
  198: 
  199:     /* check whether need to erase flash page */
  200:     bErase = FALSE;
;---- Variable 'bErase' assigned to Register 'R7' ----
001DE6 E4                CLR      A
001DE7 FF                MOV      R7,A
  201:     for (vLoop = 0; vLoop < vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R6' ----
001DE8 FE                MOV      R6,A
001DE9         ?C0013?DRV_FLASH:
001DE9 EE                MOV      A,R6
001DEA C3                CLR      C
001DEB 99                SUBB     A,R1
001DEC 5033              JNC      ?C0014?DRV_FLASH
  202:     {
  203:         UINT8   vFlashData = CODE_U8(vPageBase+vPageOffset+vLoop);
001DEE E54B              MOV      A,vPageBase+01H
001DF0 254D              ADD      A,vPageOffset+01H
001DF2 FD                MOV      R5,A
001DF3 E54A              MOV      A,vPageBase
001DF5 354C              ADDC     A,vPageOffset
001DF7 FC                MOV      R4,A
001DF8 EE                MOV      A,R6
001DF9 7A00              MOV      R2,#00H
001DFB 2D                ADD      A,R5
001DFC FD                MOV      R5,A
001DFD EA                MOV      A,R2
001DFE 3C                ADDC     A,R4
001DFF 8D82              MOV      DPL,R5
001E01 F583              MOV      DPH,A
001E03 E4                CLR      A
001E04 93                MOVC     A,@A+DPTR
001E05 F54E              MOV      vFlashData,A
  204:         UINT8   vRamData   = pBuf[vLoop];
001E07 E548              MOV      A,pBuf+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 35


001E09 2E                ADD      A,R6
001E0A F582              MOV      DPL,A
001E0C E4                CLR      A
001E0D 3547              ADDC     A,pBuf
001E0F F583              MOV      DPH,A
001E11 E0                MOVX     A,@DPTR
001E12 F54F              MOV      vRamData,A
  205: 
  206:         if ((vFlashData & vRamData) != vRamData)
001E14 554E              ANL      A,vFlashData
001E16 654F              XRL      A,vRamData
001E18 6004              JZ       ?C0015?DRV_FLASH
  207:         {
  208:             bErase = TRUE;
001E1A 7F01              MOV      R7,#01H
  209:             break;
001E1C 8003              SJMP     ?C0014?DRV_FLASH
  210:         }
  211:     }
001E1E         ?C0015?DRV_FLASH:
001E1E 0E                INC      R6
001E1F 80C8              SJMP     ?C0013?DRV_FLASH
001E21         ?C0014?DRV_FLASH:
  212: 
  213:     if (!bErase)
001E21 EF                MOV      A,R7
001E22 700B              JNZ      ?C0017?DRV_FLASH
  214:     {
  215:         /* no need to erase,
  216:           * just write the new data into flash is OK.
  217:           */
  218:         drv_flash_WriteBytes(vFlashAddr, vLen, (UINT16)pBuf, FALSE);
001E24 1230E1            LCALL    ?L?COM0032
001E27 AF46              MOV      R7,vFlashAddr+01H
001E29 AE45              MOV      R6,vFlashAddr
001E2B D1B9              ACALL    _drv_flash_WriteBytes
  219:     }
001E2D 807F              SJMP     ?C0021?DRV_FLASH
001E2F         ?C0017?DRV_FLASH:
  220:     else
  221:     {
  222:         UINT16 vWriteOffset;
  223: 
  224:         /* prepare cache page content, to the final flash page content:
  225:          *   1) copy other content into cache page;
  226:          *   2) update cache page with new data;
  227:          */
  228:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
001E2F 754E3A            MOV      vWriteOffset,#03AH
001E32 754F00            MOV      vWriteOffset+01H,#00H
  229:         drv_flash_WriteBytes(vWriteOffset, vPageOffset, vPageBase, TRUE);
001E35 D238              SETB     ?_drv_flash_WriteBytes?BIT
001E37 AB4B              MOV      R3,vPageBase+01H
001E39 AA4A              MOV      R2,vPageBase
001E3B AD4D              MOV      R5,vPageOffset+01H
001E3D AC4C              MOV      R4,vPageOffset
001E3F D1B5              ACALL    ?L?COM0036
  230:         vWriteOffset += vPageOffset;
001E41 E54D              MOV      A,vPageOffset+01H
001E43 254F              ADD      A,vWriteOffset+01H
001E45 F54F              MOV      vWriteOffset+01H,A
001E47 E54C              MOV      A,vPageOffset
001E49 354E              ADDC     A,vWriteOffset
001E4B F54E              MOV      vWriteOffset,A
  231:         drv_flash_WriteBytes(vWriteOffset, vLen, (UINT16)pBuf, FALSE);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 36


001E4D 1230E1            LCALL    ?L?COM0032
001E50 D1B5              ACALL    ?L?COM0036
  232:         vWriteOffset += vLen;
001E52 E9                MOV      A,R1
001E53 FF                MOV      R7,A
001E54 7E00              MOV      R6,#00H
001E56 254F              ADD      A,vWriteOffset+01H
001E58 F54F              MOV      vWriteOffset+01H,A
001E5A EE                MOV      A,R6
001E5B 354E              ADDC     A,vWriteOffset
001E5D F54E              MOV      vWriteOffset,A
  233:         drv_flash_WriteBytes(vWriteOffset,
  234:                              FLASH_PAGE_SIZE - (vPageOffset+vLen),
  235:                              vPageBase+vPageOffset + vLen,
  236:                              TRUE);
001E5F E54D              MOV      A,vPageOffset+01H
001E61 2F                ADD      A,R7
001E62 FF                MOV      R7,A
001E63 EE                MOV      A,R6
001E64 354C              ADDC     A,vPageOffset
001E66 FE                MOV      R6,A
001E67 C3                CLR      C
001E68 E4                CLR      A
001E69 9F                SUBB     A,R7
001E6A FD                MOV      R5,A
001E6B 7402              MOV      A,#02H
001E6D 9E                SUBB     A,R6
001E6E FC                MOV      R4,A
001E6F E54B              MOV      A,vPageBase+01H
001E71 254D              ADD      A,vPageOffset+01H
001E73 FF                MOV      R7,A
001E74 E54A              MOV      A,vPageBase
001E76 354C              ADDC     A,vPageOffset
001E78 FE                MOV      R6,A
001E79 7A00              MOV      R2,#00H
001E7B EF                MOV      A,R7
001E7C 29                ADD      A,R1
001E7D FB                MOV      R3,A
001E7E EA                MOV      A,R2
001E7F 3E                ADDC     A,R6
001E80 FA                MOV      R2,A
001E81 D238              SETB     ?_drv_flash_WriteBytes?BIT
001E83 D1B5              ACALL    ?L?COM0036
  237: 
  238:         /* erase target flash page */
  239:         drv_flash_ErasePage(vPageBase);
001E85 E4                CLR      A
001E86 FB                MOV      R3,A
001E87 7D03              MOV      R5,#03H
001E89 AF4B              MOV      R7,vPageBase+01H
001E8B AE4A              MOV      R6,vPageBase
001E8D F113              ACALL    _drv_flash_Control
  240: 
  241:         /* copy cache page content into target flash page */
  242:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
001E8F 754E3A            MOV      vWriteOffset,#03AH
001E92 754F00            MOV      vWriteOffset+01H,#00H
  243:         drv_flash_WriteBytes(vPageBase, FLASH_PAGE_SIZE, vWriteOffset, TRUE);
001E95 D238              SETB     ?_drv_flash_WriteBytes?BIT
001E97 AB4F              MOV      R3,vWriteOffset+01H
001E99 AA4E              MOV      R2,vWriteOffset
001E9B 7D00              MOV      R5,#00H
001E9D 7C02              MOV      R4,#02H
001E9F AF4B              MOV      R7,vPageBase+01H
001EA1 AE4A              MOV      R6,vPageBase
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 37


001EA3 D1B9              ACALL    _drv_flash_WriteBytes
  244: 
  245:         /* erase flash cache page */
  246:         drv_flash_ErasePage(FLASH_CACHE_PAGE_BASE);
001EA5 E4                CLR      A
001EA6 FB                MOV      R3,A
001EA7 7D03              MOV      R5,#03H
001EA9 FF                MOV      R7,A
001EAA 7E3A              MOV      R6,#03AH
001EAC F113              ACALL    _drv_flash_Control
  247:     }
001EAE         ?C0021?DRV_FLASH:
  248: 
  249:     /* restore interrupt status */
  250:     DRV_INT_UnlockGlobalInterrupt(bIntStatus);
001EAE E549              MOV      A,bIntStatus
001EB0 24FF              ADD      A,#0FFH
001EB2 92AF              MOV      EA,C
  251: }
001EB4 22                RET      
----- FUNCTION _DRV_FLASH_Update (END) -------


----- FUNCTION ?L?COM0036 (BEGIN) -----
001EB5 AF4F              MOV      R7,vWriteOffset+01H
001EB7 AE4E              MOV      R6,vWriteOffset
----- FUNCTION _drv_flash_WriteBytes (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  137: static void drv_flash_WriteBytes
  138: (
001EB9 8E50              MOV      vFlashAddr,R6
001EBB 8F51              MOV      vFlashAddr+01H,R7
001EBD 8C52              MOV      vLen,R4
001EBF 8D53              MOV      vLen+01H,R5
001EC1 8A54              MOV      vDataAddr,R2
001EC3 8B55              MOV      vDataAddr+01H,R3
  139:     IN UINT16     vFlashAddr,
  140:     IN UINT16     vLen,
  141:     IN UINT16     vDataAddr,
  142:     IN BOOL       bFromFlash
  143: )
  144: {
001EC5         ?C0005?DRV_FLASH:
  145:     while (vLen--)
001EC5 E553              MOV      A,vLen+01H
001EC7 1553              DEC      vLen+01H
001EC9 AE52              MOV      R6,vLen
001ECB 7002              JNZ      ?C0023?DRV_FLASH
001ECD 1552              DEC      vLen
001ECF         ?C0023?DRV_FLASH:
001ECF 4E                ORL      A,R6
001ED0 6040              JZ       ?C0010?DRV_FLASH
  146:     {
  147:         UINT8   vData;
  148: 
  149:         vData = (bFromFlash? CODE_U8(vDataAddr) : XDATA_U8((vDataAddr)&0xFF));
001ED2 30380B            JNB      bFromFlash,?C0007?DRV_FLASH
001ED5 855582            MOV      DPL,vDataAddr+01H
001ED8 855483            MOV      DPH,vDataAddr
001EDB E4                CLR      A
001EDC 93                MOVC     A,@A+DPTR
001EDD FF                MOV      R7,A
001EDE 8008              SJMP     ?C0008?DRV_FLASH
001EE0         ?C0007?DRV_FLASH:
001EE0 855582            MOV      DPL,vDataAddr+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 38


001EE3 758300            MOV      DPH,#00H
001EE6 E0                MOVX     A,@DPTR
001EE7 FF                MOV      R7,A
001EE8         ?C0008?DRV_FLASH:
001EE8 8F56              MOV      vData,R7
  150:         if (CODE_U8(vFlashAddr) != vData)
001EEA 855182            MOV      DPL,vFlashAddr+01H
001EED 855083            MOV      DPH,vFlashAddr
001EF0 E4                CLR      A
001EF1 93                MOVC     A,@A+DPTR
001EF2 6556              XRL      A,vData
001EF4 600A              JZ       ?C0009?DRV_FLASH
  151:         {
  152:             drv_flash_WriteByte(vFlashAddr, vData);
001EF6 AB56              MOV      R3,vData
001EF8 7D01              MOV      R5,#01H
001EFA AF51              MOV      R7,vFlashAddr+01H
001EFC AE50              MOV      R6,vFlashAddr
001EFE F113              ACALL    _drv_flash_Control
  153:         }
001F00         ?C0009?DRV_FLASH:
  154:         vFlashAddr++;
001F00 0551              INC      vFlashAddr+01H
001F02 E551              MOV      A,vFlashAddr+01H
001F04 7002              JNZ      ?C0024?DRV_FLASH
001F06 0550              INC      vFlashAddr
001F08         ?C0024?DRV_FLASH:
  155:         vDataAddr++;
001F08 0555              INC      vDataAddr+01H
001F0A E555              MOV      A,vDataAddr+01H
001F0C 7002              JNZ      ?C0025?DRV_FLASH
001F0E 0554              INC      vDataAddr
001F10         ?C0025?DRV_FLASH:
  156:     }
001F10 80B3              SJMP     ?C0005?DRV_FLASH
  157: }
001F12         ?C0010?DRV_FLASH:
001F12 22                RET      
----- FUNCTION _drv_flash_WriteBytes (END) -------


----- FUNCTION _drv_flash_Control (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
   57: static void drv_flash_Control(UINT16 vFlashAddr, UINT8 vPSCTL, UINT8 vData)
   58: {
001F13 8E57              MOV      vFlashAddr,R6
001F15 8F58              MOV      vFlashAddr+01H,R7
;---- Variable 'vData' assigned to Register 'R3' ----
;---- Variable 'vPSCTL' assigned to Register 'R5' ----
   59:   #if DRV_WATCHDOG_SUPPORT
   60:     /* kick watchdog, to prevent watchdog reset MCU */
   61:     DRV_WATCHDOG_Kick();
   62:   #endif
   63: 
   64:     /* Force Enable VDD Monitor as a reset source */
   65:     DRV_RESET_EnableVDDMonitor();
001F17 75FF80            MOV      VDM0CN,#080H
001F1A 75EF06            MOV      RSTSRC,#06H
   66: 
   67:     /* enable flash erase/write */
   68:     PSCTL = vPSCTL;
001F1D 8D8F              MOV      PSCTL,R5
   69: 
   70:     /* write KEYs to unlock flash */
   71:     FLKEY = FLASH_KEY_1;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 39


001F1F A2AF              MOV      C,EA
001F21 E4                CLR      A
001F22 33                RLC      A
001F23 24A5              ADD      A,#0A5H
001F25 F5B7              MOV      FLKEY,A
   72:     FLKEY = FLASH_KEY_2;
001F27 75B7F1            MOV      FLKEY,#0F1H
   73: 
   74:     /* write data into flash */
   75:     XDATA_U8(vFlashAddr) = vData;
001F2A 855882            MOV      DPL,vFlashAddr+01H
001F2D 855783            MOV      DPH,vFlashAddr
001F30 EB                MOV      A,R3
001F31 F0                MOVX     @DPTR,A
   76: 
   77:     /* disable flash erase/write */
   78:     PSCTL = 0x00;
001F32 E4                CLR      A
001F33 F58F              MOV      PSCTL,A
   79: }
001F35 22                RET      
----- FUNCTION _drv_flash_Control (END) -------


----- FUNCTION _CFG_ROM_SET8 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
   71: 
001F36 8D44              MOV      vData,R5
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
001F38 7A00              MOV      R2,#HIGH vData
001F3A 7B44              MOV      R3,#LOW vData
001F3C 7D01              MOV      R5,#01H
001F3E A1BD              AJMP     _DRV_FLASH_Update
----- FUNCTION _CFG_ROM_SET8 (END) -------


----- FUNCTION _cfg_db_GetPID (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   42: static SINT8 cfg_db_GetPID(IN UINT8 vOffset)
   43: {
;---- Variable 'vOffset' assigned to Register 'R7' ----
   44:     if (vOffset < MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
   45:     {
001F40 EF                MOV      A,R7
001F41 C3                CLR      C
001F42 9460              SUBB     A,#060H
001F44 5003              JNC      ?C0019?CFG_DB
   46:         return MEMPAGE_PID_DIRECT_FE_00;
   47:     }
001F46 7F06              MOV      R7,#06H
001F48 22                RET      
   48:     else if (vOffset < I2CS_PAGE_SIZE)
001F49         ?C0019?CFG_DB:
   49:     {
001F49 EF                MOV      A,R7
001F4A C3                CLR      C
001F4B 9480              SUBB     A,#080H
001F4D 5003              JNC      ?C0022?CFG_DB
   50:         return MEMPAGE_PID_DIRECT_FE_60;
   51:     }
001F4F 7F01              MOV      R7,#01H
001F51 22                RET      
   52:     else
001F52         ?C0022?CFG_DB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 40


   53:     {
   54:         switch (CFG_GET8(Vendor_Page_Select))
001F52 781F              MOV      R0,#01FH
001F54 E2                MOVX     A,@R0
001F55 2480              ADD      A,#080H
001F57 6017              JZ       ?C0027?CFG_DB
001F59 14                DEC      A
001F5A 6017              JZ       ?C0028?CFG_DB
001F5C 14                DEC      A
001F5D 6017              JZ       ?C0029?CFG_DB
001F5F 2483              ADD      A,#083H
001F61 6016              JZ       ?C0030?CFG_DB
001F63 243F              ADD      A,#03FH
001F65 7015              JNZ      ?C0021?CFG_DB
   55:         {
   56:             /* RAM pages */
   57:             case 0xC0:
001F67         ?C0025?CFG_DB:
   58:                 if (vOffset < I2CS_PAGE_SIZE+CFG_RAM_PAGE_SIZE)
001F67 EF                MOV      A,R7
001F68 C3                CLR      C
001F69 94A0              SUBB     A,#0A0H
001F6B 500F              JNC      ?C0021?CFG_DB
   59:                 {
   60:                     return MEMPAGE_PID_EXTEND_FE_C0;
001F6D 7F02              MOV      R7,#02H
001F6F 22                RET      
   61:                 }
   62:                 break;
   63: 
   64:             /* ROM pages */
   65:             case 0x80: return MEMPAGE_PID_EXTEND_FE_80;
001F70         ?C0027?CFG_DB:
001F70 7F03              MOV      R7,#03H
001F72 22                RET      
   66:             case 0x81: return MEMPAGE_PID_EXTEND_FE_81;
001F73         ?C0028?CFG_DB:
001F73 7F04              MOV      R7,#04H
001F75 22                RET      
   67:             case 0x82: return MEMPAGE_PID_EXTEND_FE_82;
001F76         ?C0029?CFG_DB:
001F76 7F05              MOV      R7,#05H
001F78 22                RET      
   68: 
   69:             /* virtual pages */
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
001F79         ?C0030?CFG_DB:
001F79 7F00              MOV      R7,#00H
001F7B 22                RET      
   71: 
   72:             default:
   73:                 break;
   74:         }
   75:     }
001F7C         ?C0021?CFG_DB:
   76: 
   77:     return MEMPAGE_PID_INVALID;
001F7C 7FFF              MOV      R7,#0FFH
   78: }
001F7E 22                RET      
----- FUNCTION _cfg_db_GetPID (END) -------


----- FUNCTION CFG_PWD_RefreshLevel (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 41


   38: void CFG_PWD_RefreshLevel(void)
   39: {
   40:     UINT32  vPasswd = CFG_GET(Vendor_PWD_Entry);
   41: 
001F7F 7F1B              MOV      R7,#01BH
001F81 7E00              MOV      R6,#00H
001F83 F1EC              ACALL    _CFG_RAM_GET32
001F85 8F47              MOV      vPasswd+03H,R7
001F87 8E46              MOV      vPasswd+02H,R6
001F89 8D45              MOV      vPasswd+01H,R5
001F8B 8C44              MOV      vPasswd,R4
   42:     switch (vPasswd)
001F8D 120917            LCALL    ?C?LCASE
001F90 1FA6              DW       ?C0005?CFG_PWD
001F92 F626              DW       0F626H
001F94 52A7              DW       052A7H
001F96 1FAE              DW       ?C0013?CFG_PWD
001F98 FC54              DW       0FC54H
001F9A D402              DW       0D402H
001F9C 1FAA              DW       ?C0009?CFG_PWD
001F9E FDE7              DW       0FDE7H
001FA0 554F              DW       0554FH
001FA2 0000              DW       00H
001FA4 1FB2              DW       ?C0014?CFG_PWD
   43:     {
   44:         case CFG_PWD_REBOOT:    /* reboot password */
001FA6         ?C0005?CFG_PWD:
   45:             DRV_RESET_SoftwareReset();
001FA6 75EF12            MOV      RSTSRC,#012H
   46:             break;
001FA9 22                RET      
   47: 
   48:         case CFG_PWD_FACTORY:   /* factory password */
001FAA         ?C0009?CFG_PWD:
   49:             PWD_LEVEL_SET(CFG_PWD_LEVEL_FACTORY);
001FAA 751508            MOV      vCfgPwdLevel,#08H
   50:             break;
001FAD 22                RET      
   51: 
   52:         case CFG_PWD_OEM:       /* OEM password */
001FAE         ?C0013?CFG_PWD:
   53:             PWD_LEVEL_SET(CFG_PWD_LEVEL_OEM);
001FAE 751504            MOV      vCfgPwdLevel,#04H
   54:             break;
001FB1 22                RET      
   55: 
   56:         default:
001FB2         ?C0014?CFG_PWD:
   57:             if (vPasswd == CFG_GET(Vendor_PWD_UserRW))
001FB2 7F7C              MOV      R7,#07CH
001FB4 1230AA            LCALL    ?L?COM002B
001FB7 7004              JNZ      ?C0015?CFG_PWD
   58:             {
   59:                 /* UserRW password */
   60:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRW);
001FB9 751502            MOV      vCfgPwdLevel,#02H
   61:             }
001FBC 22                RET      
001FBD         ?C0015?CFG_PWD:
   62:             else if (vPasswd == CFG_GET(Vendor_PWD_UserRO))
001FBD 7F78              MOV      R7,#078H
001FBF 1230AA            LCALL    ?L?COM002B
001FC2 7004              JNZ      ?C0027?CFG_PWD
   63:             {
   64:                 /* UserRO password */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 42


   65:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRO);
001FC4 751501            MOV      vCfgPwdLevel,#01H
   66:             }
001FC7 22                RET      
   67:             else
   68:             {
001FC8         ?C0027?CFG_PWD:
   69:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_NORMAL);
001FC8 E4                CLR      A
001FC9 F515              MOV      vCfgPwdLevel,A
   70:             }
   71:             break;
   72:     }
   73: }
001FCB 22                RET      
----- FUNCTION CFG_PWD_RefreshLevel (END) -------


----- FUNCTION _CFG_ROM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   76: 
   77:     return MEMPAGE_PID_INVALID;
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
001FCC 8F82              MOV      DPL,R7
001FCE 8E83              MOV      DPH,R6
001FD0 0208A2            LJMP     ?C?LLDCODE
----- FUNCTION _CFG_ROM_GET32 (END) -------


----- FUNCTION CFG_PWD_Init (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   90: void CFG_PWD_Init(void)
   91: {
   92:     /* set default password */
   93:     CFG_SET(Vendor_PWD_Entry, CFG_PWD_DEFAULT);
001FD3         ?C0045?CFG_PWD:
001FD3 E4                CLR      A
001FD4 F531              MOV      ?_CFG_RAM_SET32?BYTE+05H,A
001FD6 F530              MOV      ?_CFG_RAM_SET32?BYTE+04H,A
001FD8 F52F              MOV      ?_CFG_RAM_SET32?BYTE+03H,A
001FDA F52E              MOV      ?_CFG_RAM_SET32?BYTE+02H,A
001FDC 7F1B              MOV      R7,#01BH
001FDE FE                MOV      R6,A
001FDF 122A1E            LCALL    _CFG_RAM_SET32
001FE2         ?C0030?CFG_PWD:
   94: 
   95:     /* refresh password level */
   96:     CFG_PWD_RefreshLevel();
001FE2 809B              SJMP     CFG_PWD_RefreshLevel
----- FUNCTION CFG_PWD_Init (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   27: UINT16 PKT_MDIOM_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
001FE4 123070            LCALL    ?L?COM0022
   31: }
001FE7 7E01              MOV      R6,#01H
001FE9 7F40              MOV      R7,#040H
   32: 
001FEB 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 43




----- FUNCTION _CFG_RAM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   75:     }
   76: 
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
001FEC A807              MOV      R0,AR7
001FEE E2                MOVX     A,@R0
001FEF FC                MOV      R4,A
001FF0 08                INC      R0
001FF1 E2                MOVX     A,@R0
001FF2 FD                MOV      R5,A
001FF3 08                INC      R0
001FF4 E2                MOVX     A,@R0
001FF5 FE                MOV      R6,A
001FF6 08                INC      R0
001FF7 E2                MOVX     A,@R0
001FF8 FF                MOV      R7,A
001FF9 22                RET      
----- FUNCTION _CFG_RAM_GET32 (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
001FFA 1223D4            LCALL    _c2m_WriteAR
  355: }
001FFD 022488            LJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  153: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  154: {
  155:     UINT8   vLoop;
  156:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
002000 E4                CLR      A
002001 FD                MOV      R5,A
  157: 
  158:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
002002 7C08              MOV      R4,#08H
002004         ?C0110?PKT_I2CM:
  159:     {
  160:         PKT_I2CM_SET_SCL(HIGH);
002004 00                NOP      
002005 00                NOP      
002006 00                NOP      
002007 00                NOP      
002008 00                NOP      
002009 00                NOP      
00200A 00                NOP      
00200B 00                NOP      
00200C 00                NOP      
00200D 00                NOP      
00200E 00                NOP      
00200F 00                NOP      
002010 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 44


002011 00                NOP      
002012 123088            LCALL    ?L?COM0026
002015         ?C0135?PKT_I2CM:
002015 20820F            JB       IO_DUT_I2CM_SCL,?C0114?PKT_I2CM
002018 123081            LCALL    ?L?COM0024
00201B 7002              JNZ      ?C0664?PKT_I2CM
00201D 153F              DEC      _loop
00201F         ?C0664?PKT_I2CM:
00201F 4E                ORL      A,R6
002020 6005              JZ       ?C0114?PKT_I2CM
002022 12175A            LCALL    ?L?COM0008
002025 80EE              SJMP     ?C0135?PKT_I2CM
002027         ?C0114?PKT_I2CM:
  161:         vData <<= 1;
002027 ED                MOV      A,R5
002028 25E0              ADD      A,ACC
00202A FD                MOV      R5,A
  162:         vData |= PKT_I2CM_GET_SDA();
00202B A292              MOV      C,IO_DUT_I2CM_SDA
00202D E4                CLR      A
00202E 33                RLC      A
00202F 4205              ORL      AR5,A
  163:         PKT_I2CM_SET_SCL(LOW);
002031 00                NOP      
002032 00                NOP      
002033 00                NOP      
002034 00                NOP      
002035 00                NOP      
002036 00                NOP      
002037 00                NOP      
002038 00                NOP      
002039 00                NOP      
00203A 00                NOP      
00203B 00                NOP      
00203C 00                NOP      
00203D 00                NOP      
00203E 00                NOP      
00203F C282              CLR      IO_DUT_I2CM_SCL
002041 8000              SJMP     ?C0112?PKT_I2CM
  164:     }
002043         ?C0112?PKT_I2CM:
002043 1C                DEC      R4
002044 EC                MOV      A,R4
002045 70BD              JNZ      ?C0110?PKT_I2CM
002047         ?C0163?PKT_I2CM:
  165: 
  166:     /* send ACK/NAK */
  167:     PKT_I2CM_SET_SDA(bSendNAK);
002047 A23A              MOV      C,bSendNAK
002049 9292              MOV      IO_DUT_I2CM_SDA,C
  168:     PKT_I2CM_SET_SCL(HIGH);
00204B 00                NOP      
00204C 00                NOP      
00204D 00                NOP      
00204E 00                NOP      
00204F 00                NOP      
002050 00                NOP      
002051 00                NOP      
002052 00                NOP      
002053 00                NOP      
002054 00                NOP      
002055 00                NOP      
002056 00                NOP      
002057 00                NOP      
002058 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 45


002059 123088            LCALL    ?L?COM0026
00205C         ?C0186?PKT_I2CM:
00205C 20820F            JB       IO_DUT_I2CM_SCL,?C0196?PKT_I2CM
00205F 123081            LCALL    ?L?COM0024
002062 7002              JNZ      ?C0666?PKT_I2CM
002064 153F              DEC      _loop
002066         ?C0666?PKT_I2CM:
002066 4E                ORL      A,R6
002067 6005              JZ       ?C0196?PKT_I2CM
002069 12175A            LCALL    ?L?COM0008
00206C 80EE              SJMP     ?C0186?PKT_I2CM
  169:     PKT_I2CM_SET_SCL(LOW);
00206E         ?C0196?PKT_I2CM:
00206E 00                NOP      
00206F 00                NOP      
002070 00                NOP      
002071 00                NOP      
002072 00                NOP      
002073 00                NOP      
002074 00                NOP      
002075 00                NOP      
002076 00                NOP      
002077 00                NOP      
002078 00                NOP      
002079 00                NOP      
00207A 00                NOP      
00207B 00                NOP      
00207C C282              CLR      IO_DUT_I2CM_SCL
00207E 8000              SJMP     ?C0214?PKT_I2CM
002080         ?C0214?PKT_I2CM:
  170:     PKT_I2CM_SET_SDA(HIGH);
002080 D292              SETB     IO_DUT_I2CM_SDA
  171: 
  172:     return vData;
002082 AF05              MOV      R7,AR5
  173: }
002084 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  340: UINT16 PKT_I2CM_Inspect(void)
  341: {
  342:     _pkt_i2cm_Init();
  343: 
002085 00                NOP      
002086 00                NOP      
002087 00                NOP      
002088 00                NOP      
002089 00                NOP      
00208A 00                NOP      
00208B 00                NOP      
00208C 00                NOP      
00208D 00                NOP      
00208E 00                NOP      
00208F 00                NOP      
002090 00                NOP      
002091 00                NOP      
002092 00                NOP      
002093 D282              SETB     IO_DUT_I2CM_SCL
002095 753301            MOV      _loop,#01H
002098 7534F4            MOV      _loop+01H,#0F4H
00209B         ?C0639?PKT_I2CM:
00209B 208212            JB       IO_DUT_I2CM_SCL,?C0643?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 46


00209E E534              MOV      A,_loop+01H
0020A0 1534              DEC      _loop+01H
0020A2 AE33              MOV      R6,_loop
0020A4 7002              JNZ      ?C0682?PKT_I2CM
0020A6 1533              DEC      _loop
0020A8         ?C0682?PKT_I2CM:
0020A8 4E                ORL      A,R6
0020A9 6005              JZ       ?C0643?PKT_I2CM
0020AB 12175A            LCALL    ?L?COM0008
0020AE 80EB              SJMP     ?C0639?PKT_I2CM
0020B0         ?C0643?PKT_I2CM:
0020B0 D292              SETB     IO_DUT_I2CM_SDA
  344:     PKT_SetPayloadSize(0x00);
0020B2 123070            LCALL    ?L?COM0022
  345:     return PKT_REPLY_Done_ExecNoError;
0020B5 7E01              MOV      R6,#01H
0020B7 7F40              MOV      R7,#040H
  346: }
0020B9 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   33: UINT16 PKT_MDIOM_Probe(void)
   34: {
   35:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   36:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
0020BA 90004C            MOV      DPTR,#vFrame+0CH
   37: 
   38:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
0020BD E0                MOVX     A,@DPTR
0020BE FF                MOV      R7,A
0020BF A3                INC      DPTR
0020C0 E0                MOVX     A,@DPTR
0020C1 FD                MOV      R5,A
0020C2 7A04              MOV      R2,#HIGH vData
0020C4 7BEA              MOV      R3,#LOW vData
0020C6 11D1              ACALL    _DRV_MDIOM_FrameRead
0020C8 7E01              MOV      R6,#01H
0020CA 4002              JC       ?C0005?PKT_MDIOM
   39:                              pPayload->vDevAddr,
   40:                              &vData))
   41:     {
   42:         return PKT_REPLY_Fail_MdioNoAck;
0020CC 7E03              MOV      R6,#03H
   43:     }
0020CE         ?C0005?PKT_MDIOM:
   44: 
   45:     return PKT_REPLY_Done_ExecNoError;
0020CE 7F40              MOV      R7,#040H
   46: }
0020D0 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  516: BOOL DRV_MDIOM_FrameRead
  517: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
0020D1 8B82              MOV      DPL,R3
0020D3 8A83              MOV      DPH,R2
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 47


;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  518:     IN  UINT8               vPortAddr,
  519:     IN  UINT8               vDevAddr,
  520:     OUT UINT16 SEG_XDATA   *pData
  521: )
  522: {
  523:     BOOL    bIntState;
  524: 
  525:     /* create MDIO frame: Read */
  526:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
0020D5 315F              ACALL    _drv_mdiom_CreateReadFrame
  527: 
  528:     /* lock globally interrupt */
  529:     bIntState = DRV_INT_LockGlobalInterrupt();
0020D7 30AF05            JNB      EA,?C2483?DRV_MDIOM
0020DA C2AF              CLR      EA
0020DC D3                SETB     C
0020DD 8001              SJMP     ?C2484?DRV_MDIOM
0020DF         ?C2483?DRV_MDIOM:
0020DF C3                CLR      C
0020E0         ?C2484?DRV_MDIOM:
0020E0 9238              MOV      bIntState,C
  530: 
  531:     /* transmit frame: Read */
  532:     drv_mdiom_RxDataFrame();
0020E2 11F0              ACALL    drv_mdiom_RxDataFrame
  533: 
  534:     /* unlock globally interrupt */
  535:     DRV_INT_UnlockGlobalInterrupt(bIntState);
0020E4 A238              MOV      C,bIntState
0020E6 12309E            LCALL    ?L?COM0029
0020E9 4003              JC       ?C2488?DRV_MDIOM
0020EB D3                SETB     C
0020EC 8001              SJMP     ?C2489?DRV_MDIOM
0020EE         ?C2488?DRV_MDIOM:
0020EE C3                CLR      C
0020EF         ?C2489?DRV_MDIOM:
  536: 
  537:     /* check read status */
  538:     *pData = vMdioData;
  539:     return drv_mdiom_IsReadSuccess();
  540: }
0020EF 22                RET      
----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  332: static void drv_mdiom_RxDataFrame(void)
  333: {
  334:     drv_mdiom_StartFrame();
  335:     drv_mdiom_TxPreamble();
0020F0 122D3E            LCALL    ?L?COM0001
0020F3 122D8C            LCALL    ?L?COM0002
0020F6 122EEB            LCALL    ?L?COM0003
  336:     drv_mdiom_TxStartFrame();
  337:     drv_mdiom_TxOperationCode();
  338:     drv_mdiom_TxPortAddress();
  339:     drv_mdiom_TxDeviceAddress();
  340:     drv_mdiom_RxTurnAround();
0020F9 00                NOP      
0020FA 00                NOP      
0020FB D296              SETB     IO_DUT_MDIOM_SCL_OUT
0020FD D294              SETB     IO_DUT_MDIOM_SDA_OUT
0020FF C296              CLR      IO_DUT_MDIOM_SCL_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 48


002101 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
002103 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002105 00                NOP      
002106 00                NOP      
002107 122FF3            LCALL    ?L?COM000C
00210A 9200              MOV      bMdioTurnAround0,C
  341:     drv_mdiom_RxData();
00210C 122FF3            LCALL    ?L?COM000C
00210F 9227              MOV      bMdioData15,C
002111 122FF3            LCALL    ?L?COM000C
002114 9226              MOV      bMdioData14,C
002116 122FF3            LCALL    ?L?COM000C
002119 9225              MOV      bMdioData13,C
00211B 122FF3            LCALL    ?L?COM000C
00211E 9224              MOV      bMdioData12,C
002120 122FF3            LCALL    ?L?COM000C
002123 9223              MOV      bMdioData11,C
002125 122FF3            LCALL    ?L?COM000C
002128 9222              MOV      bMdioData10,C
00212A 122FF3            LCALL    ?L?COM000C
00212D 9221              MOV      bMdioData9,C
00212F 122FF3            LCALL    ?L?COM000C
002132 9220              MOV      bMdioData8,C
002134 122FF3            LCALL    ?L?COM000C
002137 922F              MOV      bMdioData7,C
002139 122FF3            LCALL    ?L?COM000C
00213C 922E              MOV      bMdioData6,C
00213E 122FF3            LCALL    ?L?COM000C
002141 922D              MOV      bMdioData5,C
002143 122FF3            LCALL    ?L?COM000C
002146 922C              MOV      bMdioData4,C
002148 122FF3            LCALL    ?L?COM000C
00214B 922B              MOV      bMdioData3,C
00214D 122FF3            LCALL    ?L?COM000C
002150 922A              MOV      bMdioData2,C
002152 122FF3            LCALL    ?L?COM000C
002155 9229              MOV      bMdioData1,C
002157 122FF3            LCALL    ?L?COM000C
00215A 9228              MOV      bMdioData0,C
  342:     drv_mdiom_StopFrame();
00215C 023078            LJMP     ?L?COM0023
  343: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------


----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  378: static void drv_mdiom_CreateReadFrame
  379: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  380:     IN UINT8    vPortAddr,
  381:     IN UINT8    vDevAddr
  382: )
  383: {
  384:     drv_mdiom_SetStartFrame(0, 0);
00215F C20F              CLR      bMdioStartFrame1
002161 C20E              CLR      bMdioStartFrame0
  385:     drv_mdiom_SetOperationCode(1, 1);
002163 D20D              SETB     bMdioOperationCode1
002165 D20C              SETB     bMdioOperationCode0
  386:     drv_mdiom_SetPortAddress(vPortAddr);
002167 122F64            LCALL    ?L?COM0006
00216A D200              SETB     bMdioTurnAround0
  387:     drv_mdiom_SetDeviceAddress(vDevAddr);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 49


  388:     drv_mdiom_SetTurnAround(1, 1);
  389:     drv_mdiom_SetData(0xFFFF);
00216C 74FF              MOV      A,#0FFH
00216E F524              MOV      vMdioData,A
002170 F525              MOV      vMdioData+01H,A
  390: }
002172 22                RET      
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  611: BOOL DRV_MDIOM_Read
  612: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  613:     IN  UINT8               vPortAddr,
  614:     IN  UINT8               vDevAddr,
  615:     IN  UINT16              vRegAddr,
  616:     IN  UINT16              vDataLen,
  617:     OUT UINT16 SEG_XDATA   *pDataBuf
  618: )
  619: {
  620:     BOOL    bResult = TRUE;
002173 D238              SETB     bResult
  621:     BOOL    bIntState;
  622: 
  623:     /* create MDIO frame: Address */
  624:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002175 5125              ACALL    _drv_mdiom_CreateAddrFrame
  625: 
  626:     /* lock globally interrupt */
  627:     bIntState = DRV_INT_LockGlobalInterrupt();
002177 30AF05            JNB      EA,?C2499?DRV_MDIOM
00217A C2AF              CLR      EA
00217C D3                SETB     C
00217D 8001              SJMP     ?C2500?DRV_MDIOM
00217F         ?C2499?DRV_MDIOM:
00217F C3                CLR      C
002180         ?C2500?DRV_MDIOM:
002180 9239              MOV      bIntState,C
  628: 
  629:     /* transmit frame: Address */
  630:     drv_mdiom_TxAddrFrame();
002182 31BD              ACALL    drv_mdiom_TxAddrFrame
  631: 
  632:     /* create MDIO frame: Post-Read-Increment-Address */
  633:     drv_mdiom_SetOperationCode(1, 0);
002184 D20D              SETB     bMdioOperationCode1
002186 C20C              CLR      bMdioOperationCode0
002188         ?C2504?DRV_MDIOM:
  634: 
  635:     /* transmit frame: Post-Read-Increment-Address */
  636:     while (vDataLen-- != 0)
002188 E53A              MOV      A,vDataLen+01H
00218A 153A              DEC      vDataLen+01H
00218C AE39              MOV      R6,vDataLen
00218E 7002              JNZ      ?C2544?DRV_MDIOM
002190 1539              DEC      vDataLen
002192         ?C2544?DRV_MDIOM:
002192 4E                ORL      A,R6
002193 6021              JZ       ?C2511?DRV_MDIOM
  637:     {
  638:         drv_mdiom_RxDataFrame();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 50


002195 11F0              ACALL    drv_mdiom_RxDataFrame
  639: 
  640:         /* check read status */
  641:         *pDataBuf++ = vMdioData;
002197 E53C              MOV      A,pDataBuf+01H
002199 FF                MOV      R7,A
00219A 2402              ADD      A,#02H
00219C F53C              MOV      pDataBuf+01H,A
00219E E53B              MOV      A,pDataBuf
0021A0 FE                MOV      R6,A
0021A1 3400              ADDC     A,#00H
0021A3 F53B              MOV      pDataBuf,A
0021A5 8F82              MOV      DPL,R7
0021A7 8E83              MOV      DPH,R6
0021A9 1230A0            LCALL    ?L?COM002A
0021AC 4003              JC       ?C2507?DRV_MDIOM
0021AE D3                SETB     C
0021AF 8001              SJMP     ?C2508?DRV_MDIOM
0021B1         ?C2507?DRV_MDIOM:
0021B1 C3                CLR      C
0021B2         ?C2508?DRV_MDIOM:
0021B2 40D4              JC       ?C2504?DRV_MDIOM
  642:         if (!drv_mdiom_IsReadSuccess())
  643:         {
  644:             bResult = FALSE;
0021B4 C238              CLR      bResult
  645:             break;
  646:         }
  647:     }
0021B6         ?C2511?DRV_MDIOM:
  648: 
  649:     /* unlock globally interrupt */
  650:     DRV_INT_UnlockGlobalInterrupt(bIntState);
0021B6 A239              MOV      C,bIntState
0021B8 92AF              MOV      EA,C
  651: 
  652:     return bResult;
0021BA A238              MOV      C,bResult
  653: }
0021BC 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  306: static void drv_mdiom_TxAddrFrame(void)
  307: {
  308:     drv_mdiom_StartFrame();
  309:     drv_mdiom_TxPreamble();
0021BD 122D3E            LCALL    ?L?COM0001
0021C0 122D8C            LCALL    ?L?COM0002
0021C3 122EEB            LCALL    ?L?COM0003
  310:     drv_mdiom_TxStartFrame();
  311:     drv_mdiom_TxOperationCode();
  312:     drv_mdiom_TxPortAddress();
  313:     drv_mdiom_TxDeviceAddress();
  314:     drv_mdiom_TxTurnAround();
0021C6 A201              MOV      C,bMdioTurnAround1
0021C8 122F5B            LCALL    ?L?COM0004
0021CB A200              MOV      C,bMdioTurnAround0
0021CD 122F5B            LCALL    ?L?COM0004
  315:     drv_mdiom_TxAddr();
0021D0 A217              MOV      C,bMdioAddr15
0021D2 122F5B            LCALL    ?L?COM0004
0021D5 A216              MOV      C,bMdioAddr14
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 51


0021D7 122F5B            LCALL    ?L?COM0004
0021DA A215              MOV      C,bMdioAddr13
0021DC 122F5B            LCALL    ?L?COM0004
0021DF A214              MOV      C,bMdioAddr12
0021E1 122F5B            LCALL    ?L?COM0004
0021E4 A213              MOV      C,bMdioAddr11
0021E6 122F5B            LCALL    ?L?COM0004
0021E9 A212              MOV      C,bMdioAddr10
0021EB 122F5B            LCALL    ?L?COM0004
0021EE A211              MOV      C,bMdioAddr9
0021F0 122F5B            LCALL    ?L?COM0004
0021F3 A210              MOV      C,bMdioAddr8
0021F5 122F5B            LCALL    ?L?COM0004
0021F8 A21F              MOV      C,bMdioAddr7
0021FA 122F5B            LCALL    ?L?COM0004
0021FD A21E              MOV      C,bMdioAddr6
0021FF 122F5B            LCALL    ?L?COM0004
002202 A21D              MOV      C,bMdioAddr5
002204 122F5B            LCALL    ?L?COM0004
002207 A21C              MOV      C,bMdioAddr4
002209 122F5B            LCALL    ?L?COM0004
00220C A21B              MOV      C,bMdioAddr3
00220E 122F5B            LCALL    ?L?COM0004
002211 A21A              MOV      C,bMdioAddr2
002213 122F5B            LCALL    ?L?COM0004
002216 A219              MOV      C,bMdioAddr1
002218 122F5B            LCALL    ?L?COM0004
00221B A218              MOV      C,bMdioAddr0
00221D 122F5B            LCALL    ?L?COM0004
002220 00                NOP      
002221 00                NOP      
  316:     drv_mdiom_StopFrame();
002222 023078            LJMP     ?L?COM0023
  317: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  346: static void drv_mdiom_CreateAddrFrame
  347: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  348:     IN UINT8    vPortAddr,
  349:     IN UINT8    vDevAddr,
  350:     IN UINT16   vRegAddr
  351: )
  352: {
  353:     drv_mdiom_SetStartFrame(0, 0);
002225 C20F              CLR      bMdioStartFrame1
002227 C20E              CLR      bMdioStartFrame0
  354:     drv_mdiom_SetOperationCode(0, 0);
002229 C20D              CLR      bMdioOperationCode1
00222B 122F62            LCALL    ?L?COM0005
00222E C200              CLR      bMdioTurnAround0
  355:     drv_mdiom_SetPortAddress(vPortAddr);
  356:     drv_mdiom_SetDeviceAddress(vDevAddr);
  357:     drv_mdiom_SetTurnAround(1, 0);
  358:     drv_mdiom_SetAddr(vRegAddr);
002230 8A22              MOV      vMdioAddr,R2
002232 8B23              MOV      vMdioAddr+01H,R3
  359: }
002234 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 52




----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  675: BOOL DRV_MDIOM_Write
  676: (
002235 8A37              MOV      vRegAddr,R2
002237 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
002239 AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
00223B AC07              MOV      R4,AR7
  677:     IN       UINT8              vPortAddr,
  678:     IN       UINT8              vDevAddr,
  679:     IN       UINT16             vRegAddr,
  680:     IN       UINT16             vDataLen,
  681:     IN const UINT16 SEG_XDATA  *pDataBuf
  682: )
  683: {
  684:     BOOL    bIntState;
  685: 
  686:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
00223D         ?C2513?DRV_MDIOM:
00223D E53A              MOV      A,vDataLen+01H
00223F 153A              DEC      vDataLen+01H
002241 AA39              MOV      R2,vDataLen
002243 7002              JNZ      ?C2545?DRV_MDIOM
002245 1539              DEC      vDataLen
002247         ?C2545?DRV_MDIOM:
002247 4A                ORL      A,R2
002248 6043              JZ       ?C2514?DRV_MDIOM
  687:     {
  688:         /* prepare MDIO data */
  689:         drv_mdiom_SetData(*pDataBuf);
00224A 853C82            MOV      DPL,pDataBuf+01H
00224D 853B83            MOV      DPH,pDataBuf
002250 E0                MOVX     A,@DPTR
002251 F524              MOV      vMdioData,A
002253 A3                INC      DPTR
002254 E0                MOVX     A,@DPTR
002255 F525              MOV      vMdioData+01H,A
  690: 
  691:         /* create MDIO frame: Address */
  692:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002257 AF04              MOV      R7,AR4
002259 AD06              MOV      R5,AR6
00225B AB38              MOV      R3,vRegAddr+01H
00225D AA37              MOV      R2,vRegAddr
00225F 5125              ACALL    _drv_mdiom_CreateAddrFrame
  693: 
  694:         /* lock globally interrupt */
  695:         bIntState = DRV_INT_LockGlobalInterrupt();
002261 30AF05            JNB      EA,?C2519?DRV_MDIOM
002264 C2AF              CLR      EA
002266 D3                SETB     C
002267 8001              SJMP     ?C2520?DRV_MDIOM
002269         ?C2519?DRV_MDIOM:
002269 C3                CLR      C
00226A         ?C2520?DRV_MDIOM:
00226A 9238              MOV      bIntState,C
  696: 
  697:         /* transmit frame: Address */
  698:         drv_mdiom_TxAddrFrame();
00226C 31BD              ACALL    drv_mdiom_TxAddrFrame
  699: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 53


  700:         /* create MDIO frame: Write */
  701:         drv_mdiom_SetOperationCode(0, 1);
00226E C20D              CLR      bMdioOperationCode1
002270 D20C              SETB     bMdioOperationCode0
  702: 
  703:         /* transmit frame: Write */
  704:         drv_mdiom_TxDataFrame();
002272 518F              ACALL    drv_mdiom_TxDataFrame
  705: 
  706:         /* unlock globally interrupt */
  707:         DRV_INT_UnlockGlobalInterrupt(bIntState);
002274 A238              MOV      C,bIntState
002276 92AF              MOV      EA,C
  708:     }
002278 0538              INC      vRegAddr+01H
00227A E538              MOV      A,vRegAddr+01H
00227C 7002              JNZ      ?C2546?DRV_MDIOM
00227E 0537              INC      vRegAddr
002280         ?C2546?DRV_MDIOM:
002280 7402              MOV      A,#02H
002282 253C              ADD      A,pDataBuf+01H
002284 F53C              MOV      pDataBuf+01H,A
002286 E4                CLR      A
002287 353B              ADDC     A,pDataBuf
002289 F53B              MOV      pDataBuf,A
00228B 80B0              SJMP     ?C2513?DRV_MDIOM
00228D         ?C2514?DRV_MDIOM:
  709: 
  710:     return TRUE;
00228D D3                SETB     C
  711: }
00228E 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  319: static void drv_mdiom_TxDataFrame(void)
  320: {
  321:     drv_mdiom_StartFrame();
  322:     drv_mdiom_TxPreamble();
00228F 122D3E            LCALL    ?L?COM0001
002292 122D8C            LCALL    ?L?COM0002
002295 122EEB            LCALL    ?L?COM0003
  323:     drv_mdiom_TxStartFrame();
  324:     drv_mdiom_TxOperationCode();
  325:     drv_mdiom_TxPortAddress();
  326:     drv_mdiom_TxDeviceAddress();
  327:     drv_mdiom_TxTurnAround();
002298 A201              MOV      C,bMdioTurnAround1
00229A 122F5B            LCALL    ?L?COM0004
00229D A200              MOV      C,bMdioTurnAround0
00229F 122F5B            LCALL    ?L?COM0004
  328:     drv_mdiom_TxData();
0022A2 A227              MOV      C,bMdioData15
0022A4 122F5B            LCALL    ?L?COM0004
0022A7 A226              MOV      C,bMdioData14
0022A9 122F5B            LCALL    ?L?COM0004
0022AC A225              MOV      C,bMdioData13
0022AE 122F5B            LCALL    ?L?COM0004
0022B1 A224              MOV      C,bMdioData12
0022B3 122F5B            LCALL    ?L?COM0004
0022B6 A223              MOV      C,bMdioData11
0022B8 122F5B            LCALL    ?L?COM0004
0022BB A222              MOV      C,bMdioData10
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 54


0022BD 122F5B            LCALL    ?L?COM0004
0022C0 A221              MOV      C,bMdioData9
0022C2 122F5B            LCALL    ?L?COM0004
0022C5 A220              MOV      C,bMdioData8
0022C7 122F5B            LCALL    ?L?COM0004
0022CA A22F              MOV      C,bMdioData7
0022CC 122F5B            LCALL    ?L?COM0004
0022CF A22E              MOV      C,bMdioData6
0022D1 122F5B            LCALL    ?L?COM0004
0022D4 A22D              MOV      C,bMdioData5
0022D6 122F5B            LCALL    ?L?COM0004
0022D9 A22C              MOV      C,bMdioData4
0022DB 122F5B            LCALL    ?L?COM0004
0022DE A22B              MOV      C,bMdioData3
0022E0 122F5B            LCALL    ?L?COM0004
0022E3 A22A              MOV      C,bMdioData2
0022E5 122F5B            LCALL    ?L?COM0004
0022E8 A229              MOV      C,bMdioData1
0022EA 122F5B            LCALL    ?L?COM0004
0022ED A228              MOV      C,bMdioData0
0022EF 122F5B            LCALL    ?L?COM0004
0022F2 00                NOP      
0022F3 00                NOP      
  329:     drv_mdiom_StopFrame();
0022F4 023078            LJMP     ?L?COM0023
  330: }
----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   48: UINT16 PKT_MDIOM_Read(void)
   49: {
   50:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   51: 
0022F7 122FB7            LCALL    ?L?COM000B
0022FA 3173              ACALL    _DRV_MDIOM_Read
0022FC 7E01              MOV      R6,#01H
0022FE 4002              JC       ?C0007?PKT_MDIOM
   52:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   53:                         pPayload->vDevAddr,
   54:                         pPayload->vOffset,
   55:                         pPayload->vDataCount,
   56:                         pPayload->aData))
   57:     {
   58:         return PKT_REPLY_Fail_MdioNoAck;
002300 7E03              MOV      R6,#03H
   59:     }
002302         ?C0007?PKT_MDIOM:
   60: 
   61:     return PKT_REPLY_Done_ExecNoError;
002302 7F40              MOV      R7,#040H
   62: }
002304 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   64: UINT16 PKT_MDIOM_Write(void)
   65: {
   66:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   67: 
002305 122FB7            LCALL    ?L?COM000B
002308 5135              ACALL    _DRV_MDIOM_Write
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 55


00230A 7E01              MOV      R6,#01H
00230C 4002              JC       ?C0009?PKT_MDIOM
   68:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   69:                          pPayload->vDevAddr,
   70:                          pPayload->vOffset,
   71:                          pPayload->vDataCount,
   72:                          pPayload->aData))
   73:     {
   74:         return PKT_REPLY_Fail_MdioNoAck;
00230E 7E03              MOV      R6,#03H
   75:     }
002310         ?C0009?PKT_MDIOM:
   76: 
   77:     return PKT_REPLY_Done_ExecNoError;
002310 7F40              MOV      R7,#040H
   78: }
002312 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
002313 123070            LCALL    ?L?COM0022
   31: }
002316 7E01              MOV      R6,#01H
002318 7F40              MOV      R7,#040H
   32: 
00231A 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
00231B 7131              ACALL    DRV_C2M_Probe
00231D 90004C            MOV      DPTR,#vFrame+0CH
002320 1208D2            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
002323 90004A            MOV      DPTR,#vFrame+0AH
002326 E4                CLR      A
002327 F0                MOVX     @DPTR,A
002328 A3                INC      DPTR
002329 7404              MOV      A,#04H
00232B F0                MOVX     @DPTR,A
   46: }
00232C 7E01              MOV      R6,#01H
00232E 7F40              MOV      R7,#040H
   47: 
002330 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 56


  447:     vDevice.U32 = 0xFFFFFFFFUL;
002331 74FF              MOV      A,#0FFH
002333 F536              MOV      vDevice+03H,A
002335 F535              MOV      vDevice+02H,A
002337 F534              MOV      vDevice+01H,A
002339 F533              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
00233B 209702            JB       IO_DUT_C2M_SCL,$ + 5H
00233E 61CB              AJMP     _exit?DRV_C2M
002340 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
002343 61CB              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
  453:     }
  454: 
  455:     drv_c2m_Init();
002345         ?C0852?DRV_C2M:
002345 123043            LCALL    ?L?COM001E
002348 7F02              MOV      R7,#02H
00234A 71D4              ACALL    _c2m_WriteAR
00234C 122C79            LCALL    _c2m_WriteDR
00234F 7F04              MOV      R7,#04H
002351 122C79            LCALL    _c2m_WriteDR
002354 7F01              MOV      R7,#01H
002356 122C79            LCALL    _c2m_WriteDR
002359 7F14              MOV      R7,#014H
00235B 7E00              MOV      R6,#00H
00235D 122C02            LCALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
002360 E4                CLR      A
002361 FF                MOV      R7,A
002362 121FFA            LCALL    _drv_c2m_ReadSFR
002365 8F33              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
002367 7F01              MOV      R7,#01H
002369 121FFA            LCALL    _drv_c2m_ReadSFR
00236C 8F34              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
00236E E533              MOV      A,vDevice
002370 F4                CPL      A
002371 6058              JZ       _exit?DRV_C2M
  462:     {
  463:         /* no device probed */
  464:         goto _exit;
  465:     }
002373         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
002373 7516B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
002376 123149            LCALL    ?L?COM0044
002379 12177E            LCALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
00237C 916B              ACALL    drv_c2m_ReadData
00237E EF                MOV      A,R7
00237F 640D              XRL      A,#0DH
002381 6020              JZ       ?C0863?DRV_C2M
  472:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 57


  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
002383 7516AD            MOV      vFPDAT,#0ADH
  475:         c2m_WriteAR(vFPDAT);
002386 123149            LCALL    ?L?COM0044
002389 1230D2            LCALL    ?L?COM0031
00238C         ?C0870?DRV_C2M:
00238C B1BF              ACALL    c2m_ReadAR
00238E EF                MOV      A,R7
00238F 20E00C            JB       ACC.0,?C0868?DRV_C2M
002392 7837              MOV      R0,#LOW _timeout
002394 122FAD            LCALL    ?L?COM000A
002397 6005              JZ       ?C0868?DRV_C2M
002399 12175A            LCALL    ?L?COM0008
00239C 80EE              SJMP     ?C0870?DRV_C2M
00239E         ?C0868?DRV_C2M:
00239E 12305C            LCALL    ?L?COM001F
0023A1 7028              JNZ      _exit?DRV_C2M
0023A3         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
0023A3         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
0023A3 916B              ACALL    drv_c2m_ReadData
0023A5 8F35              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
0023A7 AF16              MOV      R7,vFPDAT
0023A9 71D4              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
0023AB 7F01              MOV      R7,#01H
0023AD 1230D2            LCALL    ?L?COM0031
0023B0         ?C0879?DRV_C2M:
0023B0 B1BF              ACALL    c2m_ReadAR
0023B2 EF                MOV      A,R7
0023B3 20E00C            JB       ACC.0,?C0877?DRV_C2M
0023B6 7837              MOV      R0,#LOW _timeout
0023B8 122FAD            LCALL    ?L?COM000A
0023BB 6005              JZ       ?C0877?DRV_C2M
0023BD 12175A            LCALL    ?L?COM0008
0023C0 80EE              SJMP     ?C0879?DRV_C2M
0023C2         ?C0877?DRV_C2M:
0023C2 9188              ACALL    c2m_ReadDR
0023C4 BF0D04            CJNE     R7,#0DH,_exit?DRV_C2M
0023C7         ?C0881?DRV_C2M:
0023C7         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
0023C7 916B              ACALL    drv_c2m_ReadData
0023C9 8F36              MOV      vDevice+03H,R7
  486: 
  487: _exit:
0023CB         _exit:
  488:     return vDevice.U32;
0023CB AF36              MOV      R7,vDevice+03H
0023CD AE35              MOV      R6,vDevice+02H
0023CF AD34              MOV      R5,vDevice+01H
0023D1 AC33              MOV      R4,vDevice
  489: }
0023D3 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 58


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
0023D4 D243              SETB     bIns0
0023D6 D244              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
0023D8 8F26              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
0023DA 30AF05            JNB      EA,?C0007?DRV_C2M
0023DD C2AF              CLR      EA
0023DF D3                SETB     C
0023E0 8001              SJMP     ?C0008?DRV_C2M
0023E2         ?C0007?DRV_C2M:
0023E2 C3                CLR      C
0023E3         ?C0008?DRV_C2M:
0023E3 122E3B            LCALL    ?L?COM0012
0023E6 00                NOP      
0023E7 00                NOP      
0023E8 00                NOP      
0023E9 00                NOP      
0023EA 122ECE            LCALL    ?L?COM001B
0023ED 00                NOP      
0023EE 00                NOP      
0023EF 00                NOP      
0023F0 00                NOP      
0023F1 122EB1            LCALL    ?L?COM0025
0023F4 00                NOP      
0023F5 00                NOP      
0023F6 00                NOP      
0023F7 00                NOP      
0023F8 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
0023FA A230              MOV      C,bC2Bit0
0023FC 92A0              MOV      IO_DUT_C2M_SDA,C
0023FE C297              CLR      IO_DUT_C2M_SCL
002400 00                NOP      
002401 00                NOP      
002402 00                NOP      
002403 00                NOP      
002404 D297              SETB     IO_DUT_C2M_SCL
002406 A231              MOV      C,bC2Bit1
002408 92A0              MOV      IO_DUT_C2M_SDA,C
00240A C297              CLR      IO_DUT_C2M_SCL
00240C 00                NOP      
00240D 00                NOP      
00240E 00                NOP      
00240F 00                NOP      
002410 D297              SETB     IO_DUT_C2M_SCL
002412 A232              MOV      C,bC2Bit2
002414 92A0              MOV      IO_DUT_C2M_SDA,C
002416 C297              CLR      IO_DUT_C2M_SCL
002418 00                NOP      
002419 00                NOP      
00241A 00                NOP      
00241B 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 59


00241C D297              SETB     IO_DUT_C2M_SCL
00241E A233              MOV      C,bC2Bit3
002420 92A0              MOV      IO_DUT_C2M_SDA,C
002422 C297              CLR      IO_DUT_C2M_SCL
002424 00                NOP      
002425 00                NOP      
002426 00                NOP      
002427 00                NOP      
002428 D297              SETB     IO_DUT_C2M_SCL
00242A A234              MOV      C,bC2Bit4
00242C 92A0              MOV      IO_DUT_C2M_SDA,C
00242E C297              CLR      IO_DUT_C2M_SCL
002430 00                NOP      
002431 00                NOP      
002432 00                NOP      
002433 00                NOP      
002434 D297              SETB     IO_DUT_C2M_SCL
002436 A235              MOV      C,bC2Bit5
002438 92A0              MOV      IO_DUT_C2M_SDA,C
00243A C297              CLR      IO_DUT_C2M_SCL
00243C 00                NOP      
00243D 00                NOP      
00243E 00                NOP      
00243F 00                NOP      
002440 D297              SETB     IO_DUT_C2M_SCL
002442 A236              MOV      C,bC2Bit6
002444 92A0              MOV      IO_DUT_C2M_SDA,C
002446 C297              CLR      IO_DUT_C2M_SCL
002448 00                NOP      
002449 00                NOP      
00244A 00                NOP      
00244B 00                NOP      
00244C D297              SETB     IO_DUT_C2M_SCL
00244E A237              MOV      C,bC2Bit7
002450 92A0              MOV      IO_DUT_C2M_SDA,C
002452 C297              CLR      IO_DUT_C2M_SCL
002454 00                NOP      
002455 00                NOP      
002456 00                NOP      
002457 00                NOP      
002458 D297              SETB     IO_DUT_C2M_SCL
  197:     c2m_TxStop();       /* tx frame stop */
00245A D2A0              SETB     IO_DUT_C2M_SDA
00245C 53A6FE            ANL      P2MDOUT,#0FEH
00245F 122E43            LCALL    ?L?COM0013
002462 00                NOP      
002463 00                NOP      
002464 00                NOP      
002465 00                NOP      
002466 D297              SETB     IO_DUT_C2M_SCL
002468 022EE3            LJMP     ?L?COM001A
  198: 
  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
00246B E4                CLR      A
00246C 754810            MOV      _timeout+03H,#010H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 60


00246F 754727            MOV      _timeout+02H,#027H
002472 F546              MOV      _timeout+01H,A
002474 F545              MOV      _timeout,A
002476         ?C0794?DRV_C2M:
002476 B1BF              ACALL    c2m_ReadAR
002478 EF                MOV      A,R7
002479 20E00C            JB       ACC.0,?C0792?DRV_C2M
00247C 7845              MOV      R0,#LOW _timeout
00247E 122FAD            LCALL    ?L?COM000A
002481 6005              JZ       ?C0792?DRV_C2M
002483 12175A            LCALL    ?L?COM0008
002486 80EE              SJMP     ?C0794?DRV_C2M
002488         ?C0792?DRV_C2M:
;----                  JMP      c2m_ReadDR
  367: }
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
002488 C243              CLR      bIns0
00248A C244              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
00248C C245              CLR      bLength0
00248E C246              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
002490 30AF05            JNB      EA,?C0584?DRV_C2M
002493 C2AF              CLR      EA
002495 D3                SETB     C
002496 8001              SJMP     ?C0585?DRV_C2M
002498         ?C0584?DRV_C2M:
002498 C3                CLR      C
002499         ?C0585?DRV_C2M:
002499 122E3B            LCALL    ?L?COM0012
00249C 00                NOP      
00249D 00                NOP      
00249E 00                NOP      
00249F 00                NOP      
0024A0 122ECE            LCALL    ?L?COM001B
0024A3 00                NOP      
0024A4 00                NOP      
0024A5 00                NOP      
0024A6 00                NOP      
0024A7 122EB1            LCALL    ?L?COM0025
0024AA 00                NOP      
0024AB 00                NOP      
0024AC 00                NOP      
0024AD 00                NOP      
0024AE D297              SETB     IO_DUT_C2M_SCL
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
0024B0 A245              MOV      C,bLength0
0024B2 92A0              MOV      IO_DUT_C2M_SDA,C
0024B4 C297              CLR      IO_DUT_C2M_SCL
0024B6 00                NOP      
0024B7 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 61


0024B8 00                NOP      
0024B9 00                NOP      
0024BA D297              SETB     IO_DUT_C2M_SCL
0024BC A246              MOV      C,bLength1
0024BE 92A0              MOV      IO_DUT_C2M_SDA,C
0024C0 C297              CLR      IO_DUT_C2M_SCL
0024C2 00                NOP      
0024C3 00                NOP      
0024C4 00                NOP      
0024C5 00                NOP      
0024C6 122EBA            LCALL    ?L?COM002D
0024C9 00                NOP      
0024CA D297              SETB     IO_DUT_C2M_SCL
0024CC 00                NOP      
0024CD 00                NOP      
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
0024CE 754927            MOV      _timeout,#027H
0024D1 754A10            MOV      _timeout+01H,#010H
0024D4         ?C0687?DRV_C2M:
0024D4 00                NOP      
0024D5 00                NOP      
0024D6 C297              CLR      IO_DUT_C2M_SCL
0024D8 00                NOP      
0024D9 00                NOP      
0024DA 121754            LCALL    ?L?COM0007
0024DD 20300D            JB       bC2Bit0,?C0700?DRV_C2M
0024E0 E54A              MOV      A,_timeout+01H
0024E2 154A              DEC      _timeout+01H
0024E4 AE49              MOV      R6,_timeout
0024E6 7002              JNZ      ?C1014?DRV_C2M
0024E8 1549              DEC      _timeout
0024EA         ?C1014?DRV_C2M:
0024EA 4E                ORL      A,R6
0024EB 70E7              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
0024ED         ?C0700?DRV_C2M:
0024ED 00                NOP      
0024EE 00                NOP      
0024EF C297              CLR      IO_DUT_C2M_SCL
0024F1 00                NOP      
0024F2 00                NOP      
0024F3 A2A0              MOV      C,IO_DUT_C2M_SDA
0024F5 D297              SETB     IO_DUT_C2M_SCL
0024F7 9230              MOV      bC2Bit0,C
0024F9 00                NOP      
0024FA 00                NOP      
0024FB C297              CLR      IO_DUT_C2M_SCL
0024FD 00                NOP      
0024FE 00                NOP      
0024FF A2A0              MOV      C,IO_DUT_C2M_SDA
002501 D297              SETB     IO_DUT_C2M_SCL
002503 9231              MOV      bC2Bit1,C
002505 00                NOP      
002506 00                NOP      
002507 C297              CLR      IO_DUT_C2M_SCL
002509 00                NOP      
00250A 00                NOP      
00250B A2A0              MOV      C,IO_DUT_C2M_SDA
00250D D297              SETB     IO_DUT_C2M_SCL
00250F 9232              MOV      bC2Bit2,C
002511 00                NOP      
002512 00                NOP      
002513 C297              CLR      IO_DUT_C2M_SCL
002515 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 62


002516 00                NOP      
002517 A2A0              MOV      C,IO_DUT_C2M_SDA
002519 D297              SETB     IO_DUT_C2M_SCL
00251B 9233              MOV      bC2Bit3,C
00251D 00                NOP      
00251E 00                NOP      
00251F C297              CLR      IO_DUT_C2M_SCL
002521 00                NOP      
002522 00                NOP      
002523 A2A0              MOV      C,IO_DUT_C2M_SDA
002525 D297              SETB     IO_DUT_C2M_SCL
002527 9234              MOV      bC2Bit4,C
002529 00                NOP      
00252A 00                NOP      
00252B C297              CLR      IO_DUT_C2M_SCL
00252D 00                NOP      
00252E 00                NOP      
00252F A2A0              MOV      C,IO_DUT_C2M_SDA
002531 D297              SETB     IO_DUT_C2M_SCL
002533 9235              MOV      bC2Bit5,C
002535 00                NOP      
002536 00                NOP      
002537 C297              CLR      IO_DUT_C2M_SCL
002539 00                NOP      
00253A 00                NOP      
00253B A2A0              MOV      C,IO_DUT_C2M_SDA
00253D D297              SETB     IO_DUT_C2M_SCL
00253F 9236              MOV      bC2Bit6,C
002541 00                NOP      
002542 00                NOP      
002543 C297              CLR      IO_DUT_C2M_SCL
002545 00                NOP      
002546 00                NOP      
002547 122EDA            LCALL    ?L?COM0018
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
00254A AF26              MOV      R7,vC2Data
  272: }
00254C 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
00254D AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
00254F C238              CLR      bDone
  550:     if (!drv_c2m_IsReady())
002551 309768            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
002554 30A065            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
002557         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 63


002557 AF16              MOV      R7,vFPDAT
002559 71D4              ACALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
00255B 7F08              MOV      R7,#08H
00255D 123034            LCALL    ?L?COM001D
002560         ?C0914?DRV_C2M:
002560 B1BF              ACALL    c2m_ReadAR
002562 EF                MOV      A,R7
002563 20E00C            JB       ACC.0,?C0912?DRV_C2M
002566 7833              MOV      R0,#LOW _timeout
002568 122FAD            LCALL    ?L?COM000A
00256B 6005              JZ       ?C0912?DRV_C2M
00256D 12175A            LCALL    ?L?COM0008
002570 80EE              SJMP     ?C0914?DRV_C2M
002572         ?C0912?DRV_C2M:
002572 12305C            LCALL    ?L?COM001F
002575 7045              JNZ      _exit?DRV_C2M
002577         ?C0916?DRV_C2M:
002577         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
002577 AF03              MOV      R7,AR3
002579 123034            LCALL    ?L?COM001D
00257C         ?C0923?DRV_C2M:
00257C B1BF              ACALL    c2m_ReadAR
00257E EF                MOV      A,R7
00257F 20E00C            JB       ACC.0,?C0921?DRV_C2M
002582 7833              MOV      R0,#LOW _timeout
002584 122FAD            LCALL    ?L?COM000A
002587 6005              JZ       ?C0921?DRV_C2M
002589 12175A            LCALL    ?L?COM0008
00258C 80EE              SJMP     ?C0923?DRV_C2M
00258E         ?C0921?DRV_C2M:
00258E 12305C            LCALL    ?L?COM001F
002591 7029              JNZ      _exit?DRV_C2M
002593         ?C0925?DRV_C2M:
002593         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
002593 E4                CLR      A
002594 FF                MOV      R7,A
002595 12177E            LCALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
002598 E4                CLR      A
002599 753640            MOV      _timeout+03H,#040H
00259C 75359C            MOV      _timeout+02H,#09CH
00259F F534              MOV      _timeout+01H,A
0025A1 F533              MOV      _timeout,A
0025A3         ?C0932?DRV_C2M:
0025A3 B1BF              ACALL    c2m_ReadAR
0025A5 EF                MOV      A,R7
0025A6 20E00C            JB       ACC.0,?C0930?DRV_C2M
0025A9 7833              MOV      R0,#LOW _timeout
0025AB 122FAD            LCALL    ?L?COM000A
0025AE 6005              JZ       ?C0930?DRV_C2M
0025B0 12175A            LCALL    ?L?COM0008
0025B3 80EE              SJMP     ?C0932?DRV_C2M
0025B5         ?C0930?DRV_C2M:
0025B5 9188              ACALL    c2m_ReadDR
0025B7 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0025BA         ?C0934?DRV_C2M:
0025BA         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
0025BA D238              SETB     bDone
  564: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 64


  565: _exit:
0025BC         _exit:
  566:     return bDone;
0025BC A238              MOV      C,bDone
  567: }
0025BE 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
0025BF C243              CLR      bIns0
0025C1 D244              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
0025C3 30AF05            JNB      EA,?C0190?DRV_C2M
0025C6 C2AF              CLR      EA
0025C8 D3                SETB     C
0025C9 8001              SJMP     ?C0191?DRV_C2M
0025CB         ?C0190?DRV_C2M:
0025CB C3                CLR      C
0025CC         ?C0191?DRV_C2M:
0025CC 122E3B            LCALL    ?L?COM0012
0025CF 00                NOP      
0025D0 00                NOP      
0025D1 00                NOP      
0025D2 00                NOP      
0025D3 122ECE            LCALL    ?L?COM001B
0025D6 00                NOP      
0025D7 00                NOP      
0025D8 00                NOP      
0025D9 00                NOP      
0025DA 122EB1            LCALL    ?L?COM0025
0025DD 00                NOP      
0025DE 00                NOP      
0025DF 00                NOP      
0025E0 00                NOP      
0025E1 122EBA            LCALL    ?L?COM002D
0025E4 00                NOP      
0025E5 D297              SETB     IO_DUT_C2M_SCL
0025E7 00                NOP      
0025E8 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
0025E9 00                NOP      
0025EA 00                NOP      
0025EB C297              CLR      IO_DUT_C2M_SCL
0025ED 00                NOP      
0025EE 00                NOP      
0025EF A2A0              MOV      C,IO_DUT_C2M_SDA
0025F1 D297              SETB     IO_DUT_C2M_SCL
0025F3 9230              MOV      bC2Bit0,C
0025F5 00                NOP      
0025F6 00                NOP      
0025F7 C297              CLR      IO_DUT_C2M_SCL
0025F9 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 65


0025FA 00                NOP      
0025FB A2A0              MOV      C,IO_DUT_C2M_SDA
0025FD D297              SETB     IO_DUT_C2M_SCL
0025FF 9231              MOV      bC2Bit1,C
002601 00                NOP      
002602 00                NOP      
002603 C297              CLR      IO_DUT_C2M_SCL
002605 00                NOP      
002606 00                NOP      
002607 A2A0              MOV      C,IO_DUT_C2M_SDA
002609 D297              SETB     IO_DUT_C2M_SCL
00260B 9232              MOV      bC2Bit2,C
00260D 00                NOP      
00260E 00                NOP      
00260F C297              CLR      IO_DUT_C2M_SCL
002611 00                NOP      
002612 00                NOP      
002613 A2A0              MOV      C,IO_DUT_C2M_SDA
002615 D297              SETB     IO_DUT_C2M_SCL
002617 9233              MOV      bC2Bit3,C
002619 00                NOP      
00261A 00                NOP      
00261B C297              CLR      IO_DUT_C2M_SCL
00261D 00                NOP      
00261E 00                NOP      
00261F A2A0              MOV      C,IO_DUT_C2M_SDA
002621 D297              SETB     IO_DUT_C2M_SCL
002623 9234              MOV      bC2Bit4,C
002625 00                NOP      
002626 00                NOP      
002627 C297              CLR      IO_DUT_C2M_SCL
002629 00                NOP      
00262A 00                NOP      
00262B A2A0              MOV      C,IO_DUT_C2M_SDA
00262D D297              SETB     IO_DUT_C2M_SCL
00262F 9235              MOV      bC2Bit5,C
002631 00                NOP      
002632 00                NOP      
002633 C297              CLR      IO_DUT_C2M_SCL
002635 00                NOP      
002636 00                NOP      
002637 A2A0              MOV      C,IO_DUT_C2M_SDA
002639 D297              SETB     IO_DUT_C2M_SCL
00263B 9236              MOV      bC2Bit6,C
00263D 00                NOP      
00263E 00                NOP      
00263F C297              CLR      IO_DUT_C2M_SCL
002641 00                NOP      
002642 00                NOP      
002643 122EDA            LCALL    ?L?COM0018
  217:     c2m_RxStop();       /* rx frame stop */
  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
002646 AF26              MOV      R7,vC2Data
  223: }
002648 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 66


  640: (
;---- Variable 'vCount' assigned to Register 'R3' ----
002649 12311D            LCALL    ?L?COM003C
00264C 7005              JNZ      ?C0962?DRV_C2M
00264E 7E01              MOV      R6,#01H
002650 FF                MOV      R7,A
002651 8004              SJMP     ?C0963?DRV_C2M
002653         ?C0962?DRV_C2M:
002653 EB                MOV      A,R3
002654 FF                MOV      R7,A
002655 7E00              MOV      R6,#00H
002657         ?C0963?DRV_C2M:
002657 8E3F              MOV      vLen,R6
002659 8F40              MOV      vLen+01H,R7
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
  647:     BOOL    bDone = FALSE;
00265B C238              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
00265D 30977B            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
002660 30A078            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
002663         ?C0964?DRV_C2M:
  654: 
  655:     c2m_WriteAR(vFPDAT);
002663 AF16              MOV      R7,vFPDAT
002665 71D4              ACALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
002667 7F07              MOV      R7,#07H
002669 122FFF            LCALL    ?L?COM0010
00266C         ?C0973?DRV_C2M:
00266C B1BF              ACALL    c2m_ReadAR
00266E EF                MOV      A,R7
00266F 20E00A            JB       ACC.0,?C0971?DRV_C2M
002672 122FAB            LCALL    ?L?COM0009
002675 6005              JZ       ?C0971?DRV_C2M
002677 12175A            LCALL    ?L?COM0008
00267A 80F0              SJMP     ?C0973?DRV_C2M
00267C         ?C0971?DRV_C2M:
00267C 12305C            LCALL    ?L?COM001F
00267F 705A              JNZ      _exit?DRV_C2M
002681         ?C0975?DRV_C2M:
002681         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
002681 E53B              MOV      A,vAddr
002683 FF                MOV      R7,A
002684 12177E            LCALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
002687 AF3C              MOV      R7,vAddr+01H
002689 122FFA            LCALL    ?L?COM000F
00268C         ?C0982?DRV_C2M:
00268C B1BF              ACALL    c2m_ReadAR
00268E EF                MOV      A,R7
00268F 20E00A            JB       ACC.0,?C0980?DRV_C2M
002692 122FAB            LCALL    ?L?COM0009
002695 6005              JZ       ?C0980?DRV_C2M
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 67


002697 12175A            LCALL    ?L?COM0008
00269A 80F0              SJMP     ?C0982?DRV_C2M
00269C         ?C0980?DRV_C2M:
00269C 12305C            LCALL    ?L?COM001F
00269F 703A              JNZ      _exit?DRV_C2M
0026A1         ?C0984?DRV_C2M:
0026A1         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
0026A1 123081            LCALL    ?L?COM0024
0026A4 7002              JNZ      ?C1018?DRV_C2M
0026A6 153F              DEC      vLen
0026A8         ?C1018?DRV_C2M:
0026A8 4E                ORL      A,R6
0026A9 6016              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
0026AB 053E              INC      pBuf+01H
0026AD E53E              MOV      A,pBuf+01H
0026AF AE3D              MOV      R6,pBuf
0026B1 7002              JNZ      ?C1019?DRV_C2M
0026B3 053D              INC      pBuf
0026B5         ?C1019?DRV_C2M:
0026B5 14                DEC      A
0026B6 F582              MOV      DPL,A
0026B8 8E83              MOV      DPH,R6
0026BA E0                MOVX     A,@DPTR
0026BB FF                MOV      R7,A
0026BC 12177E            LCALL    _drv_c2m_WriteData
  666:     }
0026BF 80E0              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
0026C1         ?C0992?DRV_C2M:
0026C1 123002            LCALL    ?L?COM0011
0026C4         ?C0993?DRV_C2M:
0026C4 B1BF              ACALL    c2m_ReadAR
0026C6 EF                MOV      A,R7
0026C7 20E00A            JB       ACC.0,?C0991?DRV_C2M
0026CA 122FAB            LCALL    ?L?COM0009
0026CD 6005              JZ       ?C0991?DRV_C2M
0026CF 12175A            LCALL    ?L?COM0008
0026D2 80F0              SJMP     ?C0993?DRV_C2M
0026D4         ?C0991?DRV_C2M:
0026D4 9188              ACALL    c2m_ReadDR
0026D6 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0026D9         ?C0995?DRV_C2M:
0026D9         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
0026D9 D238              SETB     bDone
  669: 
  670: _exit:
0026DB         _exit:
  671:     return bDone;
0026DB A238              MOV      C,bDone
  672: }
0026DD 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 68


;---- Variable 'vCount' assigned to Register 'R3' ----
0026DE 12311D            LCALL    ?L?COM003C
0026E1 7005              JNZ      ?C0936?DRV_C2M
0026E3 7E01              MOV      R6,#01H
0026E5 FF                MOV      R7,A
0026E6 8004              SJMP     ?C0937?DRV_C2M
0026E8         ?C0936?DRV_C2M:
0026E8 EB                MOV      A,R3
0026E9 FF                MOV      R7,A
0026EA 7E00              MOV      R6,#00H
0026EC         ?C0937?DRV_C2M:
0026EC 8E3F              MOV      vLen,R6
0026EE 8F40              MOV      vLen+01H,R7
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
  595:     BOOL    bDone = FALSE;
0026F0 C238              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
0026F2 309762            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
0026F5 30A05F            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
0026F8         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
0026F8 AF16              MOV      R7,vFPDAT
0026FA 71D4              ACALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
0026FC 7F06              MOV      R7,#06H
0026FE 122FFF            LCALL    ?L?COM0010
002701         ?C0947?DRV_C2M:
002701 B1BF              ACALL    c2m_ReadAR
002703 EF                MOV      A,R7
002704 20E00A            JB       ACC.0,?C0945?DRV_C2M
002707 122FAB            LCALL    ?L?COM0009
00270A 6005              JZ       ?C0945?DRV_C2M
00270C 12175A            LCALL    ?L?COM0008
00270F 80F0              SJMP     ?C0947?DRV_C2M
002711         ?C0945?DRV_C2M:
002711 12305C            LCALL    ?L?COM001F
002714 7041              JNZ      _exit?DRV_C2M
002716         ?C0949?DRV_C2M:
002716         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
002716 E53D              MOV      A,vAddr
002718 FF                MOV      R7,A
002719 12177E            LCALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
00271C AF3E              MOV      R7,vAddr+01H
00271E 122FFA            LCALL    ?L?COM000F
002721         ?C0956?DRV_C2M:
002721 B1BF              ACALL    c2m_ReadAR
002723 EF                MOV      A,R7
002724 20E00A            JB       ACC.0,?C0954?DRV_C2M
002727 122FAB            LCALL    ?L?COM0009
00272A 6005              JZ       ?C0954?DRV_C2M
00272C 12175A            LCALL    ?L?COM0008
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 69


00272F 80F0              SJMP     ?C0956?DRV_C2M
002731         ?C0954?DRV_C2M:
002731 9188              ACALL    c2m_ReadDR
002733 BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
002736         ?C0958?DRV_C2M:
002736         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  610:     while (vLen--)
002736 123081            LCALL    ?L?COM0024
002739 7002              JNZ      ?C1016?DRV_C2M
00273B 153F              DEC      vLen
00273D         ?C1016?DRV_C2M:
00273D 4E                ORL      A,R6
00273E 6015              JZ       ?C0960?DRV_C2M
  611:     {
  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
002740 916B              ACALL    drv_c2m_ReadData
002742 053C              INC      pBuf+01H
002744 E53C              MOV      A,pBuf+01H
002746 AC3B              MOV      R4,pBuf
002748 7002              JNZ      ?C1017?DRV_C2M
00274A 053B              INC      pBuf
00274C         ?C1017?DRV_C2M:
00274C 14                DEC      A
00274D F582              MOV      DPL,A
00274F 8C83              MOV      DPH,R4
002751 EF                MOV      A,R7
002752 F0                MOVX     @DPTR,A
  614:     }
002753 80E1              SJMP     ?C0959?DRV_C2M
002755         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
002755 D238              SETB     bDone
  616: 
  617: _exit:
002757         _exit:
  618:     return bDone;
002757 A238              MOV      C,bDone
  619: }
002759 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
00275A C238              CLR      bDone
  511:     if (!drv_c2m_IsReady())
00275C 309757            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
00275F 30A054            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
002762         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
002762 AF16              MOV      R7,vFPDAT
002764 71D4              ACALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 70


002766 7F03              MOV      R7,#03H
002768 123034            LCALL    ?L?COM001D
00276B         ?C0892?DRV_C2M:
00276B B1BF              ACALL    c2m_ReadAR
00276D EF                MOV      A,R7
00276E 20E00C            JB       ACC.0,?C0890?DRV_C2M
002771 7833              MOV      R0,#LOW _timeout
002773 122FAD            LCALL    ?L?COM000A
002776 6005              JZ       ?C0890?DRV_C2M
002778 12175A            LCALL    ?L?COM0008
00277B 80EE              SJMP     ?C0892?DRV_C2M
00277D         ?C0890?DRV_C2M:
00277D 12305C            LCALL    ?L?COM001F
002780 7034              JNZ      _exit?DRV_C2M
002782         ?C0894?DRV_C2M:
002782         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
002782 7FDE              MOV      R7,#0DEH
002784 12177E            LCALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
002787 7FAD              MOV      R7,#0ADH
002789 12177E            LCALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
00278C 7FA5              MOV      R7,#0A5H
00278E 12177E            LCALL    _drv_c2m_WriteData
  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
002791 753600            MOV      _timeout+03H,#00H
002794 75352D            MOV      _timeout+02H,#02DH
002797 753431            MOV      _timeout+01H,#031H
00279A 753301            MOV      _timeout,#01H
00279D         ?C0901?DRV_C2M:
00279D B1BF              ACALL    c2m_ReadAR
00279F EF                MOV      A,R7
0027A0 20E00C            JB       ACC.0,?C0899?DRV_C2M
0027A3 7833              MOV      R0,#LOW _timeout
0027A5 122FAD            LCALL    ?L?COM000A
0027A8 6005              JZ       ?C0899?DRV_C2M
0027AA 12175A            LCALL    ?L?COM0008
0027AD 80EE              SJMP     ?C0901?DRV_C2M
0027AF         ?C0899?DRV_C2M:
0027AF 9188              ACALL    c2m_ReadDR
0027B1 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0027B4         ?C0903?DRV_C2M:
0027B4         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
0027B4 D238              SETB     bDone
  525: 
  526: _exit:
0027B6         _exit:
  527:     return bDone;
0027B6 A238              MOV      C,bDone
  528: }
0027B8 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
0027B9 123070            LCALL    ?L?COM0022
   52:             PKT_REPLY_Done_ExecNoError :
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 71


   53:             PKT_REPLY_Fail_ExecErrorCode0);
0027BC F15A              ACALL    DRV_C2M_ChipErase
0027BE 7E03              MOV      R6,#03H
0027C0 5002              JNC      ?C0018?PKT_C2M
0027C2 7E01              MOV      R6,#01H
0027C4         ?C0018?PKT_C2M:
0027C4 7F40              MOV      R7,#040H
   54: }
0027C6 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
0027C7 90004A            MOV      DPTR,#vFrame+0AH
0027CA E0                MOVX     A,@DPTR
0027CB 7004              JNZ      ?C0043?PKT_C2M
0027CD A3                INC      DPTR
0027CE E0                MOVX     A,@DPTR
0027CF 6401              XRL      A,#01H
0027D1         ?C0043?PKT_C2M:
0027D1 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
0027D3 7E03              MOV      R6,#03H
0027D5 7F04              MOV      R7,#04H
0027D7 22                RET      
   62: 
0027D8         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
0027D8 90004C            MOV      DPTR,#vFrame+0CH
0027DB E0                MOVX     A,@DPTR
0027DC FF                MOV      R7,A
0027DD B14D              ACALL    _DRV_C2M_PageErase
0027DF 7E03              MOV      R6,#03H
0027E1 5002              JNC      ?C0023?PKT_C2M
0027E3 7E01              MOV      R6,#01H
0027E5         ?C0023?PKT_C2M:
0027E5 7F40              MOV      R7,#040H
   66: }
0027E7 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
0027E8 E4                CLR      A
0027E9 F510              MOV      vTCB_Idle,A
0027EB F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
0027ED 1201DD            LCALL    CFG_Init
   76:     DRV_Init();
0027F0 122AE2            LCALL    DRV_Init
   77:     APL_Init();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 72


0027F3 0217FC            LJMP     APL_Init
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   77: void thread_LED_Init(void)
   78: {
   79:     PT_INIT(&vTCB_LED);
   80: }
0027F6 E4                CLR      A
0027F7 F512              MOV      vTCB_LED,A
0027F9 F513              MOV      vTCB_LED+01H,A
   81: 
0027FB 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002800 122E85            LCALL    ?L?COM000D
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
002803 90004A            MOV      DPTR,#vFrame+0AH
002806 E0                MOVX     A,@DPTR
002807 7004              JNZ      ?C0044?PKT_C2M
002809 A3                INC      DPTR
00280A E0                MOVX     A,@DPTR
00280B 6406              XRL      A,#06H
00280D         ?C0044?PKT_C2M:
00280D 700B              JNZ      ?C0026?PKT_C2M
00280F D3                SETB     C
002810 E538              MOV      A,vLen+01H
002812 9432              SUBB     A,#032H
002814 E537              MOV      A,vLen
002816 9404              SUBB     A,#04H
002818 4005              JC       ?C0030?PKT_C2M
00281A         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
00281A 7E03              MOV      R6,#03H
00281C 7F04              MOV      R7,#04H
00281E 22                RET      
   79:     }
00281F         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
00281F E538              MOV      A,vLen+01H
002821 2406              ADD      A,#06H
002823 90004B            MOV      DPTR,#vFrame+0BH
002826 F0                MOVX     @DPTR,A
002827 E4                CLR      A
002828 3537              ADDC     A,vLen
00282A 90004A            MOV      DPTR,#vFrame+0AH
00282D F0                MOVX     @DPTR,A
00282E         ?C0031?PKT_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 73


   83:     while (vLen != 0)
00282E E538              MOV      A,vLen+01H
002830 4537              ORL      A,vLen
002832 602D              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
002834 C3                CLR      C
002835 E537              MOV      A,vLen
002837 9401              SUBB     A,#01H
002839 5006              JNC      ?C0033?PKT_C2M
00283B AE37              MOV      R6,vLen
00283D AF38              MOV      R7,vLen+01H
00283F 8004              SJMP     ?C0034?PKT_C2M
002841         ?C0033?PKT_C2M:
002841 7E01              MOV      R6,#01H
002843 7F00              MOV      R7,#00H
002845         ?C0034?PKT_C2M:
002845 8E39              MOV      vReadLen,R6
002847 8F3A              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
002849 AB3A              MOV      R3,vReadLen+01H
00284B AD36              MOV      R5,vAddr+01H
00284D AC35              MOV      R4,vAddr
00284F AF34              MOV      R7,pBuf+01H
002851 AE33              MOV      R6,pBuf
002853 1226DE            LCALL    _DRV_C2M_FlashRead
002856 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
002858 7E03              MOV      R6,#03H
00285A 7F40              MOV      R7,#040H
00285C 22                RET      
   94:         }
00285D         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
00285D D15F              ACALL    ?L?COM0014
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
00285F 80CD              SJMP     ?C0031?PKT_C2M
002861         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
002861 7E01              MOV      R6,#01H
002863 7F40              MOV      R7,#040H
  102: }
002865 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002866 D185              ACALL    ?L?COM000D
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 74


  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
002868 2406              ADD      A,#06H
00286A FF                MOV      R7,A
00286B E4                CLR      A
00286C 3537              ADDC     A,vLen
00286E FE                MOV      R6,A
00286F 90004A            MOV      DPTR,#vFrame+0AH
002872 E0                MOVX     A,@DPTR
002873 6E                XRL      A,R6
002874 7003              JNZ      ?C0045?PKT_C2M
002876 A3                INC      DPTR
002877 E0                MOVX     A,@DPTR
002878 6F                XRL      A,R7
002879         ?C0045?PKT_C2M:
002879 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
00287B 7E03              MOV      R6,#03H
00287D 7F04              MOV      R7,#04H
00287F 22                RET      
  114:     }
002880         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
002880 E538              MOV      A,vLen+01H
002882 4537              ORL      A,vLen
002884 602D              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002886 C3                CLR      C
002887 E537              MOV      A,vLen
002889 9401              SUBB     A,#01H
00288B 5006              JNC      ?C0040?PKT_C2M
00288D AE37              MOV      R6,vLen
00288F AF38              MOV      R7,vLen+01H
002891 8004              SJMP     ?C0041?PKT_C2M
002893         ?C0040?PKT_C2M:
002893 7E01              MOV      R6,#01H
002895 7F00              MOV      R7,#00H
002897         ?C0041?PKT_C2M:
002897 8E39              MOV      vWriteLen,R6
002899 8F3A              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
00289B AB3A              MOV      R3,vWriteLen+01H
00289D AD34              MOV      R5,pBuf+01H
00289F AC33              MOV      R4,pBuf
0028A1 AF36              MOV      R7,vAddr+01H
0028A3 AE35              MOV      R6,vAddr
0028A5 122649            LCALL    _DRV_C2M_FlashWrite
0028A8 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
0028AA 7E03              MOV      R6,#03H
0028AC 7F40              MOV      R7,#040H
0028AE 22                RET      
  128:         }
0028AF         ?C0042?PKT_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 75


  129: 
  130:         pBuf  += vWriteLen;
0028AF D15F              ACALL    ?L?COM0014
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
0028B1 80CD              SJMP     ?C0038?PKT_C2M
0028B3         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
0028B3 7E01              MOV      R6,#01H
0028B5 7F40              MOV      R7,#040H
  136: }
0028B7 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
   41: 
0028B8 752B01            MOV      PT_YIELD_FLAG,#01H
0028BB         ?C0001?THREAD_IDLE:
0028BB E510              MOV      A,vTCB_Idle
0028BD 7031              JNZ      ?C0002?THREAD_IDLE
0028BF E511              MOV      A,vTCB_Idle+01H
0028C1 24CF              ADD      A,#0CFH
0028C3 6019              JZ       ?C0012?THREAD_IDLE
0028C5 2431              ADD      A,#031H
0028C7 7027              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
0028C9         ?C0004?THREAD_IDLE:
   43:     {
   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
0028C9 120042            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
0028CC E50F              MOV      A,vTickCount+03H
0028CE 2432              ADD      A,#032H
0028D0 D12D              ACALL    ?L?COM0033
0028D2 9004FC            MOV      DPTR,#vEndTick
0028D5 1208D2            LCALL    ?C?LSTXDATA
0028D8 751000            MOV      vTCB_Idle,#00H
0028DB 751131            MOV      vTCB_Idle+01H,#031H
0028DE         ?C0012?THREAD_IDLE:
0028DE 00                NOP      
0028DF 9004FC            MOV      DPTR,#vEndTick
0028E2 D103              ACALL    ?L?COM0016
0028E4 7F00              MOV      R7,#00H
0028E6 5002              JNC      ?C0014?THREAD_IDLE
0028E8 7F01              MOV      R7,#01H
0028EA         ?C0014?THREAD_IDLE:
0028EA         ?C0015?THREAD_IDLE:
0028EA EF                MOV      A,R7
0028EB 60DC              JZ       ?C0004?THREAD_IDLE
0028ED 7F00              MOV      R7,#00H
0028EF 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 76


0028F0         ?C0002?THREAD_IDLE:
0028F0 E4                CLR      A
0028F1 F52B              MOV      PT_YIELD_FLAG,A
0028F3 F510              MOV      vTCB_Idle,A
0028F5 F511              MOV      vTCB_Idle+01H,A
0028F7 7F03              MOV      R7,#03H
   53: }
0028F9 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
0028FA 752B01            MOV      PT_YIELD_FLAG,#01H
0028FD         ?C0001?THREAD_LED:
0028FD E512              MOV      A,vTCB_LED
0028FF 7053              JNZ      ?C0002?THREAD_LED
002901 E513              MOV      A,vTCB_LED+01H
002903 24C8              ADD      A,#0C8H
002905 603B              JZ       ?C0020?THREAD_LED
002907 2438              ADD      A,#038H
002909 7049              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
00290B         ?C0004?THREAD_LED:
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
00290B 7819              MOV      R0,#019H
00290D E2                MOVX     A,@R0
00290E C4                SWAP     A
00290F 13                RRC      A
002910 13                RRC      A
002911 13                RRC      A
002912 5401              ANL      A,#01H
002914 FF                MOV      R7,A
002915 E4                CLR      A
002916 FC                MOV      R4,A
002917 FD                MOV      R5,A
002918 FE                MOV      R6,A
002919 EF                MOV      A,R7
00291A 5401              ANL      A,#01H
00291C FF                MOV      R7,A
00291D E4                CLR      A
00291E 7B01              MOV      R3,#01H
002920 FA                MOV      R2,A
002921 F9                MOV      R1,A
002922 F8                MOV      R0,A
002923 C3                CLR      C
002924 120891            LCALL    ?C?ULCMP
002927 7004              JNZ      ?C0013?THREAD_LED
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_STATUS_OUT), LOW);
002929 C2A3              CLR      IO_LED_STATUS_OUT
   48:         }
00292B 8003              SJMP     ?C0016?THREAD_LED
   49:         else
   50:       #endif
   51:         {
00292D         ?C0013?THREAD_LED:
   52:             /* system running abnormally */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 77


   53:             DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
00292D 63A008            XRL      P2,#08H
   54:         }
002930         ?C0016?THREAD_LED:
   55: 
   56:         OS_SLEEP_MS(&vTCB_LED, 100);
002930 E50F              MOV      A,vTickCount+03H
002932 2464              ADD      A,#064H
002934 D12D              ACALL    ?L?COM0033
002936 900500            MOV      DPTR,#vEndTick
002939 1208D2            LCALL    ?C?LSTXDATA
00293C 751200            MOV      vTCB_LED,#00H
00293F 751338            MOV      vTCB_LED+01H,#038H
002942         ?C0020?THREAD_LED:
002942 00                NOP      
002943 900500            MOV      DPTR,#vEndTick
002946 D103              ACALL    ?L?COM0016
002948 7F00              MOV      R7,#00H
00294A 5002              JNC      ?C0022?THREAD_LED
00294C 7F01              MOV      R7,#01H
00294E         ?C0022?THREAD_LED:
00294E         ?C0023?THREAD_LED:
00294E EF                MOV      A,R7
00294F 60BA              JZ       ?C0004?THREAD_LED
002951 7F00              MOV      R7,#00H
002953 22                RET      
   57:     }
   58: 
   59:     PT_END(&vTCB_LED);
002954         ?C0002?THREAD_LED:
002954 E4                CLR      A
002955 F52B              MOV      PT_YIELD_FLAG,A
002957 F512              MOV      vTCB_LED,A
002959 F513              MOV      vTCB_LED+01H,A
00295B 7F03              MOV      R7,#03H
   60: }
00295D 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
00295E D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
002960 021550            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   61: void main(void)
   62: {
   63: 	/* previous init */
   64: 	DRV_PreInit();
002963 3194              ACALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 78


002965 317F              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
002967 315E              ACALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
002969         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
002969 E4                CLR      A
00296A F52A              MOV      i,A
00296C         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
00296C E52A              MOV      A,i
00296E 75F006            MOV      B,#06H
002971 A4                MUL      AB
002972 2496              ADD      A,#LOW aThreadList
002974 F582              MOV      DPL,A
002976 E4                CLR      A
002977 3415              ADDC     A,#HIGH aThreadList
002979 D14A              ACALL    ?L?COM0021
00297B 40EF              JC       ?C0003?OS
00297D 80EA              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
00297F E4                CLR      A
002980 F52A              MOV      i,A
002982         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
002982 E52A              MOV      A,i
002984 75F006            MOV      B,#06H
002987 A4                MUL      AB
002988 2499              ADD      A,#LOW aThreadList+03H
00298A F582              MOV      DPL,A
00298C E4                CLR      A
00298D 3415              ADDC     A,#HIGH aThreadList+03H
00298F D14A              ACALL    ?L?COM0021
002991 40EF              JC       ?C0007?OS
   83:     }
   84: }
002993 22                RET      
----- FUNCTION OS_Init (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 79




----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
002994 E4                CLR      A
002995 F5A8              MOV      IE,A
002997 F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
   94:     DRV_CLOCK_Init();
002999 75B283            MOV      OSCICN,#083H
00299C         ?C0023?DRV:
00299C E5B2              MOV      A,OSCICN
00299E C4                SWAP     A
00299F 13                RRC      A
0029A0 13                RRC      A
0029A1 5403              ANL      A,#03H
0029A3 13                RRC      A
0029A4 50F6              JNC      ?C0023?DRV
0029A6         ?C0024?DRV:
0029A6 75B980            MOV      CLKMUL,#080H
0029A9 7F05              MOV      R7,#05H
0029AB 7E00              MOV      R6,#00H
0029AD 12175E            LCALL    _DRV_CPU_DelayUs
0029B0 43B9C0            ORL      CLKMUL,#0C0H
0029B3         ?C0025?DRV:
0029B3 E5B9              MOV      A,CLKMUL
0029B5 C4                SWAP     A
0029B6 13                RRC      A
0029B7 5407              ANL      A,#07H
0029B9 13                RRC      A
0029BA 50F7              JNC      ?C0025?DRV
0029BC         ?C0026?DRV:
0029BC 75A902            MOV      CLKSEL,#02H
0029BF 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
0029C2 31EB              ACALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
0029C4 438E08            ORL      CKCON,#08H
0029C7 E589              MOV      A,TMOD
0029C9 540F              ANL      A,#0FH
0029CB 4420              ORL      A,#020H
0029CD F589              MOV      TMOD,A
0029CF 758D98            MOV      TH1,#098H
0029D2 D28E              SETB     TR1
0029D4 AFD4              MOV      R7,P0SKIP
0029D6 EF                MOV      A,R7
0029D7 54EF              ANL      A,#0EFH
0029D9 FF                MOV      R7,A
0029DA 8FD4              MOV      P0SKIP,R7
0029DC AFD4              MOV      R7,P0SKIP
0029DE EF                MOV      A,R7
0029DF 54DF              ANL      A,#0DFH
0029E1 FF                MOV      R7,A
0029E2 8FD4              MOV      P0SKIP,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 80


0029E4 43E101            ORL      XBR0,#01H
0029E7 759802            MOV      SCON0,#02H
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
  106:     DRV_PCA_Init();
  107:   #endif
  108: 
  109:   #if DRV_WATCHDOG_SUPPORT
  110: 	DRV_WATCHDOG_Enable();
  111:   #endif
  112: }
0029EA 22                RET      
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
0029EB 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
0029EE 7590F6            MOV      P1,#0F6H
   42:     P2      = _PORT_INIT(P2);
0029F1 75A0FF            MOV      P2,#0FFH
   43:     P3      = _PORT_INIT(P3);
0029F4 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
0029F7 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
0029FA 75F2FF            MOV      P1MDIN,#0FFH
   46:     P2MDIN  = _PORT_MDIN(P2);
0029FD 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
002A00 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
002A03 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
002A06 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
002A09 75A60A            MOV      P2MDOUT,#0AH
   51:     P3MDOUT = _PORT_MDOUT(P3);
002A0C E4                CLR      A
002A0D F5A7              MOV      P3MDOUT,A
   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
002A0F 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
002A12 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
002A15 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
002A18 F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
002A1A 75E240            MOV      XBR1,#040H
   61: }
002A1D 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 81


----- FUNCTION _CFG_RAM_SET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   77:     return MEMPAGE_PID_INVALID;
   78: }
;---- Variable 'vAddr' assigned to Register 'R2/R3' ----
002A1E AB07              MOV      R3,AR7
002A20 AF31              MOV      R7,vData+03H
002A22 AE30              MOV      R6,vData+02H
002A24 AD2F              MOV      R5,vData+01H
002A26 AC2E              MOV      R4,vData
002A28 A803              MOV      R0,AR3
002A2A 0208DE            LJMP     ?C?LSTPDATA
----- FUNCTION _CFG_RAM_SET32 (END) -------


----- FUNCTION _CFG_DB_ReadByte (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   95: UINT8 CFG_DB_ReadByte(IN UINT8 vOffset)
   96: {
;---- Variable 'vOffset' assigned to Register 'R5' ----
002A2D AD07              MOV      R5,AR7
   97:     SINT8   vPID = cfg_db_GetPID(vOffset);
   98:     UINT8   vPageSize;
002A2F 121F40            LCALL    _cfg_db_GetPID
;---- Variable 'vPID' assigned to Register 'R6' ----
002A32 AE07              MOV      R6,AR7
   99: 
  100:     if (vPID == MEMPAGE_PID_INVALID)
002A34 BEFF03            CJNE     R6,#0FFH,?C0032?CFG_DB
  101:     {
  102:         /* invalid page */
  103:         return (UINT8)I2CS_INVALID_DATA;
002A37 7FAA              MOV      R7,#0AAH
002A39 22                RET      
  104:     }
002A3A         ?C0032?CFG_DB:
  105: 
  106:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
002A3A C3                CLR      C
002A3B EE                MOV      A,R6
002A3C 6480              XRL      A,#080H
002A3E 9481              SUBB     A,#081H
002A40 400C              JC       ?C0034?CFG_DB
002A42 D3                SETB     C
002A43 EE                MOV      A,R6
002A44 6480              XRL      A,#080H
002A46 9482              SUBB     A,#082H
002A48 5004              JNC      ?C0034?CFG_DB
002A4A 7F20              MOV      R7,#020H
002A4C 8002              SJMP     ?C0035?CFG_DB
002A4E         ?C0034?CFG_DB:
002A4E 7F80              MOV      R7,#080H
002A50         ?C0035?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  107:     vOffset  &= (vPageSize - 1);
002A50 EF                MOV      A,R7
002A51 14                DEC      A
002A52 5205              ANL      AR5,A
  108: 
  109:     /* check password level, to make sure it's readable */
  110:     if (CFG_PWD_GetLevel() >= aPagePwdReadTable[vPID])
002A54 EE                MOV      A,R6
002A55 FB                MOV      R3,A
002A56 33                RLC      A
002A57 95E0              SUBB     A,ACC
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 82


002A59 FA                MOV      R2,A
002A5A 74A8              MOV      A,#LOW aPagePwdReadTable
002A5C 2B                ADD      A,R3
002A5D F582              MOV      DPL,A
002A5F 7415              MOV      A,#HIGH aPagePwdReadTable
002A61 3A                ADDC     A,R2
002A62 D1C4              ACALL    ?L?COM003F
002A64 4079              JC       ?C0036?CFG_DB
  111:     {
  112:         /* password check pass */
  113:         switch (vPID)
002A66 EE                MOV      A,R6
002A67 6014              JZ       ?C0045?CFG_DB
002A69 14                DEC      A
002A6A 7027              JNZ      ?C0037?CFG_DB
  114:         {
  115:             case MEMPAGE_PID_DIRECT_FE_60:
002A6C         ?C0038?CFG_DB:
  116:                 switch (vOffset)
002A6C ED                MOV      A,R5
002A6D 24E5              ADD      A,#0E5H
002A6F 24FD              ADD      A,#0FDH
002A71 5004              JNC      ?C0042?CFG_DB
002A73 6005              JZ       ?C0043?CFG_DB
002A75 801C              SJMP     ?C0037?CFG_DB
  117:                 {
  118:                     /* for security reason,
  119:                      *  the password entry is write-only field.
  120:                      */
  121:                     case CFG(Vendor_PWD_Entry)+0:
  122:                     case CFG(Vendor_PWD_Entry)+1:
  123:                     case CFG(Vendor_PWD_Entry)+2: return 0x00;
002A77         ?C0042?CFG_DB:
002A77 7F00              MOV      R7,#00H
002A79 22                RET      
  124:                     case CFG(Vendor_PWD_Entry)+3: return CFG_PWD_GetLevel();
002A7A         ?C0043?CFG_DB:
002A7A AF15              MOV      R7,vCfgPwdLevel
002A7C 22                RET      
  125: 
  126:                     default:
  127:                         break;
  128:                 }
  129:                 break;
  130: 
  131:             case MEMPAGE_PID_EXTEND_FE_FF:
002A7D         ?C0045?CFG_DB:
  132:                 return (((vOffset >= CFG_HEAD(Vendor_FwVersion))
  133:                             && (vOffset <= CFG_TAIL(Vendor_FwVersion)))?
  134:                         FW_VERSION(vOffset-CFG_HEAD(Vendor_FwVersion)):
  135:                         (UINT8)I2CS_INVALID_DATA);
002A7D ED                MOV      A,R5
002A7E C3                CLR      C
002A7F 9478              SUBB     A,#078H
002A81 400D              JC       ?C0046?CFG_DB
002A83 ED                MOV      A,R5
002A84 D3                SETB     C
002A85 947F              SUBB     A,#07FH
002A87 5007              JNC      ?C0046?CFG_DB
002A89 ED                MOV      A,R5
002A8A 900170            MOV      DPTR,#__sig-070H
002A8D 93                MOVC     A,@A+DPTR
002A8E FF                MOV      R7,A
002A8F 22                RET      
002A90         ?C0046?CFG_DB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 83


002A90 7FAA              MOV      R7,#0AAH
002A92 22                RET      
  136: 
  137:             default:
  138:                 break;
  139:         }
002A93         ?C0037?CFG_DB:
  140: 
  141:         return CFG_GETV8(vPID, vOffset);
002A93 C3                CLR      C
002A94 EE                MOV      A,R6
002A95 6480              XRL      A,#080H
002A97 9481              SUBB     A,#081H
002A99 4014              JC       ?C0049?CFG_DB
002A9B D3                SETB     C
002A9C EE                MOV      A,R6
002A9D 6480              XRL      A,#080H
002A9F 9482              SUBB     A,#082H
002AA1 500C              JNC      ?C0049?CFG_DB
002AA3 EE                MOV      A,R6
002AA4 14                DEC      A
002AA5 C4                SWAP     A
002AA6 33                RLC      A
002AA7 54E0              ANL      A,#0E0H
002AA9 2D                ADD      A,R5
002AAA F8                MOV      R0,A
002AAB E2                MOVX     A,@R0
002AAC FF                MOV      R7,A
002AAD 802F              SJMP     ?C0050?CFG_DB
002AAF         ?C0049?CFG_DB:
002AAF C3                CLR      C
002AB0 EE                MOV      A,R6
002AB1 6480              XRL      A,#080H
002AB3 9483              SUBB     A,#083H
002AB5 4025              JC       ?C0051?CFG_DB
002AB7 D3                SETB     C
002AB8 EE                MOV      A,R6
002AB9 6480              XRL      A,#080H
002ABB 9486              SUBB     A,#086H
002ABD 501D              JNC      ?C0051?CFG_DB
002ABF AF06              MOV      R7,AR6
002AC1 D124              ACALL    ?L?COM002F
002AC3         ?C0106?CFG_DB:
002AC3 C3                CLR      C
002AC4 33                RLC      A
002AC5 CE                XCH      A,R6
002AC6 33                RLC      A
002AC7 CE                XCH      A,R6
002AC8 D8F9              DJNZ     R0,?C0106?CFG_DB
002ACA D11A              ACALL    ?L?COM0037
002ACC 7C00              MOV      R4,#00H
002ACE EF                MOV      A,R7
002ACF 2D                ADD      A,R5
002AD0 FF                MOV      R7,A
002AD1 EC                MOV      A,R4
002AD2 3E                ADDC     A,R6
002AD3 8F82              MOV      DPL,R7
002AD5 F583              MOV      DPH,A
002AD7 E4                CLR      A
002AD8 93                MOVC     A,@A+DPTR
002AD9 FF                MOV      R7,A
002ADA 8002              SJMP     ?C0052?CFG_DB
002ADC         ?C0051?CFG_DB:
002ADC 7FAA              MOV      R7,#0AAH
002ADE         ?C0052?CFG_DB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 84


002ADE         ?C0050?CFG_DB:
002ADE 22                RET      
  142:     }
002ADF         ?C0036?CFG_DB:
  143:     else
  144:     {
  145:         /* password check fail */
  146:         return (UINT8)I2CS_INVALID_DATA;
002ADF 7FAA              MOV      R7,#0AAH
  147:     }
  148: }
002AE1 22                RET      
----- FUNCTION _CFG_DB_ReadByte (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
002AE2 438E10            ORL      CKCON,#010H
002AE5 E4                CLR      A
002AE6 F5C8              MOV      TMR2CN,A
002AE8 75CA40            MOV      TMR2RLL,#040H
002AEB 75CC40            MOV      TMR2L,#040H
002AEE 75CBA2            MOV      TMR2RLH,#0A2H
002AF1 75CDA2            MOV      TMR2H,#0A2H
002AF4 C2CF              CLR      TF2H
002AF6 D2CA              SETB     TR2
002AF8 C2BD              CLR      PT2
002AFA D2AD              SETB     ET2
002AFC F50F              MOV      vTickCount+03H,A
002AFE F50E              MOV      vTickCount+02H,A
002B00 F50D              MOV      vTickCount+01H,A
002B02 F50C              MOV      vTickCount,A
   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
002B04 7111              ACALL    DRV_USB_Init
;----                  JMP      DRV_C2M_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 85


   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------


----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
002B06 53A57F            ANL      P1MDOUT,#07FH
002B09 53A6FE            ANL      P2MDOUT,#0FEH
002B0C D297              SETB     IO_DUT_C2M_SCL
002B0E D2A0              SETB     IO_DUT_C2M_SDA
  693: 
002B10 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   43: void DRV_USB_Init(void)
   44: {
   45:     UINT8   vData;
   46:     UINT8   vLoop;
   47: 
   48:     /* init USB manufacture string */
   49:     aManufacturerStr[1] = 0x03;
002B11 900485            MOV      DPTR,#aManufacturerStr+01H
002B14 7403              MOV      A,#03H
002B16 F0                MOVX     @DPTR,A
   50:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002B17 7F02              MOV      R7,#02H
002B19         ?C0001?DRV_USB:
002B19 EF                MOV      A,R7
002B1A C3                CLR      C
002B1B 9422              SUBB     A,#022H
002B1D 5027              JNC      ?C0002?DRV_USB
   51:     {
   52:         vData = CFG_GETO8(EE_Vendor_Name, (vLoop>>1)-1);
002B1F B1EC              ACALL    ?L?COM003E
002B21 2490              ADD      A,#090H
002B23 B1F3              ACALL    ?L?COM001C
002B25 401F              JC       ?C0002?DRV_USB
002B27 E52B              MOV      A,vData
002B29 947F              SUBB     A,#07FH
002B2B 5019              JNC      ?C0002?DRV_USB
   53: 
   54:         if ((vData < 0x20) || (vData >= 0x7F))
   55:         {
   56:             break;
   57:         }
002B2D         ?C0004?DRV_USB:
   58: 
   59:         aManufacturerStr[vLoop+0] = vData;
002B2D 7484              MOV      A,#LOW aManufacturerStr
002B2F 2F                ADD      A,R7
002B30 F582              MOV      DPL,A
002B32 E4                CLR      A
002B33 3404              ADDC     A,#HIGH aManufacturerStr
002B35 F583              MOV      DPH,A
002B37 E52B              MOV      A,vData
002B39 F0                MOVX     @DPTR,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 86


   60:         aManufacturerStr[vLoop+1] = 0;
002B3A 7485              MOV      A,#LOW aManufacturerStr+01H
002B3C 2F                ADD      A,R7
002B3D F582              MOV      DPL,A
002B3F E4                CLR      A
002B40 3404              ADDC     A,#HIGH aManufacturerStr+01H
002B42 B1E5              ACALL    ?L?COM003D
002B44 80D3              SJMP     ?C0001?DRV_USB
002B46         ?C0002?DRV_USB:
   61:     }
   62:     aManufacturerStr[0] = vLoop;
002B46 900484            MOV      DPTR,#aManufacturerStr
002B49 EF                MOV      A,R7
002B4A F0                MOVX     @DPTR,A
   63: 
   64:     /* init USB product string */
   65:     aProductStr[1] = 0x03;
002B4B 9004A7            MOV      DPTR,#aProductStr+01H
002B4E 7403              MOV      A,#03H
002B50 F0                MOVX     @DPTR,A
   66:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
002B51 7F02              MOV      R7,#02H
002B53         ?C0006?DRV_USB:
002B53 EF                MOV      A,R7
002B54 C3                CLR      C
002B55 9422              SUBB     A,#022H
002B57 5027              JNC      ?C0007?DRV_USB
   67:     {
   68:         vData = CFG_GETO8(EE_Vendor_PN, (vLoop>>1)-1);
002B59 B1EC              ACALL    ?L?COM003E
002B5B 24A0              ADD      A,#0A0H
002B5D B1F3              ACALL    ?L?COM001C
002B5F 401F              JC       ?C0007?DRV_USB
002B61 E52B              MOV      A,vData
002B63 947F              SUBB     A,#07FH
002B65 5019              JNC      ?C0007?DRV_USB
   69: 
   70:         if ((vData < 0x20) || (vData >= 0x7F))
   71:         {
   72:             break;
   73:         }
002B67         ?C0009?DRV_USB:
   74: 
   75:         aProductStr[vLoop+0] = vData;
002B67 74A6              MOV      A,#LOW aProductStr
002B69 2F                ADD      A,R7
002B6A F582              MOV      DPL,A
002B6C E4                CLR      A
002B6D 3404              ADDC     A,#HIGH aProductStr
002B6F F583              MOV      DPH,A
002B71 E52B              MOV      A,vData
002B73 F0                MOVX     @DPTR,A
   76:         aProductStr[vLoop+1] = 0;
002B74 74A7              MOV      A,#LOW aProductStr+01H
002B76 2F                ADD      A,R7
002B77 F582              MOV      DPL,A
002B79 E4                CLR      A
002B7A 3404              ADDC     A,#HIGH aProductStr+01H
002B7C B1E5              ACALL    ?L?COM003D
002B7E 80D3              SJMP     ?C0006?DRV_USB
002B80         ?C0007?DRV_USB:
   77:     }
   78:     aProductStr[0] = vLoop;
002B80 9004A6            MOV      DPTR,#aProductStr
002B83 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 87


002B84 F0                MOVX     @DPTR,A
   79: 
   80:     /* init USB serial number string */
   81:     aSerialNumberStr[1] = 0x03;
002B85 9004C9            MOV      DPTR,#aSerialNumberStr+01H
002B88 7403              MOV      A,#03H
002B8A F0                MOVX     @DPTR,A
   82:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
002B8B 7F02              MOV      R7,#02H
002B8D         ?C0011?DRV_USB:
002B8D EF                MOV      A,R7
002B8E C3                CLR      C
002B8F 9422              SUBB     A,#022H
002B91 5027              JNC      ?C0012?DRV_USB
   83:     {
   84:         vData = CFG_GETO8(EE_Vendor_SN, (vLoop>>1)-1);
002B93 B1EC              ACALL    ?L?COM003E
002B95 24B0              ADD      A,#0B0H
002B97 B1F3              ACALL    ?L?COM001C
002B99 401F              JC       ?C0012?DRV_USB
002B9B E52B              MOV      A,vData
002B9D 947F              SUBB     A,#07FH
002B9F 5019              JNC      ?C0012?DRV_USB
   85: 
   86:         if ((vData < 0x20) || (vData >= 0x7F))
   87:         {
   88:             break;
   89:         }
002BA1         ?C0014?DRV_USB:
   90: 
   91:         aSerialNumberStr[vLoop+0] = vData;
002BA1 74C8              MOV      A,#LOW aSerialNumberStr
002BA3 2F                ADD      A,R7
002BA4 F582              MOV      DPL,A
002BA6 E4                CLR      A
002BA7 3404              ADDC     A,#HIGH aSerialNumberStr
002BA9 F583              MOV      DPH,A
002BAB E52B              MOV      A,vData
002BAD F0                MOVX     @DPTR,A
   92:         aSerialNumberStr[vLoop+1] = 0;
002BAE 74C9              MOV      A,#LOW aSerialNumberStr+01H
002BB0 2F                ADD      A,R7
002BB1 F582              MOV      DPL,A
002BB3 E4                CLR      A
002BB4 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002BB6 B1E5              ACALL    ?L?COM003D
002BB8 80D3              SJMP     ?C0011?DRV_USB
002BBA         ?C0012?DRV_USB:
   93:     }
   94:     aSerialNumberStr[0] = vLoop;
002BBA 9004C8            MOV      DPTR,#aSerialNumberStr
002BBD EF                MOV      A,R7
002BBE F0                MOVX     @DPTR,A
   95: 
   96:     /* set USB0 to the high priority level interrupt */
   97:     EIP1 |= (1<<1);
002BBF 43F602            ORL      EIP1,#02H
   98: 
   99:     /* init USB device */
  100:     USB_Clock_Start();
002BC2 120046            LCALL    USB_Clock_Start
  101:     USB_Init(DRV_USB_VID,
002BC5 9004F1            MOV      DPTR,#?_USB_Init?BYTE+07H
002BC8 7401              MOV      A,#01H
002BCA F0                MOVX     @DPTR,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 88


002BCB A3                INC      DPTR
002BCC 7404              MOV      A,#HIGH aProductStr
002BCE F0                MOVX     @DPTR,A
002BCF A3                INC      DPTR
002BD0 74A6              MOV      A,#LOW aProductStr
002BD2 F0                MOVX     @DPTR,A
002BD3 A3                INC      DPTR
002BD4 7401              MOV      A,#01H
002BD6 F0                MOVX     @DPTR,A
002BD7 A3                INC      DPTR
002BD8 7404              MOV      A,#HIGH aSerialNumberStr
002BDA F0                MOVX     @DPTR,A
002BDB A3                INC      DPTR
002BDC 74C8              MOV      A,#LOW aSerialNumberStr
002BDE F0                MOVX     @DPTR,A
002BDF A3                INC      DPTR
002BE0 74FA              MOV      A,#0FAH
002BE2 F0                MOVX     @DPTR,A
002BE3 A3                INC      DPTR
002BE4 7480              MOV      A,#080H
002BE6 F0                MOVX     @DPTR,A
002BE7 A3                INC      DPTR
002BE8 7401              MOV      A,#01H
002BEA F0                MOVX     @DPTR,A
002BEB A3                INC      DPTR
002BEC E4                CLR      A
002BED F0                MOVX     @DPTR,A
002BEE 7B01              MOV      R3,#01H
002BF0 7A04              MOV      R2,#HIGH aManufacturerStr
002BF2 7984              MOV      R1,#LOW aManufacturerStr
002BF4 7D61              MOV      R5,#061H
002BF6 7CEA              MOV      R4,#0EAH
002BF8 7FC4              MOV      R7,#0C4H
002BFA 7E10              MOV      R6,#010H
002BFC 120E1A            LCALL    _USB_Init
  102:              DRV_USB_PID,
  103:              aManufacturerStr,
  104:              aProductStr,
  105:              aSerialNumberStr,
  106:              0xFA,      /* maximum current: 500mA */
  107:              0x80,      /* bus-powered, remote wakeup is unsupported */
  108:              0x100);    /* device release number 1.00 */
  109: 
  110:     /* the USB_Init() API will auto-enable global interrupt,
  111:      * disable it here, and will be enabled later.
  112:      */
  113:     DRV_INT_GlobalDisableInterrupt();
002BFF C2AF              CLR      EA
  114: }
002C01 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002C02 8F82              MOV      DPL,R7
002C04 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
   70:     if (DRV_INT_IsGlobalInterruptEnable())
002C06 30AF22            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 89


002C09 EF                MOV      A,R7
002C0A 250F              ADD      A,vTickCount+03H
002C0C F53E              MOV      vStopTick+03H,A
002C0E EE                MOV      A,R6
002C0F 350E              ADDC     A,vTickCount+02H
002C11 F53D              MOV      vStopTick+02H,A
002C13 E4                CLR      A
002C14 350D              ADDC     A,vTickCount+01H
002C16 F53C              MOV      vStopTick+01H,A
002C18 E4                CLR      A
002C19 350C              ADDC     A,vTickCount
002C1B F53B              MOV      vStopTick,A
002C1D         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
002C1D AF3E              MOV      R7,vStopTick+03H
002C1F AE3D              MOV      R6,vStopTick+02H
002C21 AD3C              MOV      R5,vStopTick+01H
002C23 AC3B              MOV      R4,vStopTick
002C25 D10E              ACALL    ?L?COM0017
002C27 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
002C29 80F2              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
002C2B         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
002C2B E582              MOV      A,DPL
002C2D 1582              DEC      DPL
002C2F AE83              MOV      R6,DPH
002C31 7002              JNZ      ?C0012?DRV_CPU
002C33 1583              DEC      DPH
002C35         ?C0012?DRV_CPU:
002C35 4E                ORL      A,R6
002C36 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
002C38 7FE8              MOV      R7,#0E8H
002C3A 7E03              MOV      R6,#03H
002C3C 12175E            LCALL    _DRV_CPU_DelayUs
   91:     	}
002C3F 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
002C41         ?C0010?DRV_CPU:
002C41 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
002C42 C0E0              PUSH     ACC
002C44 C0D0              PUSH     PSW
002C46 75D000            MOV      PSW,#00H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 90


002C49 C004              PUSH     AR4
002C4B C005              PUSH     AR5
002C4D C006              PUSH     AR6
002C4F C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
002C51 C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
002C53 AF0F              MOV      R7,vTickCount+03H
002C55 AE0E              MOV      R6,vTickCount+02H
002C57 AD0D              MOV      R5,vTickCount+01H
002C59 AC0C              MOV      R4,vTickCount
002C5B EF                MOV      A,R7
002C5C 2401              ADD      A,#01H
002C5E F50F              MOV      vTickCount+03H,A
002C60 E4                CLR      A
002C61 3E                ADDC     A,R6
002C62 F50E              MOV      vTickCount+02H,A
002C64 E4                CLR      A
002C65 3D                ADDC     A,R5
002C66 F50D              MOV      vTickCount+01H,A
002C68 E4                CLR      A
002C69 3C                ADDC     A,R4
002C6A F50C              MOV      vTickCount,A
   45: }
002C6C D007              POP      AR7
002C6E D006              POP      AR6
002C70 D005              POP      AR5
002C72 D004              POP      AR4
002C74 D0D0              POP      PSW
002C76 D0E0              POP      ACC
002C78 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
  230:     c2m_SetIns(0x1);    /* instruction: write data */
002C79 D243              SETB     bIns0
002C7B C244              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
002C7D C245              CLR      bLength0
002C7F C246              CLR      bLength1
  232:     c2m_SetData(vData);
002C81 8F26              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
002C83 30AF05            JNB      EA,?C0355?DRV_C2M
002C86 C2AF              CLR      EA
002C88 D3                SETB     C
002C89 8001              SJMP     ?C0356?DRV_C2M
002C8B         ?C0355?DRV_C2M:
002C8B C3                CLR      C
002C8C         ?C0356?DRV_C2M:
002C8C D13B              ACALL    ?L?COM0012
002C8E 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 91


002C8F 00                NOP      
002C90 00                NOP      
002C91 00                NOP      
002C92 D1CE              ACALL    ?L?COM001B
002C94 00                NOP      
002C95 00                NOP      
002C96 00                NOP      
002C97 00                NOP      
002C98 D1B1              ACALL    ?L?COM0025
002C9A 00                NOP      
002C9B 00                NOP      
002C9C 00                NOP      
002C9D 00                NOP      
002C9E D297              SETB     IO_DUT_C2M_SCL
  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
002CA0 A245              MOV      C,bLength0
002CA2 92A0              MOV      IO_DUT_C2M_SDA,C
002CA4 C297              CLR      IO_DUT_C2M_SCL
002CA6 00                NOP      
002CA7 00                NOP      
002CA8 00                NOP      
002CA9 00                NOP      
002CAA D297              SETB     IO_DUT_C2M_SCL
002CAC A246              MOV      C,bLength1
002CAE 92A0              MOV      IO_DUT_C2M_SDA,C
002CB0 C297              CLR      IO_DUT_C2M_SCL
002CB2 00                NOP      
002CB3 00                NOP      
002CB4 00                NOP      
002CB5 00                NOP      
002CB6 D297              SETB     IO_DUT_C2M_SCL
  240:     c2m_TxByte();       /* tx address */
002CB8 A230              MOV      C,bC2Bit0
002CBA 92A0              MOV      IO_DUT_C2M_SDA,C
002CBC C297              CLR      IO_DUT_C2M_SCL
002CBE 00                NOP      
002CBF 00                NOP      
002CC0 00                NOP      
002CC1 00                NOP      
002CC2 D297              SETB     IO_DUT_C2M_SCL
002CC4 A231              MOV      C,bC2Bit1
002CC6 92A0              MOV      IO_DUT_C2M_SDA,C
002CC8 C297              CLR      IO_DUT_C2M_SCL
002CCA 00                NOP      
002CCB 00                NOP      
002CCC 00                NOP      
002CCD 00                NOP      
002CCE D297              SETB     IO_DUT_C2M_SCL
002CD0 A232              MOV      C,bC2Bit2
002CD2 92A0              MOV      IO_DUT_C2M_SDA,C
002CD4 C297              CLR      IO_DUT_C2M_SCL
002CD6 00                NOP      
002CD7 00                NOP      
002CD8 00                NOP      
002CD9 00                NOP      
002CDA D297              SETB     IO_DUT_C2M_SCL
002CDC A233              MOV      C,bC2Bit3
002CDE 92A0              MOV      IO_DUT_C2M_SDA,C
002CE0 C297              CLR      IO_DUT_C2M_SCL
002CE2 00                NOP      
002CE3 00                NOP      
002CE4 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 92


002CE5 00                NOP      
002CE6 D297              SETB     IO_DUT_C2M_SCL
002CE8 A234              MOV      C,bC2Bit4
002CEA 92A0              MOV      IO_DUT_C2M_SDA,C
002CEC C297              CLR      IO_DUT_C2M_SCL
002CEE 00                NOP      
002CEF 00                NOP      
002CF0 00                NOP      
002CF1 00                NOP      
002CF2 D297              SETB     IO_DUT_C2M_SCL
002CF4 A235              MOV      C,bC2Bit5
002CF6 92A0              MOV      IO_DUT_C2M_SDA,C
002CF8 C297              CLR      IO_DUT_C2M_SCL
002CFA 00                NOP      
002CFB 00                NOP      
002CFC 00                NOP      
002CFD 00                NOP      
002CFE D297              SETB     IO_DUT_C2M_SCL
002D00 A236              MOV      C,bC2Bit6
002D02 92A0              MOV      IO_DUT_C2M_SDA,C
002D04 C297              CLR      IO_DUT_C2M_SCL
002D06 00                NOP      
002D07 00                NOP      
002D08 00                NOP      
002D09 00                NOP      
002D0A D297              SETB     IO_DUT_C2M_SCL
002D0C A237              MOV      C,bC2Bit7
002D0E 92A0              MOV      IO_DUT_C2M_SDA,C
002D10 C297              CLR      IO_DUT_C2M_SCL
002D12 00                NOP      
002D13 00                NOP      
002D14 00                NOP      
002D15 00                NOP      
002D16 D1BA              ACALL    ?L?COM002D
002D18 00                NOP      
002D19 D297              SETB     IO_DUT_C2M_SCL
002D1B 00                NOP      
002D1C 00                NOP      
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
002D1D 754727            MOV      _timeout,#027H
002D20 754810            MOV      _timeout+01H,#010H
002D23         ?C0557?DRV_C2M:
002D23 00                NOP      
002D24 00                NOP      
002D25 C297              CLR      IO_DUT_C2M_SCL
002D27 00                NOP      
002D28 00                NOP      
002D29 121754            LCALL    ?L?COM0007
002D2C 20300D            JB       bC2Bit0,?C0570?DRV_C2M
002D2F E548              MOV      A,_timeout+01H
002D31 1548              DEC      _timeout+01H
002D33 AE47              MOV      R6,_timeout
002D35 7002              JNZ      ?C1013?DRV_C2M
002D37 1547              DEC      _timeout
002D39         ?C1013?DRV_C2M:
002D39 4E                ORL      A,R6
002D3A 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
002D3C         ?C0570?DRV_C2M:
002D3C C1E0              AJMP     ?L?COM0019
  244: 
  245:     /* unlock globally interrupt */
  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 93




----- FUNCTION ?L?COM0001 (BEGIN) -----
002D3E C283              CLR      IO_DUT_MDIOM_SCL_OEn
002D40 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
002D42 A248              MOV      C,bMdioPreamble
002D44 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D46 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D48 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D4A A248              MOV      C,bMdioPreamble
002D4C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D4E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D50 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D52 A248              MOV      C,bMdioPreamble
002D54 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D56 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D58 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D5A A248              MOV      C,bMdioPreamble
002D5C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D5E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D60 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D62 A248              MOV      C,bMdioPreamble
002D64 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D66 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D68 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D6A A248              MOV      C,bMdioPreamble
002D6C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D6E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D70 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D72 A248              MOV      C,bMdioPreamble
002D74 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D76 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D78 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D7A A248              MOV      C,bMdioPreamble
002D7C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D7E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D80 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D82 A248              MOV      C,bMdioPreamble
002D84 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D86 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D88 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D8A A248              MOV      C,bMdioPreamble
002D8C         ?L?COM0002:
002D8C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D8E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D90 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D92 A248              MOV      C,bMdioPreamble
002D94 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D96 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002D98 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002D9A A248              MOV      C,bMdioPreamble
002D9C D296              SETB     IO_DUT_MDIOM_SCL_OUT
002D9E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DA0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DA2 A248              MOV      C,bMdioPreamble
002DA4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DA6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DA8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DAA A248              MOV      C,bMdioPreamble
002DAC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DAE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DB0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DB2 A248              MOV      C,bMdioPreamble
002DB4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DB6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 94


002DB8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DBA A248              MOV      C,bMdioPreamble
002DBC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DBE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DC0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DC2 A248              MOV      C,bMdioPreamble
002DC4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DC6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DC8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DCA A248              MOV      C,bMdioPreamble
002DCC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DCE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DD0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DD2 A248              MOV      C,bMdioPreamble
002DD4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DD6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DD8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DDA A248              MOV      C,bMdioPreamble
002DDC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002DDE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002DE0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002DE2 A248              MOV      C,bMdioPreamble
002DE4 22                RET      
----- FUNCTION ?L?COM0001 (END) -------


----- FUNCTION ?L?COM003D (BEGIN) -----
002DE5 F583              MOV      DPH,A
002DE7 E4                CLR      A
002DE8 F0                MOVX     @DPTR,A
002DE9 0F                INC      R7
002DEA 0F                INC      R7
002DEB 22                RET      
----- FUNCTION ?L?COM003D (END) -------


----- FUNCTION ?L?COM003E (BEGIN) -----
002DEC EF                MOV      A,R7
002DED C3                CLR      C
002DEE 13                RRC      A
002DEF C3                CLR      C
002DF0 9401              SUBB     A,#01H
002DF2 22                RET      
----- FUNCTION ?L?COM003E (END) -------


----- FUNCTION ?L?COM001C (BEGIN) -----
002DF3 FD                MOV      R5,A
002DF4 E4                CLR      A
002DF5 3439              ADDC     A,#039H
002DF7 8D82              MOV      DPL,R5
002DF9 F583              MOV      DPH,A
002DFB E4                CLR      A
002DFC 93                MOVC     A,@A+DPTR
002DFD F52B              MOV      vData,A
002DFF C3                CLR      C
002E00 9420              SUBB     A,#020H
002E02 22                RET      
----- FUNCTION ?L?COM001C (END) -------


----- FUNCTION ?L?COM0016 (BEGIN) -----
002E03 E0                MOVX     A,@DPTR
002E04 FC                MOV      R4,A
002E05 A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 95


002E06 E0                MOVX     A,@DPTR
002E07 FD                MOV      R5,A
002E08 A3                INC      DPTR
002E09 E0                MOVX     A,@DPTR
002E0A FE                MOV      R6,A
002E0B A3                INC      DPTR
002E0C E0                MOVX     A,@DPTR
002E0D FF                MOV      R7,A
002E0E         ?L?COM0017:
002E0E AB0F              MOV      R3,vTickCount+03H
002E10 AA0E              MOV      R2,vTickCount+02H
002E12 A90D              MOV      R1,vTickCount+01H
002E14 A80C              MOV      R0,vTickCount
002E16 C3                CLR      C
002E17 020891            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0016 (END) -------


----- FUNCTION ?L?COM0037 (BEGIN) -----
002E1A 2480              ADD      A,#080H
002E1C FF                MOV      R7,A
002E1D EE                MOV      A,R6
002E1E 3436              ADDC     A,#036H
002E20 FE                MOV      R6,A
002E21 22                RET      
----- FUNCTION ?L?COM0037 (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
002E22 AF41              MOV      R7,vPID
002E24         ?L?COM002F:
002E24 EF                MOV      A,R7
002E25 33                RLC      A
002E26 95E0              SUBB     A,ACC
002E28 FE                MOV      R6,A
002E29 EF                MOV      A,R7
002E2A 7807              MOV      R0,#07H
002E2C 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM0033 (BEGIN) -----
002E2D FF                MOV      R7,A
002E2E E4                CLR      A
002E2F 350E              ADDC     A,vTickCount+02H
002E31 FE                MOV      R6,A
002E32 E4                CLR      A
002E33 350D              ADDC     A,vTickCount+01H
002E35 FD                MOV      R5,A
002E36 E4                CLR      A
002E37 350C              ADDC     A,vTickCount
002E39 FC                MOV      R4,A
002E3A 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
002E3B 9239              MOV      bIntState,C
002E3D 53A6FE            ANL      P2MDOUT,#0FEH
002E40 43A580            ORL      P1MDOUT,#080H
002E43         ?L?COM0013:
002E43 A241              MOV      C,bHigh
002E45 92A0              MOV      IO_DUT_C2M_SDA,C
002E47 C297              CLR      IO_DUT_C2M_SCL
002E49 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 96


----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
002E4A F583              MOV      DPH,A
002E4C 7401              MOV      A,#01H
002E4E 93                MOVC     A,@A+DPTR
002E4F FA                MOV      R2,A
002E50 7402              MOV      A,#02H
002E52 93                MOVC     A,@A+DPTR
002E53 F9                MOV      R1,A
002E54 120951            LCALL    ?C?ICALL
002E57 052A              INC      i
002E59 E52A              MOV      A,i
002E5B C3                CLR      C
002E5C 9403              SUBB     A,#03H
002E5E 22                RET      
----- FUNCTION ?L?COM0021 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
002E5F E53A              MOV      A,vWriteLen+01H
002E61 2534              ADD      A,pBuf+01H
002E63 F534              MOV      pBuf+01H,A
002E65 E539              MOV      A,vWriteLen
002E67 3533              ADDC     A,pBuf
002E69 F533              MOV      pBuf,A
002E6B E53A              MOV      A,vWriteLen+01H
002E6D 2536              ADD      A,vAddr+01H
002E6F F536              MOV      vAddr+01H,A
002E71 E539              MOV      A,vWriteLen
002E73 3535              ADDC     A,vAddr
002E75 F535              MOV      vAddr,A
002E77 C3                CLR      C
002E78 E538              MOV      A,vLen+01H
002E7A 953A              SUBB     A,vWriteLen+01H
002E7C F538              MOV      vLen+01H,A
002E7E E537              MOV      A,vLen
002E80 9539              SUBB     A,vWriteLen
002E82 F537              MOV      vLen,A
002E84 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM000D (BEGIN) -----
002E85 7B4C              MOV      R3,#LOW vFrame+0CH
002E87 7A00              MOV      R2,#HIGH vFrame+0CH
002E89 EB                MOV      A,R3
002E8A 2406              ADD      A,#06H
002E8C F534              MOV      pBuf+01H,A
002E8E E4                CLR      A
002E8F 3A                ADDC     A,R2
002E90 F533              MOV      pBuf,A
002E92 8B82              MOV      DPL,R3
002E94 8A83              MOV      DPH,R2
002E96 A3                INC      DPTR
002E97 A3                INC      DPTR
002E98 E0                MOVX     A,@DPTR
002E99 FE                MOV      R6,A
002E9A A3                INC      DPTR
002E9B E0                MOVX     A,@DPTR
002E9C 8E35              MOV      vAddr,R6
002E9E F536              MOV      vAddr+01H,A
002EA0 EB                MOV      A,R3
002EA1 2404              ADD      A,#04H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 97


002EA3 F582              MOV      DPL,A
002EA5 E4                CLR      A
002EA6 3A                ADDC     A,R2
002EA7 F583              MOV      DPH,A
002EA9         ?L?COM000E:
002EA9 E0                MOVX     A,@DPTR
002EAA F537              MOV      vLen,A
002EAC A3                INC      DPTR
002EAD E0                MOVX     A,@DPTR
002EAE F538              MOV      vLen+01H,A
002EB0 22                RET      
----- FUNCTION ?L?COM000D (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
002EB1 D297              SETB     IO_DUT_C2M_SCL
002EB3 A244              MOV      C,bIns1
002EB5 92A0              MOV      IO_DUT_C2M_SDA,C
002EB7 C297              CLR      IO_DUT_C2M_SCL
002EB9 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
002EBA D297              SETB     IO_DUT_C2M_SCL
002EBC 53A6FE            ANL      P2MDOUT,#0FEH
002EBF D2A0              SETB     IO_DUT_C2M_SDA
002EC1 C297              CLR      IO_DUT_C2M_SCL
002EC3 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM003F (BEGIN) -----
002EC4 F583              MOV      DPH,A
002EC6 E4                CLR      A
002EC7 93                MOVC     A,@A+DPTR
002EC8 FF                MOV      R7,A
002EC9 E515              MOV      A,vCfgPwdLevel
002ECB C3                CLR      C
002ECC 9F                SUBB     A,R7
002ECD 22                RET      
----- FUNCTION ?L?COM003F (END) -------


----- FUNCTION ?L?COM001B (BEGIN) -----
002ECE D297              SETB     IO_DUT_C2M_SCL
002ED0 43A601            ORL      P2MDOUT,#01H
002ED3 A243              MOV      C,bIns0
002ED5 92A0              MOV      IO_DUT_C2M_SDA,C
002ED7 C297              CLR      IO_DUT_C2M_SCL
002ED9 22                RET      
----- FUNCTION ?L?COM001B (END) -------


----- FUNCTION ?L?COM0018 (BEGIN) -----
002EDA A2A0              MOV      C,IO_DUT_C2M_SDA
002EDC D297              SETB     IO_DUT_C2M_SCL
002EDE 9237              MOV      bC2Bit7,C
002EE0         ?L?COM0019:
002EE0 53A6FE            ANL      P2MDOUT,#0FEH
002EE3         ?L?COM001A:
002EE3 53A57F            ANL      P1MDOUT,#07FH
002EE6 A239              MOV      C,bIntState
002EE8 92AF              MOV      EA,C
002EEA 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 98


----- FUNCTION ?L?COM0018 (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
002EEB D296              SETB     IO_DUT_MDIOM_SCL_OUT
002EED 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002EEF C296              CLR      IO_DUT_MDIOM_SCL_OUT
002EF1 A20F              MOV      C,bMdioStartFrame1
002EF3 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002EF5 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002EF7 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002EF9 A20E              MOV      C,bMdioStartFrame0
002EFB D296              SETB     IO_DUT_MDIOM_SCL_OUT
002EFD 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002EFF C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F01 A20D              MOV      C,bMdioOperationCode1
002F03 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F05 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F07 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F09 A20C              MOV      C,bMdioOperationCode0
002F0B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F0D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F0F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F11 A20B              MOV      C,bMdioPortAddr4
002F13 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F15 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F17 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F19 A20A              MOV      C,bMdioPortAddr3
002F1B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F1D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F1F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F21 A209              MOV      C,bMdioPortAddr2
002F23 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F25 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F27 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F29 A208              MOV      C,bMdioPortAddr1
002F2B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F2D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F2F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F31 A207              MOV      C,bMdioPortAddr0
002F33 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F35 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F37 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F39 A206              MOV      C,bMdioDeviceAddr4
002F3B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F3D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F3F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F41 A205              MOV      C,bMdioDeviceAddr3
002F43 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F45 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F47 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F49 A204              MOV      C,bMdioDeviceAddr2
002F4B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F4D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F4F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F51 A203              MOV      C,bMdioDeviceAddr1
002F53 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F55 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F57 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F59 A202              MOV      C,bMdioDeviceAddr0
002F5B         ?L?COM0004:
002F5B D296              SETB     IO_DUT_MDIOM_SCL_OUT
002F5D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002F5F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002F61 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 99


----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
002F62 C20C              CLR      bMdioOperationCode0
002F64         ?L?COM0006:
002F64 EF                MOV      A,R7
002F65 C4                SWAP     A
002F66 540F              ANL      A,#0FH
002F68 13                RRC      A
002F69 920B              MOV      bMdioPortAddr4,C
002F6B EF                MOV      A,R7
002F6C 13                RRC      A
002F6D 13                RRC      A
002F6E 13                RRC      A
002F6F 541F              ANL      A,#01FH
002F71 13                RRC      A
002F72 920A              MOV      bMdioPortAddr3,C
002F74 EF                MOV      A,R7
002F75 13                RRC      A
002F76 13                RRC      A
002F77 543F              ANL      A,#03FH
002F79 13                RRC      A
002F7A 9209              MOV      bMdioPortAddr2,C
002F7C EF                MOV      A,R7
002F7D C3                CLR      C
002F7E 13                RRC      A
002F7F 13                RRC      A
002F80 9208              MOV      bMdioPortAddr1,C
002F82 EF                MOV      A,R7
002F83 13                RRC      A
002F84 9207              MOV      bMdioPortAddr0,C
002F86 ED                MOV      A,R5
002F87 C4                SWAP     A
002F88 540F              ANL      A,#0FH
002F8A 13                RRC      A
002F8B 9206              MOV      bMdioDeviceAddr4,C
002F8D ED                MOV      A,R5
002F8E 13                RRC      A
002F8F 13                RRC      A
002F90 13                RRC      A
002F91 541F              ANL      A,#01FH
002F93 13                RRC      A
002F94 9205              MOV      bMdioDeviceAddr3,C
002F96 ED                MOV      A,R5
002F97 13                RRC      A
002F98 13                RRC      A
002F99 543F              ANL      A,#03FH
002F9B 13                RRC      A
002F9C 9204              MOV      bMdioDeviceAddr2,C
002F9E ED                MOV      A,R5
002F9F C3                CLR      C
002FA0 13                RRC      A
002FA1 13                RRC      A
002FA2 9203              MOV      bMdioDeviceAddr1,C
002FA4 ED                MOV      A,R5
002FA5 13                RRC      A
002FA6 9202              MOV      bMdioDeviceAddr0,C
002FA8 D201              SETB     bMdioTurnAround1
002FAA 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
002FAB 7841              MOV      R0,#LOW _timeout
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 100


002FAD         ?L?COM000A:
002FAD 74FF              MOV      A,#0FFH
002FAF 1208B4            LCALL    ?C?LLDIIDATA8
002FB2 EC                MOV      A,R4
002FB3 4D                ORL      A,R5
002FB4 4E                ORL      A,R6
002FB5 4F                ORL      A,R7
002FB6 22                RET      
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
002FB7 753300            MOV      pPayload,#HIGH vFrame+0CH
002FBA 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
002FBD 853482            MOV      DPL,pPayload+01H
002FC0 853383            MOV      DPH,pPayload
002FC3 E0                MOVX     A,@DPTR
002FC4 FF                MOV      R7,A
002FC5 A3                INC      DPTR
002FC6 E0                MOVX     A,@DPTR
002FC7 FD                MOV      R5,A
002FC8 853482            MOV      DPL,pPayload+01H
002FCB 853383            MOV      DPH,pPayload
002FCE A3                INC      DPTR
002FCF A3                INC      DPTR
002FD0 E0                MOVX     A,@DPTR
002FD1 FA                MOV      R2,A
002FD2 A3                INC      DPTR
002FD3 E0                MOVX     A,@DPTR
002FD4 FB                MOV      R3,A
002FD5 E534              MOV      A,pPayload+01H
002FD7 2404              ADD      A,#04H
002FD9 F582              MOV      DPL,A
002FDB E4                CLR      A
002FDC 3533              ADDC     A,pPayload
002FDE F583              MOV      DPH,A
002FE0 E0                MOVX     A,@DPTR
002FE1 F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
002FE3 A3                INC      DPTR
002FE4 E0                MOVX     A,@DPTR
002FE5 F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
002FE7 E534              MOV      A,pPayload+01H
002FE9 2406              ADD      A,#06H
002FEB F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
002FED E4                CLR      A
002FEE 3533              ADDC     A,pPayload
002FF0 F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
002FF2 22                RET      
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000C (BEGIN) -----
002FF3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FF5 A280              MOV      C,IO_DUT_MDIOM_SDA_IN
002FF7 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FF9 22                RET      
----- FUNCTION ?L?COM000C (END) -------


----- FUNCTION ?L?COM000F (BEGIN) -----
002FFA 12177E            LCALL    _drv_c2m_WriteData
002FFD AF03              MOV      R7,AR3
002FFF         ?L?COM0010:
002FFF 12177E            LCALL    _drv_c2m_WriteData
003002         ?L?COM0011:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 101


003002 E4                CLR      A
003003 754410            MOV      _timeout+03H,#010H
003006 754327            MOV      _timeout+02H,#027H
003009 F542              MOV      _timeout+01H,A
00300B F541              MOV      _timeout,A
00300D 22                RET      
----- FUNCTION ?L?COM000F (END) -------


----- FUNCTION ?L?COM0015 (BEGIN) -----
00300E E538              MOV      A,vWriteLen+01H
003010 253C              ADD      A,vLoop+01H
003012 FD                MOV      R5,A
003013 E537              MOV      A,vWriteLen
003015 353B              ADDC     A,vLoop
003017 FC                MOV      R4,A
003018 E536              MOV      A,pPayload+01H
00301A 2405              ADD      A,#05H
00301C F582              MOV      DPL,A
00301E E4                CLR      A
00301F 3535              ADDC     A,pPayload
003021 F583              MOV      DPH,A
003023 E582              MOV      A,DPL
003025 2D                ADD      A,R5
003026 F582              MOV      DPL,A
003028 E583              MOV      A,DPH
00302A 3C                ADDC     A,R4
00302B F583              MOV      DPH,A
00302D EF                MOV      A,R7
00302E F0                MOVX     @DPTR,A
00302F 053C              INC      vLoop+01H
003031 E53C              MOV      A,vLoop+01H
003033 22                RET      
----- FUNCTION ?L?COM0015 (END) -------


----- FUNCTION ?L?COM001D (BEGIN) -----
003034 12177E            LCALL    _drv_c2m_WriteData
003037 E4                CLR      A
003038 753610            MOV      _timeout+03H,#010H
00303B 753527            MOV      _timeout+02H,#027H
00303E F534              MOV      _timeout+01H,A
003040 F533              MOV      _timeout,A
003042 22                RET      
----- FUNCTION ?L?COM001D (END) -------


----- FUNCTION ?L?COM001E (BEGIN) -----
003043 43A580            ORL      P1MDOUT,#080H
003046 C297              CLR      IO_DUT_C2M_SCL
003048 7F14              MOV      R7,#014H
00304A 7E00              MOV      R6,#00H
00304C 12175E            LCALL    _DRV_CPU_DelayUs
00304F D297              SETB     IO_DUT_C2M_SCL
003051 7F02              MOV      R7,#02H
003053 7E00              MOV      R6,#00H
003055 12175E            LCALL    _DRV_CPU_DelayUs
003058 53A57F            ANL      P1MDOUT,#07FH
00305B 22                RET      
----- FUNCTION ?L?COM001E (END) -------


----- FUNCTION ?L?COM001F (BEGIN) -----
00305C 122488            LCALL    c2m_ReadDR
00305F EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 102


003060 640D              XRL      A,#0DH
003062 22                RET      
----- FUNCTION ?L?COM001F (END) -------


----- FUNCTION ?L?COM0020 (BEGIN) -----
003063 E540              MOV      A,pBuf+01H
003065 2542              ADD      A,vLoop
003067 F582              MOV      DPL,A
003069 E4                CLR      A
00306A 353F              ADDC     A,pBuf
00306C F583              MOV      DPH,A
00306E E0                MOVX     A,@DPTR
00306F 22                RET      
----- FUNCTION ?L?COM0020 (END) -------


----- FUNCTION ?L?COM0022 (BEGIN) -----
003070 E4                CLR      A
003071 90004A            MOV      DPTR,#vFrame+0AH
003074 F0                MOVX     @DPTR,A
003075 A3                INC      DPTR
003076 F0                MOVX     @DPTR,A
003077 22                RET      
----- FUNCTION ?L?COM0022 (END) -------


----- FUNCTION ?L?COM0023 (BEGIN) -----
003078 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00307A D294              SETB     IO_DUT_MDIOM_SDA_OUT
00307C D283              SETB     IO_DUT_MDIOM_SCL_OEn
00307E D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
003080 22                RET      
----- FUNCTION ?L?COM0023 (END) -------


----- FUNCTION ?L?COM0024 (BEGIN) -----
003081 E540              MOV      A,vLen+01H
003083 1540              DEC      vLen+01H
003085 AE3F              MOV      R6,vLen
003087 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
003088 D282              SETB     IO_DUT_I2CM_SCL
00308A 753F01            MOV      _loop,#01H
00308D 7540F4            MOV      _loop+01H,#0F4H
003090 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
003091 7E04              MOV      R6,#04H
003093 7F44              MOV      R7,#044H
003095 7D00              MOV      R5,#00H
003097         ?L?COM0028:
003097 7B01              MOV      R3,#01H
003099 7A00              MOV      R2,#HIGH vFrame
00309B 7940              MOV      R1,#LOW vFrame
00309D 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION ?L?COM0029 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 103


00309E 92AF              MOV      EA,C
0030A0         ?L?COM002A:
0030A0 E524              MOV      A,vMdioData
0030A2 F0                MOVX     @DPTR,A
0030A3 A3                INC      DPTR
0030A4 E525              MOV      A,vMdioData+01H
0030A6 F0                MOVX     @DPTR,A
0030A7 A200              MOV      C,bMdioTurnAround0
0030A9 22                RET      
----- FUNCTION ?L?COM0029 (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
0030AA 7E38              MOV      R6,#038H
0030AC 121FCC            LCALL    _CFG_ROM_GET32
0030AF AB47              MOV      R3,vPasswd+03H
0030B1 AA46              MOV      R2,vPasswd+02H
0030B3 A945              MOV      R1,vPasswd+01H
0030B5 A844              MOV      R0,vPasswd
0030B7 C3                CLR      C
0030B8 020891            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
0030BB 853482            MOV      DPL,pPayload+01H
0030BE 853383            MOV      DPH,pPayload
0030C1 A3                INC      DPTR
0030C2 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
0030C3 8F82              MOV      DPL,R7
0030C5 8E83              MOV      DPH,R6
0030C7 A3                INC      DPTR
0030C8 A3                INC      DPTR
0030C9 A3                INC      DPTR
0030CA E0                MOVX     A,@DPTR
0030CB F539              MOV      vReadLen,A
0030CD A3                INC      DPTR
0030CE E0                MOVX     A,@DPTR
0030CF F53A              MOV      vReadLen+01H,A
0030D1 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
0030D2 12177E            LCALL    _drv_c2m_WriteData
0030D5 E4                CLR      A
0030D6 753A10            MOV      _timeout+03H,#010H
0030D9 753927            MOV      _timeout+02H,#027H
0030DC F538              MOV      _timeout+01H,A
0030DE F537              MOV      _timeout,A
0030E0 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
0030E1 E9                MOV      A,R1
0030E2 FD                MOV      R5,A
0030E3 7C00              MOV      R4,#00H
0030E5 AE47              MOV      R6,pBuf
0030E7 AF48              MOV      R7,pBuf+01H
0030E9 AB07              MOV      R3,AR7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 104


0030EB AA06              MOV      R2,AR6
0030ED C238              CLR      ?_drv_flash_WriteBytes?BIT
0030EF 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
0030F0 D282              SETB     IO_DUT_I2CM_SCL
0030F2 753D01            MOV      _loop,#01H
0030F5 753EF4            MOV      _loop+01H,#0F4H
0030F8 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0035 (BEGIN) -----
0030F9 D282              SETB     IO_DUT_I2CM_SCL
0030FB 754001            MOV      _loop,#01H
0030FE 7541F4            MOV      _loop+01H,#0F4H
003101 22                RET      
----- FUNCTION ?L?COM0035 (END) -------


----- FUNCTION ?L?COM0038 (BEGIN) -----
003102 D3                SETB     C
003103 E541              MOV      A,vPID
003105 6480              XRL      A,#080H
003107 9482              SUBB     A,#082H
003109 22                RET      
----- FUNCTION ?L?COM0038 (END) -------


----- FUNCTION ?L?COM0039 (BEGIN) -----
00310A C3                CLR      C
00310B         ?L?COM003A:
00310B E541              MOV      A,vPID
00310D 6480              XRL      A,#080H
00310F 9481              SUBB     A,#081H
003111 22                RET      
----- FUNCTION ?L?COM0039 (END) -------


----- FUNCTION ?L?COM003B (BEGIN) -----
003112 120262            LCALL    _printf
003115 900048            MOV      DPTR,#vFrame+08H
003118 7403              MOV      A,#03H
00311A F0                MOVX     @DPTR,A
00311B A3                INC      DPTR
00311C 22                RET      
----- FUNCTION ?L?COM003B (END) -------


----- FUNCTION ?L?COM003C (BEGIN) -----
00311D 8E3B              MOV      vAddr,R6
00311F 8F3C              MOV      vAddr+01H,R7
003121 8C3D              MOV      pBuf,R4
003123 8D3E              MOV      pBuf+01H,R5
003125 EB                MOV      A,R3
003126 22                RET      
----- FUNCTION ?L?COM003C (END) -------


----- FUNCTION ?L?COM0040 (BEGIN) -----
003127 C3                CLR      C
003128 E53C              MOV      A,vLoop+01H
00312A 953A              SUBB     A,vReadLen+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 105


00312C E53B              MOV      A,vLoop
00312E 9539              SUBB     A,vReadLen
003130 22                RET      
----- FUNCTION ?L?COM0040 (END) -------


----- FUNCTION ?L?COM0041 (BEGIN) -----
003131 8E35              MOV      pPayload,R6
003133 8F36              MOV      pPayload+01H,R7
003135 8F82              MOV      DPL,R7
003137 8E83              MOV      DPH,R6
003139 A3                INC      DPTR
00313A 22                RET      
----- FUNCTION ?L?COM0041 (END) -------


----- FUNCTION ?L?COM0042 (BEGIN) -----
00313B E53E              MOV      A,_loop+01H
00313D 153E              DEC      _loop+01H
00313F AE3D              MOV      R6,_loop
003141 22                RET      
----- FUNCTION ?L?COM0042 (END) -------


----- FUNCTION ?L?COM0043 (BEGIN) -----
003142 E541              MOV      A,_loop+01H
003144 1541              DEC      _loop+01H
003146 AE40              MOV      R6,_loop
003148 22                RET      
----- FUNCTION ?L?COM0043 (END) -------


----- FUNCTION ?L?COM0044 (BEGIN) -----
003149 AF16              MOV      R7,vFPDAT
00314B 1223D4            LCALL    _c2m_WriteAR
00314E 7F02              MOV      R7,#02H
003150 22                RET      
----- FUNCTION ?L?COM0044 (END) -------


----- FUNCTION ?L?COM0045 (BEGIN) -----
003151 D3                SETB     C
003152 E541              MOV      A,vPID
003154 6480              XRL      A,#080H
003156 9486              SUBB     A,#086H
003158 22                RET      
----- FUNCTION ?L?COM0045 (END) -------


----- FUNCTION ?L?COM0046 (BEGIN) -----
003159 C3                CLR      C
00315A E541              MOV      A,vPID
00315C 6480              XRL      A,#080H
00315E 9483              SUBB     A,#083H
003160 22                RET      
----- FUNCTION ?L?COM0046 (END) -------


----- FUNCTION ?L?COM0047 (BEGIN) -----
003161 853682            MOV      DPL,pPayload+01H
003164 853583            MOV      DPH,pPayload
003167 E0                MOVX     A,@DPTR
003168 22                RET      
----- FUNCTION ?L?COM0047 (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  14:04:18  PAGE 106



----- FUNCTION ?L?COM0048 (BEGIN) -----
003169 7D40              MOV      R5,#040H
00316B 12105F            LCALL    _Block_Read
00316E 8F2E              MOV      vBlockLen,R7
003170 22                RET      
----- FUNCTION ?L?COM0048 (END) -------


