LX51 LINKER/LOCATER V4.66.41.0                                                          06/14/2016  16:27:38  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022F41            LJMP     02F41H
000083 022F78            LJMP     02F78H
----- FUNCTION CFG_Init (BEGIN) -----
 FILE: '..\cfg\cfg.c'
   37: void CFG_Init(void)
   38: {
   39:     CFG_DB_Init();
   40:     CFG_PWD_Init();
0001DD 0225B3            LJMP     CFG_PWD_Init
----- FUNCTION CFG_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 2


   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
00162C 74FF              MOV      A,#0FFH
00162E F531              MOV      vCRC,A
001630 F532              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
001632 E4                CLR      A
001633 FD                MOV      R5,A
001634 FC                MOV      R4,A
001635         ?C0001?THREAD_PKT:
001635 D3                SETB     C
001636 900045            MOV      DPTR,#vFrame+05H
001639 E0                MOVX     A,@DPTR
00163A 9D                SUBB     A,R5
00163B 900044            MOV      DPTR,#vFrame+04H
00163E E0                MOVX     A,@DPTR
00163F 9C                SUBB     A,R4
001640 4031              JC       ?C0002?THREAD_PKT
   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
001642 E531              MOV      A,vCRC
001644 FF                MOV      R7,A
001645 7448              MOV      A,#LOW vFrame+08H
001647 2D                ADD      A,R5
001648 F582              MOV      DPL,A
00164A 7400              MOV      A,#HIGH vFrame+08H
00164C 3C                ADDC     A,R4
00164D F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 3


00164F E0                MOVX     A,@DPTR
001650 6F                XRL      A,R7
001651 75F002            MOV      B,#02H
001654 A4                MUL      AB
001655 242A              ADD      A,#LOW aCRC16
001657 F582              MOV      DPL,A
001659 E5F0              MOV      A,B
00165B 3409              ADDC     A,#HIGH aCRC16
00165D F583              MOV      DPH,A
00165F E532              MOV      A,vCRC+01H
001661 FE                MOV      R6,A
001662 E4                CLR      A
001663 93                MOVC     A,@A+DPTR
001664 6E                XRL      A,R6
001665 F531              MOV      vCRC,A
001667 7401              MOV      A,#01H
001669 93                MOVC     A,@A+DPTR
00166A F532              MOV      vCRC+01H,A
   82:     }
00166C 0D                INC      R5
00166D BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
001670 0C                INC      R4
001671         ?C0066?THREAD_PKT:
001671 80C2              SJMP     ?C0001?THREAD_PKT
001673         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
001673 AE31              MOV      R6,vCRC
001675 AF32              MOV      R7,vCRC+01H
   85: }
001677 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
001678 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
00167B 1234DC            LCALL    ?L?COM0032
00167E 1207F3            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
001681 C247              CLR      bFlushFIFO
  242:     }
001683 22                RET      
001684         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
001684 90004B            MOV      DPTR,#vFrame+0BH
001687 E0                MOVX     A,@DPTR
001688 2404              ADD      A,#04H
00168A FE                MOV      R6,A
00168B 90004A            MOV      DPTR,#vFrame+0AH
00168E E0                MOVX     A,@DPTR
00168F 3400              ADDC     A,#00H
001691 900044            MOV      DPTR,#vFrame+04H
001694 F0                MOVX     @DPTR,A
001695 A3                INC      DPTR
001696 CE                XCH      A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 4


001697 F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
001698 D12C              ACALL    _thread_pkt_CalcCRC
00169A 900046            MOV      DPTR,#vFrame+06H
00169D EE                MOV      A,R6
00169E F0                MOVX     @DPTR,A
00169F A3                INC      DPTR
0016A0 EF                MOV      A,R7
0016A1 F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
0016A2 C238              CLR      ?_thread_pkt_Dump?BIT
0016A4 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0016A7 1234E2            LCALL    ?L?COM0033
0016AA 900045            MOV      DPTR,#vFrame+05H
0016AD E0                MOVX     A,@DPTR
0016AE 2408              ADD      A,#08H
0016B0 FD                MOV      R5,A
0016B1 900044            MOV      DPTR,#vFrame+04H
0016B4 E0                MOVX     A,@DPTR
0016B5 3400              ADDC     A,#00H
0016B7 FC                MOV      R4,A
0016B8 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
0016BB 1234DC            LCALL    ?L?COM0032
0016BE 1207F3            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
0016C1 1234E2            LCALL    ?L?COM0033
0016C4 1235C8            LCALL    ?L?COM0060
  141:     if (bFlushFIFO)
0016C7 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
0016CA 7BFF              MOV      R3,#0FFH
0016CC 7A08              MOV      R2,#HIGH 01000867H
0016CE 7967              MOV      R1,#LOW 01000867H
0016D0 120262            LCALL    _printf
  145:         return FALSE;
0016D3 C3                CLR      C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 5


0016D4 22                RET      
  146:     }
0016D5         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
0016D5 C3                CLR      C
0016D6 E52E              MOV      A,vBlockLen
0016D8 9408              SUBB     A,#08H
0016DA E4                CLR      A
0016DB 9400              SUBB     A,#00H
0016DD 400E              JC       ?C0013?THREAD_PKT
0016DF 900040            MOV      DPTR,#vFrame
0016E2 E0                MOVX     A,@DPTR
0016E3 6443              XRL      A,#043H
0016E5 7004              JNZ      ?C0067?THREAD_PKT
0016E7 A3                INC      DPTR
0016E8 E0                MOVX     A,@DPTR
0016E9 644C              XRL      A,#04CH
0016EB         ?C0067?THREAD_PKT:
0016EB 601A              JZ       ?C0012?THREAD_PKT
0016ED         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
0016ED 7BFF              MOV      R3,#0FFH
0016EF 7A08              MOV      R2,#HIGH 01000874H
0016F1 7974              MOV      R1,#LOW 01000874H
0016F3 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
0016F6 900040            MOV      DPTR,#vFrame
0016F9 E0                MOVX     A,@DPTR
0016FA F535              MOV      ?_printf?BYTE+04H,A
0016FC A3                INC      DPTR
0016FD E0                MOVX     A,@DPTR
0016FE F536              MOV      ?_printf?BYTE+05H,A
001700 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
001703 D247              SETB     bFlushFIFO
  152:         return FALSE;
001705 C3                CLR      C
001706 22                RET      
  153:     }
001707         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
001707 900042            MOV      DPTR,#vFrame+02H
00170A E0                MOVX     A,@DPTR
00170B 7004              JNZ      ?C0068?THREAD_PKT
00170D A3                INC      DPTR
00170E E0                MOVX     A,@DPTR
00170F 6401              XRL      A,#01H
001711         ?C0068?THREAD_PKT:
001711 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
001713 7BFF              MOV      R3,#0FFH
001715 7A08              MOV      R2,#HIGH 010008A4H
001717 79A4              MOV      R1,#LOW 010008A4H
001719 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
00171C 900042            MOV      DPTR,#vFrame+02H
00171F E4                CLR      A
001720 F0                MOVX     @DPTR,A
001721 A3                INC      DPTR
001722 04                INC      A
001723 F0                MOVX     @DPTR,A
  159:         return FALSE;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 6


001724 C3                CLR      C
001725 22                RET      
  160:     }
001726         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
001726 E52E              MOV      A,vBlockLen
001728 24F8              ADD      A,#0F8H
00172A F52D              MOV      vRxTotalLen+01H,A
00172C E4                CLR      A
00172D 34FF              ADDC     A,#0FFH
00172F F52C              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
001731 E4                CLR      A
001732 F52F              MOV      vElaspedTime,A
001734 F530              MOV      vElaspedTime+01H,A
001736         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
001736 D3                SETB     C
001737 900045            MOV      DPTR,#vFrame+05H
00173A E0                MOVX     A,@DPTR
00173B 952D              SUBB     A,vRxTotalLen+01H
00173D 900044            MOV      DPTR,#vFrame+04H
001740 E0                MOVX     A,@DPTR
001741 952C              SUBB     A,vRxTotalLen
001743 4048              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
001745 7448              MOV      A,#LOW vFrame+08H
001747 252D              ADD      A,vRxTotalLen+01H
001749 F9                MOV      R1,A
00174A 7400              MOV      A,#HIGH vFrame+08H
00174C 352C              ADDC     A,vRxTotalLen
00174E FA                MOV      R2,A
00174F 7B01              MOV      R3,#01H
001751 1235C8            LCALL    ?L?COM0060
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
001754 E52E              MOV      A,vBlockLen
001756 7028              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
001758 7F01              MOV      R7,#01H
00175A FE                MOV      R6,A
00175B 121AD9            LCALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
00175E 0530              INC      vElaspedTime+01H
001760 E530              MOV      A,vElaspedTime+01H
001762 7002              JNZ      ?C0069?THREAD_PKT
001764 052F              INC      vElaspedTime
001766         ?C0069?THREAD_PKT:
001766 FF                MOV      R7,A
001767 AE2F              MOV      R6,vElaspedTime
001769 E4                CLR      A
00176A FC                MOV      R4,A
00176B FD                MOV      R5,A
00176C 7B50              MOV      R3,#050H
00176E 7AC3              MOV      R2,#0C3H
001770 F9                MOV      R1,A
001771 F8                MOV      R0,A
001772 D3                SETB     C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 7


001773 120607            LCALL    ?C?SLCMP
001776 50BE              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
001778 7BFF              MOV      R3,#0FFH
00177A 7A08              MOV      R2,#HIGH 010008BCH
00177C 79BC              MOV      R1,#LOW 010008BCH
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
00177E 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
001780         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
001780 E52E              MOV      A,vBlockLen
001782 252D              ADD      A,vRxTotalLen+01H
001784 F52D              MOV      vRxTotalLen+01H,A
001786 E4                CLR      A
001787 352C              ADDC     A,vRxTotalLen
001789 F52C              MOV      vRxTotalLen,A
  187:     }
00178B 80A9              SJMP     ?C0015?THREAD_PKT
00178D         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
00178D 900044            MOV      DPTR,#vFrame+04H
001790 E0                MOVX     A,@DPTR
001791 652C              XRL      A,vRxTotalLen
001793 7004              JNZ      ?C0070?THREAD_PKT
001795 A3                INC      DPTR
001796 E0                MOVX     A,@DPTR
001797 652D              XRL      A,vRxTotalLen+01H
001799         ?C0070?THREAD_PKT:
001799 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
00179B 7BFF              MOV      R3,#0FFH
00179D 7A08              MOV      R2,#HIGH 010008D0H
00179F 79D0              MOV      R1,#LOW 010008D0H
0017A1         
0017A1 123571            LCALL    ?L?COM0049
0017A4 7401              MOV      A,#01H
0017A6 F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
0017A7 C3                CLR      C
0017A8 22                RET      
  194:     }
0017A9         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
0017A9 D238              SETB     ?_thread_pkt_Dump?BIT
0017AB 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
0017AE D12C              ACALL    _thread_pkt_CalcCRC
0017B0 900046            MOV      DPTR,#vFrame+06H
0017B3 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 8


0017B4 6E                XRL      A,R6
0017B5 7003              JNZ      ?C0071?THREAD_PKT
0017B7 A3                INC      DPTR
0017B8 E0                MOVX     A,@DPTR
0017B9 6F                XRL      A,R7
0017BA         ?C0071?THREAD_PKT:
0017BA 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
0017BC 7BFF              MOV      R3,#0FFH
0017BE 7A08              MOV      R2,#HIGH 010008E8H
0017C0 79E8              MOV      R1,#LOW 010008E8H
0017C2 123571            LCALL    ?L?COM0049
0017C5 14                DEC      A
0017C6 F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
0017C7 C3                CLR      C
0017C8 22                RET      
  206:     }
0017C9         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
0017C9 D3                SETB     C
  209: }
0017CA 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0017CB EF                MOV      A,R7
0017CC 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017CF 0509              INC      vSCB_RxPkt+01H
0017D1 E509              MOV      A,vSCB_RxPkt+01H
0017D3 7002              JNZ      ?C0073?THREAD_PKT
0017D5 0508              INC      vSCB_RxPkt
0017D7         ?C0073?THREAD_PKT:
  284: 	}
0017D7         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0017D7 EF                MOV      A,R7
0017D8 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017DB 0509              INC      vSCB_RxPkt+01H
0017DD E509              MOV      A,vSCB_RxPkt+01H
0017DF 7002              JNZ      ?C0074?THREAD_PKT
0017E1 0508              INC      vSCB_RxPkt
0017E3         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0017E3 D247              SETB     bFlushFIFO
  291: 	}
  292: }
0017E5         ?C0047?THREAD_PKT:
0017E5 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 9


----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017E6 E4                CLR      A
0017E7 F50A              MOV      vTCB_Pkt,A
0017E9 F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017EB F508              MOV      vSCB_RxPkt,A
0017ED F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017EF 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
0017F0 121ED4            LCALL    _c2m_WriteAR
  355: }
0017F3 021D46            LJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION _CFG_RAM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   71: 
   72:             default:
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0017F6 A807              MOV      R0,AR7
0017F8 E2                MOVX     A,@R0
0017F9 FE                MOV      R6,A
0017FA 08                INC      R0
0017FB E2                MOVX     A,@R0
0017FC FF                MOV      R7,A
0017FD 22                RET      
----- FUNCTION _CFG_RAM_GET16 (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900048            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 10


00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24F6              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3408              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24F8              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3408              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 120704            LCALL    ?C?ICALL
  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 940D              SUBB     A,#0DH
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900048            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 11


  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 12069D            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 1216BB            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 12


0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 121678            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  127: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  128: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018B9 AD07              MOV      R5,AR7
  129:     UINT8   vLoop;
  130:     BOOL    vAck;
  131: 
  132:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018BB 7B08              MOV      R3,#08H
0018BD         ?C0001?PKT_I2CM:
  133:     {
  134:         /* transmitting data, MSB first, LSB last */
  135:         CROL(vData, 1);
0018BD 7801              MOV      R0,#01H
0018BF AF05              MOV      R7,AR5
0018C1 EF                MOV      A,R7
0018C2 08                INC      R0
0018C3 8001              SJMP     ?C0659?PKT_I2CM
0018C5         ?C0658?PKT_I2CM:
0018C5 23                RL       A
0018C6         ?C0659?PKT_I2CM:
0018C6 D8FD              DJNZ     R0,?C0658?PKT_I2CM
0018C8 FD                MOV      R5,A
  136:         PKT_I2CM_SET_SDA(vData & 0x1);
0018C9 13                RRC      A
0018CA 9292              MOV      IO_DUT_I2CM_SDA,C
  137: 
  138:         PKT_I2CM_SET_SCL(HIGH);
0018CC 00                NOP      
0018CD 00                NOP      
0018CE 00                NOP      
0018CF 00                NOP      
0018D0 00                NOP      
0018D1 00                NOP      
0018D2 00                NOP      
0018D3 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 13


0018D4 00                NOP      
0018D5 00                NOP      
0018D6 00                NOP      
0018D7 00                NOP      
0018D8 00                NOP      
0018D9 00                NOP      
0018DA 1234D3            LCALL    ?L?COM0031
0018DD         ?C0032?PKT_I2CM:
0018DD 20820E            JB       IO_DUT_I2CM_SCL,?C0042?PKT_I2CM
0018E0 1234CC            LCALL    ?L?COM002F
0018E3 7002              JNZ      ?C0660?PKT_I2CM
0018E5 153F              DEC      _loop
0018E7         ?C0660?PKT_I2CM:
0018E7 4E                ORL      A,R6
0018E8 6004              JZ       ?C0042?PKT_I2CM
0018EA 51D5              ACALL    ?L?COM0008
0018EC 80EF              SJMP     ?C0032?PKT_I2CM
  139:         PKT_I2CM_SET_SCL(LOW);
0018EE         ?C0042?PKT_I2CM:
0018EE 00                NOP      
0018EF 00                NOP      
0018F0 00                NOP      
0018F1 00                NOP      
0018F2 00                NOP      
0018F3 00                NOP      
0018F4 00                NOP      
0018F5 00                NOP      
0018F6 00                NOP      
0018F7 00                NOP      
0018F8 00                NOP      
0018F9 00                NOP      
0018FA 00                NOP      
0018FB 00                NOP      
0018FC C282              CLR      IO_DUT_I2CM_SCL
0018FE 8000              SJMP     ?C0003?PKT_I2CM
  140:     }
001900         ?C0003?PKT_I2CM:
001900 1B                DEC      R3
001901 EB                MOV      A,R3
001902 70B9              JNZ      ?C0001?PKT_I2CM
001904         ?C0060?PKT_I2CM:
  141: 
  142:     /* release SDA */
  143:     PKT_I2CM_SET_SDA(HIGH);
001904 D292              SETB     IO_DUT_I2CM_SDA
  144: 
  145:     /* check ACK */
  146:     PKT_I2CM_SET_SCL(HIGH);
001906 00                NOP      
001907 00                NOP      
001908 00                NOP      
001909 00                NOP      
00190A 00                NOP      
00190B 00                NOP      
00190C 00                NOP      
00190D 00                NOP      
00190E 00                NOP      
00190F 00                NOP      
001910 00                NOP      
001911 00                NOP      
001912 00                NOP      
001913 00                NOP      
001914 1234D3            LCALL    ?L?COM0031
001917         ?C0083?PKT_I2CM:
001917 20820E            JB       IO_DUT_I2CM_SCL,?C0062?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 14


00191A 1234CC            LCALL    ?L?COM002F
00191D 7002              JNZ      ?C0662?PKT_I2CM
00191F 153F              DEC      _loop
001921         ?C0662?PKT_I2CM:
001921 4E                ORL      A,R6
001922 6004              JZ       ?C0062?PKT_I2CM
001924 51D5              ACALL    ?L?COM0008
001926 80EF              SJMP     ?C0083?PKT_I2CM
001928         ?C0062?PKT_I2CM:
  147:     vAck = PKT_I2CM_GET_SDA();
001928 A292              MOV      C,IO_DUT_I2CM_SDA
00192A 923A              MOV      vAck,C
  148:     PKT_I2CM_SET_SCL(LOW);
00192C 00                NOP      
00192D 00                NOP      
00192E 00                NOP      
00192F 00                NOP      
001930 00                NOP      
001931 00                NOP      
001932 00                NOP      
001933 00                NOP      
001934 00                NOP      
001935 00                NOP      
001936 00                NOP      
001937 00                NOP      
001938 00                NOP      
001939 00                NOP      
00193A C282              CLR      IO_DUT_I2CM_SCL
00193C 8000              SJMP     ?C0086?PKT_I2CM
00193E         ?C0086?PKT_I2CM:
  149: 
  150:     return !vAck;
00193E A23A              MOV      C,vAck
001940 B3                CPL      C
  151: }
001941 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  222: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  223: {
001942 123597            LCALL    ?L?COM005A
001945 A3                INC      DPTR
001946 1233DD            LCALL    ?L?COM0010
  224:     UINT16  vWriteLen = pPayload->vWriteLen;
  225:     UINT16  vReadLen  = pPayload->vReadLen;
001949 123502            LCALL    ?L?COM003B
  226:     BOOL    bIntState;
  227:     BOOL    bDone = FALSE;
00194C C239              CLR      bDone
  228:     UINT16  vLoop;
  229: 
  230:     /* make sure the I2C is ready */
  231:     if (!_pkt_i2cm_CheckReady())
00194E 122000            LCALL    _pkt_i2cm_CheckReady
001951 4003              JC       ?C0393?PKT_I2CM
  232:     {
  233:         return bDone;
001953 A239              MOV      C,bDone
001955 22                RET      
  234:     }
001956         ?C0393?PKT_I2CM:
  235: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 15


  236:     /* lock globally interrupt */
  237:     bIntState = DRV_INT_LockGlobalInterrupt();
001956 30AF05            JNB      EA,?C0395?PKT_I2CM
001959 C2AF              CLR      EA
00195B D3                SETB     C
00195C 8001              SJMP     ?C0396?PKT_I2CM
00195E         ?C0395?PKT_I2CM:
00195E C3                CLR      C
00195F         ?C0396?PKT_I2CM:
00195F 9238              MOV      bIntState,C
  238: 
  239:     /* send write stream */
  240:     if ((vWriteLen != 0)
001961 E538              MOV      A,vWriteLen+01H
001963 4537              ORL      A,vWriteLen
001965 7010              JNZ      ?C0404?PKT_I2CM
001967 E538              MOV      A,vWriteLen+01H
001969 4537              ORL      A,vWriteLen
00196B 6002              JZ       $ + 4H
00196D 4105              AJMP     ?C0397?PKT_I2CM
00196F E53A              MOV      A,vReadLen+01H
001971 4539              ORL      A,vReadLen
001973 6002              JZ       $ + 4H
001975 4105              AJMP     ?C0397?PKT_I2CM
  241:         || ((vWriteLen == 0) && (vReadLen == 0)))
  242:     {
  243:         /* send I2C start */
  244:         _pkt_i2cm_Start();
001977         ?C0404?PKT_I2CM:
001977 D292              SETB     IO_DUT_I2CM_SDA
001979 00                NOP      
00197A 00                NOP      
00197B 00                NOP      
00197C 00                NOP      
00197D 00                NOP      
00197E 00                NOP      
00197F 00                NOP      
001980 00                NOP      
001981 00                NOP      
001982 00                NOP      
001983 00                NOP      
001984 00                NOP      
001985 00                NOP      
001986 00                NOP      
001987 12353C            LCALL    ?L?COM003F
00198A         ?C0427?PKT_I2CM:
00198A 208211            JB       IO_DUT_I2CM_SCL,?C0434?PKT_I2CM
00198D E53E              MOV      A,_loop+01H
00198F 153E              DEC      _loop+01H
001991 AE3D              MOV      R6,_loop
001993 7002              JNZ      ?C0673?PKT_I2CM
001995 153D              DEC      _loop
001997         ?C0673?PKT_I2CM:
001997 4E                ORL      A,R6
001998 6004              JZ       ?C0434?PKT_I2CM
00199A 51D5              ACALL    ?L?COM0008
00199C 80EC              SJMP     ?C0427?PKT_I2CM
00199E         ?C0434?PKT_I2CM:
00199E 00                NOP      
00199F 00                NOP      
0019A0 00                NOP      
0019A1 00                NOP      
0019A2 00                NOP      
0019A3 00                NOP      
0019A4 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 16


0019A5 00                NOP      
0019A6 00                NOP      
0019A7 00                NOP      
0019A8 00                NOP      
0019A9 00                NOP      
0019AA 00                NOP      
0019AB 00                NOP      
0019AC C292              CLR      IO_DUT_I2CM_SDA
0019AE 00                NOP      
0019AF 00                NOP      
0019B0 00                NOP      
0019B1 00                NOP      
0019B2 00                NOP      
0019B3 00                NOP      
0019B4 00                NOP      
0019B5 00                NOP      
0019B6 00                NOP      
0019B7 00                NOP      
0019B8 00                NOP      
0019B9 00                NOP      
0019BA 00                NOP      
0019BB 00                NOP      
0019BC C282              CLR      IO_DUT_I2CM_SCL
0019BE 8000              SJMP     ?C0400?PKT_I2CM
0019C0         ?C0400?PKT_I2CM:
  245: 
  246:         /* send I2C slave address + write */
  247:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
0019C0 1235C0            LCALL    ?L?COM005F
0019C3 54FE              ANL      A,#0FEH
0019C5 FF                MOV      R7,A
0019C6 11B9              ACALL    __pkt_i2cm_TxByte
0019C8 4002              JC       $ + 4H
0019CA 4191              AJMP     ?C0561?PKT_I2CM
  248:         {
  249:             goto _exit;
  250:         }
0019CC         ?C0471?PKT_I2CM:
  251: 
  252:         /* send write buffer */
  253:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
0019CC E4                CLR      A
0019CD F53B              MOV      vLoop,A
0019CF F53C              MOV      vLoop+01H,A
0019D1         ?C0473?PKT_I2CM:
0019D1 C3                CLR      C
0019D2 E53C              MOV      A,vLoop+01H
0019D4 9538              SUBB     A,vWriteLen+01H
0019D6 E53B              MOV      A,vLoop
0019D8 9537              SUBB     A,vWriteLen
0019DA 5029              JNC      ?C0397?PKT_I2CM
  254:         {
  255:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
0019DC E536              MOV      A,pPayload+01H
0019DE 2405              ADD      A,#05H
0019E0 F582              MOV      DPL,A
0019E2 E4                CLR      A
0019E3 3535              ADDC     A,pPayload
0019E5 F583              MOV      DPH,A
0019E7 E582              MOV      A,DPL
0019E9 253C              ADD      A,vLoop+01H
0019EB F582              MOV      DPL,A
0019ED E583              MOV      A,DPH
0019EF 353B              ADDC     A,vLoop
0019F1 F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 17


0019F3 E0                MOVX     A,@DPTR
0019F4 FF                MOV      R7,A
0019F5 11B9              ACALL    __pkt_i2cm_TxByte
0019F7 4002              JC       $ + 4H
0019F9 4191              AJMP     ?C0561?PKT_I2CM
  256:             {
  257:                 goto _exit;
  258:             }
0019FB         ?C0476?PKT_I2CM:
  259:         }
0019FB         ?C0475?PKT_I2CM:
0019FB 053C              INC      vLoop+01H
0019FD E53C              MOV      A,vLoop+01H
0019FF 7002              JNZ      ?C0675?PKT_I2CM
001A01 053B              INC      vLoop
001A03         ?C0675?PKT_I2CM:
001A03 80CC              SJMP     ?C0473?PKT_I2CM
  260:     }
001A05         ?C0397?PKT_I2CM:
  261: 
  262:     /* send read stream */
  263:     if (vReadLen != 0)
001A05 E53A              MOV      A,vReadLen+01H
001A07 4539              ORL      A,vReadLen
001A09 7002              JNZ      $ + 4H
001A0B 418F              AJMP     ?C0477?PKT_I2CM
  264:     {
  265:         /* send I2C start/restart */
  266:         _pkt_i2cm_Start();
001A0D D292              SETB     IO_DUT_I2CM_SDA
001A0F 00                NOP      
001A10 00                NOP      
001A11 00                NOP      
001A12 00                NOP      
001A13 00                NOP      
001A14 00                NOP      
001A15 00                NOP      
001A16 00                NOP      
001A17 00                NOP      
001A18 00                NOP      
001A19 00                NOP      
001A1A 00                NOP      
001A1B 00                NOP      
001A1C 00                NOP      
001A1D 12353C            LCALL    ?L?COM003F
001A20         ?C0506?PKT_I2CM:
001A20 208211            JB       IO_DUT_I2CM_SCL,?C0513?PKT_I2CM
001A23 E53E              MOV      A,_loop+01H
001A25 153E              DEC      _loop+01H
001A27 AE3D              MOV      R6,_loop
001A29 7002              JNZ      ?C0676?PKT_I2CM
001A2B 153D              DEC      _loop
001A2D         ?C0676?PKT_I2CM:
001A2D 4E                ORL      A,R6
001A2E 6004              JZ       ?C0513?PKT_I2CM
001A30 51D5              ACALL    ?L?COM0008
001A32 80EC              SJMP     ?C0506?PKT_I2CM
001A34         ?C0513?PKT_I2CM:
001A34 00                NOP      
001A35 00                NOP      
001A36 00                NOP      
001A37 00                NOP      
001A38 00                NOP      
001A39 00                NOP      
001A3A 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 18


001A3B 00                NOP      
001A3C 00                NOP      
001A3D 00                NOP      
001A3E 00                NOP      
001A3F 00                NOP      
001A40 00                NOP      
001A41 00                NOP      
001A42 C292              CLR      IO_DUT_I2CM_SDA
001A44 00                NOP      
001A45 00                NOP      
001A46 00                NOP      
001A47 00                NOP      
001A48 00                NOP      
001A49 00                NOP      
001A4A 00                NOP      
001A4B 00                NOP      
001A4C 00                NOP      
001A4D 00                NOP      
001A4E 00                NOP      
001A4F 00                NOP      
001A50 00                NOP      
001A51 00                NOP      
001A52 C282              CLR      IO_DUT_I2CM_SCL
001A54 8000              SJMP     ?C0479?PKT_I2CM
001A56         ?C0479?PKT_I2CM:
  267: 
  268:         /* send I2C slave address + read */
  269:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
001A56 1235C0            LCALL    ?L?COM005F
001A59 4401              ORL      A,#01H
001A5B FF                MOV      R7,A
001A5C 11B9              ACALL    __pkt_i2cm_TxByte
001A5E 5031              JNC      ?C0561?PKT_I2CM
  270:         {
  271:             goto _exit;
  272:         }
001A60         ?C0550?PKT_I2CM:
  273: 
  274:         /* read data */
  275:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001A60 E4                CLR      A
001A61 F53B              MOV      vLoop,A
001A63 F53C              MOV      vLoop+01H,A
001A65         ?C0551?PKT_I2CM:
001A65 1235B8            LCALL    ?L?COM005E
001A68 9539              SUBB     A,vReadLen
001A6A 5023              JNC      ?C0477?PKT_I2CM
  276:         {
  277:             pPayload->aBuf[vWriteLen+vLoop] =
001A6C E53A              MOV      A,vReadLen+01H
001A6E 24FF              ADD      A,#0FFH
001A70 FF                MOV      R7,A
001A71 E539              MOV      A,vReadLen
001A73 34FF              ADDC     A,#0FFH
001A75 FE                MOV      R6,A
001A76 EF                MOV      A,R7
001A77 B53C07            CJNE     A,vLoop+01H,?C0554?PKT_I2CM
001A7A EE                MOV      A,R6
001A7B B53B03            CJNE     A,vLoop,?C0554?PKT_I2CM
001A7E D3                SETB     C
001A7F 8001              SJMP     ?C0555?PKT_I2CM
001A81         ?C0554?PKT_I2CM:
001A81 C3                CLR      C
001A82         ?C0555?PKT_I2CM:
001A82 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 19


001A84 F161              ACALL    _pkt_i2cm_RxByte
001A86 12341F            LCALL    ?L?COM0017
001A89 7002              JNZ      ?C0679?PKT_I2CM
001A8B 053B              INC      vLoop
001A8D         ?C0679?PKT_I2CM:
001A8D 80D6              SJMP     ?C0551?PKT_I2CM
  278:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  279:         }
  280:     }
001A8F         ?C0477?PKT_I2CM:
  281: 
  282:     /* I2C stream done */
  283:     bDone = TRUE;
001A8F D239              SETB     bDone
  284: 
  285: _exit:
001A91         _exit:
  286:     /* send I2C stop */
  287:     _pkt_i2cm_Stop();
001A91         ?C0561?PKT_I2CM:
001A91 C292              CLR      IO_DUT_I2CM_SDA
001A93 00                NOP      
001A94 00                NOP      
001A95 00                NOP      
001A96 00                NOP      
001A97 00                NOP      
001A98 00                NOP      
001A99 00                NOP      
001A9A 00                NOP      
001A9B 00                NOP      
001A9C 00                NOP      
001A9D 00                NOP      
001A9E 00                NOP      
001A9F 00                NOP      
001AA0 00                NOP      
001AA1 12353C            LCALL    ?L?COM003F
001AA4         ?C0584?PKT_I2CM:
001AA4 208211            JB       IO_DUT_I2CM_SCL,?C0591?PKT_I2CM
001AA7 E53E              MOV      A,_loop+01H
001AA9 153E              DEC      _loop+01H
001AAB AE3D              MOV      R6,_loop
001AAD 7002              JNZ      ?C0680?PKT_I2CM
001AAF 153D              DEC      _loop
001AB1         ?C0680?PKT_I2CM:
001AB1 4E                ORL      A,R6
001AB2 6004              JZ       ?C0591?PKT_I2CM
001AB4 51D5              ACALL    ?L?COM0008
001AB6 80EC              SJMP     ?C0584?PKT_I2CM
001AB8         ?C0591?PKT_I2CM:
001AB8 00                NOP      
001AB9 00                NOP      
001ABA 00                NOP      
001ABB 00                NOP      
001ABC 00                NOP      
001ABD 00                NOP      
001ABE 00                NOP      
001ABF 00                NOP      
001AC0 00                NOP      
001AC1 00                NOP      
001AC2 00                NOP      
001AC3 00                NOP      
001AC4 00                NOP      
001AC5 00                NOP      
001AC6 D292              SETB     IO_DUT_I2CM_SDA
  288: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 20


  289:     /* unlock globally interrupt */
  290:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001AC8 A238              MOV      C,bIntState
001ACA 92AF              MOV      EA,C
  291: 
  292:     return bDone;
001ACC A239              MOV      C,bDone
  293: }
001ACE 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001ACF A2A0              MOV      C,IO_DUT_C2M_SDA
001AD1 D297              SETB     IO_DUT_C2M_SCL
001AD3 9230              MOV      bC2Bit0,C
001AD5         ?L?COM0008:
001AD5 7F01              MOV      R7,#01H
001AD7 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
001AD9 8018              SJMP     ?C0013?DRV_CPU
001ADB         ?C0001?DRV_CPU:
   39:     while (--vUsec)
001ADB EF                MOV      A,R7
001ADC 1F                DEC      R7
001ADD 7001              JNZ      ?C0011?DRV_CPU
001ADF 1E                DEC      R6
001AE0         ?C0011?DRV_CPU:
001AE0 14                DEC      A
001AE1 4E                ORL      A,R6
001AE2 6014              JZ       ?C0003?DRV_CPU
   40:     {
   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001AE4 00                NOP      
001AE5 00                NOP      
001AE6 00                NOP      
001AE7 00                NOP      
001AE8 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
001AE9 00                NOP      
001AEA 00                NOP      
001AEB 00                NOP      
001AEC 00                NOP      
001AED 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
001AEE 00                NOP      
001AEF 00                NOP      
001AF0 00                NOP      
001AF1 00                NOP      
001AF2 00                NOP      
   45: 		NOP(); NOP(); NOP();
001AF3         
001AF3 00                NOP      
001AF4 00                NOP      
001AF5 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 21


   49:     }
001AF6 80E3              SJMP     ?C0001?DRV_CPU
   50: }
001AF8         ?C0003?DRV_CPU:
001AF8 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
  640: (
001AF9 123585            LCALL    ?L?COM004C
;---- Variable 'vCount' assigned to Register 'R3' ----
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
001AFC EB                MOV      A,R3
001AFD 7005              JNZ      ?C0962?DRV_C2M
001AFF 7E01              MOV      R6,#01H
001B01 FF                MOV      R7,A
001B02 8004              SJMP     ?C0963?DRV_C2M
001B04         ?C0962?DRV_C2M:
001B04 EB                MOV      A,R3
001B05 FF                MOV      R7,A
001B06 7E00              MOV      R6,#00H
001B08         ?C0963?DRV_C2M:
001B08 8E3F              MOV      vLen,R6
001B0A 8F40              MOV      vLen+01H,R7
  647:     BOOL    bDone = FALSE;
001B0C C238              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
001B0E 309776            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001B11 30A073            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
001B14         ?C0964?DRV_C2M:
  654: 
  655:     c2m_WriteAR(vFPDAT);
001B14 AF16              MOV      R7,vFPDAT
001B16 D1D4              ACALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
001B18 7F07              MOV      R7,#07H
001B1A 1233EA            LCALL    ?L?COM0012
001B1D         ?C0973?DRV_C2M:
001B1D 9119              ACALL    c2m_ReadAR
001B1F EF                MOV      A,R7
001B20 20E009            JB       ACC.0,?C0971?DRV_C2M
001B23 123371            LCALL    ?L?COM000B
001B26 6004              JZ       ?C0971?DRV_C2M
001B28 51D5              ACALL    ?L?COM0008
001B2A 80F1              SJMP     ?C0973?DRV_C2M
001B2C         ?C0971?DRV_C2M:
001B2C 122FF1            LCALL    ?L?COM0027
001B2F 7056              JNZ      _exit?DRV_C2M
001B31         ?C0975?DRV_C2M:
001B31         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 22


001B31 E53B              MOV      A,vAddr
001B33 FF                MOV      R7,A
001B34 718A              ACALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001B36 AF3C              MOV      R7,vAddr+01H
001B38 1233E5            LCALL    ?L?COM0011
001B3B         ?C0982?DRV_C2M:
001B3B 9119              ACALL    c2m_ReadAR
001B3D EF                MOV      A,R7
001B3E 20E009            JB       ACC.0,?C0980?DRV_C2M
001B41 123371            LCALL    ?L?COM000B
001B44 6004              JZ       ?C0980?DRV_C2M
001B46 51D5              ACALL    ?L?COM0008
001B48 80F1              SJMP     ?C0982?DRV_C2M
001B4A         ?C0980?DRV_C2M:
001B4A 122FF1            LCALL    ?L?COM0027
001B4D 7038              JNZ      _exit?DRV_C2M
001B4F         ?C0984?DRV_C2M:
001B4F         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
001B4F 1234CC            LCALL    ?L?COM002F
001B52 7002              JNZ      ?C1018?DRV_C2M
001B54 153F              DEC      vLen
001B56         ?C1018?DRV_C2M:
001B56 4E                ORL      A,R6
001B57 6015              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
001B59 053E              INC      pBuf+01H
001B5B E53E              MOV      A,pBuf+01H
001B5D AE3D              MOV      R6,pBuf
001B5F 7002              JNZ      ?C1019?DRV_C2M
001B61 053D              INC      pBuf
001B63         ?C1019?DRV_C2M:
001B63 14                DEC      A
001B64 F582              MOV      DPL,A
001B66 8E83              MOV      DPH,R6
001B68 E0                MOVX     A,@DPTR
001B69 FF                MOV      R7,A
001B6A 718A              ACALL    _drv_c2m_WriteData
  666:     }
001B6C 80E1              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
001B6E         ?C0992?DRV_C2M:
001B6E 1233ED            LCALL    ?L?COM0013
001B71         ?C0993?DRV_C2M:
001B71 9119              ACALL    c2m_ReadAR
001B73 EF                MOV      A,R7
001B74 20E009            JB       ACC.0,?C0991?DRV_C2M
001B77 123371            LCALL    ?L?COM000B
001B7A 6004              JZ       ?C0991?DRV_C2M
001B7C 51D5              ACALL    ?L?COM0008
001B7E 80F1              SJMP     ?C0993?DRV_C2M
001B80         ?C0991?DRV_C2M:
001B80 B146              ACALL    c2m_ReadDR
001B82 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001B85         ?C0995?DRV_C2M:
001B85         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
001B85 D238              SETB     bDone
  669: 
  670: _exit:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 23


001B87         _exit:
  671:     return bDone;
001B87 A238              MOV      C,bDone
  672: }
001B89 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
001B8A 1230B8            LCALL    _c2m_WriteDR
  361: }
001B8D 754527            MOV      _timeout,#027H
001B90 754610            MOV      _timeout+01H,#010H
001B93         ?C0788?DRV_C2M:
001B93 9119              ACALL    c2m_ReadAR
001B95 EF                MOV      A,R7
001B96 30E111            JNB      ACC.1,?C0790?DRV_C2M
001B99 E546              MOV      A,_timeout+01H
001B9B 1546              DEC      _timeout+01H
001B9D AE45              MOV      R6,_timeout
001B9F 7002              JNZ      ?C1015?DRV_C2M
001BA1 1545              DEC      _timeout
001BA3         ?C1015?DRV_C2M:
001BA3 4E                ORL      A,R6
001BA4 6004              JZ       ?C0790?DRV_C2M
001BA6 51D5              ACALL    ?L?COM0008
001BA8 80E9              SJMP     ?C0788?DRV_C2M
  362: 
001BAA         ?C0790?DRV_C2M:
001BAA 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
001BAB AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
001BAD C238              CLR      bDone
  550:     if (!drv_c2m_IsReady())
001BAF 309764            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001BB2 30A061            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
001BB5         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
001BB5 AF16              MOV      R7,vFPDAT
001BB7 D1D4              ACALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001BB9 7F08              MOV      R7,#08H
001BBB 12345A            LCALL    ?L?COM0023
001BBE         ?C0914?DRV_C2M:
001BBE 9119              ACALL    c2m_ReadAR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 24


001BC0 EF                MOV      A,R7
001BC1 20E00B            JB       ACC.0,?C0912?DRV_C2M
001BC4 7833              MOV      R0,#LOW _timeout
001BC6 123373            LCALL    ?L?COM000C
001BC9 6004              JZ       ?C0912?DRV_C2M
001BCB 51D5              ACALL    ?L?COM0008
001BCD 80EF              SJMP     ?C0914?DRV_C2M
001BCF         ?C0912?DRV_C2M:
001BCF 122FF1            LCALL    ?L?COM0027
001BD2 7042              JNZ      _exit?DRV_C2M
001BD4         ?C0916?DRV_C2M:
001BD4         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
001BD4 AF03              MOV      R7,AR3
001BD6 12345A            LCALL    ?L?COM0023
001BD9         ?C0923?DRV_C2M:
001BD9 9119              ACALL    c2m_ReadAR
001BDB EF                MOV      A,R7
001BDC 20E00B            JB       ACC.0,?C0921?DRV_C2M
001BDF 7833              MOV      R0,#LOW _timeout
001BE1 123373            LCALL    ?L?COM000C
001BE4 6004              JZ       ?C0921?DRV_C2M
001BE6 51D5              ACALL    ?L?COM0008
001BE8 80EF              SJMP     ?C0923?DRV_C2M
001BEA         ?C0921?DRV_C2M:
001BEA 122FF1            LCALL    ?L?COM0027
001BED 7027              JNZ      _exit?DRV_C2M
001BEF         ?C0925?DRV_C2M:
001BEF         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001BEF E4                CLR      A
001BF0 FF                MOV      R7,A
001BF1 718A              ACALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001BF3 E4                CLR      A
001BF4 753640            MOV      _timeout+03H,#040H
001BF7 75359C            MOV      _timeout+02H,#09CH
001BFA F534              MOV      _timeout+01H,A
001BFC F533              MOV      _timeout,A
001BFE         ?C0932?DRV_C2M:
001BFE 9119              ACALL    c2m_ReadAR
001C00 EF                MOV      A,R7
001C01 20E00B            JB       ACC.0,?C0930?DRV_C2M
001C04 7833              MOV      R0,#LOW _timeout
001C06 123373            LCALL    ?L?COM000C
001C09 6004              JZ       ?C0930?DRV_C2M
001C0B 51D5              ACALL    ?L?COM0008
001C0D 80EF              SJMP     ?C0932?DRV_C2M
001C0F         ?C0930?DRV_C2M:
001C0F B146              ACALL    c2m_ReadDR
001C11 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001C14         ?C0934?DRV_C2M:
001C14         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
001C14 D238              SETB     bDone
  564: 
  565: _exit:
001C16         _exit:
  566:     return bDone;
001C16 A238              MOV      C,bDone
  567: }
001C18 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 25




----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
001C19 C243              CLR      bIns0
001C1B D244              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
001C1D 30AF05            JNB      EA,?C0190?DRV_C2M
001C20 C2AF              CLR      EA
001C22 D3                SETB     C
001C23 8001              SJMP     ?C0191?DRV_C2M
001C25         ?C0190?DRV_C2M:
001C25 C3                CLR      C
001C26         ?C0191?DRV_C2M:
001C26 12326B            LCALL    ?L?COM0014
001C29 00                NOP      
001C2A 00                NOP      
001C2B 00                NOP      
001C2C 00                NOP      
001C2D 1232F0            LCALL    ?L?COM0021
001C30 00                NOP      
001C31 00                NOP      
001C32 00                NOP      
001C33 00                NOP      
001C34 12327A            LCALL    ?L?COM0030
001C37 00                NOP      
001C38 00                NOP      
001C39 00                NOP      
001C3A 00                NOP      
001C3B 1232E6            LCALL    ?L?COM0038
001C3E 00                NOP      
001C3F D297              SETB     IO_DUT_C2M_SCL
001C41 00                NOP      
001C42 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
001C43 00                NOP      
001C44 00                NOP      
001C45 C297              CLR      IO_DUT_C2M_SCL
001C47 00                NOP      
001C48 00                NOP      
001C49 A2A0              MOV      C,IO_DUT_C2M_SDA
001C4B D297              SETB     IO_DUT_C2M_SCL
001C4D 9230              MOV      bC2Bit0,C
001C4F 00                NOP      
001C50 00                NOP      
001C51 C297              CLR      IO_DUT_C2M_SCL
001C53 00                NOP      
001C54 00                NOP      
001C55 A2A0              MOV      C,IO_DUT_C2M_SDA
001C57 D297              SETB     IO_DUT_C2M_SCL
001C59 9231              MOV      bC2Bit1,C
001C5B 00                NOP      
001C5C 00                NOP      
001C5D C297              CLR      IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 26


001C5F 00                NOP      
001C60 00                NOP      
001C61 A2A0              MOV      C,IO_DUT_C2M_SDA
001C63 D297              SETB     IO_DUT_C2M_SCL
001C65 9232              MOV      bC2Bit2,C
001C67 00                NOP      
001C68 00                NOP      
001C69 C297              CLR      IO_DUT_C2M_SCL
001C6B 00                NOP      
001C6C 00                NOP      
001C6D A2A0              MOV      C,IO_DUT_C2M_SDA
001C6F D297              SETB     IO_DUT_C2M_SCL
001C71 9233              MOV      bC2Bit3,C
001C73 00                NOP      
001C74 00                NOP      
001C75 C297              CLR      IO_DUT_C2M_SCL
001C77 00                NOP      
001C78 00                NOP      
001C79 A2A0              MOV      C,IO_DUT_C2M_SDA
001C7B D297              SETB     IO_DUT_C2M_SCL
001C7D 9234              MOV      bC2Bit4,C
001C7F 00                NOP      
001C80 00                NOP      
001C81 C297              CLR      IO_DUT_C2M_SCL
001C83 00                NOP      
001C84 00                NOP      
001C85 A2A0              MOV      C,IO_DUT_C2M_SDA
001C87 D297              SETB     IO_DUT_C2M_SCL
001C89 9235              MOV      bC2Bit5,C
001C8B 00                NOP      
001C8C 00                NOP      
001C8D C297              CLR      IO_DUT_C2M_SCL
001C8F 00                NOP      
001C90 00                NOP      
001C91 A2A0              MOV      C,IO_DUT_C2M_SDA
001C93 D297              SETB     IO_DUT_C2M_SCL
001C95 9236              MOV      bC2Bit6,C
001C97 00                NOP      
001C98 00                NOP      
001C99 C297              CLR      IO_DUT_C2M_SCL
001C9B 00                NOP      
001C9C 00                NOP      
001C9D 1232FC            LCALL    ?L?COM001E
  217:     c2m_RxStop();       /* rx frame stop */
  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
001CA0 AF26              MOV      R7,vC2Data
  223: }
001CA2 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
  447:     vDevice.U32 = 0xFFFFFFFFUL;
001CA3 74FF              MOV      A,#0FFH
001CA5 F536              MOV      vDevice+03H,A
001CA7 F535              MOV      vDevice+02H,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 27


001CA9 F534              MOV      vDevice+01H,A
001CAB F533              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
001CAD 209702            JB       IO_DUT_C2M_SCL,$ + 5H
001CB0 A13D              AJMP     _exit?DRV_C2M
001CB2 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
001CB5 A13D              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
  453:     }
  454: 
  455:     drv_c2m_Init();
001CB7         ?C0852?DRV_C2M:
001CB7 123482            LCALL    ?L?COM0028
001CBA 53A57F            ANL      P1MDOUT,#07FH
001CBD 7F02              MOV      R7,#02H
001CBF D1D4              ACALL    _c2m_WriteAR
001CC1 1230B8            LCALL    _c2m_WriteDR
001CC4 7F04              MOV      R7,#04H
001CC6 1230B8            LCALL    _c2m_WriteDR
001CC9 7F01              MOV      R7,#01H
001CCB 1230B8            LCALL    _c2m_WriteDR
001CCE 7F14              MOV      R7,#014H
001CD0 7E00              MOV      R6,#00H
001CD2 122D34            LCALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
001CD5 E4                CLR      A
001CD6 FF                MOV      R7,A
001CD7 1217F0            LCALL    _drv_c2m_ReadSFR
001CDA 8F33              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
001CDC 7F01              MOV      R7,#01H
001CDE 1217F0            LCALL    _drv_c2m_ReadSFR
001CE1 8F34              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
001CE3 E533              MOV      A,vDevice
001CE5 F4                CPL      A
001CE6 6055              JZ       _exit?DRV_C2M
  462:     {
  463:         /* no device probed */
  464:         goto _exit;
  465:     }
001CE8         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
001CE8 7516B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
001CEB 1235A0            LCALL    ?L?COM005B
001CEE 718A              ACALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
001CF0 F143              ACALL    drv_c2m_ReadData
001CF2 EF                MOV      A,R7
001CF3 640D              XRL      A,#0DH
001CF5 601F              JZ       ?C0863?DRV_C2M
  472:     {
  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
001CF7 7516AD            MOV      vFPDAT,#0ADH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 28


  475:         c2m_WriteAR(vFPDAT);
001CFA 1235A0            LCALL    ?L?COM005B
001CFD 123511            LCALL    ?L?COM003C
001D00         ?C0870?DRV_C2M:
001D00 9119              ACALL    c2m_ReadAR
001D02 EF                MOV      A,R7
001D03 20E00B            JB       ACC.0,?C0868?DRV_C2M
001D06 7837              MOV      R0,#LOW _timeout
001D08 123373            LCALL    ?L?COM000C
001D0B 6004              JZ       ?C0868?DRV_C2M
001D0D 51D5              ACALL    ?L?COM0008
001D0F 80EF              SJMP     ?C0870?DRV_C2M
001D11         ?C0868?DRV_C2M:
001D11 122FF1            LCALL    ?L?COM0027
001D14 7027              JNZ      _exit?DRV_C2M
001D16         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
001D16         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
001D16 F143              ACALL    drv_c2m_ReadData
001D18 8F35              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
001D1A AF16              MOV      R7,vFPDAT
001D1C D1D4              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
001D1E 7F01              MOV      R7,#01H
001D20 123511            LCALL    ?L?COM003C
001D23         ?C0879?DRV_C2M:
001D23 9119              ACALL    c2m_ReadAR
001D25 EF                MOV      A,R7
001D26 20E00B            JB       ACC.0,?C0877?DRV_C2M
001D29 7837              MOV      R0,#LOW _timeout
001D2B 123373            LCALL    ?L?COM000C
001D2E 6004              JZ       ?C0877?DRV_C2M
001D30 51D5              ACALL    ?L?COM0008
001D32 80EF              SJMP     ?C0879?DRV_C2M
001D34         ?C0877?DRV_C2M:
001D34 B146              ACALL    c2m_ReadDR
001D36 BF0D04            CJNE     R7,#0DH,_exit?DRV_C2M
001D39         ?C0881?DRV_C2M:
001D39         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
001D39 F143              ACALL    drv_c2m_ReadData
001D3B 8F36              MOV      vDevice+03H,R7
  486: 
  487: _exit:
001D3D         _exit:
  488:     return vDevice.U32;
001D3D AF36              MOV      R7,vDevice+03H
001D3F AE35              MOV      R6,vDevice+02H
001D41 AD34              MOV      R5,vDevice+01H
001D43 AC33              MOV      R4,vDevice
  489: }
001D45 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 29


  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
001D46 C243              CLR      bIns0
001D48 C244              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
001D4A C245              CLR      bLength0
001D4C C246              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
001D4E 30AF05            JNB      EA,?C0584?DRV_C2M
001D51 C2AF              CLR      EA
001D53 D3                SETB     C
001D54 8001              SJMP     ?C0585?DRV_C2M
001D56         ?C0584?DRV_C2M:
001D56 C3                CLR      C
001D57         ?C0585?DRV_C2M:
001D57 12326B            LCALL    ?L?COM0014
001D5A 00                NOP      
001D5B 00                NOP      
001D5C 00                NOP      
001D5D 00                NOP      
001D5E 1232F0            LCALL    ?L?COM0021
001D61 00                NOP      
001D62 00                NOP      
001D63 00                NOP      
001D64 00                NOP      
001D65 12327A            LCALL    ?L?COM0030
001D68 00                NOP      
001D69 00                NOP      
001D6A 00                NOP      
001D6B 00                NOP      
001D6C 12328C            LCALL    ?L?COM004E
001D6F 00                NOP      
001D70 00                NOP      
001D71 00                NOP      
001D72 00                NOP      
001D73 123283            LCALL    ?L?COM004D
001D76 00                NOP      
001D77 00                NOP      
001D78 00                NOP      
001D79 00                NOP      
001D7A 1232E6            LCALL    ?L?COM0038
001D7D 00                NOP      
001D7E D297              SETB     IO_DUT_C2M_SCL
001D80 00                NOP      
001D81 00                NOP      
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
001D82 754927            MOV      _timeout,#027H
001D85 754A10            MOV      _timeout+01H,#010H
001D88         ?C0687?DRV_C2M:
001D88 00                NOP      
001D89 00                NOP      
001D8A C297              CLR      IO_DUT_C2M_SCL
001D8C 00                NOP      
001D8D 00                NOP      
001D8E 51CF              ACALL    ?L?COM0007
001D90 20300D            JB       bC2Bit0,?C0700?DRV_C2M
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 30


001D93 E54A              MOV      A,_timeout+01H
001D95 154A              DEC      _timeout+01H
001D97 AE49              MOV      R6,_timeout
001D99 7002              JNZ      ?C1014?DRV_C2M
001D9B 1549              DEC      _timeout
001D9D         ?C1014?DRV_C2M:
001D9D 4E                ORL      A,R6
001D9E 70E8              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
001DA0         ?C0700?DRV_C2M:
001DA0 00                NOP      
001DA1 00                NOP      
001DA2 C297              CLR      IO_DUT_C2M_SCL
001DA4 00                NOP      
001DA5 00                NOP      
001DA6 A2A0              MOV      C,IO_DUT_C2M_SDA
001DA8 D297              SETB     IO_DUT_C2M_SCL
001DAA 9230              MOV      bC2Bit0,C
001DAC 00                NOP      
001DAD 00                NOP      
001DAE C297              CLR      IO_DUT_C2M_SCL
001DB0 00                NOP      
001DB1 00                NOP      
001DB2 A2A0              MOV      C,IO_DUT_C2M_SDA
001DB4 D297              SETB     IO_DUT_C2M_SCL
001DB6 9231              MOV      bC2Bit1,C
001DB8 00                NOP      
001DB9 00                NOP      
001DBA C297              CLR      IO_DUT_C2M_SCL
001DBC 00                NOP      
001DBD 00                NOP      
001DBE A2A0              MOV      C,IO_DUT_C2M_SDA
001DC0 D297              SETB     IO_DUT_C2M_SCL
001DC2 9232              MOV      bC2Bit2,C
001DC4 00                NOP      
001DC5 00                NOP      
001DC6 C297              CLR      IO_DUT_C2M_SCL
001DC8 00                NOP      
001DC9 00                NOP      
001DCA A2A0              MOV      C,IO_DUT_C2M_SDA
001DCC D297              SETB     IO_DUT_C2M_SCL
001DCE 9233              MOV      bC2Bit3,C
001DD0 00                NOP      
001DD1 00                NOP      
001DD2 C297              CLR      IO_DUT_C2M_SCL
001DD4 00                NOP      
001DD5 00                NOP      
001DD6 A2A0              MOV      C,IO_DUT_C2M_SDA
001DD8 D297              SETB     IO_DUT_C2M_SCL
001DDA 9234              MOV      bC2Bit4,C
001DDC 00                NOP      
001DDD 00                NOP      
001DDE C297              CLR      IO_DUT_C2M_SCL
001DE0 00                NOP      
001DE1 00                NOP      
001DE2 A2A0              MOV      C,IO_DUT_C2M_SDA
001DE4 D297              SETB     IO_DUT_C2M_SCL
001DE6 9235              MOV      bC2Bit5,C
001DE8 00                NOP      
001DE9 00                NOP      
001DEA C297              CLR      IO_DUT_C2M_SCL
001DEC 00                NOP      
001DED 00                NOP      
001DEE A2A0              MOV      C,IO_DUT_C2M_SDA
001DF0 D297              SETB     IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 31


001DF2 9236              MOV      bC2Bit6,C
001DF4 00                NOP      
001DF5 00                NOP      
001DF6 C297              CLR      IO_DUT_C2M_SCL
001DF8 00                NOP      
001DF9 00                NOP      
001DFA 1232FC            LCALL    ?L?COM001E
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
001DFD AF26              MOV      R7,vC2Data
  272: }
001DFF 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
001E00 C238              CLR      bDone
  511:     if (!drv_c2m_IsReady())
001E02 309752            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001E05 30A04F            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
001E08         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
001E08 AF16              MOV      R7,vFPDAT
001E0A D1D4              ACALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
001E0C 7F03              MOV      R7,#03H
001E0E 12345A            LCALL    ?L?COM0023
001E11         ?C0892?DRV_C2M:
001E11 9119              ACALL    c2m_ReadAR
001E13 EF                MOV      A,R7
001E14 20E00B            JB       ACC.0,?C0890?DRV_C2M
001E17 7833              MOV      R0,#LOW _timeout
001E19 123373            LCALL    ?L?COM000C
001E1C 6004              JZ       ?C0890?DRV_C2M
001E1E 51D5              ACALL    ?L?COM0008
001E20 80EF              SJMP     ?C0892?DRV_C2M
001E22         ?C0890?DRV_C2M:
001E22 122FF1            LCALL    ?L?COM0027
001E25 7030              JNZ      _exit?DRV_C2M
001E27         ?C0894?DRV_C2M:
001E27         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
001E27 7FDE              MOV      R7,#0DEH
001E29 718A              ACALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
001E2B 7FAD              MOV      R7,#0ADH
001E2D 718A              ACALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
001E2F 7FA5              MOV      R7,#0A5H
001E31 718A              ACALL    _drv_c2m_WriteData
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 32


  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
001E33 753600            MOV      _timeout+03H,#00H
001E36 75352D            MOV      _timeout+02H,#02DH
001E39 753431            MOV      _timeout+01H,#031H
001E3C 753301            MOV      _timeout,#01H
001E3F         ?C0901?DRV_C2M:
001E3F 9119              ACALL    c2m_ReadAR
001E41 EF                MOV      A,R7
001E42 20E00B            JB       ACC.0,?C0899?DRV_C2M
001E45 7833              MOV      R0,#LOW _timeout
001E47 123373            LCALL    ?L?COM000C
001E4A 6004              JZ       ?C0899?DRV_C2M
001E4C 51D5              ACALL    ?L?COM0008
001E4E 80EF              SJMP     ?C0901?DRV_C2M
001E50         ?C0899?DRV_C2M:
001E50 B146              ACALL    c2m_ReadDR
001E52 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001E55         ?C0903?DRV_C2M:
001E55         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
001E55 D238              SETB     bDone
  525: 
  526: _exit:
001E57         _exit:
  527:     return bDone;
001E57 A238              MOV      C,bDone
  528: }
001E59 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
001E5A 123585            LCALL    ?L?COM004C
;---- Variable 'vCount' assigned to Register 'R3' ----
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
001E5D EB                MOV      A,R3
001E5E 7005              JNZ      ?C0936?DRV_C2M
001E60 7E01              MOV      R6,#01H
001E62 FF                MOV      R7,A
001E63 8004              SJMP     ?C0937?DRV_C2M
001E65         ?C0936?DRV_C2M:
001E65 EB                MOV      A,R3
001E66 FF                MOV      R7,A
001E67 7E00              MOV      R6,#00H
001E69         ?C0937?DRV_C2M:
001E69 8E3F              MOV      vLen,R6
001E6B 8F40              MOV      vLen+01H,R7
  595:     BOOL    bDone = FALSE;
001E6D C238              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
001E6F 30975F            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001E72 30A05C            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 33


001E75         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
001E75 AF16              MOV      R7,vFPDAT
001E77 D1D4              ACALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
001E79 7F06              MOV      R7,#06H
001E7B 1233EA            LCALL    ?L?COM0012
001E7E         ?C0947?DRV_C2M:
001E7E 9119              ACALL    c2m_ReadAR
001E80 EF                MOV      A,R7
001E81 20E009            JB       ACC.0,?C0945?DRV_C2M
001E84 123371            LCALL    ?L?COM000B
001E87 6004              JZ       ?C0945?DRV_C2M
001E89 51D5              ACALL    ?L?COM0008
001E8B 80F1              SJMP     ?C0947?DRV_C2M
001E8D         ?C0945?DRV_C2M:
001E8D 122FF1            LCALL    ?L?COM0027
001E90 703F              JNZ      _exit?DRV_C2M
001E92         ?C0949?DRV_C2M:
001E92         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001E92 E53D              MOV      A,vAddr
001E94 FF                MOV      R7,A
001E95 718A              ACALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001E97 AF3E              MOV      R7,vAddr+01H
001E99 1233E5            LCALL    ?L?COM0011
001E9C         ?C0956?DRV_C2M:
001E9C 9119              ACALL    c2m_ReadAR
001E9E EF                MOV      A,R7
001E9F 20E009            JB       ACC.0,?C0954?DRV_C2M
001EA2 123371            LCALL    ?L?COM000B
001EA5 6004              JZ       ?C0954?DRV_C2M
001EA7 51D5              ACALL    ?L?COM0008
001EA9 80F1              SJMP     ?C0956?DRV_C2M
001EAB         ?C0954?DRV_C2M:
001EAB B146              ACALL    c2m_ReadDR
001EAD BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
001EB0         ?C0958?DRV_C2M:
001EB0         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  610:     while (vLen--)
001EB0 1234CC            LCALL    ?L?COM002F
001EB3 7002              JNZ      ?C1016?DRV_C2M
001EB5 153F              DEC      vLen
001EB7         ?C1016?DRV_C2M:
001EB7 4E                ORL      A,R6
001EB8 6015              JZ       ?C0960?DRV_C2M
  611:     {
  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
001EBA F143              ACALL    drv_c2m_ReadData
001EBC 053C              INC      pBuf+01H
001EBE E53C              MOV      A,pBuf+01H
001EC0 AC3B              MOV      R4,pBuf
001EC2 7002              JNZ      ?C1017?DRV_C2M
001EC4 053B              INC      pBuf
001EC6         ?C1017?DRV_C2M:
001EC6 14                DEC      A
001EC7 F582              MOV      DPL,A
001EC9 8C83              MOV      DPH,R4
001ECB EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 34


001ECC F0                MOVX     @DPTR,A
  614:     }
001ECD 80E1              SJMP     ?C0959?DRV_C2M
001ECF         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
001ECF D238              SETB     bDone
  616: 
  617: _exit:
001ED1         _exit:
  618:     return bDone;
001ED1 A238              MOV      C,bDone
  619: }
001ED3 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
001ED4 D243              SETB     bIns0
001ED6 D244              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
001ED8 8F26              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
001EDA 30AF05            JNB      EA,?C0007?DRV_C2M
001EDD C2AF              CLR      EA
001EDF D3                SETB     C
001EE0 8001              SJMP     ?C0008?DRV_C2M
001EE2         ?C0007?DRV_C2M:
001EE2 C3                CLR      C
001EE3         ?C0008?DRV_C2M:
001EE3 12326B            LCALL    ?L?COM0014
001EE6 00                NOP      
001EE7 00                NOP      
001EE8 00                NOP      
001EE9 00                NOP      
001EEA 1232F0            LCALL    ?L?COM0021
001EED 00                NOP      
001EEE 00                NOP      
001EEF 00                NOP      
001EF0 00                NOP      
001EF1 12327A            LCALL    ?L?COM0030
001EF4 00                NOP      
001EF5 00                NOP      
001EF6 00                NOP      
001EF7 00                NOP      
001EF8 1232D4            LCALL    ?L?COM0056
001EFB 00                NOP      
001EFC 00                NOP      
001EFD 00                NOP      
001EFE 00                NOP      
001EFF 1232CB            LCALL    ?L?COM0055
001F02 00                NOP      
001F03 00                NOP      
001F04 00                NOP      
001F05 00                NOP      
001F06 1232C2            LCALL    ?L?COM0054
001F09 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 35


001F0A 00                NOP      
001F0B 00                NOP      
001F0C 00                NOP      
001F0D 1232B9            LCALL    ?L?COM0053
001F10 00                NOP      
001F11 00                NOP      
001F12 00                NOP      
001F13 00                NOP      
001F14 1232B0            LCALL    ?L?COM0052
001F17 00                NOP      
001F18 00                NOP      
001F19 00                NOP      
001F1A 00                NOP      
001F1B 1232A7            LCALL    ?L?COM0051
001F1E 00                NOP      
001F1F 00                NOP      
001F20 00                NOP      
001F21 00                NOP      
001F22 12329E            LCALL    ?L?COM0050
001F25 00                NOP      
001F26 00                NOP      
001F27 00                NOP      
001F28 00                NOP      
001F29 123295            LCALL    ?L?COM004F
001F2C 00                NOP      
001F2D 00                NOP      
001F2E 00                NOP      
001F2F 00                NOP      
001F30 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
  197:     c2m_TxStop();       /* tx frame stop */
001F32 D2A0              SETB     IO_DUT_C2M_SDA
001F34 53A6FE            ANL      P2MDOUT,#0FEH
001F37 123273            LCALL    ?L?COM0015
001F3A 00                NOP      
001F3B 00                NOP      
001F3C 00                NOP      
001F3D 00                NOP      
001F3E D297              SETB     IO_DUT_C2M_SCL
001F40 023305            LJMP     ?L?COM0020
  198: 
  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
001F43 E4                CLR      A
001F44 754810            MOV      _timeout+03H,#010H
001F47 754727            MOV      _timeout+02H,#027H
001F4A F546              MOV      _timeout+01H,A
001F4C F545              MOV      _timeout,A
001F4E         ?C0794?DRV_C2M:
001F4E 9119              ACALL    c2m_ReadAR
001F50 EF                MOV      A,R7
001F51 20E00B            JB       ACC.0,?C0792?DRV_C2M
001F54 7845              MOV      R0,#LOW _timeout
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 36


001F56 123373            LCALL    ?L?COM000C
001F59 6004              JZ       ?C0792?DRV_C2M
001F5B 51D5              ACALL    ?L?COM0008
001F5D 80EF              SJMP     ?C0794?DRV_C2M
001F5F         ?C0792?DRV_C2M:
  367: }
001F5F A146              AJMP     c2m_ReadDR
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  153: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  154: {
  155:     UINT8   vLoop;
  156:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
001F61 E4                CLR      A
001F62 FD                MOV      R5,A
  157: 
  158:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
001F63 7C08              MOV      R4,#08H
001F65         ?C0110?PKT_I2CM:
  159:     {
  160:         PKT_I2CM_SET_SCL(HIGH);
001F65 00                NOP      
001F66 00                NOP      
001F67 00                NOP      
001F68 00                NOP      
001F69 00                NOP      
001F6A 00                NOP      
001F6B 00                NOP      
001F6C 00                NOP      
001F6D 00                NOP      
001F6E 00                NOP      
001F6F 00                NOP      
001F70 00                NOP      
001F71 00                NOP      
001F72 00                NOP      
001F73 1234D3            LCALL    ?L?COM0031
001F76         ?C0135?PKT_I2CM:
001F76 20820E            JB       IO_DUT_I2CM_SCL,?C0114?PKT_I2CM
001F79 1234CC            LCALL    ?L?COM002F
001F7C 7002              JNZ      ?C0664?PKT_I2CM
001F7E 153F              DEC      _loop
001F80         ?C0664?PKT_I2CM:
001F80 4E                ORL      A,R6
001F81 6004              JZ       ?C0114?PKT_I2CM
001F83 51D5              ACALL    ?L?COM0008
001F85 80EF              SJMP     ?C0135?PKT_I2CM
001F87         ?C0114?PKT_I2CM:
  161:         vData <<= 1;
001F87 ED                MOV      A,R5
001F88 25E0              ADD      A,ACC
001F8A FD                MOV      R5,A
  162:         vData |= PKT_I2CM_GET_SDA();
001F8B A292              MOV      C,IO_DUT_I2CM_SDA
001F8D E4                CLR      A
001F8E 33                RLC      A
001F8F 4205              ORL      AR5,A
  163:         PKT_I2CM_SET_SCL(LOW);
001F91 00                NOP      
001F92 00                NOP      
001F93 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 37


001F94 00                NOP      
001F95 00                NOP      
001F96 00                NOP      
001F97 00                NOP      
001F98 00                NOP      
001F99 00                NOP      
001F9A 00                NOP      
001F9B 00                NOP      
001F9C 00                NOP      
001F9D 00                NOP      
001F9E 00                NOP      
001F9F C282              CLR      IO_DUT_I2CM_SCL
001FA1 8000              SJMP     ?C0112?PKT_I2CM
  164:     }
001FA3         ?C0112?PKT_I2CM:
001FA3 1C                DEC      R4
001FA4 EC                MOV      A,R4
001FA5 70BE              JNZ      ?C0110?PKT_I2CM
001FA7         ?C0163?PKT_I2CM:
  165: 
  166:     /* send ACK/NAK */
  167:     PKT_I2CM_SET_SDA(bSendNAK);
001FA7 A23A              MOV      C,bSendNAK
001FA9 9292              MOV      IO_DUT_I2CM_SDA,C
  168:     PKT_I2CM_SET_SCL(HIGH);
001FAB 00                NOP      
001FAC 00                NOP      
001FAD 00                NOP      
001FAE 00                NOP      
001FAF 00                NOP      
001FB0 00                NOP      
001FB1 00                NOP      
001FB2 00                NOP      
001FB3 00                NOP      
001FB4 00                NOP      
001FB5 00                NOP      
001FB6 00                NOP      
001FB7 00                NOP      
001FB8 00                NOP      
001FB9 1234D3            LCALL    ?L?COM0031
001FBC         ?C0186?PKT_I2CM:
001FBC 20820E            JB       IO_DUT_I2CM_SCL,?C0196?PKT_I2CM
001FBF 1234CC            LCALL    ?L?COM002F
001FC2 7002              JNZ      ?C0666?PKT_I2CM
001FC4 153F              DEC      _loop
001FC6         ?C0666?PKT_I2CM:
001FC6 4E                ORL      A,R6
001FC7 6004              JZ       ?C0196?PKT_I2CM
001FC9 51D5              ACALL    ?L?COM0008
001FCB 80EF              SJMP     ?C0186?PKT_I2CM
  169:     PKT_I2CM_SET_SCL(LOW);
001FCD         ?C0196?PKT_I2CM:
001FCD 00                NOP      
001FCE 00                NOP      
001FCF 00                NOP      
001FD0 00                NOP      
001FD1 00                NOP      
001FD2 00                NOP      
001FD3 00                NOP      
001FD4 00                NOP      
001FD5 00                NOP      
001FD6 00                NOP      
001FD7 00                NOP      
001FD8 00                NOP      
001FD9 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 38


001FDA 00                NOP      
001FDB C282              CLR      IO_DUT_I2CM_SCL
001FDD 8000              SJMP     ?C0214?PKT_I2CM
001FDF         ?C0214?PKT_I2CM:
  170:     PKT_I2CM_SET_SDA(HIGH);
001FDF D292              SETB     IO_DUT_I2CM_SDA
  171: 
  172:     return vData;
001FE1 AF05              MOV      R7,AR5
  173: }
001FE3 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
001FE4 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
001FE7 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
001FEA         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
001FEA C3                CLR      C
001FEB 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
001FEC         ?C0831?DRV_C2M:
001FEC 123482            LCALL    ?L?COM0028
001FEF 53A57F            ANL      P1MDOUT,#07FH
  425:     return TRUE;
001FF2 D3                SETB     C
  426: }
001FF3 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION _CFG_ROM_SET8 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
   71: 
001FF4 8D44              MOV      vData,R5
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
001FF6 7A00              MOV      R2,#HIGH vData
001FF8 7B44              MOV      R3,#LOW vData
001FFA 7D01              MOV      R5,#01H
001FFC 022306            LJMP     _DRV_FLASH_Update
----- FUNCTION _CFG_ROM_SET8 (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  176: static BOOL _pkt_i2cm_CheckReady(void)
  177: {
  178:     if ((PKT_I2CM_GET_SCL() == HIGH)
  179:         && (PKT_I2CM_GET_SDA() == HIGH))
002000 308205            JNB      IO_DUT_I2CM_SCL,?C0216?PKT_I2CM
002003 309202            JNB      IO_DUT_I2CM_SDA,?C0216?PKT_I2CM
  180:     {
  181:         /* the I2C only can be started, while SCL/SDA is at high level */
  182:         return TRUE;
002006 D3                SETB     C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 39


002007 22                RET      
  183:     }
002008         ?C0216?PKT_I2CM:
  184:     else if ((PKT_I2CM_GET_SCL() == HIGH)
002008 208203            JB       IO_DUT_I2CM_SCL,$ + 6H
00200B 0220DA            LJMP     ?C0218?PKT_I2CM
00200E 309202            JNB      IO_DUT_I2CM_SDA,$ + 5H
002011 01DA              AJMP     ?C0218?PKT_I2CM
  185:              && (PKT_I2CM_GET_SDA() == LOW))
  186:     {
  187:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  188:          *  we should attempt to reset the I2C bus,
  189:          *  to recover the SDA to idle state.
  190:          *
  191:          * Memory (Management Interface) Reset:
  192:          *  1) Clock up to 9 cycles.
  193:          *  2) Look for SDA high in each cycle while SCL is high.
  194:          *  3) Create a START condition as SDA is high.
  195:          */
  196: 
  197:         UINT8   vLoop;
  198: 
  199:         for (vLoop = 9; vLoop != 0; vLoop--)
002013 753F09            MOV      vLoop,#09H
002016         ?C0220?PKT_I2CM:
  200:         {
  201:             PKT_I2CM_SET_SCL(LOW);
002016 00                NOP      
002017 00                NOP      
002018 00                NOP      
002019 00                NOP      
00201A 00                NOP      
00201B 00                NOP      
00201C 00                NOP      
00201D 00                NOP      
00201E 00                NOP      
00201F 00                NOP      
002020 00                NOP      
002021 00                NOP      
002022 00                NOP      
002023 00                NOP      
002024 C282              CLR      IO_DUT_I2CM_SCL
002026 8000              SJMP     ?C0255?PKT_I2CM
  202:             PKT_I2CM_SET_SCL(HIGH);
002028         ?C0255?PKT_I2CM:
002028 00                NOP      
002029 00                NOP      
00202A 00                NOP      
00202B 00                NOP      
00202C 00                NOP      
00202D 00                NOP      
00202E 00                NOP      
00202F 00                NOP      
002030 00                NOP      
002031 00                NOP      
002032 00                NOP      
002033 00                NOP      
002034 00                NOP      
002035 00                NOP      
002036 123545            LCALL    ?L?COM0040
002039         ?C0269?PKT_I2CM:
002039 208212            JB       IO_DUT_I2CM_SCL,?C0222?PKT_I2CM
00203C E541              MOV      A,_loop+01H
00203E 1541              DEC      _loop+01H
002040 AE40              MOV      R6,_loop
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 40


002042 7002              JNZ      ?C0669?PKT_I2CM
002044 1540              DEC      _loop
002046         ?C0669?PKT_I2CM:
002046 4E                ORL      A,R6
002047 6005              JZ       ?C0222?PKT_I2CM
002049 121AD5            LCALL    ?L?COM0008
00204C 80EB              SJMP     ?C0269?PKT_I2CM
  203:         }
00204E         ?C0222?PKT_I2CM:
00204E D53FC5            DJNZ     vLoop,?C0220?PKT_I2CM
002051         ?C0221?PKT_I2CM:
  204: 
  205:         if (PKT_I2CM_GET_SDA() == HIGH)
002051 209202            JB       IO_DUT_I2CM_SDA,$ + 5H
002054 01DA              AJMP     ?C0218?PKT_I2CM
  206:         {
  207:             _pkt_i2cm_Start();
002056 D292              SETB     IO_DUT_I2CM_SDA
002058 00                NOP      
002059 00                NOP      
00205A 00                NOP      
00205B 00                NOP      
00205C 00                NOP      
00205D 00                NOP      
00205E 00                NOP      
00205F 00                NOP      
002060 00                NOP      
002061 00                NOP      
002062 00                NOP      
002063 00                NOP      
002064 00                NOP      
002065 00                NOP      
002066 123545            LCALL    ?L?COM0040
002069         ?C0300?PKT_I2CM:
002069 208212            JB       IO_DUT_I2CM_SCL,?C0307?PKT_I2CM
00206C E541              MOV      A,_loop+01H
00206E 1541              DEC      _loop+01H
002070 AE40              MOV      R6,_loop
002072 7002              JNZ      ?C0670?PKT_I2CM
002074 1540              DEC      _loop
002076         ?C0670?PKT_I2CM:
002076 4E                ORL      A,R6
002077 6005              JZ       ?C0307?PKT_I2CM
002079 121AD5            LCALL    ?L?COM0008
00207C 80EB              SJMP     ?C0300?PKT_I2CM
00207E         ?C0307?PKT_I2CM:
00207E 00                NOP      
00207F 00                NOP      
002080 00                NOP      
002081 00                NOP      
002082 00                NOP      
002083 00                NOP      
002084 00                NOP      
002085 00                NOP      
002086 00                NOP      
002087 00                NOP      
002088 00                NOP      
002089 00                NOP      
00208A 00                NOP      
00208B 00                NOP      
00208C C292              CLR      IO_DUT_I2CM_SDA
00208E 00                NOP      
00208F 00                NOP      
002090 00                NOP      
002091 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 41


002092 00                NOP      
002093 00                NOP      
002094 00                NOP      
002095 00                NOP      
002096 00                NOP      
002097 00                NOP      
002098 00                NOP      
002099 00                NOP      
00209A 00                NOP      
00209B 00                NOP      
00209C C282              CLR      IO_DUT_I2CM_SCL
00209E 8000              SJMP     ?C0349?PKT_I2CM
  208:             _pkt_i2cm_Stop();
0020A0         ?C0349?PKT_I2CM:
0020A0 C292              CLR      IO_DUT_I2CM_SDA
0020A2 00                NOP      
0020A3 00                NOP      
0020A4 00                NOP      
0020A5 00                NOP      
0020A6 00                NOP      
0020A7 00                NOP      
0020A8 00                NOP      
0020A9 00                NOP      
0020AA 00                NOP      
0020AB 00                NOP      
0020AC 00                NOP      
0020AD 00                NOP      
0020AE 00                NOP      
0020AF 00                NOP      
0020B0 123545            LCALL    ?L?COM0040
0020B3         ?C0372?PKT_I2CM:
0020B3 208212            JB       IO_DUT_I2CM_SCL,?C0379?PKT_I2CM
0020B6 E541              MOV      A,_loop+01H
0020B8 1541              DEC      _loop+01H
0020BA AE40              MOV      R6,_loop
0020BC 7002              JNZ      ?C0672?PKT_I2CM
0020BE 1540              DEC      _loop
0020C0         ?C0672?PKT_I2CM:
0020C0 4E                ORL      A,R6
0020C1 6005              JZ       ?C0379?PKT_I2CM
0020C3 121AD5            LCALL    ?L?COM0008
0020C6 80EB              SJMP     ?C0372?PKT_I2CM
0020C8         ?C0379?PKT_I2CM:
0020C8 00                NOP      
0020C9 00                NOP      
0020CA 00                NOP      
0020CB 00                NOP      
0020CC 00                NOP      
0020CD 00                NOP      
0020CE 00                NOP      
0020CF 00                NOP      
0020D0 00                NOP      
0020D1 00                NOP      
0020D2 00                NOP      
0020D3 00                NOP      
0020D4 00                NOP      
0020D5 00                NOP      
0020D6 D292              SETB     IO_DUT_I2CM_SDA
  209: 
  210:             /* we have successfully recovered the SDA line to idle state */
  211:             return TRUE;
0020D8 D3                SETB     C
0020D9 22                RET      
  212:         }
  213:     }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 42


  214:     else
  215:     {
  216:         /* unsupported stretching on SCL/SDA line, operation fail */
  217:     }
0020DA         ?C0218?PKT_I2CM:
  218: 
  219:     return FALSE;
0020DA C3                CLR      C
  220: }
0020DB 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _pkt_i2cm_vs_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  299: static BOOL pkt_i2cm_vs_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  300: {
0020DC 123597            LCALL    ?L?COM005A
0020DF A3                INC      DPTR
0020E0 1233DD            LCALL    ?L?COM0010
  301:     static UINT8 vRegOffset = 0x00;
  302:     UINT16  vWriteLen = pPayload->vWriteLen;
  303:     UINT16  vReadLen  = pPayload->vReadLen;
0020E3 123502            LCALL    ?L?COM003B
  304: 
  305:     /* send write stream */
  306:     if (vWriteLen != 0)
0020E6 E538              MOV      A,vWriteLen+01H
0020E8 4537              ORL      A,vWriteLen
0020EA 6036              JZ       ?C0607?PKT_I2CM
  307:     {
  308:         /* 1st byte is always register offset */
  309:         vRegOffset = pPayload->aBuf[0];
0020EC 8F82              MOV      DPL,R7
0020EE 8E83              MOV      DPH,R6
0020F0 E582              MOV      A,DPL
0020F2 2405              ADD      A,#05H
0020F4 F582              MOV      DPL,A
0020F6 E4                CLR      A
0020F7 3583              ADDC     A,DPH
0020F9 F583              MOV      DPH,A
0020FB E0                MOVX     A,@DPTR
0020FC F514              MOV      vRegOffset,A
  310:         if (vWriteLen > 0x100)
0020FE D3                SETB     C
0020FF E538              MOV      A,vWriteLen+01H
002101 9400              SUBB     A,#00H
002103 E537              MOV      A,vWriteLen
002105 9401              SUBB     A,#01H
002107 4001              JC       ?C0608?PKT_I2CM
  311:         {
  312:             /* write length overflow */
  313:             return FALSE;
002109 22                RET      
  314:         }
00210A         ?C0608?PKT_I2CM:
  315: 
  316:         /* send write buffer */
  317:         CFG_DB_WriteFlush(vRegOffset, (UINT8)(vWriteLen-1), &(pPayload->aBuf[1]));
00210A E538              MOV      A,vWriteLen+01H
00210C 14                DEC      A
00210D FD                MOV      R5,A
00210E E536              MOV      A,pPayload+01H
002110 2406              ADD      A,#06H
002112 FB                MOV      R3,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 43


002113 E4                CLR      A
002114 3535              ADDC     A,pPayload
002116 FA                MOV      R2,A
002117 AF14              MOV      R7,vRegOffset
002119 31CC              ACALL    _CFG_DB_WriteFlush
  318:         vRegOffset = (UINT8)(vRegOffset+vWriteLen-1);
00211B E514              MOV      A,vRegOffset
00211D 2538              ADD      A,vWriteLen+01H
00211F 14                DEC      A
002120 F514              MOV      vRegOffset,A
  319:     }
002122         ?C0607?PKT_I2CM:
  320: 
  321:     /* send read stream */
  322:     if (vReadLen != 0)
002122 E53A              MOV      A,vReadLen+01H
002124 4539              ORL      A,vReadLen
002126 601C              JZ       ?C0610?PKT_I2CM
  323:     {
  324:         UINT16  vLoop;
  325: 
  326:         /* read data */
  327:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
002128 E4                CLR      A
002129 F53B              MOV      vLoop,A
00212B F53C              MOV      vLoop+01H,A
00212D         ?C0611?PKT_I2CM:
00212D 1235B8            LCALL    ?L?COM005E
002130 9539              SUBB     A,vReadLen
002132 5010              JNC      ?C0610?PKT_I2CM
  328:         {
  329:             pPayload->aBuf[vWriteLen+vLoop] = CFG_DB_ReadByte(vRegOffset++);
002134 AF14              MOV      R7,vRegOffset
002136 0514              INC      vRegOffset
002138 123000            LCALL    _CFG_DB_ReadByte
00213B 12341F            LCALL    ?L?COM0017
00213E 7002              JNZ      ?C0681?PKT_I2CM
002140 053B              INC      vLoop
002142         ?C0681?PKT_I2CM:
002142 80E9              SJMP     ?C0611?PKT_I2CM
  330:         }
  331:     }
002144         ?C0610?PKT_I2CM:
  332: 
  333:     return TRUE;
002144 D3                SETB     C
  334: }
002145 22                RET      
----- FUNCTION _pkt_i2cm_vs_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  348: UINT16 PKT_I2CM_Stream(void)
  349: {
  350:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  351:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
002146 753300            MOV      pPayload,#HIGH vFrame+0CH
002149 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
  352: 
  353:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  354:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
00214C 1234FA            LCALL    ?L?COM0037
00214F E0                MOVX     A,@DPTR
002150 FE                MOV      R6,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 44


002151 A3                INC      DPTR
002152 E0                MOVX     A,@DPTR
002153 FF                MOV      R7,A
002154 2405              ADD      A,#05H
002156 FD                MOV      R5,A
002157 E4                CLR      A
002158 3E                ADDC     A,R6
002159 FC                MOV      R4,A
00215A 90004A            MOV      DPTR,#vFrame+0AH
00215D E0                MOVX     A,@DPTR
00215E B50424            CJNE     A,AR4,?C0649?PKT_I2CM
002161 A3                INC      DPTR
002162 E0                MOVX     A,@DPTR
002163 B5051F            CJNE     A,AR5,?C0649?PKT_I2CM
002166 1234FA            LCALL    ?L?COM0037
002169 A3                INC      DPTR
00216A A3                INC      DPTR
00216B E0                MOVX     A,@DPTR
00216C FC                MOV      R4,A
00216D A3                INC      DPTR
00216E E0                MOVX     A,@DPTR
00216F FD                MOV      R5,A
002170 EF                MOV      A,R7
002171 2D                ADD      A,R5
002172 FF                MOV      R7,A
002173 EE                MOV      A,R6
002174 3C                ADDC     A,R4
002175 FE                MOV      R6,A
002176 E4                CLR      A
002177 FC                MOV      R4,A
002178 FD                MOV      R5,A
002179 7B33              MOV      R3,#033H
00217B 7A04              MOV      R2,#04H
00217D F9                MOV      R1,A
00217E F8                MOV      R0,A
00217F C3                CLR      C
002180 120607            LCALL    ?C?SLCMP
002183 5005              JNC      ?C0648?PKT_I2CM
002185         ?C0649?PKT_I2CM:
  355:     {
  356:         return PKT_REPLY_Fail_InvalidLen;
002185 7E03              MOV      R6,#03H
002187 7F04              MOV      R7,#04H
002189 22                RET      
  357:     }
00218A         ?C0648?PKT_I2CM:
  358: 
  359:   #if PKT_I2CM_VS_SUPPORT
  360:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
00218A 853482            MOV      DPL,pPayload+01H
00218D 853383            MOV      DPH,pPayload
002190 E0                MOVX     A,@DPTR
002191 AF34              MOV      R7,pPayload+01H
002193 AE33              MOV      R6,pPayload
002195 B4FE04            CJNE     A,#0FEH,?C0652?PKT_I2CM
002198 11DC              ACALL    _pkt_i2cm_vs_Stream
00219A 8003              SJMP     ?C0653?PKT_I2CM
00219C         ?C0652?PKT_I2CM:
00219C 121942            LCALL    _pkt_i2cm_Stream
00219F         ?C0653?PKT_I2CM:
00219F 5026              JNC      ?C0651?PKT_I2CM
  361:         pkt_i2cm_vs_Stream(pPayload) :
  362:         pkt_i2cm_Stream(pPayload))
  363:   #else
  364:     if (pkt_i2cm_Stream(pPayload))
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 45


  365:   #endif
  366:     {
  367:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  368:                            + pPayload->vWriteLen
  369:                            + pPayload->vReadLen);
0021A1 1234FA            LCALL    ?L?COM0037
0021A4 E0                MOVX     A,@DPTR
0021A5 FE                MOV      R6,A
0021A6 A3                INC      DPTR
0021A7 E0                MOVX     A,@DPTR
0021A8 2405              ADD      A,#05H
0021AA FF                MOV      R7,A
0021AB E4                CLR      A
0021AC 3E                ADDC     A,R6
0021AD FE                MOV      R6,A
0021AE 1234FA            LCALL    ?L?COM0037
0021B1 A3                INC      DPTR
0021B2 A3                INC      DPTR
0021B3 E0                MOVX     A,@DPTR
0021B4 FC                MOV      R4,A
0021B5 A3                INC      DPTR
0021B6 E0                MOVX     A,@DPTR
0021B7 2F                ADD      A,R7
0021B8 FF                MOV      R7,A
0021B9 EC                MOV      A,R4
0021BA 3E                ADDC     A,R6
0021BB 90004A            MOV      DPTR,#vFrame+0AH
0021BE F0                MOVX     @DPTR,A
0021BF A3                INC      DPTR
0021C0 EF                MOV      A,R7
0021C1 F0                MOVX     @DPTR,A
  370:         return PKT_REPLY_Done_ExecNoError;
0021C2 7E01              MOV      R6,#01H
0021C4 7F40              MOV      R7,#040H
0021C6 22                RET      
  371:     }
0021C7         ?C0651?PKT_I2CM:
  372:     else
  373:     {
  374:         return PKT_REPLY_Fail_I2cNoAck;
0021C7 7E03              MOV      R6,#03H
0021C9 7F40              MOV      R7,#040H
  375:     }
  376: }
0021CB 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _CFG_DB_WriteFlush (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  167: void CFG_DB_WriteFlush
  168: (
0021CC 8F3D              MOV      vOffset,R7
0021CE 8D3E              MOV      vCount,R5
0021D0 8A3F              MOV      pBuf,R2
0021D2 8B40              MOV      pBuf+01H,R3
  169:     IN       UINT8            vOffset,
  170:     IN       UINT8            vCount,
  171:     IN const UINT8 SEG_XDATA *pBuf
  172: )
  173: {
  174:     SINT8   vPID = cfg_db_GetPID(vOffset);
0021D4 122F02            LCALL    _cfg_db_GetPID
0021D7 8F41              MOV      vPID,R7
  175:     UINT8   vPageSize;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 46


  176: 
  177:     if ((vPID == MEMPAGE_PID_INVALID) || (vCount == 0))
0021D9 E541              MOV      A,vPID
0021DB F4                CPL      A
0021DC 7002              JNZ      $ + 4H
0021DE 6105              AJMP     ?C0056?CFG_DB
0021E0 E53E              MOV      A,vCount
0021E2 7002              JNZ      $ + 4H
0021E4 6105              AJMP     ?C0056?CFG_DB
  178:     {
  179:         /* invalid page, or zero flush length */
  180:         return;
  181:     }
0021E6         ?C0054?CFG_DB:
  182: 
  183:     /* limit Rx FIFO length to page boundary */
  184:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
0021E6 123569            LCALL    ?L?COM0047
0021E9 4009              JC       ?C0057?CFG_DB
0021EB 123556            LCALL    ?L?COM0045
0021EE 5004              JNC      ?C0057?CFG_DB
0021F0 7F20              MOV      R7,#020H
0021F2 8002              SJMP     ?C0058?CFG_DB
0021F4         ?C0057?CFG_DB:
0021F4 7F80              MOV      R7,#080H
0021F6         ?C0058?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  185:     vOffset  &= (vPageSize - 1);
0021F6 EF                MOV      A,R7
0021F7 14                DEC      A
0021F8 523D              ANL      vOffset,A
  186:     if (vOffset+vCount > vPageSize)
0021FA E53E              MOV      A,vCount
0021FC FD                MOV      R5,A
0021FD E53D              MOV      A,vOffset
0021FF 2D                ADD      A,R5
002200 FD                MOV      R5,A
002201 E4                CLR      A
002202 33                RLC      A
002203 FC                MOV      R4,A
002204 EF                MOV      A,R7
002205 FB                MOV      R3,A
002206 D3                SETB     C
002207 ED                MOV      A,R5
002208 9B                SUBB     A,R3
002209 7480              MOV      A,#080H
00220B F8                MOV      R0,A
00220C 6C                XRL      A,R4
00220D 98                SUBB     A,R0
00220E 4008              JC       ?C0059?CFG_DB
  187:     {
  188:         vCount = (vOffset+vCount) - vPageSize;
002210 E53D              MOV      A,vOffset
002212 253E              ADD      A,vCount
002214 C3                CLR      C
002215 9F                SUBB     A,R7
002216 F53E              MOV      vCount,A
  189:     }
002218         ?C0059?CFG_DB:
  190: 
  191:     if (vPID == MEMPAGE_PID_DIRECT_FE_60)
002218 E541              MOV      A,vPID
00221A 6401              XRL      A,#01H
00221C 7027              JNZ      ?C0060?CFG_DB
  192:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 47


  193:         /* A2.40-7F page */
  194: 
  195:         UINT8   vLoop;
  196:         for (vLoop=0; vLoop<vCount; vLoop++,vOffset++)
00221E F542              MOV      vLoop,A
002220         ?C0061?CFG_DB:
002220 E542              MOV      A,vLoop
002222 C3                CLR      C
002223 953E              SUBB     A,vCount
002225 501C              JNC      ?C0062?CFG_DB
  197:         {
  198:             UINT8   vData = pBuf[vLoop];
002227 123497            LCALL    ?L?COM0029
00222A F543              MOV      vData,A
  199: 
  200:             switch (vOffset)
00222C E53D              MOV      A,vOffset
00222E 24E5              ADD      A,#0E5H
002230 24FB              ADD      A,#0FBH
002232 5004              JNC      ?C0077?CFG_DB
002234 2408              ADD      A,#08H
002236 7005              JNZ      ?C0063?CFG_DB
  201:             {
  202:                 case CFG(RT_EVB_CTRL):
  203:                     /* EVB/DUT related */
  204:                 case CFG(Vendor_PWD_Entry)+0:
  205:                 case CFG(Vendor_PWD_Entry)+1:
  206:                 case CFG(Vendor_PWD_Entry)+2:
  207:                 case CFG(Vendor_PWD_Entry)+3:
  208:                 case CFG(Vendor_Page_Select):
  209:                     CFG_SETV8(MEMPAGE_PID_DIRECT_FE_60, vOffset, vData);
002238         ?C0077?CFG_DB:
002238 A83D              MOV      R0,vOffset
00223A E543              MOV      A,vData
00223C F2                MOVX     @R0,A
  210:                     break;
  211: 
  212:                 default:    /* read-only field */
  213:                     /* do nothing */
  214:                     break;
  215:             }
  216:         }
00223D         ?C0063?CFG_DB:
00223D 0542              INC      vLoop
00223F 053D              INC      vOffset
002241 80DD              SJMP     ?C0061?CFG_DB
002243         ?C0062?CFG_DB:
  217: 
  218:         /* refresh password level */
  219:         CFG_PWD_RefreshLevel();
002243 81AA              AJMP     CFG_PWD_RefreshLevel
  220:     }
002245         ?C0060?CFG_DB:
  221:     else    /* other pages */
  222:     {
  223:         if (vPID == MEMPAGE_PID_DIRECT_FE_00)
002245 E541              MOV      A,vPID
002247 B4061B            CJNE     A,#06H,?C0083?CFG_DB
  224:         {
  225:             if (vOffset+vCount > MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
00224A E53D              MOV      A,vOffset
00224C 253E              ADD      A,vCount
00224E FF                MOV      R7,A
00224F E4                CLR      A
002250 33                RLC      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 48


002251 FE                MOV      R6,A
002252 D3                SETB     C
002253 EF                MOV      A,R7
002254 9460              SUBB     A,#060H
002256 EE                MOV      A,R6
002257 6480              XRL      A,#080H
002259 9480              SUBB     A,#080H
00225B 4008              JC       ?C0083?CFG_DB
  226:             {
  227:                 /* cross-write from A2.00-5F to A2.60-7F field,
  228:                  * only accept A2.00-5F field data.
  229:                  */
  230:                 vCount = (vOffset+vCount) - MEMMAP_REAL_OFFSET(DDM_EVB_TEMP);
00225D E53D              MOV      A,vOffset
00225F 253E              ADD      A,vCount
002261 24A0              ADD      A,#0A0H
002263 F53E              MOV      vCount,A
  231:             }
  232:         }
002265         ?C0083?CFG_DB:
  233: 
  234:         /* check password level, to make sure it's writable */
  235:         if (CFG_PWD_GetLevel() >= aPagePwdWriteTable[vPID])
002265 AF41              MOV      R7,vPID
002267 EF                MOV      A,R7
002268 33                RLC      A
002269 95E0              SUBB     A,ACC
00226B FE                MOV      R6,A
00226C 7425              MOV      A,#LOW aPagePwdWriteTable
00226E 2F                ADD      A,R7
00226F F582              MOV      DPL,A
002271 7416              MOV      A,#HIGH aPagePwdWriteTable
002273 3E                ADDC     A,R6
002274 1232DD            LCALL    ?L?COM0058
002277 9F                SUBB     A,R7
002278 5002              JNC      $ + 4H
00227A 6105              AJMP     ?C0056?CFG_DB
  236:         {
  237:             if (MEMPAGE_IsRAM(vPID))
00227C 12356A            LCALL    ?L?COM0048
00227F 405C              JC       ?C0086?CFG_DB
002281 123556            LCALL    ?L?COM0045
002284 5057              JNC      ?C0086?CFG_DB
  238:             {
  239:                 /* RAM page */
  240: 
  241:                 UINT8   vLoop;
  242:                 for (vLoop=0; vLoop<vCount; vLoop++)
002286 E4                CLR      A
002287 F542              MOV      vLoop,A
002289         ?C0087?CFG_DB:
002289 E542              MOV      A,vLoop
00228B C3                CLR      C
00228C 953E              SUBB     A,vCount
00228E 5075              JNC      ?C0056?CFG_DB
  243:                 {
  244:                     CFG_SETV8(vPID, vOffset+vLoop, pBuf[vLoop]);
002290 123569            LCALL    ?L?COM0047
002293 401B              JC       ?C0093?CFG_DB
002295 123556            LCALL    ?L?COM0045
002298 5016              JNC      ?C0093?CFG_DB
00229A 123497            LCALL    ?L?COM0029
00229D FF                MOV      R7,A
00229E E53D              MOV      A,vOffset
0022A0 2542              ADD      A,vLoop
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 49


0022A2 FE                MOV      R6,A
0022A3 E541              MOV      A,vPID
0022A5 14                DEC      A
0022A6 C4                SWAP     A
0022A7 33                RLC      A
0022A8 54E0              ANL      A,#0E0H
0022AA 2E                ADD      A,R6
0022AB F8                MOV      R0,A
0022AC EF                MOV      A,R7
0022AD F2                MOVX     @R0,A
0022AE 8029              SJMP     ?C0089?CFG_DB
0022B0         ?C0093?CFG_DB:
0022B0 1235B0            LCALL    ?L?COM005D
0022B3 4024              JC       ?C0089?CFG_DB
0022B5 1235A8            LCALL    ?L?COM005C
0022B8 501F              JNC      ?C0089?CFG_DB
0022BA 122FA5            LCALL    ?L?COM0039
0022BD         ?C0107?CFG_DB:
0022BD C3                CLR      C
0022BE 33                RLC      A
0022BF CE                XCH      A,R6
0022C0 33                RLC      A
0022C1 CE                XCH      A,R6
0022C2 D8F9              DJNZ     R0,?C0107?CFG_DB
0022C4 122F96            LCALL    ?L?COM0044
0022C7 E53D              MOV      A,vOffset
0022C9 2542              ADD      A,vLoop
0022CB 7C00              MOV      R4,#00H
0022CD 2F                ADD      A,R7
0022CE FF                MOV      R7,A
0022CF EC                MOV      A,R4
0022D0 3E                ADDC     A,R6
0022D1 FE                MOV      R6,A
0022D2 123497            LCALL    ?L?COM0029
0022D5 FD                MOV      R5,A
0022D6 121FF4            LCALL    _CFG_ROM_SET8
  245:                 }
0022D9         ?C0089?CFG_DB:
0022D9 0542              INC      vLoop
0022DB 80AC              SJMP     ?C0087?CFG_DB
  246:             }
0022DD         ?C0086?CFG_DB:
  247:             else if (MEMPAGE_IsROM(vPID))
0022DD 1235B0            LCALL    ?L?COM005D
0022E0 4023              JC       ?C0056?CFG_DB
0022E2 1235A8            LCALL    ?L?COM005C
0022E5 501E              JNC      ?C0056?CFG_DB
  248:             {
  249:                 /* ROM page */
  250:                 EEPROM_MEMCPY(MEMPAGE_ROM_LMA(vPID)+vOffset, pBuf, vCount);
0022E7 122FA5            LCALL    ?L?COM0039
0022EA         ?C0108?CFG_DB:
0022EA C3                CLR      C
0022EB 33                RLC      A
0022EC CE                XCH      A,R6
0022ED 33                RLC      A
0022EE CE                XCH      A,R6
0022EF D8F9              DJNZ     R0,?C0108?CFG_DB
0022F1 122F96            LCALL    ?L?COM0044
0022F4 7C00              MOV      R4,#00H
0022F6 EF                MOV      A,R7
0022F7 253D              ADD      A,vOffset
0022F9 FF                MOV      R7,A
0022FA EC                MOV      A,R4
0022FB 3E                ADDC     A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 50


0022FC FE                MOV      R6,A
0022FD AB40              MOV      R3,pBuf+01H
0022FF AA3F              MOV      R2,pBuf
002301 AD3E              MOV      R5,vCount
002303 7106              ACALL    _DRV_FLASH_Update
  251:             }
  252:             else
  253:             {
  254:                 /* VIRTUAL page */
  255:                 /* do nothing */
  256:             }
  257:         }
  258:     }
  259: }
002305         ?C0056?CFG_DB:
002305 22                RET      
----- FUNCTION _CFG_DB_WriteFlush (END) -------


----- FUNCTION _DRV_FLASH_Update (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  179: void DRV_FLASH_Update
  180: (
002306 8E45              MOV      vFlashAddr,R6
002308 8F46              MOV      vFlashAddr+01H,R7
00230A 8A47              MOV      pBuf,R2
00230C 8B48              MOV      pBuf+01H,R3
;---- Variable 'vLen' assigned to Register 'R1' ----
00230E A905              MOV      R1,AR5
  181:     IN       UINT16           vFlashAddr,
  182:     IN       UINT8            vLen,
  183:     IN const UINT8 SEG_XDATA *pBuf
  184: )
  185: {
  186:     UINT8  bIntStatus;
  187:     UINT8  bErase;
  188:     UINT8  vLoop;
  189:     UINT16 vPageBase;
  190:     UINT16 vPageOffset;
  191: 
  192:     /* globally lock interrupt */
  193:     bIntStatus = DRV_INT_LockGlobalInterrupt();
002310 30AF05            JNB      EA,?C0011?DRV_FLASH
002313 C2AF              CLR      EA
002315 D3                SETB     C
002316 8001              SJMP     ?C0012?DRV_FLASH
002318         ?C0011?DRV_FLASH:
002318 C3                CLR      C
002319         ?C0012?DRV_FLASH:
002319 E4                CLR      A
00231A 33                RLC      A
00231B F549              MOV      bIntStatus,A
  194: 
  195:     /* calculate flash page base address & offset of this page */
  196:     vPageBase   = vFlashAddr & FLASH_PAGE_MASK;
00231D E545              MOV      A,vFlashAddr
00231F 54FE              ANL      A,#0FEH
002321 F54A              MOV      vPageBase,A
002323 754B00            MOV      vPageBase+01H,#00H
  197:     vPageOffset = vFlashAddr & ~FLASH_PAGE_MASK;
002326 E545              MOV      A,vFlashAddr
002328 5401              ANL      A,#01H
00232A F54C              MOV      vPageOffset,A
00232C 85464D            MOV      vPageOffset+01H,vFlashAddr+01H
  198: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 51


  199:     /* check whether need to erase flash page */
  200:     bErase = FALSE;
;---- Variable 'bErase' assigned to Register 'R7' ----
00232F E4                CLR      A
002330 FF                MOV      R7,A
  201:     for (vLoop = 0; vLoop < vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R6' ----
002331 FE                MOV      R6,A
002332         ?C0013?DRV_FLASH:
002332 EE                MOV      A,R6
002333 C3                CLR      C
002334 99                SUBB     A,R1
002335 5033              JNC      ?C0014?DRV_FLASH
  202:     {
  203:         UINT8   vFlashData = CODE_U8(vPageBase+vPageOffset+vLoop);
002337 E54B              MOV      A,vPageBase+01H
002339 254D              ADD      A,vPageOffset+01H
00233B FD                MOV      R5,A
00233C E54A              MOV      A,vPageBase
00233E 354C              ADDC     A,vPageOffset
002340 FC                MOV      R4,A
002341 EE                MOV      A,R6
002342 7A00              MOV      R2,#00H
002344 2D                ADD      A,R5
002345 FD                MOV      R5,A
002346 EA                MOV      A,R2
002347 3C                ADDC     A,R4
002348 8D82              MOV      DPL,R5
00234A F583              MOV      DPH,A
00234C E4                CLR      A
00234D 93                MOVC     A,@A+DPTR
00234E F54E              MOV      vFlashData,A
  204:         UINT8   vRamData   = pBuf[vLoop];
002350 E548              MOV      A,pBuf+01H
002352 2E                ADD      A,R6
002353 F582              MOV      DPL,A
002355 E4                CLR      A
002356 3547              ADDC     A,pBuf
002358 F583              MOV      DPH,A
00235A E0                MOVX     A,@DPTR
00235B F54F              MOV      vRamData,A
  205: 
  206:         if ((vFlashData & vRamData) != vRamData)
00235D 554E              ANL      A,vFlashData
00235F 654F              XRL      A,vRamData
002361 6004              JZ       ?C0015?DRV_FLASH
  207:         {
  208:             bErase = TRUE;
002363 7F01              MOV      R7,#01H
  209:             break;
002365 8003              SJMP     ?C0014?DRV_FLASH
  210:         }
  211:     }
002367         ?C0015?DRV_FLASH:
002367 0E                INC      R6
002368 80C8              SJMP     ?C0013?DRV_FLASH
00236A         ?C0014?DRV_FLASH:
  212: 
  213:     if (!bErase)
00236A EF                MOV      A,R7
00236B 700B              JNZ      ?C0017?DRV_FLASH
  214:     {
  215:         /* no need to erase,
  216:           * just write the new data into flash is OK.
  217:           */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 52


  218:         drv_flash_WriteBytes(vFlashAddr, vLen, (UINT16)pBuf, FALSE);
00236D 123520            LCALL    ?L?COM003D
002370 AF46              MOV      R7,vFlashAddr+01H
002372 AE45              MOV      R6,vFlashAddr
002374 71F8              ACALL    _drv_flash_WriteBytes
  219:     }
002376 8075              SJMP     ?C0021?DRV_FLASH
002378         ?C0017?DRV_FLASH:
  220:     else
  221:     {
  222:         UINT16 vWriteOffset;
  223: 
  224:         /* prepare cache page content, to the final flash page content:
  225:          *   1) copy other content into cache page;
  226:          *   2) update cache page with new data;
  227:          */
  228:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
002378 12358E            LCALL    ?L?COM0057
00237B AB4B              MOV      R3,vPageBase+01H
00237D AA4A              MOV      R2,vPageBase
00237F AD4D              MOV      R5,vPageOffset+01H
002381 AC4C              MOV      R4,vPageOffset
002383 71F4              ACALL    ?L?COM0043
  229:         drv_flash_WriteBytes(vWriteOffset, vPageOffset, vPageBase, TRUE);
  230:         vWriteOffset += vPageOffset;
002385 E54D              MOV      A,vPageOffset+01H
002387 254F              ADD      A,vWriteOffset+01H
002389 F54F              MOV      vWriteOffset+01H,A
00238B E54C              MOV      A,vPageOffset
00238D 354E              ADDC     A,vWriteOffset
00238F F54E              MOV      vWriteOffset,A
  231:         drv_flash_WriteBytes(vWriteOffset, vLen, (UINT16)pBuf, FALSE);
002391 123520            LCALL    ?L?COM003D
002394 71F4              ACALL    ?L?COM0043
  232:         vWriteOffset += vLen;
002396 E9                MOV      A,R1
002397 FF                MOV      R7,A
002398 7E00              MOV      R6,#00H
00239A 254F              ADD      A,vWriteOffset+01H
00239C F54F              MOV      vWriteOffset+01H,A
00239E EE                MOV      A,R6
00239F 354E              ADDC     A,vWriteOffset
0023A1 F54E              MOV      vWriteOffset,A
  233:         drv_flash_WriteBytes(vWriteOffset,
  234:                              FLASH_PAGE_SIZE - (vPageOffset+vLen),
  235:                              vPageBase+vPageOffset + vLen,
  236:                              TRUE);
0023A3 E54D              MOV      A,vPageOffset+01H
0023A5 2F                ADD      A,R7
0023A6 FF                MOV      R7,A
0023A7 EE                MOV      A,R6
0023A8 354C              ADDC     A,vPageOffset
0023AA FE                MOV      R6,A
0023AB C3                CLR      C
0023AC E4                CLR      A
0023AD 9F                SUBB     A,R7
0023AE FD                MOV      R5,A
0023AF 7402              MOV      A,#02H
0023B1 9E                SUBB     A,R6
0023B2 FC                MOV      R4,A
0023B3 E54B              MOV      A,vPageBase+01H
0023B5 254D              ADD      A,vPageOffset+01H
0023B7 FF                MOV      R7,A
0023B8 E54A              MOV      A,vPageBase
0023BA 354C              ADDC     A,vPageOffset
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 53


0023BC FE                MOV      R6,A
0023BD 7A00              MOV      R2,#00H
0023BF EF                MOV      A,R7
0023C0 29                ADD      A,R1
0023C1 FB                MOV      R3,A
0023C2 EA                MOV      A,R2
0023C3 3E                ADDC     A,R6
0023C4 FA                MOV      R2,A
0023C5 D238              SETB     ?_drv_flash_WriteBytes?BIT
0023C7 71F4              ACALL    ?L?COM0043
  237: 
  238:         /* erase target flash page */
  239:         drv_flash_ErasePage(vPageBase);
0023C9 E4                CLR      A
0023CA FB                MOV      R3,A
0023CB 7D03              MOV      R5,#03H
0023CD AF4B              MOV      R7,vPageBase+01H
0023CF AE4A              MOV      R6,vPageBase
0023D1 9152              ACALL    _drv_flash_Control
  240: 
  241:         /* copy cache page content into target flash page */
  242:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
0023D3 12358E            LCALL    ?L?COM0057
0023D6 AB4F              MOV      R3,vWriteOffset+01H
0023D8 AA4E              MOV      R2,vWriteOffset
0023DA 7D00              MOV      R5,#00H
0023DC 7C02              MOV      R4,#02H
0023DE AF4B              MOV      R7,vPageBase+01H
0023E0 AE4A              MOV      R6,vPageBase
0023E2 71F8              ACALL    _drv_flash_WriteBytes
  243:         drv_flash_WriteBytes(vPageBase, FLASH_PAGE_SIZE, vWriteOffset, TRUE);
  244: 
  245:         /* erase flash cache page */
  246:         drv_flash_ErasePage(FLASH_CACHE_PAGE_BASE);
0023E4 E4                CLR      A
0023E5 FB                MOV      R3,A
0023E6 7D03              MOV      R5,#03H
0023E8 FF                MOV      R7,A
0023E9 7E3A              MOV      R6,#03AH
0023EB 9152              ACALL    _drv_flash_Control
  247:     }
0023ED         ?C0021?DRV_FLASH:
  248: 
  249:     /* restore interrupt status */
  250:     DRV_INT_UnlockGlobalInterrupt(bIntStatus);
0023ED E549              MOV      A,bIntStatus
0023EF 24FF              ADD      A,#0FFH
0023F1 92AF              MOV      EA,C
  251: }
0023F3 22                RET      
----- FUNCTION _DRV_FLASH_Update (END) -------


----- FUNCTION ?L?COM0043 (BEGIN) -----
0023F4 AF4F              MOV      R7,vWriteOffset+01H
0023F6 AE4E              MOV      R6,vWriteOffset
----- FUNCTION _drv_flash_WriteBytes (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  137: static void drv_flash_WriteBytes
  138: (
0023F8 8E50              MOV      vFlashAddr,R6
0023FA 8F51              MOV      vFlashAddr+01H,R7
0023FC 8C52              MOV      vLen,R4
0023FE 8D53              MOV      vLen+01H,R5
002400 8A54              MOV      vDataAddr,R2
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 54


002402 8B55              MOV      vDataAddr+01H,R3
  139:     IN UINT16     vFlashAddr,
  140:     IN UINT16     vLen,
  141:     IN UINT16     vDataAddr,
  142:     IN BOOL       bFromFlash
  143: )
  144: {
002404         ?C0005?DRV_FLASH:
  145:     while (vLen--)
002404 E553              MOV      A,vLen+01H
002406 1553              DEC      vLen+01H
002408 AE52              MOV      R6,vLen
00240A 7002              JNZ      ?C0023?DRV_FLASH
00240C 1552              DEC      vLen
00240E         ?C0023?DRV_FLASH:
00240E 4E                ORL      A,R6
00240F 6040              JZ       ?C0010?DRV_FLASH
  146:     {
  147:         UINT8   vData;
  148: 
  149:         vData = (bFromFlash? CODE_U8(vDataAddr) : XDATA_U8((vDataAddr)&0xFF));
002411 30380B            JNB      bFromFlash,?C0007?DRV_FLASH
002414 855582            MOV      DPL,vDataAddr+01H
002417 855483            MOV      DPH,vDataAddr
00241A E4                CLR      A
00241B 93                MOVC     A,@A+DPTR
00241C FF                MOV      R7,A
00241D 8008              SJMP     ?C0008?DRV_FLASH
00241F         ?C0007?DRV_FLASH:
00241F 855582            MOV      DPL,vDataAddr+01H
002422 758300            MOV      DPH,#00H
002425 E0                MOVX     A,@DPTR
002426 FF                MOV      R7,A
002427         ?C0008?DRV_FLASH:
002427 8F56              MOV      vData,R7
  150:         if (CODE_U8(vFlashAddr) != vData)
002429 855182            MOV      DPL,vFlashAddr+01H
00242C 855083            MOV      DPH,vFlashAddr
00242F E4                CLR      A
002430 93                MOVC     A,@A+DPTR
002431 6556              XRL      A,vData
002433 600A              JZ       ?C0009?DRV_FLASH
  151:         {
  152:             drv_flash_WriteByte(vFlashAddr, vData);
002435 AB56              MOV      R3,vData
002437 7D01              MOV      R5,#01H
002439 AF51              MOV      R7,vFlashAddr+01H
00243B AE50              MOV      R6,vFlashAddr
00243D 9152              ACALL    _drv_flash_Control
  153:         }
00243F         ?C0009?DRV_FLASH:
  154:         vFlashAddr++;
00243F 0551              INC      vFlashAddr+01H
002441 E551              MOV      A,vFlashAddr+01H
002443 7002              JNZ      ?C0024?DRV_FLASH
002445 0550              INC      vFlashAddr
002447         ?C0024?DRV_FLASH:
  155:         vDataAddr++;
002447 0555              INC      vDataAddr+01H
002449 E555              MOV      A,vDataAddr+01H
00244B 7002              JNZ      ?C0025?DRV_FLASH
00244D 0554              INC      vDataAddr
00244F         ?C0025?DRV_FLASH:
  156:     }
00244F 80B3              SJMP     ?C0005?DRV_FLASH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 55


  157: }
002451         ?C0010?DRV_FLASH:
002451 22                RET      
----- FUNCTION _drv_flash_WriteBytes (END) -------


----- FUNCTION _drv_flash_Control (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
   57: static void drv_flash_Control(UINT16 vFlashAddr, UINT8 vPSCTL, UINT8 vData)
   58: {
002452 8E57              MOV      vFlashAddr,R6
002454 8F58              MOV      vFlashAddr+01H,R7
;---- Variable 'vData' assigned to Register 'R3' ----
;---- Variable 'vPSCTL' assigned to Register 'R5' ----
   59:   #if DRV_WATCHDOG_SUPPORT
   60:     /* kick watchdog, to prevent watchdog reset MCU */
   61:     DRV_WATCHDOG_Kick();
   62:   #endif
   63: 
   64:     /* Force Enable VDD Monitor as a reset source */
   65:     DRV_RESET_EnableVDDMonitor();
002456 75FF80            MOV      VDM0CN,#080H
002459 75EF06            MOV      RSTSRC,#06H
   66: 
   67:     /* enable flash erase/write */
   68:     PSCTL = vPSCTL;
00245C 8D8F              MOV      PSCTL,R5
   69: 
   70:     /* write KEYs to unlock flash */
   71:     FLKEY = FLASH_KEY_1;
00245E A2AF              MOV      C,EA
002460 E4                CLR      A
002461 33                RLC      A
002462 24A5              ADD      A,#0A5H
002464 F5B7              MOV      FLKEY,A
   72:     FLKEY = FLASH_KEY_2;
002466 75B7F1            MOV      FLKEY,#0F1H
   73: 
   74:     /* write data into flash */
   75:     XDATA_U8(vFlashAddr) = vData;
002469 855882            MOV      DPL,vFlashAddr+01H
00246C 855783            MOV      DPH,vFlashAddr
00246F EB                MOV      A,R3
002470 F0                MOVX     @DPTR,A
   76: 
   77:     /* disable flash erase/write */
   78:     PSCTL = 0x00;
002471 E4                CLR      A
002472 F58F              MOV      PSCTL,A
   79: }
002474 22                RET      
----- FUNCTION _drv_flash_Control (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  340: UINT16 PKT_I2CM_Inspect(void)
  341: {
  342:     _pkt_i2cm_Init();
  343: 
002475 00                NOP      
002476 00                NOP      
002477 00                NOP      
002478 00                NOP      
002479 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 56


00247A 00                NOP      
00247B 00                NOP      
00247C 00                NOP      
00247D 00                NOP      
00247E 00                NOP      
00247F 00                NOP      
002480 00                NOP      
002481 00                NOP      
002482 00                NOP      
002483 D282              SETB     IO_DUT_I2CM_SCL
002485 753301            MOV      _loop,#01H
002488 7534F4            MOV      _loop+01H,#0F4H
00248B         ?C0639?PKT_I2CM:
00248B 208212            JB       IO_DUT_I2CM_SCL,?C0643?PKT_I2CM
00248E E534              MOV      A,_loop+01H
002490 1534              DEC      _loop+01H
002492 AE33              MOV      R6,_loop
002494 7002              JNZ      ?C0682?PKT_I2CM
002496 1533              DEC      _loop
002498         ?C0682?PKT_I2CM:
002498 4E                ORL      A,R6
002499 6005              JZ       ?C0643?PKT_I2CM
00249B 121AD5            LCALL    ?L?COM0008
00249E 80EB              SJMP     ?C0639?PKT_I2CM
0024A0         ?C0643?PKT_I2CM:
0024A0 D292              SETB     IO_DUT_I2CM_SDA
  344:     PKT_SetPayloadSize(0x00);
0024A2 122FE0            LCALL    ?L?COM002C
  345:     return PKT_REPLY_Done_ExecNoError;
0024A5 7E01              MOV      R6,#01H
0024A7 7F40              MOV      R7,#040H
  346: }
0024A9 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION CFG_PWD_RefreshLevel (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   38: void CFG_PWD_RefreshLevel(void)
   39: {
   40:     UINT32  vPasswd = CFG_GET(Vendor_PWD_Entry);
   41: 
0024AA 7F1B              MOV      R7,#01BH
0024AC 7E00              MOV      R6,#00H
0024AE 122EE5            LCALL    _CFG_RAM_GET32
0024B1 8F47              MOV      vPasswd+03H,R7
0024B3 8E46              MOV      vPasswd+02H,R6
0024B5 8D45              MOV      vPasswd+01H,R5
0024B7 8C44              MOV      vPasswd,R4
   42:     switch (vPasswd)
0024B9 1206CA            LCALL    ?C?LCASE
0024BC 24D2              DW       ?C0005?CFG_PWD
0024BE F626              DW       0F626H
0024C0 52A7              DW       052A7H
0024C2 24DA              DW       ?C0013?CFG_PWD
0024C4 FC54              DW       0FC54H
0024C6 D402              DW       0D402H
0024C8 24D6              DW       ?C0009?CFG_PWD
0024CA FDE7              DW       0FDE7H
0024CC 554F              DW       0554FH
0024CE 0000              DW       00H
0024D0 24DE              DW       ?C0014?CFG_PWD
   43:     {
   44:         case CFG_PWD_REBOOT:    /* reboot password */
0024D2         ?C0005?CFG_PWD:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 57


   45:             DRV_RESET_SoftwareReset();
0024D2 75EF12            MOV      RSTSRC,#012H
   46:             break;
0024D5 22                RET      
   47: 
   48:         case CFG_PWD_FACTORY:   /* factory password */
0024D6         ?C0009?CFG_PWD:
   49:             PWD_LEVEL_SET(CFG_PWD_LEVEL_FACTORY);
0024D6 751508            MOV      vCfgPwdLevel,#08H
   50:             break;
0024D9 22                RET      
   51: 
   52:         case CFG_PWD_OEM:       /* OEM password */
0024DA         ?C0013?CFG_PWD:
   53:             PWD_LEVEL_SET(CFG_PWD_LEVEL_OEM);
0024DA 751504            MOV      vCfgPwdLevel,#04H
   54:             break;
0024DD 22                RET      
   55: 
   56:         default:
0024DE         ?C0014?CFG_PWD:
   57:             if (vPasswd == CFG_GET(Vendor_PWD_UserRW))
0024DE 7F7C              MOV      R7,#07CH
0024E0 1234E9            LCALL    ?L?COM0036
0024E3 7004              JNZ      ?C0015?CFG_PWD
   58:             {
   59:                 /* UserRW password */
   60:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRW);
0024E5 751502            MOV      vCfgPwdLevel,#02H
   61:             }
0024E8 22                RET      
0024E9         ?C0015?CFG_PWD:
   62:             else if (vPasswd == CFG_GET(Vendor_PWD_UserRO))
0024E9 7F78              MOV      R7,#078H
0024EB 1234E9            LCALL    ?L?COM0036
0024EE 7004              JNZ      ?C0027?CFG_PWD
   63:             {
   64:                 /* UserRO password */
   65:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRO);
0024F0 751501            MOV      vCfgPwdLevel,#01H
   66:             }
0024F3 22                RET      
   67:             else
   68:             {
0024F4         ?C0027?CFG_PWD:
   69:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_NORMAL);
0024F4 E4                CLR      A
0024F5 F515              MOV      vCfgPwdLevel,A
   70:             }
   71:             break;
   72:     }
   73: }
0024F7 22                RET      
----- FUNCTION CFG_PWD_RefreshLevel (END) -------


----- FUNCTION ?L?COM004B (BEGIN) -----
0024F8 FF                MOV      R7,A
0024F9 E4                CLR      A
0024FA 3438              ADDC     A,#038H
0024FC FE                MOV      R6,A
----- FUNCTION _CFG_ROM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   76: 
   77:     return MEMPAGE_PID_INVALID;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 58


;---- Variable 'vAddr' assigned to Register 'DPTR' ----
0024FD 8F82              MOV      DPL,R7
0024FF 8E83              MOV      DPH,R6
002501 020655            LJMP     ?C?LLDCODE
----- FUNCTION _CFG_ROM_GET32 (END) -------


----- FUNCTION ?L?COM0042 (BEGIN) -----
002504 AF2E              MOV      R7,vRawADC+01H
002506 AE2D              MOV      R6,vRawADC
----- FUNCTION _apl_ddm_Calibrate (BEGIN) -----
 FILE: '..\apl\apl.c'
   27: static UINT16 apl_ddm_Calibrate
   28: (
002508 8E30              MOV      vRawADC,R6
00250A 8F31              MOV      vRawADC+01H,R7
00250C 8D32              MOV      vSlopeDelta,R5
   29:     IN UINT16   vRawADC,
   30:     IN UINT8    vSlopeDelta,
   31:     IN BOOL     bSignDDM
   32: )
   33: {
   34:     SINT64  vTmpData;
   35:     SINT32  vTmpSlope, vTmpOffset;
   36: 
   37:     vTmpSlope  = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Slope,  vSlopeDelta);
00250E E4                CLR      A
00250F 2532              ADD      A,vSlopeDelta
002511 91F8              ACALL    ?L?COM004B
002513 8F3A              MOV      vTmpSlope+03H,R7
002515 8E39              MOV      vTmpSlope+02H,R6
002517 8D38              MOV      vTmpSlope+01H,R5
002519 8C37              MOV      vTmpSlope,R4
   38:     vTmpOffset = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Offset, vSlopeDelta);
00251B E532              MOV      A,vSlopeDelta
00251D 2404              ADD      A,#04H
00251F 91F8              ACALL    ?L?COM004B
002521 8F3E              MOV      vTmpOffset+03H,R7
002523 8E3D              MOV      vTmpOffset+02H,R6
002525 8D3C              MOV      vTmpOffset+01H,R5
002527 8C3B              MOV      vTmpOffset,R4
   39: 
   40:     vTmpData = (((SINT64)vTmpSlope * vRawADC) >> Slope_ZoomIn_ShiftBits)
002529 AE30              MOV      R6,vRawADC
00252B AF31              MOV      R7,vRawADC+01H
00252D E4                CLR      A
00252E FC                MOV      R4,A
00252F FD                MOV      R5,A
002530 AB3A              MOV      R3,vTmpSlope+03H
002532 AA39              MOV      R2,vTmpSlope+02H
002534 A938              MOV      R1,vTmpSlope+01H
002536 A837              MOV      R0,vTmpSlope
002538 1205B8            LCALL    ?C?LMUL
00253B 7808              MOV      R0,#08H
00253D 12062E            LCALL    ?C?SLSHR
002540 EF                MOV      A,R7
002541 253E              ADD      A,vTmpOffset+03H
002543 F536              MOV      vTmpData+03H,A
002545 EE                MOV      A,R6
002546 353D              ADDC     A,vTmpOffset+02H
002548 F535              MOV      vTmpData+02H,A
00254A ED                MOV      A,R5
00254B 353C              ADDC     A,vTmpOffset+01H
00254D F534              MOV      vTmpData+01H,A
00254F EC                MOV      A,R4
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 59


002550 353B              ADDC     A,vTmpOffset
002552 F533              MOV      vTmpData,A
   41:                 + vTmpOffset;
   42: 
   43:     /* limit the calibrated value to 16-bit formatting,
   44:      *  to strictly follow MSA Standard.
   45:      */
   46:     return (UINT16)(bSignDDM? LIMIT_S16(vTmpData): LIMIT_U16(vTmpData));
002554 303831            JNB      bSignDDM,?C0001?APL
002557 E4                CLR      A
002558 7FFF              MOV      R7,#0FFH
00255A 7E7F              MOV      R6,#07FH
00255C 123477            LCALL    ?L?COM0025
00255F C3                CLR      C
002560 120607            LCALL    ?C?SLCMP
002563 4006              JC       ?C0003?APL
002565 7E7F              MOV      R6,#07FH
002567 7FFF              MOV      R7,#0FFH
002569 8047              SJMP     ?C0002?APL
00256B         ?C0003?APL:
00256B 7F00              MOV      R7,#00H
00256D 7E80              MOV      R6,#080H
00256F 7DFF              MOV      R5,#0FFH
002571 7CFF              MOV      R4,#0FFH
002573 123479            LCALL    ?L?COM0026
002576 D3                SETB     C
002577 120607            LCALL    ?C?SLCMP
00257A 5006              JNC      ?C0005?APL
00257C 7E80              MOV      R6,#080H
00257E 7F00              MOV      R7,#00H
002580 8004              SJMP     ?C0006?APL
002582         ?C0005?APL:
002582 AE35              MOV      R6,vTmpData+02H
002584 AF36              MOV      R7,vTmpData+03H
002586         ?C0006?APL:
002586         ?C0004?APL:
002586 802A              SJMP     ?C0002?APL
002588         ?C0001?APL:
002588 E4                CLR      A
002589 7FFF              MOV      R7,#0FFH
00258B 7EFF              MOV      R6,#0FFH
00258D 123477            LCALL    ?L?COM0025
002590 C3                CLR      C
002591 120607            LCALL    ?C?SLCMP
002594 4006              JC       ?C0007?APL
002596 7EFF              MOV      R6,#0FFH
002598 7FFF              MOV      R7,#0FFH
00259A 8016              SJMP     ?C0008?APL
00259C         ?C0007?APL:
00259C E4                CLR      A
00259D FF                MOV      R7,A
00259E FE                MOV      R6,A
00259F 123477            LCALL    ?L?COM0025
0025A2 D3                SETB     C
0025A3 120607            LCALL    ?C?SLCMP
0025A6 5006              JNC      ?C0009?APL
0025A8 7E00              MOV      R6,#00H
0025AA 7F00              MOV      R7,#00H
0025AC 8004              SJMP     ?C0010?APL
0025AE         ?C0009?APL:
0025AE AE35              MOV      R6,vTmpData+02H
0025B0 AF36              MOV      R7,vTmpData+03H
0025B2         ?C0010?APL:
0025B2         ?C0008?APL:
0025B2         ?C0002?APL:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 60


   47: }
0025B2 22                RET      
----- FUNCTION _apl_ddm_Calibrate (END) -------


----- FUNCTION CFG_PWD_Init (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   90: void CFG_PWD_Init(void)
   91: {
   92:     /* set default password */
   93:     CFG_SET(Vendor_PWD_Entry, CFG_PWD_DEFAULT);
0025B3         ?C0045?CFG_PWD:
0025B3 E4                CLR      A
0025B4 F531              MOV      ?_CFG_RAM_SET32?BYTE+05H,A
0025B6 F530              MOV      ?_CFG_RAM_SET32?BYTE+04H,A
0025B8 F52F              MOV      ?_CFG_RAM_SET32?BYTE+03H,A
0025BA F52E              MOV      ?_CFG_RAM_SET32?BYTE+02H,A
0025BC 7F1B              MOV      R7,#01BH
0025BE FE                MOV      R6,A
0025BF 122EF3            LCALL    _CFG_RAM_SET32
0025C2         ?C0030?CFG_PWD:
   94: 
   95:     /* refresh password level */
   96:     CFG_PWD_RefreshLevel();
0025C2 81AA              AJMP     CFG_PWD_RefreshLevel
----- FUNCTION CFG_PWD_Init (END) -------


----- FUNCTION apl_ddm_GetEVBTemp (BEGIN) -----
 FILE: '..\apl\apl.c'
   49: static UINT16 apl_ddm_GetEVBTemp(void)
   50: {
   51:     UINT16  vRawADC;
   52: 
   53:     /* get raw ADC value, and record it */
   54:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_TEMP));
0025C4 7B03              MOV      R3,#03H
0025C6 7D1F              MOV      R5,#01FH
0025C8 7F1E              MOV      R7,#01EH
0025CA 1234B9            LCALL    ?L?COM002B
0025CD 7F20              MOV      R7,#020H
0025CF 7E00              MOV      R6,#00H
0025D1 F1AE              ACALL    _CFG_RAM_SET16
0025D3         ?C0013?APL:
   55:     CFG_SET(DDM_ADC_EVB_TEMP, vRawADC);
   56: 
   57:     /* calibration */
   58:     return apl_ddm_Calibrate(vRawADC,
   59:                              GET_SLOPE_DELTA(DDM_EVB_TEMP_Slope),
   60:                              TRUE);
0025D3 D238              SETB     ?_apl_ddm_Calibrate?BIT
0025D5 E4                CLR      A
0025D6 FD                MOV      R5,A
0025D7 A104              AJMP     ?L?COM0042
   61: }
----- FUNCTION apl_ddm_GetEVBTemp (END) -------


----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
  108: void APL_Entry(void)
  109: {
  110:     /* PWM_VBUF */
  111:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
0025D9 7818              MOV      R0,#018H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 61


0025DB E2                MOVX     A,@R0
0025DC FF                MOV      R7,A
0025DD 8FFC              MOV      PCA0CPH0,R7
0025DF         ?C0163?APL:
  112: 
  113: 	/* DDM */
  114: 	CFG_SET_DDM(DDM_EVB_TEMP, apl_ddm_GetEVBTemp());
0025DF B1C4              ACALL    apl_ddm_GetEVBTemp
0025E1 AC06              MOV      R4,AR6
0025E3 AD07              MOV      R5,AR7
0025E5 E4                CLR      A
0025E6 FF                MOV      R7,A
0025E7 FE                MOV      R6,A
0025E8 F1AE              ACALL    _CFG_RAM_SET16
0025EA         ?C0170?APL:
  115: 	CFG_SET_DDM(DDM_EVB_VCC,  apl_ddm_GetEVBVCC());
0025EA F1B6              ACALL    apl_ddm_GetEVBVCC
0025EC AC06              MOV      R4,AR6
0025EE AD07              MOV      R5,AR7
0025F0 7F02              MOV      R7,#02H
0025F2 7E00              MOV      R6,#00H
0025F4 F1AE              ACALL    _CFG_RAM_SET16
0025F6         ?C0177?APL:
  116: 	CFG_SET_DDM(DDM_EVB_VBUF, apl_ddm_GetEVBVBUF());
0025F6 F1CB              ACALL    apl_ddm_GetEVBVBUF
0025F8 AC06              MOV      R4,AR6
0025FA AD07              MOV      R5,AR7
0025FC 7F04              MOV      R7,#04H
0025FE 7E00              MOV      R6,#00H
002600 F1AE              ACALL    _CFG_RAM_SET16
002602         ?C0176?APL:
  117: 
  118:     /* RT_EVB_STAT */
  119:   #if 1
  120:     /* EVB Temperature */
  121:     if (((SINT16)CFG_GET(DDM_EVB_TEMP) > (SINT16)CFG_GET(DDM_EVB_TEMP_Max)) ||
  122:         ((SINT16)CFG_GET(DDM_EVB_TEMP) < (SINT16)CFG_GET(DDM_EVB_TEMP_Min)))
002602 7F40              MOV      R7,#040H
002604 1234C5            LCALL    ?L?COM002D
002607 C006              PUSH     AR6
002609 C007              PUSH     AR7
00260B FF                MOV      R7,A
00260C 123451            LCALL    ?L?COM001D
00260F D007              POP      AR7
002611 D006              POP      AR6
002613 D3                SETB     C
002614 12355E            LCALL    ?L?COM0046
002617 5017              JNC      ?C0219?APL
002619 7F42              MOV      R7,#042H
00261B 1234C5            LCALL    ?L?COM002D
00261E C006              PUSH     AR6
002620 C007              PUSH     AR7
002622 FF                MOV      R7,A
002623 123451            LCALL    ?L?COM001D
002626 D007              POP      AR7
002628 D006              POP      AR6
00262A C3                CLR      C
00262B 12355E            LCALL    ?L?COM0046
00262E 500D              JNC      ?C0267?APL
  123:     {
  124:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, LOW);
002630         ?C0219?APL:
002630 E4                CLR      A
002631 F52C              MOV      _v,A
002633 7819              MOV      R0,#019H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 62


002635 E2                MOVX     A,@R0
002636 12335F            LCALL    ?L?COM000A
002639 6020              JZ       ?C0231?APL
00263B 800B              SJMP     ?C0626?APL
  125:     }
  126:     else
  127:     {
  128:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, HIGH);
00263D         ?C0267?APL:
00263D 752C01            MOV      _v,#01H
002640 7819              MOV      R0,#019H
002642 E2                MOVX     A,@R0
002643 12335F            LCALL    ?L?COM000A
002646 6013              JZ       ?C0231?APL
002648         
002648 7819              MOV      R0,#019H
00264A E2                MOVX     A,@R0
00264B FF                MOV      R7,A
00264C EF                MOV      A,R7
00264D 54FE              ANL      A,#0FEH
00264F FB                MOV      R3,A
002650 E52C              MOV      A,_v
002652 5401              ANL      A,#01H
002654 FF                MOV      R7,A
002655 EF                MOV      A,R7
002656 4B                ORL      A,R3
002657 FF                MOV      R7,A
002658 E4                CLR      A
002659 EF                MOV      A,R7
00265A F2                MOVX     @R0,A
  129:     }
00265B         ?C0231?APL:
  130: 
  131:     /* EVB VCC */
  132:     if (((UINT16)CFG_GET(DDM_EVB_VCC) > (UINT16)CFG_GET(DDM_EVB_VCC_Max)) ||
  133:         ((UINT16)CFG_GET(DDM_EVB_VCC) < (UINT16)CFG_GET(DDM_EVB_VCC_Min)))
00265B 7F44              MOV      R7,#044H
00265D 1234C5            LCALL    ?L?COM002D
002660 C006              PUSH     AR6
002662 C007              PUSH     AR7
002664 7F02              MOV      R7,#02H
002666 123451            LCALL    ?L?COM001D
002669 D007              POP      AR7
00266B D006              POP      AR6
00266D D3                SETB     C
00266E ED                MOV      A,R5
00266F 9F                SUBB     A,R7
002670 EC                MOV      A,R4
002671 9E                SUBB     A,R6
002672 5019              JNC      ?C0316?APL
002674 7F46              MOV      R7,#046H
002676 1234C5            LCALL    ?L?COM002D
002679 C006              PUSH     AR6
00267B C007              PUSH     AR7
00267D 7F02              MOV      R7,#02H
00267F 123451            LCALL    ?L?COM001D
002682 D007              POP      AR7
002684 D006              POP      AR6
002686 C3                CLR      C
002687 ED                MOV      A,R5
002688 9F                SUBB     A,R7
002689 EC                MOV      A,R4
00268A 9E                SUBB     A,R6
00268B 500F              JNC      ?C0364?APL
  134:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 63


  135:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, LOW);
00268D         ?C0316?APL:
00268D E4                CLR      A
00268E F52C              MOV      _v,A
002690 7819              MOV      R0,#019H
002692 E2                MOVX     A,@R0
002693 C3                CLR      C
002694 13                RRC      A
002695 12335F            LCALL    ?L?COM000A
002698 6033              JZ       ?C0328?APL
00269A 800D              SJMP     ?C0627?APL
  136:     }
  137:     else
  138:     {
  139:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, HIGH);
00269C         ?C0364?APL:
00269C 752C01            MOV      _v,#01H
00269F 7819              MOV      R0,#019H
0026A1 E2                MOVX     A,@R0
0026A2 C3                CLR      C
0026A3 13                RRC      A
0026A4 12335F            LCALL    ?L?COM000A
0026A7 6024              JZ       ?C0328?APL
0026A9         
0026A9 123445            LCALL    ?L?COM001A
0026AC 54FD              ANL      A,#0FDH
0026AE FF                MOV      R7,A
0026AF C004              PUSH     AR4
0026B1 C005              PUSH     AR5
0026B3 C006              PUSH     AR6
0026B5 C007              PUSH     AR7
0026B7 E52C              MOV      A,_v
0026B9 5401              ANL      A,#01H
0026BB FF                MOV      R7,A
0026BC E4                CLR      A
0026BD 7801              MOV      R0,#01H
0026BF 120642            LCALL    ?C?LSHL
0026C2 D003              POP      AR3
0026C4 D002              POP      AR2
0026C6 D001              POP      AR1
0026C8 D000              POP      AR0
0026CA 123469            LCALL    ?L?COM0024
  140:     }
0026CD         ?C0328?APL:
  141: 
  142:     /* EVB VBUF */
  143:     if (((UINT16)CFG_GET(DDM_EVB_VBUF) > (UINT16)CFG_GET(DDM_EVB_VBUF_Max)) ||
  144:         ((UINT16)CFG_GET(DDM_EVB_VBUF) < (UINT16)CFG_GET(DDM_EVB_VBUF_Min)))
0026CD 7F48              MOV      R7,#048H
0026CF 1234C5            LCALL    ?L?COM002D
0026D2 C006              PUSH     AR6
0026D4 C007              PUSH     AR7
0026D6 12344F            LCALL    ?L?COM001C
0026D9 D007              POP      AR7
0026DB D006              POP      AR6
0026DD D3                SETB     C
0026DE ED                MOV      A,R5
0026DF 9F                SUBB     A,R7
0026E0 EC                MOV      A,R4
0026E1 9E                SUBB     A,R6
0026E2 5017              JNC      ?C0413?APL
0026E4 7F4A              MOV      R7,#04AH
0026E6 1234C5            LCALL    ?L?COM002D
0026E9 C006              PUSH     AR6
0026EB C007              PUSH     AR7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 64


0026ED 12344F            LCALL    ?L?COM001C
0026F0 D007              POP      AR7
0026F2 D006              POP      AR6
0026F4 C3                CLR      C
0026F5 ED                MOV      A,R5
0026F6 9F                SUBB     A,R7
0026F7 EC                MOV      A,R4
0026F8 9E                SUBB     A,R6
0026F9 500D              JNC      ?C0461?APL
  145:     {
  146:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, LOW);
0026FB         ?C0413?APL:
0026FB E4                CLR      A
0026FC F52C              MOV      _v,A
0026FE 12354E            LCALL    ?L?COM0041
002701 12335F            LCALL    ?L?COM000A
002704 6031              JZ       ?C0425?APL
002706 800B              SJMP     ?C0628?APL
  147:     }
  148:     else
  149:     {
  150:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, HIGH);
002708         ?C0461?APL:
002708 752C01            MOV      _v,#01H
00270B 12354E            LCALL    ?L?COM0041
00270E 12335F            LCALL    ?L?COM000A
002711 6024              JZ       ?C0425?APL
002713         
002713 123445            LCALL    ?L?COM001A
002716 54FB              ANL      A,#0FBH
002718 FF                MOV      R7,A
002719 C004              PUSH     AR4
00271B C005              PUSH     AR5
00271D C006              PUSH     AR6
00271F C007              PUSH     AR7
002721 E52C              MOV      A,_v
002723 5401              ANL      A,#01H
002725 FF                MOV      R7,A
002726 E4                CLR      A
002727 7802              MOV      R0,#02H
002729 120642            LCALL    ?C?LSHL
00272C D003              POP      AR3
00272E D002              POP      AR2
002730 D001              POP      AR1
002732 D000              POP      AR0
002734 123469            LCALL    ?L?COM0024
  151:     }
002737         ?C0425?APL:
  152: 
  153:     /* EVB Global Ready */
  154:     if ((CFG_GET(RT_EVB_STAT_EVB_TEMP_Ready) == HIGH) &&
  155:         (CFG_GET(RT_EVB_STAT_EVB_VCC_Ready)  == HIGH) &&
  156:         (CFG_GET(RT_EVB_STAT_EVB_VBUF_Ready) == HIGH))
002737 123445            LCALL    ?L?COM001A
00273A 12352F            LCALL    ?L?COM003E
00273D 702E              JNZ      ?C0557?APL
00273F 7819              MOV      R0,#019H
002741 E2                MOVX     A,@R0
002742 C3                CLR      C
002743 13                RRC      A
002744 123448            LCALL    ?L?COM001B
002747 5401              ANL      A,#01H
002749 FF                MOV      R7,A
00274A E4                CLR      A
00274B F8                MOV      R0,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 65


00274C C3                CLR      C
00274D 12061D            LCALL    ?C?ULCMP
002750 701B              JNZ      ?C0557?APL
002752 12354E            LCALL    ?L?COM0041
002755 123448            LCALL    ?L?COM001B
002758 5401              ANL      A,#01H
00275A FF                MOV      R7,A
00275B E4                CLR      A
00275C F8                MOV      R0,A
00275D C3                CLR      C
00275E 12061D            LCALL    ?C?ULCMP
002761 700A              JNZ      ?C0557?APL
  157:     {
  158:         CFG_SET(RT_EVB_STAT_Global_Ready, HIGH);
002763         ?C0509?APL:
002763 752C01            MOV      _v,#01H
002766 123356            LCALL    ?L?COM0009
002769 602E              JZ       ?C0569?APL
00276B 8008              SJMP     ?C0629?APL
  159:     }
  160:     else
  161:     {
  162:         CFG_SET(RT_EVB_STAT_Global_Ready, LOW);
00276D         ?C0557?APL:
00276D E4                CLR      A
00276E F52C              MOV      _v,A
002770 123356            LCALL    ?L?COM0009
002773 6024              JZ       ?C0569?APL
002775         
002775 123445            LCALL    ?L?COM001A
002778 547F              ANL      A,#07FH
00277A FF                MOV      R7,A
00277B C004              PUSH     AR4
00277D C005              PUSH     AR5
00277F C006              PUSH     AR6
002781 C007              PUSH     AR7
002783 E52C              MOV      A,_v
002785 5401              ANL      A,#01H
002787 FF                MOV      R7,A
002788 E4                CLR      A
002789 7807              MOV      R0,#07H
00278B 120642            LCALL    ?C?LSHL
00278E D003              POP      AR3
002790 D002              POP      AR2
002792 D001              POP      AR1
002794 D000              POP      AR0
002796 123469            LCALL    ?L?COM0024
  163:     }
  164:   #endif
  165: }
002799         ?C0569?APL:
002799 22                RET      
----- FUNCTION APL_Entry (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   27: UINT16 PKT_MDIOM_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
00279A 122FE0            LCALL    ?L?COM002C
   31: }
00279D 7E01              MOV      R6,#01H
00279F 7F40              MOV      R7,#040H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 66


   32: 
0027A1 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------


----- FUNCTION _CFG_ROM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   72:             default:
   73:                 break;
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
0027A2 8F82              MOV      DPL,R7
0027A4 8E83              MOV      DPH,R6
0027A6 E4                CLR      A
0027A7 93                MOVC     A,@A+DPTR
0027A8 FE                MOV      R6,A
0027A9 7401              MOV      A,#01H
0027AB 93                MOVC     A,@A+DPTR
0027AC FF                MOV      R7,A
0027AD 22                RET      
----- FUNCTION _CFG_ROM_GET16 (END) -------


----- FUNCTION _CFG_RAM_SET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   73:                 break;
   74:         }
;---- Variable 'vData' assigned to Register 'R4/R5' ----
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0027AE A807              MOV      R0,AR7
0027B0 EC                MOV      A,R4
0027B1 F2                MOVX     @R0,A
0027B2 08                INC      R0
0027B3 ED                MOV      A,R5
0027B4 F2                MOVX     @R0,A
0027B5 22                RET      
----- FUNCTION _CFG_RAM_SET16 (END) -------


----- FUNCTION apl_ddm_GetEVBVCC (BEGIN) -----
 FILE: '..\apl\apl.c'
   63: static UINT16 apl_ddm_GetEVBVCC(void)
   64: {
   65:     UINT16  vRawADC;
   66: 
   67:     /* get raw ADC value, and record it */
   68:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VCC));
0027B6 7B03              MOV      R3,#03H
0027B8 7D1E              MOV      R5,#01EH
0027BA 7F1F              MOV      R7,#01FH
0027BC 1234B9            LCALL    ?L?COM002B
0027BF 7F22              MOV      R7,#022H
0027C1 7E00              MOV      R6,#00H
0027C3 F1AE              ACALL    _CFG_RAM_SET16
0027C5         ?C0061?APL:
   69:     CFG_SET(DDM_ADC_EVB_VCC, vRawADC);
   70: 
   71:     /* calibration */
   72:     return apl_ddm_Calibrate(vRawADC,
   73:                              GET_SLOPE_DELTA(DDM_EVB_VCC_Slope),
   74:                              FALSE);
0027C5 C238              CLR      ?_apl_ddm_Calibrate?BIT
0027C7 7D08              MOV      R5,#08H
0027C9 A104              AJMP     ?L?COM0042
   75: }
----- FUNCTION apl_ddm_GetEVBVCC (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 67




----- FUNCTION apl_ddm_GetEVBVBUF (BEGIN) -----
 FILE: '..\apl\apl.c'
   77: static UINT16 apl_ddm_GetEVBVBUF(void)
   78: {
   79:     UINT16  vRawADC;
   80: 
   81:     /* get raw ADC value, and record it */
   82:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VBUF));
0027CB 7B03              MOV      R3,#03H
0027CD 7D1F              MOV      R5,#01FH
0027CF 7F0A              MOV      R7,#0AH
0027D1 1234B9            LCALL    ?L?COM002B
0027D4 7F24              MOV      R7,#024H
0027D6 7E00              MOV      R6,#00H
0027D8 F1AE              ACALL    _CFG_RAM_SET16
0027DA         ?C0109?APL:
   83:     CFG_SET(DDM_ADC_EVB_VBUF, vRawADC);
   84: 
   85:     /* calibration */
   86:     return apl_ddm_Calibrate(vRawADC,
   87:                              GET_SLOPE_DELTA(DDM_EVB_VBUF_Slope),
   88:                              FALSE);
0027DA C238              CLR      ?_apl_ddm_Calibrate?BIT
0027DC 7D10              MOV      R5,#010H
0027DE A104              AJMP     ?L?COM0042
   89: }
----- FUNCTION apl_ddm_GetEVBVBUF (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   33: UINT16 PKT_MDIOM_Probe(void)
   34: {
   35:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   36:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
0027E0 90004C            MOV      DPTR,#vFrame+0CH
   37: 
   38:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
0027E3 E0                MOVX     A,@DPTR
0027E4 FF                MOV      R7,A
0027E5 A3                INC      DPTR
0027E6 E0                MOVX     A,@DPTR
0027E7 FD                MOV      R5,A
0027E8 7A04              MOV      R2,#HIGH vData
0027EA 7BEA              MOV      R3,#LOW vData
0027EC 122A3A            LCALL    _DRV_MDIOM_FrameRead
0027EF 7E01              MOV      R6,#01H
0027F1 4002              JC       ?C0005?PKT_MDIOM
   39:                              pPayload->vDevAddr,
   40:                              &vData))
   41:     {
   42:         return PKT_REPLY_Fail_MdioNoAck;
0027F3 7E03              MOV      R6,#03H
   43:     }
0027F5         ?C0005?PKT_MDIOM:
   44: 
   45:     return PKT_REPLY_Done_ExecNoError;
0027F5 7F40              MOV      R7,#040H
   46: }
0027F7 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 68



----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
0027F8 122FE0            LCALL    ?L?COM002C
   31: }
0027FB 7E01              MOV      R6,#01H
0027FD 7F40              MOV      R7,#040H
   32: 
0027FF 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION _DRV_ADC_Sample (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   39: SINT16 DRV_ADC_Sample(UINT8 vPositive, UINT8 vNegative, UINT8 vAvgNum)
   40: {
;---- Variable 'vPositive' assigned to Register 'R7' ----
;---- Variable 'vAvgNum' assigned to Register 'R3' ----
;---- Variable 'vNegative' assigned to Register 'R5' ----
   41:     SINT16  vAdcSum;
   42:     UINT8   vLoop;
   43: 
   44:     /* select positive/negative channel */
   45:     AMX0P = vPositive;
002800 8FBB              MOV      AMX0P,R7
   46:     AMX0N = vNegative;
002802 8DBA              MOV      AMX0N,R5
   47: 
   48:     /* wait for ADC input stable */
   49:     DRV_CPU_DelayUs(ADC_SettlingTime);
002804 7FC8              MOV      R7,#0C8H
002806 7E00              MOV      R6,#00H
002808 121AD9            LCALL    _DRV_CPU_DelayUs
   50: 
   51:     /* sampling */
   52:     vAdcSum = 0;
;---- Variable 'vAdcSum' assigned to Register 'R4/R5' ----
00280B E4                CLR      A
00280C FD                MOV      R5,A
00280D FC                MOV      R4,A
   53:     for (vLoop = (1<<vAvgNum); vLoop > 0; vLoop--)
00280E 04                INC      A
00280F A803              MOV      R0,AR3
002811 08                INC      R0
002812 8002              SJMP     ?C0009?DRV_ADC
002814         ?C0008?DRV_ADC:
002814 C3                CLR      C
002815 33                RLC      A
002816         ?C0009?DRV_ADC:
002816 D8FC              DJNZ     R0,?C0008?DRV_ADC
;---- Variable 'vLoop' assigned to Register 'R2' ----
002818 FA                MOV      R2,A
002819         ?C0001?DRV_ADC:
002819 EA                MOV      A,R2
00281A D3                SETB     C
00281B 9400              SUBB     A,#00H
00281D 401A              JC       ?C0002?DRV_ADC
   54:     {
   55:         /* clear the ADC last converted flag */
   56:         AD0INT = 0;
00281F C2ED              CLR      AD0INT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 69


   57: 
   58:         /* start a new ADC converting */
   59:         AD0BUSY = 1;
002821 D2EC              SETB     AD0BUSY
002823         ?C0004?DRV_ADC:
   60: 
   61:         /* waiting for ADC converted */
   62:         while (!AD0INT)
002823 30EDFD            JNB      AD0INT,?C0004?DRV_ADC
   63:         {}
002826         ?C0005?DRV_ADC:
   64: 
   65:         /* sum the ADC result */
   66:         vAdcSum += (SINT16)(((UINT16)ADC0H<<8)|ADC0L);
002826 AFBE              MOV      R7,ADC0H
002828 EF                MOV      A,R7
002829 FE                MOV      R6,A
00282A A9BD              MOV      R1,ADC0L
00282C E9                MOV      A,R1
00282D F582              MOV      DPL,A
00282F E582              MOV      A,DPL
002831 2D                ADD      A,R5
002832 FD                MOV      R5,A
002833 EE                MOV      A,R6
002834 3C                ADDC     A,R4
002835 FC                MOV      R4,A
   67:     }
002836 1A                DEC      R2
002837 80E0              SJMP     ?C0001?DRV_ADC
002839         ?C0002?DRV_ADC:
   68: 
   69:     /* calculate the averaged value */
   70:     return (vAdcSum>>vAvgNum);
002839 AF03              MOV      R7,AR3
00283B ED                MOV      A,R5
00283C AE04              MOV      R6,AR4
00283E A807              MOV      R0,AR7
002840 08                INC      R0
002841 8006              SJMP     ?C0011?DRV_ADC
002843         ?C0010?DRV_ADC:
002843 CE                XCH      A,R6
002844 A2E7              MOV      C,ACC.7
002846 13                RRC      A
002847 CE                XCH      A,R6
002848 13                RRC      A
002849         ?C0011?DRV_ADC:
002849 D8F8              DJNZ     R0,?C0010?DRV_ADC
00284B FF                MOV      R7,A
   71: }
00284C 22                RET      
----- FUNCTION _DRV_ADC_Sample (END) -------


----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   48: UINT16 PKT_MDIOM_Read(void)
   49: {
   50:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   51: 
00284D 12337D            LCALL    ?L?COM000D
002850 115B              ACALL    _DRV_MDIOM_Read
002852 7E01              MOV      R6,#01H
002854 4002              JC       ?C0007?PKT_MDIOM
   52:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   53:                         pPayload->vDevAddr,
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 70


   54:                         pPayload->vOffset,
   55:                         pPayload->vDataCount,
   56:                         pPayload->aData))
   57:     {
   58:         return PKT_REPLY_Fail_MdioNoAck;
002856 7E03              MOV      R6,#03H
   59:     }
002858         ?C0007?PKT_MDIOM:
   60: 
   61:     return PKT_REPLY_Done_ExecNoError;
002858 7F40              MOV      R7,#040H
   62: }
00285A 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  611: BOOL DRV_MDIOM_Read
  612: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  613:     IN  UINT8               vPortAddr,
  614:     IN  UINT8               vDevAddr,
  615:     IN  UINT16              vRegAddr,
  616:     IN  UINT16              vDataLen,
  617:     OUT UINT16 SEG_XDATA   *pDataBuf
  618: )
  619: {
  620:     BOOL    bResult = TRUE;
00285B D238              SETB     bResult
  621:     BOOL    bIntState;
  622: 
  623:     /* create MDIO frame: Address */
  624:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
00285D 3169              ACALL    _drv_mdiom_CreateAddrFrame
  625: 
  626:     /* lock globally interrupt */
  627:     bIntState = DRV_INT_LockGlobalInterrupt();
00285F 30AF05            JNB      EA,?C2499?DRV_MDIOM
002862 C2AF              CLR      EA
002864 D3                SETB     C
002865 8001              SJMP     ?C2500?DRV_MDIOM
002867         ?C2499?DRV_MDIOM:
002867 C3                CLR      C
002868         ?C2500?DRV_MDIOM:
002868 9239              MOV      bIntState,C
  628: 
  629:     /* transmit frame: Address */
  630:     drv_mdiom_TxAddrFrame();
00286A 11A5              ACALL    drv_mdiom_TxAddrFrame
  631: 
  632:     /* create MDIO frame: Post-Read-Increment-Address */
  633:     drv_mdiom_SetOperationCode(1, 0);
00286C D20D              SETB     bMdioOperationCode1
00286E C20C              CLR      bMdioOperationCode0
002870         ?C2504?DRV_MDIOM:
  634: 
  635:     /* transmit frame: Post-Read-Increment-Address */
  636:     while (vDataLen-- != 0)
002870 E53A              MOV      A,vDataLen+01H
002872 153A              DEC      vDataLen+01H
002874 AE39              MOV      R6,vDataLen
002876 7002              JNZ      ?C2544?DRV_MDIOM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 71


002878 1539              DEC      vDataLen
00287A         ?C2544?DRV_MDIOM:
00287A 4E                ORL      A,R6
00287B 6021              JZ       ?C2511?DRV_MDIOM
  637:     {
  638:         drv_mdiom_RxDataFrame();
00287D 310C              ACALL    drv_mdiom_RxDataFrame
  639: 
  640:         /* check read status */
  641:         *pDataBuf++ = vMdioData;
00287F E53C              MOV      A,pDataBuf+01H
002881 FF                MOV      R7,A
002882 2402              ADD      A,#02H
002884 F53C              MOV      pDataBuf+01H,A
002886 E53B              MOV      A,pDataBuf
002888 FE                MOV      R6,A
002889 3400              ADDC     A,#00H
00288B F53B              MOV      pDataBuf,A
00288D 8F82              MOV      DPL,R7
00288F 8E83              MOV      DPH,R6
002891 123261            LCALL    ?L?COM0035
002894 4003              JC       ?C2507?DRV_MDIOM
002896 D3                SETB     C
002897 8001              SJMP     ?C2508?DRV_MDIOM
002899         ?C2507?DRV_MDIOM:
002899 C3                CLR      C
00289A         ?C2508?DRV_MDIOM:
00289A 40D4              JC       ?C2504?DRV_MDIOM
  642:         if (!drv_mdiom_IsReadSuccess())
  643:         {
  644:             bResult = FALSE;
00289C C238              CLR      bResult
  645:             break;
  646:         }
  647:     }
00289E         ?C2511?DRV_MDIOM:
  648: 
  649:     /* unlock globally interrupt */
  650:     DRV_INT_UnlockGlobalInterrupt(bIntState);
00289E A239              MOV      C,bIntState
0028A0 92AF              MOV      EA,C
  651: 
  652:     return bResult;
0028A2 A238              MOV      C,bResult
  653: }
0028A4 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  306: static void drv_mdiom_TxAddrFrame(void)
  307: {
  308:     drv_mdiom_StartFrame();
  309:     drv_mdiom_TxPreamble();
0028A5 123141            LCALL    ?L?COM0001
0028A8 12318F            LCALL    ?L?COM0002
0028AB 1231E8            LCALL    ?L?COM0003
  310:     drv_mdiom_TxStartFrame();
  311:     drv_mdiom_TxOperationCode();
  312:     drv_mdiom_TxPortAddress();
  313:     drv_mdiom_TxDeviceAddress();
  314:     drv_mdiom_TxTurnAround();
0028AE A201              MOV      C,bMdioTurnAround1
0028B0 123258            LCALL    ?L?COM0004
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 72


0028B3 A200              MOV      C,bMdioTurnAround0
0028B5 123258            LCALL    ?L?COM0004
  315:     drv_mdiom_TxAddr();
0028B8 A217              MOV      C,bMdioAddr15
0028BA 123258            LCALL    ?L?COM0004
0028BD A216              MOV      C,bMdioAddr14
0028BF 123258            LCALL    ?L?COM0004
0028C2 A215              MOV      C,bMdioAddr13
0028C4 123258            LCALL    ?L?COM0004
0028C7 A214              MOV      C,bMdioAddr12
0028C9 123258            LCALL    ?L?COM0004
0028CC A213              MOV      C,bMdioAddr11
0028CE 123258            LCALL    ?L?COM0004
0028D1 A212              MOV      C,bMdioAddr10
0028D3 123258            LCALL    ?L?COM0004
0028D6 A211              MOV      C,bMdioAddr9
0028D8 123258            LCALL    ?L?COM0004
0028DB A210              MOV      C,bMdioAddr8
0028DD 123258            LCALL    ?L?COM0004
0028E0 A21F              MOV      C,bMdioAddr7
0028E2 123258            LCALL    ?L?COM0004
0028E5 A21E              MOV      C,bMdioAddr6
0028E7 123258            LCALL    ?L?COM0004
0028EA A21D              MOV      C,bMdioAddr5
0028EC 123258            LCALL    ?L?COM0004
0028EF A21C              MOV      C,bMdioAddr4
0028F1 123258            LCALL    ?L?COM0004
0028F4 A21B              MOV      C,bMdioAddr3
0028F6 123258            LCALL    ?L?COM0004
0028F9 A21A              MOV      C,bMdioAddr2
0028FB 123258            LCALL    ?L?COM0004
0028FE A219              MOV      C,bMdioAddr1
002900 123258            LCALL    ?L?COM0004
002903 A218              MOV      C,bMdioAddr0
002905 123258            LCALL    ?L?COM0004
002908 00                NOP      
002909 00                NOP      
  316:     drv_mdiom_StopFrame();
00290A E1B0              AJMP     ?L?COM002E
  317: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  332: static void drv_mdiom_RxDataFrame(void)
  333: {
  334:     drv_mdiom_StartFrame();
  335:     drv_mdiom_TxPreamble();
00290C 123141            LCALL    ?L?COM0001
00290F 12318F            LCALL    ?L?COM0002
002912 1231E8            LCALL    ?L?COM0003
  336:     drv_mdiom_TxStartFrame();
  337:     drv_mdiom_TxOperationCode();
  338:     drv_mdiom_TxPortAddress();
  339:     drv_mdiom_TxDeviceAddress();
  340:     drv_mdiom_RxTurnAround();
002915 00                NOP      
002916 00                NOP      
002917 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002919 D294              SETB     IO_DUT_MDIOM_SDA_OUT
00291B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00291D D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
00291F D296              SETB     IO_DUT_MDIOM_SCL_OUT
002921 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 73


002922 00                NOP      
002923 F19E              ACALL    ?L?COM000E
002925 9200              MOV      bMdioTurnAround0,C
  341:     drv_mdiom_RxData();
002927 F19E              ACALL    ?L?COM000E
002929 9227              MOV      bMdioData15,C
00292B F19E              ACALL    ?L?COM000E
00292D 9226              MOV      bMdioData14,C
00292F F19E              ACALL    ?L?COM000E
002931 9225              MOV      bMdioData13,C
002933 F19E              ACALL    ?L?COM000E
002935 9224              MOV      bMdioData12,C
002937 F19E              ACALL    ?L?COM000E
002939 9223              MOV      bMdioData11,C
00293B F19E              ACALL    ?L?COM000E
00293D 9222              MOV      bMdioData10,C
00293F F19E              ACALL    ?L?COM000E
002941 9221              MOV      bMdioData9,C
002943 F19E              ACALL    ?L?COM000E
002945 9220              MOV      bMdioData8,C
002947 F19E              ACALL    ?L?COM000E
002949 922F              MOV      bMdioData7,C
00294B F19E              ACALL    ?L?COM000E
00294D 922E              MOV      bMdioData6,C
00294F F19E              ACALL    ?L?COM000E
002951 922D              MOV      bMdioData5,C
002953 F19E              ACALL    ?L?COM000E
002955 922C              MOV      bMdioData4,C
002957 F19E              ACALL    ?L?COM000E
002959 922B              MOV      bMdioData3,C
00295B F19E              ACALL    ?L?COM000E
00295D 922A              MOV      bMdioData2,C
00295F F19E              ACALL    ?L?COM000E
002961 9229              MOV      bMdioData1,C
002963 F19E              ACALL    ?L?COM000E
002965 9228              MOV      bMdioData0,C
  342:     drv_mdiom_StopFrame();
002967 E1B0              AJMP     ?L?COM002E
  343: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  346: static void drv_mdiom_CreateAddrFrame
  347: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  348:     IN UINT8    vPortAddr,
  349:     IN UINT8    vDevAddr,
  350:     IN UINT16   vRegAddr
  351: )
  352: {
  353:     drv_mdiom_SetStartFrame(0, 0);
002969 C20F              CLR      bMdioStartFrame1
00296B C20E              CLR      bMdioStartFrame0
  354:     drv_mdiom_SetOperationCode(0, 0);
00296D C20D              CLR      bMdioOperationCode1
00296F 12330D            LCALL    ?L?COM0005
002972 C200              CLR      bMdioTurnAround0
  355:     drv_mdiom_SetPortAddress(vPortAddr);
  356:     drv_mdiom_SetDeviceAddress(vDevAddr);
  357:     drv_mdiom_SetTurnAround(1, 0);
  358:     drv_mdiom_SetAddr(vRegAddr);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 74


002974 8A22              MOV      vMdioAddr,R2
002976 8B23              MOV      vMdioAddr+01H,R3
  359: }
002978 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------


----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  675: BOOL DRV_MDIOM_Write
  676: (
002979 8A37              MOV      vRegAddr,R2
00297B 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
00297D AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
00297F AC07              MOV      R4,AR7
  677:     IN       UINT8              vPortAddr,
  678:     IN       UINT8              vDevAddr,
  679:     IN       UINT16             vRegAddr,
  680:     IN       UINT16             vDataLen,
  681:     IN const UINT16 SEG_XDATA  *pDataBuf
  682: )
  683: {
  684:     BOOL    bIntState;
  685: 
  686:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
002981         ?C2513?DRV_MDIOM:
002981 E53A              MOV      A,vDataLen+01H
002983 153A              DEC      vDataLen+01H
002985 AA39              MOV      R2,vDataLen
002987 7002              JNZ      ?C2545?DRV_MDIOM
002989 1539              DEC      vDataLen
00298B         ?C2545?DRV_MDIOM:
00298B 4A                ORL      A,R2
00298C 6043              JZ       ?C2514?DRV_MDIOM
  687:     {
  688:         /* prepare MDIO data */
  689:         drv_mdiom_SetData(*pDataBuf);
00298E 853C82            MOV      DPL,pDataBuf+01H
002991 853B83            MOV      DPH,pDataBuf
002994 E0                MOVX     A,@DPTR
002995 F524              MOV      vMdioData,A
002997 A3                INC      DPTR
002998 E0                MOVX     A,@DPTR
002999 F525              MOV      vMdioData+01H,A
  690: 
  691:         /* create MDIO frame: Address */
  692:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
00299B AF04              MOV      R7,AR4
00299D AD06              MOV      R5,AR6
00299F AB38              MOV      R3,vRegAddr+01H
0029A1 AA37              MOV      R2,vRegAddr
0029A3 3169              ACALL    _drv_mdiom_CreateAddrFrame
  693: 
  694:         /* lock globally interrupt */
  695:         bIntState = DRV_INT_LockGlobalInterrupt();
0029A5 30AF05            JNB      EA,?C2519?DRV_MDIOM
0029A8 C2AF              CLR      EA
0029AA D3                SETB     C
0029AB 8001              SJMP     ?C2520?DRV_MDIOM
0029AD         ?C2519?DRV_MDIOM:
0029AD C3                CLR      C
0029AE         ?C2520?DRV_MDIOM:
0029AE 9238              MOV      bIntState,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 75


  696: 
  697:         /* transmit frame: Address */
  698:         drv_mdiom_TxAddrFrame();
0029B0 11A5              ACALL    drv_mdiom_TxAddrFrame
  699: 
  700:         /* create MDIO frame: Write */
  701:         drv_mdiom_SetOperationCode(0, 1);
0029B2 C20D              CLR      bMdioOperationCode1
0029B4 D20C              SETB     bMdioOperationCode0
  702: 
  703:         /* transmit frame: Write */
  704:         drv_mdiom_TxDataFrame();
0029B6 31D3              ACALL    drv_mdiom_TxDataFrame
  705: 
  706:         /* unlock globally interrupt */
  707:         DRV_INT_UnlockGlobalInterrupt(bIntState);
0029B8 A238              MOV      C,bIntState
0029BA 92AF              MOV      EA,C
  708:     }
0029BC 0538              INC      vRegAddr+01H
0029BE E538              MOV      A,vRegAddr+01H
0029C0 7002              JNZ      ?C2546?DRV_MDIOM
0029C2 0537              INC      vRegAddr
0029C4         ?C2546?DRV_MDIOM:
0029C4 7402              MOV      A,#02H
0029C6 253C              ADD      A,pDataBuf+01H
0029C8 F53C              MOV      pDataBuf+01H,A
0029CA E4                CLR      A
0029CB 353B              ADDC     A,pDataBuf
0029CD F53B              MOV      pDataBuf,A
0029CF 80B0              SJMP     ?C2513?DRV_MDIOM
0029D1         ?C2514?DRV_MDIOM:
  709: 
  710:     return TRUE;
0029D1 D3                SETB     C
  711: }
0029D2 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  319: static void drv_mdiom_TxDataFrame(void)
  320: {
  321:     drv_mdiom_StartFrame();
  322:     drv_mdiom_TxPreamble();
0029D3 123141            LCALL    ?L?COM0001
0029D6 12318F            LCALL    ?L?COM0002
0029D9 1231E8            LCALL    ?L?COM0003
  323:     drv_mdiom_TxStartFrame();
  324:     drv_mdiom_TxOperationCode();
  325:     drv_mdiom_TxPortAddress();
  326:     drv_mdiom_TxDeviceAddress();
  327:     drv_mdiom_TxTurnAround();
0029DC A201              MOV      C,bMdioTurnAround1
0029DE 123258            LCALL    ?L?COM0004
0029E1 A200              MOV      C,bMdioTurnAround0
0029E3 123258            LCALL    ?L?COM0004
  328:     drv_mdiom_TxData();
0029E6 A227              MOV      C,bMdioData15
0029E8 123258            LCALL    ?L?COM0004
0029EB A226              MOV      C,bMdioData14
0029ED 123258            LCALL    ?L?COM0004
0029F0 A225              MOV      C,bMdioData13
0029F2 123258            LCALL    ?L?COM0004
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 76


0029F5 A224              MOV      C,bMdioData12
0029F7 123258            LCALL    ?L?COM0004
0029FA A223              MOV      C,bMdioData11
0029FC 123258            LCALL    ?L?COM0004
0029FF A222              MOV      C,bMdioData10
002A01 123258            LCALL    ?L?COM0004
002A04 A221              MOV      C,bMdioData9
002A06 123258            LCALL    ?L?COM0004
002A09 A220              MOV      C,bMdioData8
002A0B 123258            LCALL    ?L?COM0004
002A0E A22F              MOV      C,bMdioData7
002A10 123258            LCALL    ?L?COM0004
002A13 A22E              MOV      C,bMdioData6
002A15 123258            LCALL    ?L?COM0004
002A18 A22D              MOV      C,bMdioData5
002A1A 123258            LCALL    ?L?COM0004
002A1D A22C              MOV      C,bMdioData4
002A1F 123258            LCALL    ?L?COM0004
002A22 A22B              MOV      C,bMdioData3
002A24 123258            LCALL    ?L?COM0004
002A27 A22A              MOV      C,bMdioData2
002A29 123258            LCALL    ?L?COM0004
002A2C A229              MOV      C,bMdioData1
002A2E 123258            LCALL    ?L?COM0004
002A31 A228              MOV      C,bMdioData0
002A33 123258            LCALL    ?L?COM0004
002A36 00                NOP      
002A37 00                NOP      
  329:     drv_mdiom_StopFrame();
002A38 E1B0              AJMP     ?L?COM002E
  330: }
----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  516: BOOL DRV_MDIOM_FrameRead
  517: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
002A3A 8B82              MOV      DPL,R3
002A3C 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  518:     IN  UINT8               vPortAddr,
  519:     IN  UINT8               vDevAddr,
  520:     OUT UINT16 SEG_XDATA   *pData
  521: )
  522: {
  523:     BOOL    bIntState;
  524: 
  525:     /* create MDIO frame: Read */
  526:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
002A3E 5159              ACALL    _drv_mdiom_CreateReadFrame
  527: 
  528:     /* lock globally interrupt */
  529:     bIntState = DRV_INT_LockGlobalInterrupt();
002A40 30AF05            JNB      EA,?C2483?DRV_MDIOM
002A43 C2AF              CLR      EA
002A45 D3                SETB     C
002A46 8001              SJMP     ?C2484?DRV_MDIOM
002A48         ?C2483?DRV_MDIOM:
002A48 C3                CLR      C
002A49         ?C2484?DRV_MDIOM:
002A49 9238              MOV      bIntState,C
  530: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 77


  531:     /* transmit frame: Read */
  532:     drv_mdiom_RxDataFrame();
002A4B 310C              ACALL    drv_mdiom_RxDataFrame
  533: 
  534:     /* unlock globally interrupt */
  535:     DRV_INT_UnlockGlobalInterrupt(bIntState);
002A4D A238              MOV      C,bIntState
002A4F 12325F            LCALL    ?L?COM0034
002A52 4003              JC       ?C2488?DRV_MDIOM
002A54 D3                SETB     C
002A55 8001              SJMP     ?C2489?DRV_MDIOM
002A57         ?C2488?DRV_MDIOM:
002A57 C3                CLR      C
002A58         ?C2489?DRV_MDIOM:
  536: 
  537:     /* check read status */
  538:     *pData = vMdioData;
  539:     return drv_mdiom_IsReadSuccess();
  540: }
002A58 22                RET      
----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  378: static void drv_mdiom_CreateReadFrame
  379: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  380:     IN UINT8    vPortAddr,
  381:     IN UINT8    vDevAddr
  382: )
  383: {
  384:     drv_mdiom_SetStartFrame(0, 0);
002A59 C20F              CLR      bMdioStartFrame1
002A5B C20E              CLR      bMdioStartFrame0
  385:     drv_mdiom_SetOperationCode(1, 1);
002A5D D20D              SETB     bMdioOperationCode1
002A5F D20C              SETB     bMdioOperationCode0
  386:     drv_mdiom_SetPortAddress(vPortAddr);
002A61 12330F            LCALL    ?L?COM0006
002A64 02357C            LJMP     ?L?COM004A
  387:     drv_mdiom_SetDeviceAddress(vDevAddr);
  388:     drv_mdiom_SetTurnAround(1, 1);
  389:     drv_mdiom_SetData(0xFFFF);
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   64: UINT16 PKT_MDIOM_Write(void)
   65: {
   66:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   67: 
002A67 12337D            LCALL    ?L?COM000D
002A6A 3179              ACALL    _DRV_MDIOM_Write
002A6C 7E01              MOV      R6,#01H
002A6E 4002              JC       ?C0009?PKT_MDIOM
   68:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   69:                          pPayload->vDevAddr,
   70:                          pPayload->vOffset,
   71:                          pPayload->vDataCount,
   72:                          pPayload->aData))
   73:     {
   74:         return PKT_REPLY_Fail_MdioNoAck;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 78


002A70 7E03              MOV      R6,#03H
   75:     }
002A72         ?C0009?PKT_MDIOM:
   76: 
   77:     return PKT_REPLY_Done_ExecNoError;
002A72 7F40              MOV      R7,#040H
   78: }
002A74 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
002A75 F1E0              ACALL    ?L?COM002C
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
002A77 121FE4            LCALL    DRV_C2M_Reset
002A7A 7E03              MOV      R6,#03H
002A7C 5002              JNC      ?C0008?PKT_C2M
002A7E 7E01              MOV      R6,#01H
002A80         ?C0008?PKT_C2M:
002A80 7F40              MOV      R7,#040H
   39: }
002A82 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
002A83 121CA3            LCALL    DRV_C2M_Probe
002A86 90004C            MOV      DPTR,#vFrame+0CH
002A89 120685            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
002A8C 90004A            MOV      DPTR,#vFrame+0AH
002A8F E4                CLR      A
002A90 F0                MOVX     @DPTR,A
002A91 A3                INC      DPTR
002A92 7404              MOV      A,#04H
002A94 F0                MOVX     @DPTR,A
   46: }
002A95 7E01              MOV      R6,#01H
002A97 7F40              MOV      R7,#040H
   47: 
002A99 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
002A9A F1E0              ACALL    ?L?COM002C
   52:             PKT_REPLY_Done_ExecNoError :
   53:             PKT_REPLY_Fail_ExecErrorCode0);
002A9C 121E00            LCALL    DRV_C2M_ChipErase
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 79


002A9F 7E03              MOV      R6,#03H
002AA1 5002              JNC      ?C0018?PKT_C2M
002AA3 7E01              MOV      R6,#01H
002AA5         ?C0018?PKT_C2M:
002AA5 7F40              MOV      R7,#040H
   54: }
002AA7 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
002AA8 90004A            MOV      DPTR,#vFrame+0AH
002AAB E0                MOVX     A,@DPTR
002AAC 7004              JNZ      ?C0043?PKT_C2M
002AAE A3                INC      DPTR
002AAF E0                MOVX     A,@DPTR
002AB0 6401              XRL      A,#01H
002AB2         ?C0043?PKT_C2M:
002AB2 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
002AB4 7E03              MOV      R6,#03H
002AB6 7F04              MOV      R7,#04H
002AB8 22                RET      
   62: 
002AB9         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
002AB9 90004C            MOV      DPTR,#vFrame+0CH
002ABC E0                MOVX     A,@DPTR
002ABD FF                MOV      R7,A
002ABE 121BAB            LCALL    _DRV_C2M_PageErase
002AC1 7E03              MOV      R6,#03H
002AC3 5002              JNC      ?C0023?PKT_C2M
002AC5 7E01              MOV      R6,#01H
002AC7         ?C0023?PKT_C2M:
002AC7 7F40              MOV      R7,#040H
   66: }
002AC9 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002ACA 1233B9            LCALL    ?L?COM000F
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
002ACD 90004A            MOV      DPTR,#vFrame+0AH
002AD0 E0                MOVX     A,@DPTR
002AD1 7004              JNZ      ?C0044?PKT_C2M
002AD3 A3                INC      DPTR
002AD4 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 80


002AD5 6406              XRL      A,#06H
002AD7         ?C0044?PKT_C2M:
002AD7 700B              JNZ      ?C0026?PKT_C2M
002AD9 D3                SETB     C
002ADA E538              MOV      A,vLen+01H
002ADC 9432              SUBB     A,#032H
002ADE E537              MOV      A,vLen
002AE0 9404              SUBB     A,#04H
002AE2 4005              JC       ?C0030?PKT_C2M
002AE4         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
002AE4 7E03              MOV      R6,#03H
002AE6 7F04              MOV      R7,#04H
002AE8 22                RET      
   79:     }
002AE9         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
002AE9 E538              MOV      A,vLen+01H
002AEB 2406              ADD      A,#06H
002AED 90004B            MOV      DPTR,#vFrame+0BH
002AF0 F0                MOVX     @DPTR,A
002AF1 E4                CLR      A
002AF2 3537              ADDC     A,vLen
002AF4 90004A            MOV      DPTR,#vFrame+0AH
002AF7 F0                MOVX     @DPTR,A
002AF8         ?C0031?PKT_C2M:
   83:     while (vLen != 0)
002AF8 E538              MOV      A,vLen+01H
002AFA 4537              ORL      A,vLen
002AFC 602E              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
002AFE C3                CLR      C
002AFF E537              MOV      A,vLen
002B01 9401              SUBB     A,#01H
002B03 5006              JNC      ?C0033?PKT_C2M
002B05 AE37              MOV      R6,vLen
002B07 AF38              MOV      R7,vLen+01H
002B09 8004              SJMP     ?C0034?PKT_C2M
002B0B         ?C0033?PKT_C2M:
002B0B 7E01              MOV      R6,#01H
002B0D 7F00              MOV      R7,#00H
002B0F         ?C0034?PKT_C2M:
002B0F 8E39              MOV      vReadLen,R6
002B11 8F3A              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
002B13 AB3A              MOV      R3,vReadLen+01H
002B15 AD36              MOV      R5,vAddr+01H
002B17 AC35              MOV      R4,vAddr
002B19 AF34              MOV      R7,pBuf+01H
002B1B AE33              MOV      R6,pBuf
002B1D 121E5A            LCALL    _DRV_C2M_FlashRead
002B20 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
002B22 7E03              MOV      R6,#03H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 81


002B24 7F40              MOV      R7,#040H
002B26 22                RET      
   94:         }
002B27         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
002B27 1233F9            LCALL    ?L?COM0016
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
002B2A 80CC              SJMP     ?C0031?PKT_C2M
002B2C         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
002B2C 7E01              MOV      R6,#01H
002B2E 7F40              MOV      R7,#040H
  102: }
002B30 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002B31 1233B9            LCALL    ?L?COM000F
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
002B34 2406              ADD      A,#06H
002B36 FF                MOV      R7,A
002B37 E4                CLR      A
002B38 3537              ADDC     A,vLen
002B3A FE                MOV      R6,A
002B3B 90004A            MOV      DPTR,#vFrame+0AH
002B3E E0                MOVX     A,@DPTR
002B3F 6E                XRL      A,R6
002B40 7003              JNZ      ?C0045?PKT_C2M
002B42 A3                INC      DPTR
002B43 E0                MOVX     A,@DPTR
002B44 6F                XRL      A,R7
002B45         ?C0045?PKT_C2M:
002B45 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
002B47 7E03              MOV      R6,#03H
002B49 7F04              MOV      R7,#04H
002B4B 22                RET      
  114:     }
002B4C         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
002B4C E538              MOV      A,vLen+01H
002B4E 4537              ORL      A,vLen
002B50 602E              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002B52 C3                CLR      C
002B53 E537              MOV      A,vLen
002B55 9401              SUBB     A,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 82


002B57 5006              JNC      ?C0040?PKT_C2M
002B59 AE37              MOV      R6,vLen
002B5B AF38              MOV      R7,vLen+01H
002B5D 8004              SJMP     ?C0041?PKT_C2M
002B5F         ?C0040?PKT_C2M:
002B5F 7E01              MOV      R6,#01H
002B61 7F00              MOV      R7,#00H
002B63         ?C0041?PKT_C2M:
002B63 8E39              MOV      vWriteLen,R6
002B65 8F3A              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
002B67 AB3A              MOV      R3,vWriteLen+01H
002B69 AD34              MOV      R5,pBuf+01H
002B6B AC33              MOV      R4,pBuf
002B6D AF36              MOV      R7,vAddr+01H
002B6F AE35              MOV      R6,vAddr
002B71 121AF9            LCALL    _DRV_C2M_FlashWrite
002B74 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
002B76 7E03              MOV      R6,#03H
002B78 7F40              MOV      R7,#040H
002B7A 22                RET      
  128:         }
002B7B         ?C0042?PKT_C2M:
  129: 
  130:         pBuf  += vWriteLen;
002B7B 1233F9            LCALL    ?L?COM0016
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
002B7E 80CC              SJMP     ?C0038?PKT_C2M
002B80         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
002B80 7E01              MOV      R6,#01H
002B82 7F40              MOV      R7,#040H
  136: }
002B84 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
   41: 
002B85 752B01            MOV      PT_YIELD_FLAG,#01H
002B88         ?C0001?THREAD_IDLE:
002B88 E510              MOV      A,vTCB_Idle
002B8A 7036              JNZ      ?C0002?THREAD_IDLE
002B8C E511              MOV      A,vTCB_Idle+01H
002B8E 24CF              ADD      A,#0CFH
002B90 601E              JZ       ?C0012?THREAD_IDLE
002B92 2431              ADD      A,#031H
002B94 702C              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
002B96         ?C0004?THREAD_IDLE:
   43:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 83


   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
002B96 1225D9            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
002B99 E50F              MOV      A,vTickCount+03H
002B9B 2432              ADD      A,#032H
002B9D FF                MOV      R7,A
002B9E E4                CLR      A
002B9F 350E              ADDC     A,vTickCount+02H
002BA1 F1E8              ACALL    ?L?COM0059
002BA3 FC                MOV      R4,A
002BA4 9004FC            MOV      DPTR,#vEndTick
002BA7 120685            LCALL    ?C?LSTXDATA
002BAA 751000            MOV      vTCB_Idle,#00H
002BAD 751131            MOV      vTCB_Idle+01H,#031H
002BB0         ?C0012?THREAD_IDLE:
002BB0 00                NOP      
002BB1 9004FC            MOV      DPTR,#vEndTick
002BB4 F1C9              ACALL    ?L?COM0018
002BB6 7F00              MOV      R7,#00H
002BB8 5002              JNC      ?C0014?THREAD_IDLE
002BBA 7F01              MOV      R7,#01H
002BBC         ?C0014?THREAD_IDLE:
002BBC         ?C0015?THREAD_IDLE:
002BBC EF                MOV      A,R7
002BBD 60D7              JZ       ?C0004?THREAD_IDLE
002BBF 7F00              MOV      R7,#00H
002BC1 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
002BC2         ?C0002?THREAD_IDLE:
002BC2 E4                CLR      A
002BC3 F52B              MOV      PT_YIELD_FLAG,A
002BC5 F510              MOV      vTCB_Idle,A
002BC7 F511              MOV      vTCB_Idle+01H,A
002BC9 7F03              MOV      R7,#03H
   53: }
002BCB 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
002BCC E4                CLR      A
002BCD F510              MOV      vTCB_Idle,A
002BCF F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
002BD1 1201DD            LCALL    CFG_Init
   76:     DRV_Init();
002BD4 71F0              ACALL    DRV_Init
;----                  JMP      APL_Init
   77:     APL_Init();
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION APL_Init (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 84


 FILE: '..\apl\apl.c'
  182: void APL_Init(void)
  183: {
  184:     /* copy initial setting */
  185:     CFG_SET(RT_EVB_CTRL, CFG_GET(INIT_RT_EVB_CTRL));
002BD6         ?C0598?APL:
002BD6 903860            MOV      DPTR,#03860H
002BD9 E4                CLR      A
002BDA 93                MOVC     A,@A+DPTR
002BDB FF                MOV      R7,A
002BDC 7818              MOV      R0,#018H
002BDE EF                MOV      A,R7
002BDF F2                MOVX     @R0,A
002BE0         ?C0619?APL:
  186: 
  187:     /* enable PWM_VBUF output */
  188:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
002BE0 7818              MOV      R0,#018H
002BE2 E2                MOVX     A,@R0
002BE3 FF                MOV      R7,A
002BE4 E4                CLR      A
002BE5 8FFC              MOV      PCA0CPH0,R7
002BE7         ?C0618?APL:
  189:     DRV_CPU_DelayMs(10);
002BE7 7F0A              MOV      R7,#0AH
002BE9 7E00              MOV      R6,#00H
002BEB B134              ACALL    _DRV_CPU_DelayMs
  190:     DRV_IO_Write(IO(IO_VBUF_OEn), LOW);
002BED C291              CLR      IO_VBUF_OEn
  191: }
002BEF 22                RET      
----- FUNCTION APL_Init (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
002BF0 438E10            ORL      CKCON,#010H
002BF3 E4                CLR      A
002BF4 F5C8              MOV      TMR2CN,A
002BF6 75CA40            MOV      TMR2RLL,#040H
002BF9 75CC40            MOV      TMR2L,#040H
002BFC 75CBA2            MOV      TMR2RLH,#0A2H
002BFF 75CDA2            MOV      TMR2H,#0A2H
002C02 C2CF              CLR      TF2H
002C04 D2CA              SETB     TR2
002C06 C2BD              CLR      PT2
002C08 D2AD              SETB     ET2
002C0A F50F              MOV      vTickCount+03H,A
002C0C F50E              MOV      vTickCount+02H,A
002C0E F50D              MOV      vTickCount+01H,A
002C10 F50C              MOV      vTickCount,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 85


   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
002C12 912B              ACALL    DRV_USB_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
002C14 75D107            MOV      REF0CN,#07H
002C17 7FD0              MOV      R7,#0D0H
002C19 7E07              MOV      R6,#07H
002C1B 121AD9            LCALL    _DRV_CPU_DelayUs
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
002C1E B174              ACALL    DRV_ADC_Init
;----                  JMP      DRV_C2M_Init
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------


----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
002C20 53A57F            ANL      P1MDOUT,#07FH
002C23 53A6FE            ANL      P2MDOUT,#0FEH
002C26 D297              SETB     IO_DUT_C2M_SCL
002C28 D2A0              SETB     IO_DUT_C2M_SDA
  693: 
002C2A 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   43: void DRV_USB_Init(void)
   44: {
   45:     UINT8   vData;
   46:     UINT8   vLoop;
   47: 
   48:     /* init USB manufacture string */
   49:     aManufacturerStr[1] = 0x03;
002C2B 900485            MOV      DPTR,#aManufacturerStr+01H
002C2E 7403              MOV      A,#03H
002C30 F0                MOVX     @DPTR,A
   50:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002C31 7F02              MOV      R7,#02H
002C33         ?C0001?DRV_USB:
002C33 EF                MOV      A,R7
002C34 C3                CLR      C
002C35 9422              SUBB     A,#022H
002C37 502F              JNC      ?C0002?DRV_USB
   51:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 86


   52:         vData = CFG_GETO8(EE_Vendor_Name, (vLoop>>1)-1);
002C39 EF                MOV      A,R7
002C3A C3                CLR      C
002C3B 13                RRC      A
002C3C C3                CLR      C
002C3D 9401              SUBB     A,#01H
002C3F 2490              ADD      A,#090H
002C41 F1B9              ACALL    ?L?COM0022
002C43 4023              JC       ?C0002?DRV_USB
002C45 E52B              MOV      A,vData
002C47 947F              SUBB     A,#07FH
002C49 501D              JNC      ?C0002?DRV_USB
   53: 
   54:         if ((vData < 0x20) || (vData >= 0x7F))
   55:         {
   56:             break;
   57:         }
002C4B         ?C0004?DRV_USB:
   58: 
   59:         aManufacturerStr[vLoop+0] = vData;
002C4B 7484              MOV      A,#LOW aManufacturerStr
002C4D 2F                ADD      A,R7
002C4E F582              MOV      DPL,A
002C50 E4                CLR      A
002C51 3404              ADDC     A,#HIGH aManufacturerStr
002C53 F583              MOV      DPH,A
002C55 E52B              MOV      A,vData
002C57 F0                MOVX     @DPTR,A
   60:         aManufacturerStr[vLoop+1] = 0;
002C58 7485              MOV      A,#LOW aManufacturerStr+01H
002C5A 2F                ADD      A,R7
002C5B F582              MOV      DPL,A
002C5D E4                CLR      A
002C5E 3404              ADDC     A,#HIGH aManufacturerStr+01H
002C60 F583              MOV      DPH,A
002C62 E4                CLR      A
002C63 F0                MOVX     @DPTR,A
   61:     }
002C64 0F                INC      R7
002C65 0F                INC      R7
002C66 80CB              SJMP     ?C0001?DRV_USB
002C68         ?C0002?DRV_USB:
   62:     aManufacturerStr[0] = vLoop;
002C68 900484            MOV      DPTR,#aManufacturerStr
002C6B EF                MOV      A,R7
002C6C F0                MOVX     @DPTR,A
   63: 
   64:     /* init USB product string */
   65:     aProductStr[1] = 0x03;
002C6D 9004A7            MOV      DPTR,#aProductStr+01H
002C70 7403              MOV      A,#03H
002C72 F0                MOVX     @DPTR,A
   66:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
002C73 7F02              MOV      R7,#02H
002C75         ?C0006?DRV_USB:
002C75 EF                MOV      A,R7
002C76 C3                CLR      C
002C77 9422              SUBB     A,#022H
002C79 502F              JNC      ?C0007?DRV_USB
   67:     {
   68:         vData = CFG_GETO8(EE_Vendor_PN, (vLoop>>1)-1);
002C7B EF                MOV      A,R7
002C7C C3                CLR      C
002C7D 13                RRC      A
002C7E C3                CLR      C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 87


002C7F 9401              SUBB     A,#01H
002C81 24A0              ADD      A,#0A0H
002C83 F1B9              ACALL    ?L?COM0022
002C85 4023              JC       ?C0007?DRV_USB
002C87 E52B              MOV      A,vData
002C89 947F              SUBB     A,#07FH
002C8B 501D              JNC      ?C0007?DRV_USB
   69: 
   70:         if ((vData < 0x20) || (vData >= 0x7F))
   71:         {
   72:             break;
   73:         }
002C8D         ?C0009?DRV_USB:
   74: 
   75:         aProductStr[vLoop+0] = vData;
002C8D 74A6              MOV      A,#LOW aProductStr
002C8F 2F                ADD      A,R7
002C90 F582              MOV      DPL,A
002C92 E4                CLR      A
002C93 3404              ADDC     A,#HIGH aProductStr
002C95 F583              MOV      DPH,A
002C97 E52B              MOV      A,vData
002C99 F0                MOVX     @DPTR,A
   76:         aProductStr[vLoop+1] = 0;
002C9A 74A7              MOV      A,#LOW aProductStr+01H
002C9C 2F                ADD      A,R7
002C9D F582              MOV      DPL,A
002C9F E4                CLR      A
002CA0 3404              ADDC     A,#HIGH aProductStr+01H
002CA2 F583              MOV      DPH,A
002CA4 E4                CLR      A
002CA5 F0                MOVX     @DPTR,A
   77:     }
002CA6 0F                INC      R7
002CA7 0F                INC      R7
002CA8 80CB              SJMP     ?C0006?DRV_USB
002CAA         ?C0007?DRV_USB:
   78:     aProductStr[0] = vLoop;
002CAA 9004A6            MOV      DPTR,#aProductStr
002CAD EF                MOV      A,R7
002CAE F0                MOVX     @DPTR,A
   79: 
   80:     /* init USB serial number string */
   81:     aSerialNumberStr[1] = 0x03;
002CAF 9004C9            MOV      DPTR,#aSerialNumberStr+01H
002CB2 7403              MOV      A,#03H
002CB4 F0                MOVX     @DPTR,A
   82:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
002CB5 7F02              MOV      R7,#02H
002CB7         ?C0011?DRV_USB:
002CB7 EF                MOV      A,R7
002CB8 C3                CLR      C
002CB9 9422              SUBB     A,#022H
002CBB 502F              JNC      ?C0012?DRV_USB
   83:     {
   84:         vData = CFG_GETO8(EE_Vendor_SN, (vLoop>>1)-1);
002CBD EF                MOV      A,R7
002CBE C3                CLR      C
002CBF 13                RRC      A
002CC0 C3                CLR      C
002CC1 9401              SUBB     A,#01H
002CC3 24B0              ADD      A,#0B0H
002CC5 F1B9              ACALL    ?L?COM0022
002CC7 4023              JC       ?C0012?DRV_USB
002CC9 E52B              MOV      A,vData
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 88


002CCB 947F              SUBB     A,#07FH
002CCD 501D              JNC      ?C0012?DRV_USB
   85: 
   86:         if ((vData < 0x20) || (vData >= 0x7F))
   87:         {
   88:             break;
   89:         }
002CCF         ?C0014?DRV_USB:
   90: 
   91:         aSerialNumberStr[vLoop+0] = vData;
002CCF 74C8              MOV      A,#LOW aSerialNumberStr
002CD1 2F                ADD      A,R7
002CD2 F582              MOV      DPL,A
002CD4 E4                CLR      A
002CD5 3404              ADDC     A,#HIGH aSerialNumberStr
002CD7 F583              MOV      DPH,A
002CD9 E52B              MOV      A,vData
002CDB F0                MOVX     @DPTR,A
   92:         aSerialNumberStr[vLoop+1] = 0;
002CDC 74C9              MOV      A,#LOW aSerialNumberStr+01H
002CDE 2F                ADD      A,R7
002CDF F582              MOV      DPL,A
002CE1 E4                CLR      A
002CE2 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002CE4 F583              MOV      DPH,A
002CE6 E4                CLR      A
002CE7 F0                MOVX     @DPTR,A
   93:     }
002CE8 0F                INC      R7
002CE9 0F                INC      R7
002CEA 80CB              SJMP     ?C0011?DRV_USB
002CEC         ?C0012?DRV_USB:
   94:     aSerialNumberStr[0] = vLoop;
002CEC 9004C8            MOV      DPTR,#aSerialNumberStr
002CEF EF                MOV      A,R7
002CF0 F0                MOVX     @DPTR,A
   95: 
   96:     /* set USB0 to the high priority level interrupt */
   97:     EIP1 |= (1<<1);
002CF1 43F602            ORL      EIP1,#02H
   98: 
   99:     /* init USB device */
  100:     USB_Clock_Start();
002CF4 120046            LCALL    USB_Clock_Start
  101:     USB_Init(DRV_USB_VID,
002CF7 9004F1            MOV      DPTR,#?_USB_Init?BYTE+07H
002CFA 7401              MOV      A,#01H
002CFC F0                MOVX     @DPTR,A
002CFD A3                INC      DPTR
002CFE 7404              MOV      A,#HIGH aProductStr
002D00 F0                MOVX     @DPTR,A
002D01 A3                INC      DPTR
002D02 74A6              MOV      A,#LOW aProductStr
002D04 F0                MOVX     @DPTR,A
002D05 A3                INC      DPTR
002D06 7401              MOV      A,#01H
002D08 F0                MOVX     @DPTR,A
002D09 A3                INC      DPTR
002D0A 7404              MOV      A,#HIGH aSerialNumberStr
002D0C F0                MOVX     @DPTR,A
002D0D A3                INC      DPTR
002D0E 74C8              MOV      A,#LOW aSerialNumberStr
002D10 F0                MOVX     @DPTR,A
002D11 A3                INC      DPTR
002D12 74FA              MOV      A,#0FAH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 89


002D14 F0                MOVX     @DPTR,A
002D15 A3                INC      DPTR
002D16 7480              MOV      A,#080H
002D18 F0                MOVX     @DPTR,A
002D19 A3                INC      DPTR
002D1A 7401              MOV      A,#01H
002D1C F0                MOVX     @DPTR,A
002D1D A3                INC      DPTR
002D1E E4                CLR      A
002D1F F0                MOVX     @DPTR,A
002D20 7B01              MOV      R3,#01H
002D22 7A04              MOV      R2,#HIGH aManufacturerStr
002D24 7984              MOV      R1,#LOW aManufacturerStr
002D26 7D61              MOV      R5,#061H
002D28 7CEA              MOV      R4,#0EAH
002D2A 7FC4              MOV      R7,#0C4H
002D2C 7E10              MOV      R6,#010H
002D2E 120E90            LCALL    _USB_Init
  102:              DRV_USB_PID,
  103:              aManufacturerStr,
  104:              aProductStr,
  105:              aSerialNumberStr,
  106:              0xFA,      /* maximum current: 500mA */
  107:              0x80,      /* bus-powered, remote wakeup is unsupported */
  108:              0x100);    /* device release number 1.00 */
  109: 
  110:     /* the USB_Init() API will auto-enable global interrupt,
  111:      * disable it here, and will be enabled later.
  112:      */
  113:     DRV_INT_GlobalDisableInterrupt();
002D31 C2AF              CLR      EA
  114: }
002D33 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002D34 8F82              MOV      DPL,R7
002D36 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
   70:     if (DRV_INT_IsGlobalInterruptEnable())
002D38 30AF22            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
002D3B EF                MOV      A,R7
002D3C 250F              ADD      A,vTickCount+03H
002D3E F53E              MOV      vStopTick+03H,A
002D40 EE                MOV      A,R6
002D41 350E              ADDC     A,vTickCount+02H
002D43 F53D              MOV      vStopTick+02H,A
002D45 E4                CLR      A
002D46 350D              ADDC     A,vTickCount+01H
002D48 F53C              MOV      vStopTick+01H,A
002D4A E4                CLR      A
002D4B 350C              ADDC     A,vTickCount
002D4D F53B              MOV      vStopTick,A
002D4F         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
002D4F AF3E              MOV      R7,vStopTick+03H
002D51 AE3D              MOV      R6,vStopTick+02H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 90


002D53 AD3C              MOV      R5,vStopTick+01H
002D55 AC3B              MOV      R4,vStopTick
002D57 F1D4              ACALL    ?L?COM0019
002D59 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
002D5B 80F2              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
002D5D         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
002D5D E582              MOV      A,DPL
002D5F 1582              DEC      DPL
002D61 AE83              MOV      R6,DPH
002D63 7002              JNZ      ?C0012?DRV_CPU
002D65 1583              DEC      DPH
002D67         ?C0012?DRV_CPU:
002D67 4E                ORL      A,R6
002D68 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
002D6A 7FE8              MOV      R7,#0E8H
002D6C 7E03              MOV      R6,#03H
002D6E 121AD9            LCALL    _DRV_CPU_DelayUs
   91:     	}
002D71 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
002D73         ?C0010?DRV_CPU:
002D73 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION DRV_ADC_Init (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   88: void DRV_ADC_Init(void)
   89: {
   90:   /* AD0SC value */
   91:   #define AD0SC_VAL (((CORE_CLOCK*10/DRV_ADC_SAR_RATE/1000/ADC_SAR_ConvClock+5)/10-1)&0x1F)
   92: 
   93:     /* default:
   94:      *  positive channel: temperature sensor;
   95:      *  negative channel: GND;
   96:      */
   97:     AMX0P = ADC_CHP_TEMP;
002D74 75BB1E            MOV      AMX0P,#01EH
   98:     AMX0N = ADC_CHN_GND;
002D77 75BA1F            MOV      AMX0N,#01FH
   99: 
  100:     /* ADC control:
  101:      *  right justify;
  102:      *  ADC start-of-conversion source is write of '1' to ADC0BUSY;
  103:      *  clear ADC flag;
  104:      *  enable ADC;
  105:      */
  106:     ADC0CF = (AD0SC_VAL<<3) | (0<<2);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 91


002D7A 75BCB8            MOV      ADC0CF,#0B8H
  107:     ADC0CN = 0x80;
002D7D 75E880            MOV      ADC0CN,#080H
  108: }
002D80 22                RET      
----- FUNCTION DRV_ADC_Init (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
002D81 752B01            MOV      PT_YIELD_FLAG,#01H
002D84         ?C0001?THREAD_LED:
002D84 E512              MOV      A,vTCB_LED
002D86 7052              JNZ      ?C0002?THREAD_LED
002D88 E513              MOV      A,vTCB_LED+01H
002D8A 24C5              ADD      A,#0C5H
002D8C 603A              JZ       ?C0029?THREAD_LED
002D8E 243B              ADD      A,#03BH
002D90 7048              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
002D92         ?C0004?THREAD_LED:
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
002D92 7819              MOV      R0,#019H
002D94 E2                MOVX     A,@R0
002D95 C4                SWAP     A
002D96 13                RRC      A
002D97 13                RRC      A
002D98 13                RRC      A
002D99 5401              ANL      A,#01H
002D9B 123448            LCALL    ?L?COM001B
002D9E 12352F            LCALL    ?L?COM003E
002DA1 7006              JNZ      ?C0016?THREAD_LED
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_1_OUT), HIGH);
002DA3 D293              SETB     IO_LED_1_OUT
   48:             DRV_IO_Write(IO(IO_LED_2_OUT), LOW);
002DA5 C286              CLR      IO_LED_2_OUT
   49:         }
002DA7 8004              SJMP     ?C0022?THREAD_LED
   50:         else
   51:       #endif
   52:         {
002DA9         ?C0016?THREAD_LED:
   53:             /* system running abnormally */
   54:             DRV_IO_Write(IO(IO_LED_1_OUT), LOW);
002DA9 C293              CLR      IO_LED_1_OUT
   55:             DRV_IO_Write(IO(IO_LED_2_OUT), HIGH);
002DAB D286              SETB     IO_LED_2_OUT
   56:         }
002DAD         ?C0022?THREAD_LED:
   57: 
   58:         DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
002DAD 63A008            XRL      P2,#08H
   59:         OS_SLEEP_MS(&vTCB_LED, 500);
002DB0 E50F              MOV      A,vTickCount+03H
002DB2 24F4              ADD      A,#0F4H
002DB4 FF                MOV      R7,A
002DB5 E50E              MOV      A,vTickCount+02H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 92


002DB7 3401              ADDC     A,#01H
002DB9 F1E8              ACALL    ?L?COM0059
002DBB FC                MOV      R4,A
002DBC 900500            MOV      DPTR,#vEndTick
002DBF 120685            LCALL    ?C?LSTXDATA
002DC2 751200            MOV      vTCB_LED,#00H
002DC5 75133B            MOV      vTCB_LED+01H,#03BH
002DC8         ?C0029?THREAD_LED:
002DC8 00                NOP      
002DC9 900500            MOV      DPTR,#vEndTick
002DCC F1C9              ACALL    ?L?COM0018
002DCE 7F00              MOV      R7,#00H
002DD0 5002              JNC      ?C0031?THREAD_LED
002DD2 7F01              MOV      R7,#01H
002DD4         ?C0031?THREAD_LED:
002DD4         ?C0032?THREAD_LED:
002DD4 EF                MOV      A,R7
002DD5 60BB              JZ       ?C0004?THREAD_LED
002DD7 7F00              MOV      R7,#00H
002DD9 22                RET      
   60:     }
   61: 
   62:     PT_END(&vTCB_LED);
002DDA         ?C0002?THREAD_LED:
002DDA E4                CLR      A
002DDB F52B              MOV      PT_YIELD_FLAG,A
002DDD F512              MOV      vTCB_LED,A
002DDF F513              MOV      vTCB_LED+01H,A
002DE1 7F03              MOV      R7,#03H
   63: }
002DE3 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   80: void thread_LED_Init(void)
   81: {
   82:     PT_INIT(&vTCB_LED);
   83: }
002DE4 E4                CLR      A
002DE5 F512              MOV      vTCB_LED,A
002DE7 F513              MOV      vTCB_LED+01H,A
   84: 
002DE9 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
002DEA D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
002DEC 0215C6            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 93


   61: void main(void)
   62: {
   63: 	/* previous init */
   64: 	DRV_PreInit();
002DEF D122              ACALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
002DF1 D10C              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
002DF3 B1EA              ACALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
002DF5         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
002DF5 E4                CLR      A
002DF6 F52A              MOV      i,A
002DF8         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
002DF8 E52A              MOV      A,i
002DFA 75F006            MOV      B,#06H
002DFD A4                MUL      AB
002DFE 240C              ADD      A,#LOW aThreadList
002E00 F582              MOV      DPL,A
002E02 E4                CLR      A
002E03 3416              ADDC     A,#HIGH aThreadList
002E05 1234A4            LCALL    ?L?COM002A
002E08 40EE              JC       ?C0003?OS
002E0A 80E9              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
002E0C E4                CLR      A
002E0D F52A              MOV      i,A
002E0F         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
002E0F E52A              MOV      A,i
002E11 75F006            MOV      B,#06H
002E14 A4                MUL      AB
002E15 240F              ADD      A,#LOW aThreadList+03H
002E17 F582              MOV      DPL,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 94


002E19 E4                CLR      A
002E1A 3416              ADDC     A,#HIGH aThreadList+03H
002E1C 1234A4            LCALL    ?L?COM002A
002E1F 40EE              JC       ?C0007?OS
   83:     }
   84: }
002E21 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
002E22 E4                CLR      A
002E23 F5A8              MOV      IE,A
002E25 F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
   94:     DRV_CLOCK_Init();
002E27 75B283            MOV      OSCICN,#083H
002E2A         ?C0026?DRV:
002E2A E5B2              MOV      A,OSCICN
002E2C C4                SWAP     A
002E2D 13                RRC      A
002E2E 13                RRC      A
002E2F 5403              ANL      A,#03H
002E31 13                RRC      A
002E32 50F6              JNC      ?C0026?DRV
002E34         ?C0027?DRV:
002E34 75B980            MOV      CLKMUL,#080H
002E37 7F05              MOV      R7,#05H
002E39 7E00              MOV      R6,#00H
002E3B 121AD9            LCALL    _DRV_CPU_DelayUs
002E3E 43B9C0            ORL      CLKMUL,#0C0H
002E41         ?C0028?DRV:
002E41 E5B9              MOV      A,CLKMUL
002E43 C4                SWAP     A
002E44 13                RRC      A
002E45 5407              ANL      A,#07H
002E47 13                RRC      A
002E48 50F7              JNC      ?C0028?DRV
002E4A         ?C0029?DRV:
002E4A 75A902            MOV      CLKSEL,#02H
002E4D 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
002E50 D1B2              ACALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
002E52 438E08            ORL      CKCON,#08H
002E55 E589              MOV      A,TMOD
002E57 540F              ANL      A,#0FH
002E59 4420              ORL      A,#020H
002E5B F589              MOV      TMOD,A
002E5D 758D98            MOV      TH1,#098H
002E60 D28E              SETB     TR1
002E62 AFD4              MOV      R7,P0SKIP
002E64 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 95


002E65 54EF              ANL      A,#0EFH
002E67 FF                MOV      R7,A
002E68 8FD4              MOV      P0SKIP,R7
002E6A AFD4              MOV      R7,P0SKIP
002E6C EF                MOV      A,R7
002E6D 54DF              ANL      A,#0DFH
002E6F FF                MOV      R7,A
002E70 8FD4              MOV      P0SKIP,R7
002E72 43E101            ORL      XBR0,#01H
002E75 759802            MOV      SCON0,#02H
;----                  JMP      DRV_PCA_Init
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_PCA_Init (BEGIN) -----
 FILE: '..\drv\drv_pca.c'
   37: void DRV_PCA_Init(void)
   38: {
   39:     UINT8   vPCA0ME = 0x00;
   40: 
;---- Variable 'vPCA0ME' assigned to Register 'R3' ----
002E78 E4                CLR      A
002E79 FB                MOV      R3,A
   41:     /* PCA channel init */
   42:   #define DECLARE_PCA(_name,_ch,_io,_mode,_init,_desc)                      \
   43:     do {                                                                    \
   44:         DRV_PCA_Write(_name, _init);                                        \
   45:         DRV_PCA_SetMode(_name, _mode);                                      \
   46:                                                                             \
   47:         if (_mode != PCA_MODE_DISABLE)                                      \
   48:         {                                                                   \
   49:             /* force no-skip this PCA channel for GPIO */                   \
   50:             drv_io_SetSkip(_PCA_IO(_name), DISABLE);                        \
   51:             vPCA0ME++;                                                      \
   52:         }                                                                   \
   53:     } while (0);
   54:   #include "cfg_hw_def.h"
   55:   #undef DECLARE_PCA
   56: 
   57:     /* init PCA0:
   58:      *  reset PCA counter;
   59:      *  PCA clock source: defined by DRV_PCA_SOURCE_CLOCK;
   60:      *  enable PCA;
   61:      */
   62:     PCA0H  = 0x00;
   63:     PCA0L  = 0x00;
   64:     PCA0MD = (DRV_PCA_SOURCE_CLOCK<<1);
   65:     PCA0CN = 0x40;
   66: 
   67:     /* enable CEXn at cross-bar */
   68:     XBR1 |= (vPCA0ME&0x7);
   69: }
   70: 
   71: #endif
   72: 
   72: 
002E7A 75FCFF            MOV      PCA0CPH0,#0FFH
002E7D         ?C0011?DRV_PCA:
002E7D 75DA42            MOV      PCA0CPM0,#042H
002E80 AFD4              MOV      R7,P0SKIP
002E82 EF                MOV      A,R7
002E83 54FD              ANL      A,#0FDH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 96


002E85 FF                MOV      R7,A
002E86 8FD4              MOV      P0SKIP,R7
002E88 0B                INC      R3
   72: 
002E89         ?C0022?DRV_PCA:
002E89 E4                CLR      A
002E8A F5E9              MOV      PCA0CPL1,A
002E8C F5EA              MOV      PCA0CPH1,A
002E8E         ?C0026?DRV_PCA:
002E8E E4                CLR      A
002E8F F5DB              MOV      PCA0CPM1,A
002E91         ?C0037?DRV_PCA:
002E91 E4                CLR      A
002E92 F5EB              MOV      PCA0CPL2,A
002E94 F5EC              MOV      PCA0CPH2,A
002E96         ?C0041?DRV_PCA:
002E96 E4                CLR      A
002E97 F5DC              MOV      PCA0CPM2,A
002E99         ?C0052?DRV_PCA:
002E99 E4                CLR      A
002E9A F5ED              MOV      PCA0CPL3,A
002E9C F5EE              MOV      PCA0CPH3,A
002E9E         ?C0056?DRV_PCA:
002E9E E4                CLR      A
002E9F F5DD              MOV      PCA0CPM3,A
002EA1         ?C0047?DRV_PCA:
002EA1 E4                CLR      A
002EA2 F5FA              MOV      PCA0H,A
002EA4 F5F9              MOV      PCA0L,A
002EA6 75D908            MOV      PCA0MD,#08H
002EA9 75D840            MOV      PCA0CN,#040H
002EAC EB                MOV      A,R3
002EAD 5407              ANL      A,#07H
002EAF 42E2              ORL      XBR1,A
002EB1 22                RET      
----- FUNCTION DRV_PCA_Init (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
002EB2 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
002EB5 7590F7            MOV      P1,#0F7H
   42:     P2      = _PORT_INIT(P2);
002EB8 75A0FF            MOV      P2,#0FFH
   43:     P3      = _PORT_INIT(P3);
002EBB 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
002EBE 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
002EC1 75F2FE            MOV      P1MDIN,#0FEH
   46:     P2MDIN  = _PORT_MDIN(P2);
002EC4 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
002EC7 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
002ECA 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
002ECD 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
002ED0 75A60A            MOV      P2MDOUT,#0AH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 97


   51:     P3MDOUT = _PORT_MDOUT(P3);
002ED3 E4                CLR      A
002ED4 F5A7              MOV      P3MDOUT,A
   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
002ED6 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
002ED9 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
002EDC 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
002EDF F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
002EE1 75E240            MOV      XBR1,#040H
   61: }
002EE4 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


----- FUNCTION _CFG_RAM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   75:     }
   76: 
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
002EE5 A807              MOV      R0,AR7
002EE7 E2                MOVX     A,@R0
002EE8 FC                MOV      R4,A
002EE9 08                INC      R0
002EEA E2                MOVX     A,@R0
002EEB FD                MOV      R5,A
002EEC 08                INC      R0
002EED E2                MOVX     A,@R0
002EEE FE                MOV      R6,A
002EEF 08                INC      R0
002EF0 E2                MOVX     A,@R0
002EF1 FF                MOV      R7,A
002EF2 22                RET      
----- FUNCTION _CFG_RAM_GET32 (END) -------


----- FUNCTION _CFG_RAM_SET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   77:     return MEMPAGE_PID_INVALID;
   78: }
;---- Variable 'vAddr' assigned to Register 'R2/R3' ----
002EF3 AB07              MOV      R3,AR7
002EF5 AF31              MOV      R7,vData+03H
002EF7 AE30              MOV      R6,vData+02H
002EF9 AD2F              MOV      R5,vData+01H
002EFB AC2E              MOV      R4,vData
002EFD A803              MOV      R0,AR3
002EFF 020691            LJMP     ?C?LSTPDATA
----- FUNCTION _CFG_RAM_SET32 (END) -------


----- FUNCTION _cfg_db_GetPID (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   42: static SINT8 cfg_db_GetPID(IN UINT8 vOffset)
   43: {
;---- Variable 'vOffset' assigned to Register 'R7' ----
   44:     if (vOffset < MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
   45:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 98


002F02 EF                MOV      A,R7
002F03 C3                CLR      C
002F04 9460              SUBB     A,#060H
002F06 5003              JNC      ?C0019?CFG_DB
   46:         return MEMPAGE_PID_DIRECT_FE_00;
   47:     }
002F08 7F06              MOV      R7,#06H
002F0A 22                RET      
   48:     else if (vOffset < I2CS_PAGE_SIZE)
002F0B         ?C0019?CFG_DB:
   49:     {
002F0B EF                MOV      A,R7
002F0C C3                CLR      C
002F0D 9480              SUBB     A,#080H
002F0F 5003              JNC      ?C0022?CFG_DB
   50:         return MEMPAGE_PID_DIRECT_FE_60;
   51:     }
002F11 7F01              MOV      R7,#01H
002F13 22                RET      
   52:     else
002F14         ?C0022?CFG_DB:
   53:     {
   54:         switch (CFG_GET8(Vendor_Page_Select))
002F14 781F              MOV      R0,#01FH
002F16 E2                MOVX     A,@R0
002F17 2480              ADD      A,#080H
002F19 6017              JZ       ?C0027?CFG_DB
002F1B 14                DEC      A
002F1C 6017              JZ       ?C0028?CFG_DB
002F1E 14                DEC      A
002F1F 6017              JZ       ?C0029?CFG_DB
002F21 2483              ADD      A,#083H
002F23 6016              JZ       ?C0030?CFG_DB
002F25 243F              ADD      A,#03FH
002F27 7015              JNZ      ?C0021?CFG_DB
   55:         {
   56:             /* RAM pages */
   57:             case 0xC0:
002F29         ?C0025?CFG_DB:
   58:                 if (vOffset < I2CS_PAGE_SIZE+CFG_RAM_PAGE_SIZE)
002F29 EF                MOV      A,R7
002F2A C3                CLR      C
002F2B 94A0              SUBB     A,#0A0H
002F2D 500F              JNC      ?C0021?CFG_DB
   59:                 {
   60:                     return MEMPAGE_PID_EXTEND_FE_C0;
002F2F 7F02              MOV      R7,#02H
002F31 22                RET      
   61:                 }
   62:                 break;
   63: 
   64:             /* ROM pages */
   65:             case 0x80: return MEMPAGE_PID_EXTEND_FE_80;
002F32         ?C0027?CFG_DB:
002F32 7F03              MOV      R7,#03H
002F34 22                RET      
   66:             case 0x81: return MEMPAGE_PID_EXTEND_FE_81;
002F35         ?C0028?CFG_DB:
002F35 7F04              MOV      R7,#04H
002F37 22                RET      
   67:             case 0x82: return MEMPAGE_PID_EXTEND_FE_82;
002F38         ?C0029?CFG_DB:
002F38 7F05              MOV      R7,#05H
002F3A 22                RET      
   68: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 99


   69:             /* virtual pages */
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
002F3B         ?C0030?CFG_DB:
002F3B 7F00              MOV      R7,#00H
002F3D 22                RET      
   71: 
   72:             default:
   73:                 break;
   74:         }
   75:     }
002F3E         ?C0021?CFG_DB:
   76: 
   77:     return MEMPAGE_PID_INVALID;
002F3E 7FFF              MOV      R7,#0FFH
   78: }
002F40 22                RET      
----- FUNCTION _cfg_db_GetPID (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
002F41 C0E0              PUSH     ACC
002F43 C0D0              PUSH     PSW
002F45 75D000            MOV      PSW,#00H
002F48 C004              PUSH     AR4
002F4A C005              PUSH     AR5
002F4C C006              PUSH     AR6
002F4E C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
002F50 C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
002F52 AF0F              MOV      R7,vTickCount+03H
002F54 AE0E              MOV      R6,vTickCount+02H
002F56 AD0D              MOV      R5,vTickCount+01H
002F58 AC0C              MOV      R4,vTickCount
002F5A EF                MOV      A,R7
002F5B 2401              ADD      A,#01H
002F5D F50F              MOV      vTickCount+03H,A
002F5F E4                CLR      A
002F60 3E                ADDC     A,R6
002F61 F50E              MOV      vTickCount+02H,A
002F63 E4                CLR      A
002F64 3D                ADDC     A,R5
002F65 F50D              MOV      vTickCount+01H,A
002F67 E4                CLR      A
002F68 3C                ADDC     A,R4
002F69 F50C              MOV      vTickCount,A
   45: }
002F6B D007              POP      AR7
002F6D D006              POP      AR6
002F6F D005              POP      AR5
002F71 D004              POP      AR4
002F73 D0D0              POP      PSW
002F75 D0E0              POP      ACC
002F77 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 100


   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
002F78 C0E0              PUSH     ACC
002F7A C083              PUSH     DPH
002F7C C082              PUSH     DPL
002F7E C0D0              PUSH     PSW
002F80 75D000            MOV      PSW,#00H
002F83 C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
002F85 121601            LCALL    Get_Interrupt_Source
002F88 1217CB            LCALL    _thread_Pkt_Notify
   69:   #endif
   70: }
002F8B D007              POP      AR7
002F8D D0D0              POP      PSW
002F8F D082              POP      DPL
002F91 D083              POP      DPH
002F93 D0E0              POP      ACC
002F95 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION ?L?COM0044 (BEGIN) -----
002F96 2480              ADD      A,#080H
002F98 FF                MOV      R7,A
002F99 EE                MOV      A,R6
002F9A 3436              ADDC     A,#036H
002F9C FE                MOV      R6,A
002F9D 22                RET      
----- FUNCTION ?L?COM0044 (END) -------


----- FUNCTION ?L?COM000E (BEGIN) -----
002F9E C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FA0 A280              MOV      C,IO_DUT_MDIOM_SDA_IN
002FA2 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FA4 22                RET      
----- FUNCTION ?L?COM000E (END) -------


----- FUNCTION ?L?COM0039 (BEGIN) -----
002FA5 AF41              MOV      R7,vPID
002FA7         ?L?COM003A:
002FA7 EF                MOV      A,R7
002FA8 33                RLC      A
002FA9 95E0              SUBB     A,ACC
002FAB FE                MOV      R6,A
002FAC EF                MOV      A,R7
002FAD 7807              MOV      R0,#07H
002FAF 22                RET      
----- FUNCTION ?L?COM0039 (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
002FB0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FB2 D294              SETB     IO_DUT_MDIOM_SDA_OUT
002FB4 D283              SETB     IO_DUT_MDIOM_SCL_OEn
002FB6 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
002FB8 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM0022 (BEGIN) -----
002FB9 FD                MOV      R5,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 101


002FBA E4                CLR      A
002FBB 3439              ADDC     A,#039H
002FBD 8D82              MOV      DPL,R5
002FBF F583              MOV      DPH,A
002FC1 E4                CLR      A
002FC2 93                MOVC     A,@A+DPTR
002FC3 F52B              MOV      vData,A
002FC5 C3                CLR      C
002FC6 9420              SUBB     A,#020H
002FC8 22                RET      
----- FUNCTION ?L?COM0022 (END) -------


----- FUNCTION ?L?COM0018 (BEGIN) -----
002FC9 E0                MOVX     A,@DPTR
002FCA FC                MOV      R4,A
002FCB A3                INC      DPTR
002FCC E0                MOVX     A,@DPTR
002FCD FD                MOV      R5,A
002FCE A3                INC      DPTR
002FCF E0                MOVX     A,@DPTR
002FD0 FE                MOV      R6,A
002FD1 A3                INC      DPTR
002FD2 E0                MOVX     A,@DPTR
002FD3 FF                MOV      R7,A
002FD4         ?L?COM0019:
002FD4 AB0F              MOV      R3,vTickCount+03H
002FD6 AA0E              MOV      R2,vTickCount+02H
002FD8 A90D              MOV      R1,vTickCount+01H
002FDA A80C              MOV      R0,vTickCount
002FDC C3                CLR      C
002FDD 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0018 (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
002FE0 E4                CLR      A
002FE1 90004A            MOV      DPTR,#vFrame+0AH
002FE4 F0                MOVX     @DPTR,A
002FE5 A3                INC      DPTR
002FE6 F0                MOVX     @DPTR,A
002FE7 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM0059 (BEGIN) -----
002FE8 FE                MOV      R6,A
002FE9 E4                CLR      A
002FEA 350D              ADDC     A,vTickCount+01H
002FEC FD                MOV      R5,A
002FED E4                CLR      A
002FEE 350C              ADDC     A,vTickCount
002FF0 22                RET      
----- FUNCTION ?L?COM0059 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
002FF1 121D46            LCALL    c2m_ReadDR
002FF4 EF                MOV      A,R7
002FF5 640D              XRL      A,#0DH
002FF7 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION _CFG_DB_ReadByte (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 102


 FILE: '..\cfg\cfg_db.c'
   95: UINT8 CFG_DB_ReadByte(IN UINT8 vOffset)
   96: {
;---- Variable 'vOffset' assigned to Register 'R5' ----
003000 AD07              MOV      R5,AR7
   97:     SINT8   vPID = cfg_db_GetPID(vOffset);
   98:     UINT8   vPageSize;
003002 122F02            LCALL    _cfg_db_GetPID
;---- Variable 'vPID' assigned to Register 'R6' ----
003005 AE07              MOV      R6,AR7
   99: 
  100:     if (vPID == MEMPAGE_PID_INVALID)
003007 BEFF03            CJNE     R6,#0FFH,?C0032?CFG_DB
  101:     {
  102:         /* invalid page */
  103:         return (UINT8)I2CS_INVALID_DATA;
00300A 7FAA              MOV      R7,#0AAH
00300C 22                RET      
  104:     }
00300D         ?C0032?CFG_DB:
  105: 
  106:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
00300D C3                CLR      C
00300E EE                MOV      A,R6
00300F 6480              XRL      A,#080H
003011 9481              SUBB     A,#081H
003013 400C              JC       ?C0034?CFG_DB
003015 D3                SETB     C
003016 EE                MOV      A,R6
003017 6480              XRL      A,#080H
003019 9482              SUBB     A,#082H
00301B 5004              JNC      ?C0034?CFG_DB
00301D 7F20              MOV      R7,#020H
00301F 8002              SJMP     ?C0035?CFG_DB
003021         ?C0034?CFG_DB:
003021 7F80              MOV      R7,#080H
003023         ?C0035?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  107:     vOffset  &= (vPageSize - 1);
003023 EF                MOV      A,R7
003024 14                DEC      A
003025 5205              ANL      AR5,A
  108: 
  109:     /* check password level, to make sure it's readable */
  110:     if (CFG_PWD_GetLevel() >= aPagePwdReadTable[vPID])
003027 EE                MOV      A,R6
003028 FB                MOV      R3,A
003029 33                RLC      A
00302A 95E0              SUBB     A,ACC
00302C FA                MOV      R2,A
00302D 741E              MOV      A,#LOW aPagePwdReadTable
00302F 2B                ADD      A,R3
003030 F582              MOV      DPL,A
003032 7416              MOV      A,#HIGH aPagePwdReadTable
003034 3A                ADDC     A,R2
003035 51DD              ACALL    ?L?COM0058
003037 9F                SUBB     A,R7
003038 407B              JC       ?C0036?CFG_DB
  111:     {
  112:         /* password check pass */
  113:         switch (vPID)
00303A EE                MOV      A,R6
00303B 6014              JZ       ?C0045?CFG_DB
00303D 14                DEC      A
00303E 7027              JNZ      ?C0037?CFG_DB
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 103


  114:         {
  115:             case MEMPAGE_PID_DIRECT_FE_60:
003040         ?C0038?CFG_DB:
  116:                 switch (vOffset)
003040 ED                MOV      A,R5
003041 24E5              ADD      A,#0E5H
003043 24FD              ADD      A,#0FDH
003045 5004              JNC      ?C0042?CFG_DB
003047 6005              JZ       ?C0043?CFG_DB
003049 801C              SJMP     ?C0037?CFG_DB
  117:                 {
  118:                     /* for security reason,
  119:                      *  the password entry is write-only field.
  120:                      */
  121:                     case CFG(Vendor_PWD_Entry)+0:
  122:                     case CFG(Vendor_PWD_Entry)+1:
  123:                     case CFG(Vendor_PWD_Entry)+2: return 0x00;
00304B         ?C0042?CFG_DB:
00304B 7F00              MOV      R7,#00H
00304D 22                RET      
  124:                     case CFG(Vendor_PWD_Entry)+3: return CFG_PWD_GetLevel();
00304E         ?C0043?CFG_DB:
00304E AF15              MOV      R7,vCfgPwdLevel
003050 22                RET      
  125: 
  126:                     default:
  127:                         break;
  128:                 }
  129:                 break;
  130: 
  131:             case MEMPAGE_PID_EXTEND_FE_FF:
003051         ?C0045?CFG_DB:
  132:                 return (((vOffset >= CFG_HEAD(Vendor_FwVersion))
  133:                             && (vOffset <= CFG_TAIL(Vendor_FwVersion)))?
  134:                         FW_VERSION(vOffset-CFG_HEAD(Vendor_FwVersion)):
  135:                         (UINT8)I2CS_INVALID_DATA);
003051 ED                MOV      A,R5
003052 C3                CLR      C
003053 9478              SUBB     A,#078H
003055 400D              JC       ?C0046?CFG_DB
003057 ED                MOV      A,R5
003058 D3                SETB     C
003059 947F              SUBB     A,#07FH
00305B 5007              JNC      ?C0046?CFG_DB
00305D ED                MOV      A,R5
00305E 900170            MOV      DPTR,#__sig-070H
003061 93                MOVC     A,@A+DPTR
003062 FF                MOV      R7,A
003063 22                RET      
003064         ?C0046?CFG_DB:
003064 7FAA              MOV      R7,#0AAH
003066 22                RET      
  136: 
  137:             default:
  138:                 break;
  139:         }
003067         ?C0037?CFG_DB:
  140: 
  141:         return CFG_GETV8(vPID, vOffset);
003067 C3                CLR      C
003068 EE                MOV      A,R6
003069 6480              XRL      A,#080H
00306B 9481              SUBB     A,#081H
00306D 4014              JC       ?C0049?CFG_DB
00306F D3                SETB     C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 104


003070 EE                MOV      A,R6
003071 6480              XRL      A,#080H
003073 9482              SUBB     A,#082H
003075 500C              JNC      ?C0049?CFG_DB
003077 EE                MOV      A,R6
003078 14                DEC      A
003079 C4                SWAP     A
00307A 33                RLC      A
00307B 54E0              ANL      A,#0E0H
00307D 2D                ADD      A,R5
00307E F8                MOV      R0,A
00307F E2                MOVX     A,@R0
003080 FF                MOV      R7,A
003081 8031              SJMP     ?C0050?CFG_DB
003083         ?C0049?CFG_DB:
003083 C3                CLR      C
003084 EE                MOV      A,R6
003085 6480              XRL      A,#080H
003087 9483              SUBB     A,#083H
003089 4027              JC       ?C0051?CFG_DB
00308B D3                SETB     C
00308C EE                MOV      A,R6
00308D 6480              XRL      A,#080H
00308F 9486              SUBB     A,#086H
003091 501F              JNC      ?C0051?CFG_DB
003093 AF06              MOV      R7,AR6
003095 122FA7            LCALL    ?L?COM003A
003098         ?C0106?CFG_DB:
003098 C3                CLR      C
003099 33                RLC      A
00309A CE                XCH      A,R6
00309B 33                RLC      A
00309C CE                XCH      A,R6
00309D D8F9              DJNZ     R0,?C0106?CFG_DB
00309F 122F96            LCALL    ?L?COM0044
0030A2 7C00              MOV      R4,#00H
0030A4 EF                MOV      A,R7
0030A5 2D                ADD      A,R5
0030A6 FF                MOV      R7,A
0030A7 EC                MOV      A,R4
0030A8 3E                ADDC     A,R6
0030A9 8F82              MOV      DPL,R7
0030AB F583              MOV      DPH,A
0030AD E4                CLR      A
0030AE 93                MOVC     A,@A+DPTR
0030AF FF                MOV      R7,A
0030B0 8002              SJMP     ?C0052?CFG_DB
0030B2         ?C0051?CFG_DB:
0030B2 7FAA              MOV      R7,#0AAH
0030B4         ?C0052?CFG_DB:
0030B4         ?C0050?CFG_DB:
0030B4 22                RET      
  142:     }
0030B5         ?C0036?CFG_DB:
  143:     else
  144:     {
  145:         /* password check fail */
  146:         return (UINT8)I2CS_INVALID_DATA;
0030B5 7FAA              MOV      R7,#0AAH
  147:     }
  148: }
0030B7 22                RET      
----- FUNCTION _CFG_DB_ReadByte (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 105


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
  230:     c2m_SetIns(0x1);    /* instruction: write data */
0030B8 D243              SETB     bIns0
0030BA C244              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
0030BC C245              CLR      bLength0
0030BE C246              CLR      bLength1
  232:     c2m_SetData(vData);
0030C0 8F26              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
0030C2 30AF05            JNB      EA,?C0355?DRV_C2M
0030C5 C2AF              CLR      EA
0030C7 D3                SETB     C
0030C8 8001              SJMP     ?C0356?DRV_C2M
0030CA         ?C0355?DRV_C2M:
0030CA C3                CLR      C
0030CB         ?C0356?DRV_C2M:
0030CB 516B              ACALL    ?L?COM0014
0030CD 00                NOP      
0030CE 00                NOP      
0030CF 00                NOP      
0030D0 00                NOP      
0030D1 51F0              ACALL    ?L?COM0021
0030D3 00                NOP      
0030D4 00                NOP      
0030D5 00                NOP      
0030D6 00                NOP      
0030D7 517A              ACALL    ?L?COM0030
0030D9 00                NOP      
0030DA 00                NOP      
0030DB 00                NOP      
0030DC 00                NOP      
0030DD 518C              ACALL    ?L?COM004E
0030DF 00                NOP      
0030E0 00                NOP      
0030E1 00                NOP      
0030E2 00                NOP      
0030E3 5183              ACALL    ?L?COM004D
0030E5 00                NOP      
0030E6 00                NOP      
0030E7 00                NOP      
0030E8 00                NOP      
0030E9 51D4              ACALL    ?L?COM0056
0030EB 00                NOP      
0030EC 00                NOP      
0030ED 00                NOP      
0030EE 00                NOP      
0030EF 51CB              ACALL    ?L?COM0055
0030F1 00                NOP      
0030F2 00                NOP      
0030F3 00                NOP      
0030F4 00                NOP      
0030F5 51C2              ACALL    ?L?COM0054
0030F7 00                NOP      
0030F8 00                NOP      
0030F9 00                NOP      
0030FA 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 106


0030FB 51B9              ACALL    ?L?COM0053
0030FD 00                NOP      
0030FE 00                NOP      
0030FF 00                NOP      
003100 00                NOP      
003101 51B0              ACALL    ?L?COM0052
003103 00                NOP      
003104 00                NOP      
003105 00                NOP      
003106 00                NOP      
003107 51A7              ACALL    ?L?COM0051
003109 00                NOP      
00310A 00                NOP      
00310B 00                NOP      
00310C 00                NOP      
00310D 519E              ACALL    ?L?COM0050
00310F 00                NOP      
003110 00                NOP      
003111 00                NOP      
003112 00                NOP      
003113 5195              ACALL    ?L?COM004F
003115 00                NOP      
003116 00                NOP      
003117 00                NOP      
003118 00                NOP      
003119 51E6              ACALL    ?L?COM0038
00311B 00                NOP      
00311C D297              SETB     IO_DUT_C2M_SCL
00311E 00                NOP      
00311F 00                NOP      
  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
  240:     c2m_TxByte();       /* tx address */
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
003120 754727            MOV      _timeout,#027H
003123 754810            MOV      _timeout+01H,#010H
003126         ?C0557?DRV_C2M:
003126 00                NOP      
003127 00                NOP      
003128 C297              CLR      IO_DUT_C2M_SCL
00312A 00                NOP      
00312B 00                NOP      
00312C 121ACF            LCALL    ?L?COM0007
00312F 20300D            JB       bC2Bit0,?C0570?DRV_C2M
003132 E548              MOV      A,_timeout+01H
003134 1548              DEC      _timeout+01H
003136 AE47              MOV      R6,_timeout
003138 7002              JNZ      ?C1013?DRV_C2M
00313A 1547              DEC      _timeout
00313C         ?C1013?DRV_C2M:
00313C 4E                ORL      A,R6
00313D 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
00313F         ?C0570?DRV_C2M:
00313F 6102              AJMP     ?L?COM001F
  244: 
  245:     /* unlock globally interrupt */
  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 107


003141 C283              CLR      IO_DUT_MDIOM_SCL_OEn
003143 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
003145 A248              MOV      C,bMdioPreamble
003147 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003149 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00314B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00314D A248              MOV      C,bMdioPreamble
00314F D296              SETB     IO_DUT_MDIOM_SCL_OUT
003151 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003153 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003155 A248              MOV      C,bMdioPreamble
003157 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003159 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00315B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00315D A248              MOV      C,bMdioPreamble
00315F D296              SETB     IO_DUT_MDIOM_SCL_OUT
003161 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003163 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003165 A248              MOV      C,bMdioPreamble
003167 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003169 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00316B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00316D A248              MOV      C,bMdioPreamble
00316F D296              SETB     IO_DUT_MDIOM_SCL_OUT
003171 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003173 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003175 A248              MOV      C,bMdioPreamble
003177 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003179 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00317B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00317D A248              MOV      C,bMdioPreamble
00317F D296              SETB     IO_DUT_MDIOM_SCL_OUT
003181 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003183 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003185 A248              MOV      C,bMdioPreamble
003187 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003189 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00318B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00318D A248              MOV      C,bMdioPreamble
00318F         ?L?COM0002:
00318F D296              SETB     IO_DUT_MDIOM_SCL_OUT
003191 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003193 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003195 A248              MOV      C,bMdioPreamble
003197 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003199 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00319B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00319D A248              MOV      C,bMdioPreamble
00319F D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031A1 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031A3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031A5 A248              MOV      C,bMdioPreamble
0031A7 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031A9 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031AB C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031AD A248              MOV      C,bMdioPreamble
0031AF D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031B1 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031B3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031B5 A248              MOV      C,bMdioPreamble
0031B7 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031B9 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031BB C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031BD A248              MOV      C,bMdioPreamble
0031BF D296              SETB     IO_DUT_MDIOM_SCL_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 108


0031C1 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031C3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031C5 A248              MOV      C,bMdioPreamble
0031C7 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031C9 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031CB C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031CD A248              MOV      C,bMdioPreamble
0031CF D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031D1 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031D3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031D5 A248              MOV      C,bMdioPreamble
0031D7 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031D9 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031DB C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031DD A248              MOV      C,bMdioPreamble
0031DF D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031E1 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031E3 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031E5 A248              MOV      C,bMdioPreamble
0031E7 22                RET      
----- FUNCTION ?L?COM0001 (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
0031E8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031EA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031EC C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031EE A20F              MOV      C,bMdioStartFrame1
0031F0 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031F2 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031F4 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031F6 A20E              MOV      C,bMdioStartFrame0
0031F8 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031FA 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031FC C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031FE A20D              MOV      C,bMdioOperationCode1
003200 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003202 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003204 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003206 A20C              MOV      C,bMdioOperationCode0
003208 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00320A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00320C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00320E A20B              MOV      C,bMdioPortAddr4
003210 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003212 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003214 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003216 A20A              MOV      C,bMdioPortAddr3
003218 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00321A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00321C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00321E A209              MOV      C,bMdioPortAddr2
003220 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003222 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003224 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003226 A208              MOV      C,bMdioPortAddr1
003228 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00322A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00322C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00322E A207              MOV      C,bMdioPortAddr0
003230 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003232 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003234 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003236 A206              MOV      C,bMdioDeviceAddr4
003238 D296              SETB     IO_DUT_MDIOM_SCL_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 109


00323A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00323C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00323E A205              MOV      C,bMdioDeviceAddr3
003240 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003242 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003244 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003246 A204              MOV      C,bMdioDeviceAddr2
003248 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00324A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00324C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00324E A203              MOV      C,bMdioDeviceAddr1
003250 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003252 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003254 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003256 A202              MOV      C,bMdioDeviceAddr0
003258         ?L?COM0004:
003258 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00325A 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00325C C296              CLR      IO_DUT_MDIOM_SCL_OUT
00325E 22                RET      
----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
00325F 92AF              MOV      EA,C
003261         ?L?COM0035:
003261 E524              MOV      A,vMdioData
003263 F0                MOVX     @DPTR,A
003264 A3                INC      DPTR
003265 E525              MOV      A,vMdioData+01H
003267 F0                MOVX     @DPTR,A
003268 A200              MOV      C,bMdioTurnAround0
00326A 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
00326B 9239              MOV      bIntState,C
00326D 53A6FE            ANL      P2MDOUT,#0FEH
003270 43A580            ORL      P1MDOUT,#080H
003273         ?L?COM0015:
003273 A241              MOV      C,bHigh
003275 92A0              MOV      IO_DUT_C2M_SDA,C
003277 C297              CLR      IO_DUT_C2M_SCL
003279 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
00327A D297              SETB     IO_DUT_C2M_SCL
00327C A244              MOV      C,bIns1
00327E 92A0              MOV      IO_DUT_C2M_SDA,C
003280 C297              CLR      IO_DUT_C2M_SCL
003282 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM004D (BEGIN) -----
003283 D297              SETB     IO_DUT_C2M_SCL
003285 A246              MOV      C,bLength1
003287 92A0              MOV      IO_DUT_C2M_SDA,C
003289 C297              CLR      IO_DUT_C2M_SCL
00328B 22                RET      
----- FUNCTION ?L?COM004D (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 110



----- FUNCTION ?L?COM004E (BEGIN) -----
00328C D297              SETB     IO_DUT_C2M_SCL
00328E A245              MOV      C,bLength0
003290 92A0              MOV      IO_DUT_C2M_SDA,C
003292 C297              CLR      IO_DUT_C2M_SCL
003294 22                RET      
----- FUNCTION ?L?COM004E (END) -------


----- FUNCTION ?L?COM004F (BEGIN) -----
003295 D297              SETB     IO_DUT_C2M_SCL
003297 A237              MOV      C,bC2Bit7
003299 92A0              MOV      IO_DUT_C2M_SDA,C
00329B C297              CLR      IO_DUT_C2M_SCL
00329D 22                RET      
----- FUNCTION ?L?COM004F (END) -------


----- FUNCTION ?L?COM0050 (BEGIN) -----
00329E D297              SETB     IO_DUT_C2M_SCL
0032A0 A236              MOV      C,bC2Bit6
0032A2 92A0              MOV      IO_DUT_C2M_SDA,C
0032A4 C297              CLR      IO_DUT_C2M_SCL
0032A6 22                RET      
----- FUNCTION ?L?COM0050 (END) -------


----- FUNCTION ?L?COM0051 (BEGIN) -----
0032A7 D297              SETB     IO_DUT_C2M_SCL
0032A9 A235              MOV      C,bC2Bit5
0032AB 92A0              MOV      IO_DUT_C2M_SDA,C
0032AD C297              CLR      IO_DUT_C2M_SCL
0032AF 22                RET      
----- FUNCTION ?L?COM0051 (END) -------


----- FUNCTION ?L?COM0052 (BEGIN) -----
0032B0 D297              SETB     IO_DUT_C2M_SCL
0032B2 A234              MOV      C,bC2Bit4
0032B4 92A0              MOV      IO_DUT_C2M_SDA,C
0032B6 C297              CLR      IO_DUT_C2M_SCL
0032B8 22                RET      
----- FUNCTION ?L?COM0052 (END) -------


----- FUNCTION ?L?COM0053 (BEGIN) -----
0032B9 D297              SETB     IO_DUT_C2M_SCL
0032BB A233              MOV      C,bC2Bit3
0032BD 92A0              MOV      IO_DUT_C2M_SDA,C
0032BF C297              CLR      IO_DUT_C2M_SCL
0032C1 22                RET      
----- FUNCTION ?L?COM0053 (END) -------


----- FUNCTION ?L?COM0054 (BEGIN) -----
0032C2 D297              SETB     IO_DUT_C2M_SCL
0032C4 A232              MOV      C,bC2Bit2
0032C6 92A0              MOV      IO_DUT_C2M_SDA,C
0032C8 C297              CLR      IO_DUT_C2M_SCL
0032CA 22                RET      
----- FUNCTION ?L?COM0054 (END) -------


----- FUNCTION ?L?COM0055 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 111


0032CB D297              SETB     IO_DUT_C2M_SCL
0032CD A231              MOV      C,bC2Bit1
0032CF 92A0              MOV      IO_DUT_C2M_SDA,C
0032D1 C297              CLR      IO_DUT_C2M_SCL
0032D3 22                RET      
----- FUNCTION ?L?COM0055 (END) -------


----- FUNCTION ?L?COM0056 (BEGIN) -----
0032D4 D297              SETB     IO_DUT_C2M_SCL
0032D6 A230              MOV      C,bC2Bit0
0032D8 92A0              MOV      IO_DUT_C2M_SDA,C
0032DA C297              CLR      IO_DUT_C2M_SCL
0032DC 22                RET      
----- FUNCTION ?L?COM0056 (END) -------


----- FUNCTION ?L?COM0058 (BEGIN) -----
0032DD F583              MOV      DPH,A
0032DF E4                CLR      A
0032E0 93                MOVC     A,@A+DPTR
0032E1 FF                MOV      R7,A
0032E2 E515              MOV      A,vCfgPwdLevel
0032E4 C3                CLR      C
0032E5 22                RET      
----- FUNCTION ?L?COM0058 (END) -------


----- FUNCTION ?L?COM0038 (BEGIN) -----
0032E6 D297              SETB     IO_DUT_C2M_SCL
0032E8 53A6FE            ANL      P2MDOUT,#0FEH
0032EB D2A0              SETB     IO_DUT_C2M_SDA
0032ED C297              CLR      IO_DUT_C2M_SCL
0032EF 22                RET      
----- FUNCTION ?L?COM0038 (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
0032F0 D297              SETB     IO_DUT_C2M_SCL
0032F2 43A601            ORL      P2MDOUT,#01H
0032F5 A243              MOV      C,bIns0
0032F7 92A0              MOV      IO_DUT_C2M_SDA,C
0032F9 C297              CLR      IO_DUT_C2M_SCL
0032FB 22                RET      
----- FUNCTION ?L?COM0021 (END) -------


----- FUNCTION ?L?COM001E (BEGIN) -----
0032FC A2A0              MOV      C,IO_DUT_C2M_SDA
0032FE D297              SETB     IO_DUT_C2M_SCL
003300 9237              MOV      bC2Bit7,C
003302         ?L?COM001F:
003302 53A6FE            ANL      P2MDOUT,#0FEH
003305         ?L?COM0020:
003305 53A57F            ANL      P1MDOUT,#07FH
003308 A239              MOV      C,bIntState
00330A 92AF              MOV      EA,C
00330C 22                RET      
----- FUNCTION ?L?COM001E (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
00330D C20C              CLR      bMdioOperationCode0
00330F         ?L?COM0006:
00330F EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 112


003310 C4                SWAP     A
003311 540F              ANL      A,#0FH
003313 13                RRC      A
003314 920B              MOV      bMdioPortAddr4,C
003316 EF                MOV      A,R7
003317 13                RRC      A
003318 13                RRC      A
003319 13                RRC      A
00331A 541F              ANL      A,#01FH
00331C 13                RRC      A
00331D 920A              MOV      bMdioPortAddr3,C
00331F EF                MOV      A,R7
003320 13                RRC      A
003321 13                RRC      A
003322 543F              ANL      A,#03FH
003324 13                RRC      A
003325 9209              MOV      bMdioPortAddr2,C
003327 EF                MOV      A,R7
003328 C3                CLR      C
003329 13                RRC      A
00332A 13                RRC      A
00332B 9208              MOV      bMdioPortAddr1,C
00332D EF                MOV      A,R7
00332E 13                RRC      A
00332F 9207              MOV      bMdioPortAddr0,C
003331 ED                MOV      A,R5
003332 C4                SWAP     A
003333 540F              ANL      A,#0FH
003335 13                RRC      A
003336 9206              MOV      bMdioDeviceAddr4,C
003338 ED                MOV      A,R5
003339 13                RRC      A
00333A 13                RRC      A
00333B 13                RRC      A
00333C 541F              ANL      A,#01FH
00333E 13                RRC      A
00333F 9205              MOV      bMdioDeviceAddr3,C
003341 ED                MOV      A,R5
003342 13                RRC      A
003343 13                RRC      A
003344 543F              ANL      A,#03FH
003346 13                RRC      A
003347 9204              MOV      bMdioDeviceAddr2,C
003349 ED                MOV      A,R5
00334A C3                CLR      C
00334B 13                RRC      A
00334C 13                RRC      A
00334D 9203              MOV      bMdioDeviceAddr1,C
00334F ED                MOV      A,R5
003350 13                RRC      A
003351 9202              MOV      bMdioDeviceAddr0,C
003353 D201              SETB     bMdioTurnAround1
003355 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
003356 7819              MOV      R0,#019H
003358 E2                MOVX     A,@R0
003359 C4                SWAP     A
00335A 13                RRC      A
00335B 13                RRC      A
00335C 13                RRC      A
00335D 5401              ANL      A,#01H
00335F         ?L?COM000A:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 113


00335F FF                MOV      R7,A
003360 EF                MOV      A,R7
003361 5401              ANL      A,#01H
003363 FB                MOV      R3,A
003364 E4                CLR      A
003365 FA                MOV      R2,A
003366 F9                MOV      R1,A
003367 F8                MOV      R0,A
003368 AF2C              MOV      R7,_v
00336A FC                MOV      R4,A
00336B FD                MOV      R5,A
00336C FE                MOV      R6,A
00336D C3                CLR      C
00336E 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
003371 7841              MOV      R0,#LOW _timeout
003373         ?L?COM000C:
003373 74FF              MOV      A,#0FFH
003375 120667            LCALL    ?C?LLDIIDATA8
003378 EC                MOV      A,R4
003379 4D                ORL      A,R5
00337A 4E                ORL      A,R6
00337B 4F                ORL      A,R7
00337C 22                RET      
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000D (BEGIN) -----
00337D 753300            MOV      pPayload,#HIGH vFrame+0CH
003380 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
003383 853482            MOV      DPL,pPayload+01H
003386 853383            MOV      DPH,pPayload
003389 E0                MOVX     A,@DPTR
00338A FF                MOV      R7,A
00338B A3                INC      DPTR
00338C E0                MOVX     A,@DPTR
00338D FD                MOV      R5,A
00338E 853482            MOV      DPL,pPayload+01H
003391 853383            MOV      DPH,pPayload
003394 A3                INC      DPTR
003395 A3                INC      DPTR
003396 E0                MOVX     A,@DPTR
003397 FA                MOV      R2,A
003398 A3                INC      DPTR
003399 E0                MOVX     A,@DPTR
00339A FB                MOV      R3,A
00339B E534              MOV      A,pPayload+01H
00339D 2404              ADD      A,#04H
00339F F582              MOV      DPL,A
0033A1 E4                CLR      A
0033A2 3533              ADDC     A,pPayload
0033A4 F583              MOV      DPH,A
0033A6 E0                MOVX     A,@DPTR
0033A7 F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
0033A9 A3                INC      DPTR
0033AA E0                MOVX     A,@DPTR
0033AB F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
0033AD E534              MOV      A,pPayload+01H
0033AF 2406              ADD      A,#06H
0033B1 F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
0033B3 E4                CLR      A
0033B4 3533              ADDC     A,pPayload
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 114


0033B6 F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
0033B8 22                RET      
----- FUNCTION ?L?COM000D (END) -------


----- FUNCTION ?L?COM000F (BEGIN) -----
0033B9 7B4C              MOV      R3,#LOW vFrame+0CH
0033BB 7A00              MOV      R2,#HIGH vFrame+0CH
0033BD EB                MOV      A,R3
0033BE 2406              ADD      A,#06H
0033C0 F534              MOV      pBuf+01H,A
0033C2 E4                CLR      A
0033C3 3A                ADDC     A,R2
0033C4 F533              MOV      pBuf,A
0033C6 8B82              MOV      DPL,R3
0033C8 8A83              MOV      DPH,R2
0033CA A3                INC      DPTR
0033CB A3                INC      DPTR
0033CC E0                MOVX     A,@DPTR
0033CD FE                MOV      R6,A
0033CE A3                INC      DPTR
0033CF E0                MOVX     A,@DPTR
0033D0 8E35              MOV      vAddr,R6
0033D2 F536              MOV      vAddr+01H,A
0033D4 EB                MOV      A,R3
0033D5 2404              ADD      A,#04H
0033D7 F582              MOV      DPL,A
0033D9 E4                CLR      A
0033DA 3A                ADDC     A,R2
0033DB F583              MOV      DPH,A
0033DD         ?L?COM0010:
0033DD E0                MOVX     A,@DPTR
0033DE F537              MOV      vLen,A
0033E0 A3                INC      DPTR
0033E1 E0                MOVX     A,@DPTR
0033E2 F538              MOV      vLen+01H,A
0033E4 22                RET      
----- FUNCTION ?L?COM000F (END) -------


----- FUNCTION ?L?COM0011 (BEGIN) -----
0033E5 121B8A            LCALL    _drv_c2m_WriteData
0033E8 AF03              MOV      R7,AR3
0033EA         ?L?COM0012:
0033EA 121B8A            LCALL    _drv_c2m_WriteData
0033ED         ?L?COM0013:
0033ED E4                CLR      A
0033EE 754410            MOV      _timeout+03H,#010H
0033F1 754327            MOV      _timeout+02H,#027H
0033F4 F542              MOV      _timeout+01H,A
0033F6 F541              MOV      _timeout,A
0033F8 22                RET      
----- FUNCTION ?L?COM0011 (END) -------


----- FUNCTION ?L?COM0016 (BEGIN) -----
0033F9 E53A              MOV      A,vWriteLen+01H
0033FB 2534              ADD      A,pBuf+01H
0033FD F534              MOV      pBuf+01H,A
0033FF E539              MOV      A,vWriteLen
003401 3533              ADDC     A,pBuf
003403 F533              MOV      pBuf,A
003405 E53A              MOV      A,vWriteLen+01H
003407 2536              ADD      A,vAddr+01H
003409 F536              MOV      vAddr+01H,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 115


00340B E539              MOV      A,vWriteLen
00340D 3535              ADDC     A,vAddr
00340F F535              MOV      vAddr,A
003411 C3                CLR      C
003412 E538              MOV      A,vLen+01H
003414 953A              SUBB     A,vWriteLen+01H
003416 F538              MOV      vLen+01H,A
003418 E537              MOV      A,vLen
00341A 9539              SUBB     A,vWriteLen
00341C F537              MOV      vLen,A
00341E 22                RET      
----- FUNCTION ?L?COM0016 (END) -------


----- FUNCTION ?L?COM0017 (BEGIN) -----
00341F E538              MOV      A,vWriteLen+01H
003421 253C              ADD      A,vLoop+01H
003423 FD                MOV      R5,A
003424 E537              MOV      A,vWriteLen
003426 353B              ADDC     A,vLoop
003428 FC                MOV      R4,A
003429 E536              MOV      A,pPayload+01H
00342B 2405              ADD      A,#05H
00342D F582              MOV      DPL,A
00342F E4                CLR      A
003430 3535              ADDC     A,pPayload
003432 F583              MOV      DPH,A
003434 E582              MOV      A,DPL
003436 2D                ADD      A,R5
003437 F582              MOV      DPL,A
003439 E583              MOV      A,DPH
00343B 3C                ADDC     A,R4
00343C F583              MOV      DPH,A
00343E EF                MOV      A,R7
00343F F0                MOVX     @DPTR,A
003440 053C              INC      vLoop+01H
003442 E53C              MOV      A,vLoop+01H
003444 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM001A (BEGIN) -----
003445 7819              MOV      R0,#019H
003447 E2                MOVX     A,@R0
003448         ?L?COM001B:
003448 FF                MOV      R7,A
003449 E4                CLR      A
00344A FC                MOV      R4,A
00344B FD                MOV      R5,A
00344C FE                MOV      R6,A
00344D EF                MOV      A,R7
00344E 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001C (BEGIN) -----
00344F 7F04              MOV      R7,#04H
003451         ?L?COM001D:
003451 FE                MOV      R6,A
003452 1217F6            LCALL    _CFG_RAM_GET16
003455 AD07              MOV      R5,AR7
003457 AC06              MOV      R4,AR6
003459 22                RET      
----- FUNCTION ?L?COM001C (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 116



----- FUNCTION ?L?COM0023 (BEGIN) -----
00345A 121B8A            LCALL    _drv_c2m_WriteData
00345D E4                CLR      A
00345E 753610            MOV      _timeout+03H,#010H
003461 753527            MOV      _timeout+02H,#027H
003464 F534              MOV      _timeout+01H,A
003466 F533              MOV      _timeout,A
003468 22                RET      
----- FUNCTION ?L?COM0023 (END) -------


----- FUNCTION ?L?COM0024 (BEGIN) -----
003469 EF                MOV      A,R7
00346A 4B                ORL      A,R3
00346B FF                MOV      R7,A
00346C EE                MOV      A,R6
00346D 4A                ORL      A,R2
00346E ED                MOV      A,R5
00346F 49                ORL      A,R1
003470 EC                MOV      A,R4
003471 48                ORL      A,R0
003472 7819              MOV      R0,#019H
003474 EF                MOV      A,R7
003475 F2                MOVX     @R0,A
003476 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
003477 FD                MOV      R5,A
003478 FC                MOV      R4,A
003479         ?L?COM0026:
003479 AB36              MOV      R3,vTmpData+03H
00347B AA35              MOV      R2,vTmpData+02H
00347D A934              MOV      R1,vTmpData+01H
00347F A833              MOV      R0,vTmpData
003481 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
003482 43A580            ORL      P1MDOUT,#080H
003485 C297              CLR      IO_DUT_C2M_SCL
003487 7F14              MOV      R7,#014H
003489 7E00              MOV      R6,#00H
00348B 121AD9            LCALL    _DRV_CPU_DelayUs
00348E D297              SETB     IO_DUT_C2M_SCL
003490 7F02              MOV      R7,#02H
003492 7E00              MOV      R6,#00H
003494 021AD9            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM0028 (END) -------


----- FUNCTION ?L?COM0029 (BEGIN) -----
003497 E540              MOV      A,pBuf+01H
003499 2542              ADD      A,vLoop
00349B F582              MOV      DPL,A
00349D E4                CLR      A
00349E 353F              ADDC     A,pBuf
0034A0 F583              MOV      DPH,A
0034A2 E0                MOVX     A,@DPTR
0034A3 22                RET      
----- FUNCTION ?L?COM0029 (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 117



----- FUNCTION ?L?COM002A (BEGIN) -----
0034A4 F583              MOV      DPH,A
0034A6 7401              MOV      A,#01H
0034A8 93                MOVC     A,@A+DPTR
0034A9 FA                MOV      R2,A
0034AA 7402              MOV      A,#02H
0034AC 93                MOVC     A,@A+DPTR
0034AD F9                MOV      R1,A
0034AE 120704            LCALL    ?C?ICALL
0034B1 052A              INC      i
0034B3 E52A              MOV      A,i
0034B5 C3                CLR      C
0034B6 9403              SUBB     A,#03H
0034B8 22                RET      
----- FUNCTION ?L?COM002A (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
0034B9 122800            LCALL    _DRV_ADC_Sample
0034BC 8E2D              MOV      vRawADC,R6
0034BE 8F2E              MOV      vRawADC+01H,R7
0034C0 AD2E              MOV      R5,vRawADC+01H
0034C2 AC2D              MOV      R4,vRawADC
0034C4 22                RET      
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
0034C5 7E38              MOV      R6,#038H
0034C7 1227A2            LCALL    _CFG_ROM_GET16
0034CA E4                CLR      A
0034CB 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
0034CC E540              MOV      A,vLen+01H
0034CE 1540              DEC      vLen+01H
0034D0 AE3F              MOV      R6,vLen
0034D2 22                RET      
----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
0034D3 D282              SETB     IO_DUT_I2CM_SCL
0034D5 753F01            MOV      _loop,#01H
0034D8 7540F4            MOV      _loop+01H,#0F4H
0034DB 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
0034DC 7E04              MOV      R6,#04H
0034DE 7F44              MOV      R7,#044H
0034E0 7D00              MOV      R5,#00H
0034E2         ?L?COM0033:
0034E2 7B01              MOV      R3,#01H
0034E4 7A00              MOV      R2,#HIGH vFrame
0034E6 7940              MOV      R1,#LOW vFrame
0034E8 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0036 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 118


0034E9 7E38              MOV      R6,#038H
0034EB 1224FD            LCALL    _CFG_ROM_GET32
0034EE AB47              MOV      R3,vPasswd+03H
0034F0 AA46              MOV      R2,vPasswd+02H
0034F2 A945              MOV      R1,vPasswd+01H
0034F4 A844              MOV      R0,vPasswd
0034F6 C3                CLR      C
0034F7 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0036 (END) -------


----- FUNCTION ?L?COM0037 (BEGIN) -----
0034FA 853482            MOV      DPL,pPayload+01H
0034FD 853383            MOV      DPH,pPayload
003500 A3                INC      DPTR
003501 22                RET      
----- FUNCTION ?L?COM0037 (END) -------


----- FUNCTION ?L?COM003B (BEGIN) -----
003502 8F82              MOV      DPL,R7
003504 8E83              MOV      DPH,R6
003506 A3                INC      DPTR
003507 A3                INC      DPTR
003508 A3                INC      DPTR
003509 E0                MOVX     A,@DPTR
00350A F539              MOV      vReadLen,A
00350C A3                INC      DPTR
00350D E0                MOVX     A,@DPTR
00350E F53A              MOV      vReadLen+01H,A
003510 22                RET      
----- FUNCTION ?L?COM003B (END) -------


----- FUNCTION ?L?COM003C (BEGIN) -----
003511 121B8A            LCALL    _drv_c2m_WriteData
003514 E4                CLR      A
003515 753A10            MOV      _timeout+03H,#010H
003518 753927            MOV      _timeout+02H,#027H
00351B F538              MOV      _timeout+01H,A
00351D F537              MOV      _timeout,A
00351F 22                RET      
----- FUNCTION ?L?COM003C (END) -------


----- FUNCTION ?L?COM003D (BEGIN) -----
003520 E9                MOV      A,R1
003521 FD                MOV      R5,A
003522 7C00              MOV      R4,#00H
003524 AE47              MOV      R6,pBuf
003526 AF48              MOV      R7,pBuf+01H
003528 AB07              MOV      R3,AR7
00352A AA06              MOV      R2,AR6
00352C C238              CLR      ?_drv_flash_WriteBytes?BIT
00352E 22                RET      
----- FUNCTION ?L?COM003D (END) -------


----- FUNCTION ?L?COM003E (BEGIN) -----
00352F 5401              ANL      A,#01H
003531 FF                MOV      R7,A
003532 E4                CLR      A
003533 7B01              MOV      R3,#01H
003535 FA                MOV      R2,A
003536 F9                MOV      R1,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 119


003537 F8                MOV      R0,A
003538 C3                CLR      C
003539 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM003E (END) -------


----- FUNCTION ?L?COM003F (BEGIN) -----
00353C D282              SETB     IO_DUT_I2CM_SCL
00353E 753D01            MOV      _loop,#01H
003541 753EF4            MOV      _loop+01H,#0F4H
003544 22                RET      
----- FUNCTION ?L?COM003F (END) -------


----- FUNCTION ?L?COM0040 (BEGIN) -----
003545 D282              SETB     IO_DUT_I2CM_SCL
003547 754001            MOV      _loop,#01H
00354A 7541F4            MOV      _loop+01H,#0F4H
00354D 22                RET      
----- FUNCTION ?L?COM0040 (END) -------


----- FUNCTION ?L?COM0041 (BEGIN) -----
00354E 7819              MOV      R0,#019H
003550 E2                MOVX     A,@R0
003551 13                RRC      A
003552 13                RRC      A
003553 543F              ANL      A,#03FH
003555 22                RET      
----- FUNCTION ?L?COM0041 (END) -------


----- FUNCTION ?L?COM0045 (BEGIN) -----
003556 D3                SETB     C
003557 E541              MOV      A,vPID
003559 6480              XRL      A,#080H
00355B 9482              SUBB     A,#082H
00355D 22                RET      
----- FUNCTION ?L?COM0045 (END) -------


----- FUNCTION ?L?COM0046 (BEGIN) -----
00355E ED                MOV      A,R5
00355F 9F                SUBB     A,R7
003560 EE                MOV      A,R6
003561 6480              XRL      A,#080H
003563 F8                MOV      R0,A
003564 EC                MOV      A,R4
003565 6480              XRL      A,#080H
003567 98                SUBB     A,R0
003568 22                RET      
----- FUNCTION ?L?COM0046 (END) -------


----- FUNCTION ?L?COM0047 (BEGIN) -----
003569 C3                CLR      C
00356A         ?L?COM0048:
00356A E541              MOV      A,vPID
00356C 6480              XRL      A,#080H
00356E 9481              SUBB     A,#081H
003570 22                RET      
----- FUNCTION ?L?COM0047 (END) -------


----- FUNCTION ?L?COM0049 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 120


003571 120262            LCALL    _printf
003574 900048            MOV      DPTR,#vFrame+08H
003577 7403              MOV      A,#03H
003579 F0                MOVX     @DPTR,A
00357A A3                INC      DPTR
00357B 22                RET      
----- FUNCTION ?L?COM0049 (END) -------


----- FUNCTION ?L?COM004A (BEGIN) -----
00357C D200              SETB     bMdioTurnAround0
00357E 74FF              MOV      A,#0FFH
003580 F524              MOV      vMdioData,A
003582 F525              MOV      vMdioData+01H,A
003584 22                RET      
----- FUNCTION ?L?COM004A (END) -------


----- FUNCTION ?L?COM004C (BEGIN) -----
003585 8E3B              MOV      vAddr,R6
003587 8F3C              MOV      vAddr+01H,R7
003589 8C3D              MOV      pBuf,R4
00358B 8D3E              MOV      pBuf+01H,R5
00358D 22                RET      
----- FUNCTION ?L?COM004C (END) -------


----- FUNCTION ?L?COM0057 (BEGIN) -----
00358E 754E3A            MOV      vWriteOffset,#03AH
003591 754F00            MOV      vWriteOffset+01H,#00H
003594 D238              SETB     ?_drv_flash_WriteBytes?BIT
003596 22                RET      
----- FUNCTION ?L?COM0057 (END) -------


----- FUNCTION ?L?COM005A (BEGIN) -----
003597 8E35              MOV      pPayload,R6
003599 8F36              MOV      pPayload+01H,R7
00359B 8F82              MOV      DPL,R7
00359D 8E83              MOV      DPH,R6
00359F 22                RET      
----- FUNCTION ?L?COM005A (END) -------


----- FUNCTION ?L?COM005B (BEGIN) -----
0035A0 AF16              MOV      R7,vFPDAT
0035A2 121ED4            LCALL    _c2m_WriteAR
0035A5 7F02              MOV      R7,#02H
0035A7 22                RET      
----- FUNCTION ?L?COM005B (END) -------


----- FUNCTION ?L?COM005C (BEGIN) -----
0035A8 D3                SETB     C
0035A9 E541              MOV      A,vPID
0035AB 6480              XRL      A,#080H
0035AD 9486              SUBB     A,#086H
0035AF 22                RET      
----- FUNCTION ?L?COM005C (END) -------


----- FUNCTION ?L?COM005D (BEGIN) -----
0035B0 C3                CLR      C
0035B1 E541              MOV      A,vPID
0035B3 6480              XRL      A,#080H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  16:27:38  PAGE 121


0035B5 9483              SUBB     A,#083H
0035B7 22                RET      
----- FUNCTION ?L?COM005D (END) -------


----- FUNCTION ?L?COM005E (BEGIN) -----
0035B8 C3                CLR      C
0035B9 E53C              MOV      A,vLoop+01H
0035BB 953A              SUBB     A,vReadLen+01H
0035BD E53B              MOV      A,vLoop
0035BF 22                RET      
----- FUNCTION ?L?COM005E (END) -------


----- FUNCTION ?L?COM005F (BEGIN) -----
0035C0 853682            MOV      DPL,pPayload+01H
0035C3 853583            MOV      DPH,pPayload
0035C6 E0                MOVX     A,@DPTR
0035C7 22                RET      
----- FUNCTION ?L?COM005F (END) -------


----- FUNCTION ?L?COM0060 (BEGIN) -----
0035C8 7D40              MOV      R5,#040H
0035CA 1210D5            LCALL    _Block_Read
0035CD 8F2E              MOV      vBlockLen,R7
0035CF 22                RET      
----- FUNCTION ?L?COM0060 (END) -------


