LX51 LINKER/LOCATER V4.66.41.0                                                          06/14/2016  12:55:59  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 0224B7            LJMP     024B7H
----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
   36: void APL_Entry(void)
   37: {
   38:     /* do nothing */
   39: }
000042 22                RET      
----- FUNCTION APL_Entry (END) -------


000083 0218D4            LJMP     018D4H
----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
   56: void APL_Init(void)
   57: {
   58:     /* perform entry once */
   59:     APL_Entry();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 2


0001DD 0142              AJMP     APL_Entry
----- FUNCTION APL_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
001564 74FF              MOV      A,#0FFH
001566 F52A              MOV      vCRC,A
001568 F52B              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
00156A E4                CLR      A
00156B FD                MOV      R5,A
00156C FC                MOV      R4,A
00156D         ?C0001?THREAD_PKT:
00156D D3                SETB     C
00156E 900005            MOV      DPTR,#vFrame+05H
001571 E0                MOVX     A,@DPTR
001572 9D                SUBB     A,R5
001573 900004            MOV      DPTR,#vFrame+04H
001576 E0                MOVX     A,@DPTR
001577 9C                SUBB     A,R4
001578 4031              JC       ?C0002?THREAD_PKT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 3


   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
00157A E52A              MOV      A,vCRC
00157C FF                MOV      R7,A
00157D 7408              MOV      A,#LOW vFrame+08H
00157F 2D                ADD      A,R5
001580 F582              MOV      DPL,A
001582 7400              MOV      A,#HIGH vFrame+08H
001584 3C                ADDC     A,R4
001585 F583              MOV      DPH,A
001587 E0                MOVX     A,@DPTR
001588 6F                XRL      A,R7
001589 75F002            MOV      B,#02H
00158C A4                MUL      AB
00158D 240F              ADD      A,#LOW aCRC16
00158F F582              MOV      DPL,A
001591 E5F0              MOV      A,B
001593 3406              ADDC     A,#HIGH aCRC16
001595 F583              MOV      DPH,A
001597 E52B              MOV      A,vCRC+01H
001599 FE                MOV      R6,A
00159A E4                CLR      A
00159B 93                MOVC     A,@A+DPTR
00159C 6E                XRL      A,R6
00159D F52A              MOV      vCRC,A
00159F 7401              MOV      A,#01H
0015A1 93                MOVC     A,@A+DPTR
0015A2 F52B              MOV      vCRC+01H,A
   82:     }
0015A4 0D                INC      R5
0015A5 BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
0015A8 0C                INC      R4
0015A9         ?C0066?THREAD_PKT:
0015A9 80C2              SJMP     ?C0001?THREAD_PKT
0015AB         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
0015AB AE2A              MOV      R6,vCRC
0015AD AF2B              MOV      R7,vCRC+01H
   85: }
0015AF 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
0015B0 301709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
0015B3 122713            LCALL    ?L?COM001A
0015B6 1209DA            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
0015B9 C217              CLR      bFlushFIFO
  242:     }
0015BB 22                RET      
0015BC         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
0015BC 90000B            MOV      DPTR,#vFrame+0BH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 4


0015BF E0                MOVX     A,@DPTR
0015C0 2404              ADD      A,#04H
0015C2 FE                MOV      R6,A
0015C3 90000A            MOV      DPTR,#vFrame+0AH
0015C6 E0                MOVX     A,@DPTR
0015C7 3400              ADDC     A,#00H
0015C9 900004            MOV      DPTR,#vFrame+04H
0015CC F0                MOVX     @DPTR,A
0015CD A3                INC      DPTR
0015CE CE                XCH      A,R6
0015CF F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
0015D0 B164              ACALL    _thread_pkt_CalcCRC
0015D2 900006            MOV      DPTR,#vFrame+06H
0015D5 EE                MOV      A,R6
0015D6 F0                MOVX     @DPTR,A
0015D7 A3                INC      DPTR
0015D8 EF                MOV      A,R7
0015D9 F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
0015DA C208              CLR      ?_thread_pkt_Dump?BIT
0015DC 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0015DF 122719            LCALL    ?L?COM001B
0015E2 900005            MOV      DPTR,#vFrame+05H
0015E5 E0                MOVX     A,@DPTR
0015E6 2408              ADD      A,#08H
0015E8 FD                MOV      R5,A
0015E9 900004            MOV      DPTR,#vFrame+04H
0015EC E0                MOVX     A,@DPTR
0015ED 3400              ADDC     A,#00H
0015EF FC                MOV      R4,A
0015F0 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
0015F3 122713            LCALL    ?L?COM001A
0015F6 1209DA            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
0015F9 122719            LCALL    ?L?COM001B
0015FC 122788            LCALL    ?L?COM0036
  141:     if (bFlushFIFO)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 5


0015FF 30170B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
001602 7BFF              MOV      R3,#0FFH
001604 7A05              MOV      R2,#HIGH 0100055CH
001606 795C              MOV      R1,#LOW 0100055CH
001608 120262            LCALL    _printf
  145:         return FALSE;
00160B C3                CLR      C
00160C 22                RET      
  146:     }
00160D         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
00160D C3                CLR      C
00160E E527              MOV      A,vBlockLen
001610 9408              SUBB     A,#08H
001612 E4                CLR      A
001613 9400              SUBB     A,#00H
001615 400E              JC       ?C0013?THREAD_PKT
001617 900000            MOV      DPTR,#vFrame
00161A E0                MOVX     A,@DPTR
00161B 6443              XRL      A,#043H
00161D 7004              JNZ      ?C0067?THREAD_PKT
00161F A3                INC      DPTR
001620 E0                MOVX     A,@DPTR
001621 644C              XRL      A,#04CH
001623         ?C0067?THREAD_PKT:
001623 601A              JZ       ?C0012?THREAD_PKT
001625         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
001625 7BFF              MOV      R3,#0FFH
001627 7A05              MOV      R2,#HIGH 01000569H
001629 7969              MOV      R1,#LOW 01000569H
00162B 85272D            MOV      ?_printf?BYTE+03H,vBlockLen
00162E 900000            MOV      DPTR,#vFrame
001631 E0                MOVX     A,@DPTR
001632 F52E              MOV      ?_printf?BYTE+04H,A
001634 A3                INC      DPTR
001635 E0                MOVX     A,@DPTR
001636 F52F              MOV      ?_printf?BYTE+05H,A
001638 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
00163B D217              SETB     bFlushFIFO
  152:         return FALSE;
00163D C3                CLR      C
00163E 22                RET      
  153:     }
00163F         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
00163F 900002            MOV      DPTR,#vFrame+02H
001642 E0                MOVX     A,@DPTR
001643 7004              JNZ      ?C0068?THREAD_PKT
001645 A3                INC      DPTR
001646 E0                MOVX     A,@DPTR
001647 6401              XRL      A,#01H
001649         ?C0068?THREAD_PKT:
001649 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
00164B 7BFF              MOV      R3,#0FFH
00164D 7A05              MOV      R2,#HIGH 01000599H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 6


00164F 7999              MOV      R1,#LOW 01000599H
001651 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
001654 900002            MOV      DPTR,#vFrame+02H
001657 E4                CLR      A
001658 F0                MOVX     @DPTR,A
001659 A3                INC      DPTR
00165A 04                INC      A
00165B F0                MOVX     @DPTR,A
  159:         return FALSE;
00165C C3                CLR      C
00165D 22                RET      
  160:     }
00165E         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
00165E E527              MOV      A,vBlockLen
001660 24F8              ADD      A,#0F8H
001662 F526              MOV      vRxTotalLen+01H,A
001664 E4                CLR      A
001665 34FF              ADDC     A,#0FFH
001667 F525              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
001669 E4                CLR      A
00166A F528              MOV      vElaspedTime,A
00166C F529              MOV      vElaspedTime+01H,A
00166E         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
00166E D3                SETB     C
00166F 900005            MOV      DPTR,#vFrame+05H
001672 E0                MOVX     A,@DPTR
001673 9526              SUBB     A,vRxTotalLen+01H
001675 900004            MOV      DPTR,#vFrame+04H
001678 E0                MOVX     A,@DPTR
001679 9525              SUBB     A,vRxTotalLen
00167B 4047              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
00167D 7408              MOV      A,#LOW vFrame+08H
00167F 2526              ADD      A,vRxTotalLen+01H
001681 F9                MOV      R1,A
001682 7400              MOV      A,#HIGH vFrame+08H
001684 3525              ADDC     A,vRxTotalLen
001686 FA                MOV      R2,A
001687 7B01              MOV      R3,#01H
001689 122788            LCALL    ?L?COM0036
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
00168C E527              MOV      A,vBlockLen
00168E 7027              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
001690 7F01              MOV      R7,#01H
001692 FE                MOV      R6,A
001693 F10C              ACALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
001695 0529              INC      vElaspedTime+01H
001697 E529              MOV      A,vElaspedTime+01H
001699 7002              JNZ      ?C0069?THREAD_PKT
00169B 0528              INC      vElaspedTime
00169D         ?C0069?THREAD_PKT:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 7


00169D FF                MOV      R7,A
00169E AE28              MOV      R6,vElaspedTime
0016A0 E4                CLR      A
0016A1 FC                MOV      R4,A
0016A2 FD                MOV      R5,A
0016A3 7B50              MOV      R3,#050H
0016A5 7AC3              MOV      R2,#0C3H
0016A7 F9                MOV      R1,A
0016A8 F8                MOV      R0,A
0016A9 D3                SETB     C
0016AA 12086B            LCALL    ?C?SLCMP
0016AD 50BF              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
0016AF 7BFF              MOV      R3,#0FFH
0016B1 7A05              MOV      R2,#HIGH 010005B1H
0016B3 79B1              MOV      R1,#LOW 010005B1H
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
0016B5 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
0016B7         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
0016B7 E527              MOV      A,vBlockLen
0016B9 2526              ADD      A,vRxTotalLen+01H
0016BB F526              MOV      vRxTotalLen+01H,A
0016BD E4                CLR      A
0016BE 3525              ADDC     A,vRxTotalLen
0016C0 F525              MOV      vRxTotalLen,A
  187:     }
0016C2 80AA              SJMP     ?C0015?THREAD_PKT
0016C4         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
0016C4 900004            MOV      DPTR,#vFrame+04H
0016C7 E0                MOVX     A,@DPTR
0016C8 6525              XRL      A,vRxTotalLen
0016CA 7004              JNZ      ?C0070?THREAD_PKT
0016CC A3                INC      DPTR
0016CD E0                MOVX     A,@DPTR
0016CE 6526              XRL      A,vRxTotalLen+01H
0016D0         ?C0070?THREAD_PKT:
0016D0 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
0016D2 7BFF              MOV      R3,#0FFH
0016D4 7A05              MOV      R2,#HIGH 010005C5H
0016D6 79C5              MOV      R1,#LOW 010005C5H
0016D8         
0016D8 12275F            LCALL    ?L?COM0024
0016DB 7401              MOV      A,#01H
0016DD F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
0016DE C3                CLR      C
0016DF 22                RET      
  194:     }
0016E0         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 8


  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
0016E0 D208              SETB     ?_thread_pkt_Dump?BIT
0016E2 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
0016E5 B164              ACALL    _thread_pkt_CalcCRC
0016E7 900006            MOV      DPTR,#vFrame+06H
0016EA E0                MOVX     A,@DPTR
0016EB 6E                XRL      A,R6
0016EC 7003              JNZ      ?C0071?THREAD_PKT
0016EE A3                INC      DPTR
0016EF E0                MOVX     A,@DPTR
0016F0 6F                XRL      A,R7
0016F1         ?C0071?THREAD_PKT:
0016F1 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
0016F3 7BFF              MOV      R3,#0FFH
0016F5 7A05              MOV      R2,#HIGH 010005DDH
0016F7 79DD              MOV      R1,#LOW 010005DDH
0016F9 12275F            LCALL    ?L?COM0024
0016FC 14                DEC      A
0016FD F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
0016FE C3                CLR      C
0016FF 22                RET      
  206:     }
001700         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
001700 D3                SETB     C
  209: }
001701 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
001702 A2A0              MOV      C,IO_DUT_C2M_SDA
001704 D297              SETB     IO_DUT_C2M_SCL
001706 9200              MOV      bC2Bit0,C
001708         ?L?COM0002:
001708 7F01              MOV      R7,#01H
00170A 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
00170C 8018              SJMP     ?C0013?DRV_CPU
00170E         ?C0001?DRV_CPU:
   39:     while (--vUsec)
00170E EF                MOV      A,R7
00170F 1F                DEC      R7
001710 7001              JNZ      ?C0011?DRV_CPU
001712 1E                DEC      R6
001713         ?C0011?DRV_CPU:
001713 14                DEC      A
001714 4E                ORL      A,R6
001715 6014              JZ       ?C0003?DRV_CPU
   40:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 9


   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001717 00                NOP      
001718 00                NOP      
001719 00                NOP      
00171A 00                NOP      
00171B 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
00171C 00                NOP      
00171D 00                NOP      
00171E 00                NOP      
00171F 00                NOP      
001720 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
001721 00                NOP      
001722 00                NOP      
001723 00                NOP      
001724 00                NOP      
001725 00                NOP      
   45: 		NOP(); NOP(); NOP();
001726         
001726 00                NOP      
001727 00                NOP      
001728 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
   49:     }
001729 80E3              SJMP     ?C0001?DRV_CPU
   50: }
00172B         ?C0003?DRV_CPU:
00172B 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
  640: (
;---- Variable 'vCount' assigned to Register 'R3' ----
00172C 1226E7            LCALL    ?L?COM0025
00172F 7005              JNZ      ?C0962?DRV_C2M
001731 7E01              MOV      R6,#01H
001733 FF                MOV      R7,A
001734 8004              SJMP     ?C0963?DRV_C2M
001736         ?C0962?DRV_C2M:
001736 EB                MOV      A,R3
001737 FF                MOV      R7,A
001738 7E00              MOV      R6,#00H
00173A         ?C0963?DRV_C2M:
00173A 8E38              MOV      vLen,R6
00173C 8F39              MOV      vLen+01H,R7
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
  647:     BOOL    bDone = FALSE;
00173E C208              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
001740 30977B            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001743 30A078            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 10


  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
001746         ?C0964?DRV_C2M:
  654: 
  655:     c2m_WriteAR(vFPDAT);
001746 AF14              MOV      R7,vFPDAT
001748 121DF9            LCALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
00174B 7F07              MOV      R7,#07H
00174D 1225AC            LCALL    ?L?COM0006
001750         ?C0973?DRV_C2M:
001750 122000            LCALL    c2m_ReadAR
001753 EF                MOV      A,R7
001754 20E009            JB       ACC.0,?C0971?DRV_C2M
001757 122577            LCALL    ?L?COM0003
00175A 6004              JZ       ?C0971?DRV_C2M
00175C F108              ACALL    ?L?COM0002
00175E 80F0              SJMP     ?C0973?DRV_C2M
001760         ?C0971?DRV_C2M:
001760 122591            LCALL    ?L?COM0015
001763 7059              JNZ      _exit?DRV_C2M
001765         ?C0975?DRV_C2M:
001765         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001765 E534              MOV      A,vAddr
001767 FF                MOV      R7,A
001768 F1C1              ACALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
00176A AF35              MOV      R7,vAddr+01H
00176C 1225A7            LCALL    ?L?COM0005
00176F         ?C0982?DRV_C2M:
00176F 122000            LCALL    c2m_ReadAR
001772 EF                MOV      A,R7
001773 20E009            JB       ACC.0,?C0980?DRV_C2M
001776 122577            LCALL    ?L?COM0003
001779 6004              JZ       ?C0980?DRV_C2M
00177B F108              ACALL    ?L?COM0002
00177D 80F0              SJMP     ?C0982?DRV_C2M
00177F         ?C0980?DRV_C2M:
00177F 122591            LCALL    ?L?COM0015
001782 703A              JNZ      _exit?DRV_C2M
001784         ?C0984?DRV_C2M:
001784         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
001784 1225D2            LCALL    ?L?COM0017
001787 7002              JNZ      ?C1018?DRV_C2M
001789 1538              DEC      vLen
00178B         ?C1018?DRV_C2M:
00178B 4E                ORL      A,R6
00178C 6015              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
00178E 0537              INC      pBuf+01H
001790 E537              MOV      A,pBuf+01H
001792 AE36              MOV      R6,pBuf
001794 7002              JNZ      ?C1019?DRV_C2M
001796 0536              INC      pBuf
001798         ?C1019?DRV_C2M:
001798 14                DEC      A
001799 F582              MOV      DPL,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 11


00179B 8E83              MOV      DPH,R6
00179D E0                MOVX     A,@DPTR
00179E FF                MOV      R7,A
00179F F1C1              ACALL    _drv_c2m_WriteData
  666:     }
0017A1 80E1              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
0017A3         ?C0992?DRV_C2M:
0017A3 1225AF            LCALL    ?L?COM0007
0017A6         ?C0993?DRV_C2M:
0017A6 122000            LCALL    c2m_ReadAR
0017A9 EF                MOV      A,R7
0017AA 20E009            JB       ACC.0,?C0991?DRV_C2M
0017AD 122577            LCALL    ?L?COM0003
0017B0 6004              JZ       ?C0991?DRV_C2M
0017B2 F108              ACALL    ?L?COM0002
0017B4 80F0              SJMP     ?C0993?DRV_C2M
0017B6         ?C0991?DRV_C2M:
0017B6 121E86            LCALL    c2m_ReadDR
0017B9 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0017BC         ?C0995?DRV_C2M:
0017BC         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
0017BC D208              SETB     bDone
  669: 
  670: _exit:
0017BE         _exit:
  671:     return bDone;
0017BE A208              MOV      C,bDone
  672: }
0017C0 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
0017C1 1224EE            LCALL    _c2m_WriteDR
  361: }
0017C4 753E27            MOV      _timeout,#027H
0017C7 753F10            MOV      _timeout+01H,#010H
0017CA         ?C0788?DRV_C2M:
0017CA 122000            LCALL    c2m_ReadAR
0017CD EF                MOV      A,R7
0017CE 30E111            JNB      ACC.1,?C0790?DRV_C2M
0017D1 E53F              MOV      A,_timeout+01H
0017D3 153F              DEC      _timeout+01H
0017D5 AE3E              MOV      R6,_timeout
0017D7 7002              JNZ      ?C1015?DRV_C2M
0017D9 153E              DEC      _timeout
0017DB         ?C1015?DRV_C2M:
0017DB 4E                ORL      A,R6
0017DC 6004              JZ       ?C0790?DRV_C2M
0017DE F108              ACALL    ?L?COM0002
0017E0 80E8              SJMP     ?C0788?DRV_C2M
  362: 
0017E2         ?C0790?DRV_C2M:
0017E2 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 12


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
0017E3 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
0017E6 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
0017E9         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
0017E9 C3                CLR      C
0017EA 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
0017EB         ?C0831?DRV_C2M:
0017EB 1226F1            LCALL    ?L?COM0014
  425:     return TRUE;
0017EE D3                SETB     C
  426: }
0017EF 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017F0 E4                CLR      A
0017F1 F50A              MOV      vTCB_Pkt,A
0017F3 F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017F5 F508              MOV      vSCB_RxPkt,A
0017F7 F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017F9 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
0017FA 121DF9            LCALL    _c2m_WriteAR
  355: }
0017FD 021E86            LJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900008            MOV      DPTR,#vFrame+08H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 13


001803 E0                MOVX     A,@DPTR
001804 F525              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F526              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F527              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E527              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24EB              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3405              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52622            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B5251D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E527              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24ED              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3405              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 1208EB            LCALL    ?C?ICALL
  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 0527              INC      vLoop
00184A E527              MOV      A,vLoop
00184C C3                CLR      C
00184D 9409              SUBB     A,#09H
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900008            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 14


001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752401            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 1208BE            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 15


00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 1215F3            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 1215B0            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F524              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0018B9 EF                MOV      A,R7
0018BA 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0018BD 0509              INC      vSCB_RxPkt+01H
0018BF E509              MOV      A,vSCB_RxPkt+01H
0018C1 7002              JNZ      ?C0073?THREAD_PKT
0018C3 0508              INC      vSCB_RxPkt
0018C5         ?C0073?THREAD_PKT:
  284: 	}
0018C5         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0018C5 EF                MOV      A,R7
0018C6 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0018C9 0509              INC      vSCB_RxPkt+01H
0018CB E509              MOV      A,vSCB_RxPkt+01H
0018CD 7002              JNZ      ?C0074?THREAD_PKT
0018CF 0508              INC      vSCB_RxPkt
0018D1         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0018D1 D217              SETB     bFlushFIFO
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 16


  291: 	}
  292: }
0018D3         ?C0047?THREAD_PKT:
0018D3 22                RET      
----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
0018D4 C0E0              PUSH     ACC
0018D6 C083              PUSH     DPH
0018D8 C082              PUSH     DPL
0018DA C0D0              PUSH     PSW
0018DC 75D000            MOV      PSW,#00H
0018DF C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
0018E1 12150F            LCALL    Get_Interrupt_Source
0018E4 11B9              ACALL    _thread_Pkt_Notify
   69:   #endif
   70: }
0018E6 D007              POP      AR7
0018E8 D0D0              POP      PSW
0018EA D082              POP      DPL
0018EC D083              POP      DPH
0018EE D0E0              POP      ACC
0018F0 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  127: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  128: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018F1 AD07              MOV      R5,AR7
  129:     UINT8   vLoop;
  130:     BOOL    vAck;
  131: 
  132:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018F3 7B08              MOV      R3,#08H
0018F5         ?C0001?PKT_I2CM:
  133:     {
  134:         /* transmitting data, MSB first, LSB last */
  135:         CROL(vData, 1);
0018F5 7801              MOV      R0,#01H
0018F7 AF05              MOV      R7,AR5
0018F9 EF                MOV      A,R7
0018FA 08                INC      R0
0018FB 8001              SJMP     ?C0650?PKT_I2CM
0018FD         ?C0649?PKT_I2CM:
0018FD 23                RL       A
0018FE         ?C0650?PKT_I2CM:
0018FE D8FD              DJNZ     R0,?C0649?PKT_I2CM
001900 FD                MOV      R5,A
  136:         PKT_I2CM_SET_SDA(vData & 0x1);
001901 13                RRC      A
001902 9292              MOV      IO_DUT_I2CM_SDA,C
  137: 
  138:         PKT_I2CM_SET_SCL(HIGH);
001904 00                NOP      
001905 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 17


001906 00                NOP      
001907 00                NOP      
001908 00                NOP      
001909 00                NOP      
00190A 00                NOP      
00190B 00                NOP      
00190C 00                NOP      
00190D 00                NOP      
00190E 00                NOP      
00190F 00                NOP      
001910 00                NOP      
001911 00                NOP      
001912 12270A            LCALL    ?L?COM0019
001915         ?C0032?PKT_I2CM:
001915 20820F            JB       IO_DUT_I2CM_SCL,?C0042?PKT_I2CM
001918 1225D2            LCALL    ?L?COM0017
00191B 7002              JNZ      ?C0651?PKT_I2CM
00191D 1538              DEC      _loop
00191F         ?C0651?PKT_I2CM:
00191F 4E                ORL      A,R6
001920 6005              JZ       ?C0042?PKT_I2CM
001922 121708            LCALL    ?L?COM0002
001925 80EE              SJMP     ?C0032?PKT_I2CM
  139:         PKT_I2CM_SET_SCL(LOW);
001927         ?C0042?PKT_I2CM:
001927 00                NOP      
001928 00                NOP      
001929 00                NOP      
00192A 00                NOP      
00192B 00                NOP      
00192C 00                NOP      
00192D 00                NOP      
00192E 00                NOP      
00192F 00                NOP      
001930 00                NOP      
001931 00                NOP      
001932 00                NOP      
001933 00                NOP      
001934 00                NOP      
001935 C282              CLR      IO_DUT_I2CM_SCL
001937 8000              SJMP     ?C0003?PKT_I2CM
  140:     }
001939         ?C0003?PKT_I2CM:
001939 1B                DEC      R3
00193A EB                MOV      A,R3
00193B 70B8              JNZ      ?C0001?PKT_I2CM
00193D         ?C0060?PKT_I2CM:
  141: 
  142:     /* release SDA */
  143:     PKT_I2CM_SET_SDA(HIGH);
00193D D292              SETB     IO_DUT_I2CM_SDA
  144: 
  145:     /* check ACK */
  146:     PKT_I2CM_SET_SCL(HIGH);
00193F 00                NOP      
001940 00                NOP      
001941 00                NOP      
001942 00                NOP      
001943 00                NOP      
001944 00                NOP      
001945 00                NOP      
001946 00                NOP      
001947 00                NOP      
001948 00                NOP      
001949 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 18


00194A 00                NOP      
00194B 00                NOP      
00194C 00                NOP      
00194D 12270A            LCALL    ?L?COM0019
001950         ?C0083?PKT_I2CM:
001950 20820F            JB       IO_DUT_I2CM_SCL,?C0062?PKT_I2CM
001953 1225D2            LCALL    ?L?COM0017
001956 7002              JNZ      ?C0653?PKT_I2CM
001958 1538              DEC      _loop
00195A         ?C0653?PKT_I2CM:
00195A 4E                ORL      A,R6
00195B 6005              JZ       ?C0062?PKT_I2CM
00195D 121708            LCALL    ?L?COM0002
001960 80EE              SJMP     ?C0083?PKT_I2CM
001962         ?C0062?PKT_I2CM:
  147:     vAck = PKT_I2CM_GET_SDA();
001962 A292              MOV      C,IO_DUT_I2CM_SDA
001964 920A              MOV      vAck,C
  148:     PKT_I2CM_SET_SCL(LOW);
001966 00                NOP      
001967 00                NOP      
001968 00                NOP      
001969 00                NOP      
00196A 00                NOP      
00196B 00                NOP      
00196C 00                NOP      
00196D 00                NOP      
00196E 00                NOP      
00196F 00                NOP      
001970 00                NOP      
001971 00                NOP      
001972 00                NOP      
001973 00                NOP      
001974 C282              CLR      IO_DUT_I2CM_SCL
001976 8000              SJMP     ?C0086?PKT_I2CM
001978         ?C0086?PKT_I2CM:
  149: 
  150:     return !vAck;
001978 A20A              MOV      C,vAck
00197A B3                CPL      C
  151: }
00197B 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  222: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  223: {
00197C 8E2E              MOV      pPayload,R6
00197E 8F2F              MOV      pPayload+01H,R7
  224:     UINT16  vWriteLen = pPayload->vWriteLen;
  225:     UINT16  vReadLen  = pPayload->vReadLen;
001980 8F82              MOV      DPL,R7
001982 8E83              MOV      DPH,R6
001984 A3                INC      DPTR
001985 122685            LCALL    ?L?COM0009
  226:     BOOL    bIntState;
001988 8F82              MOV      DPL,R7
00198A 8E83              MOV      DPH,R6
00198C A3                INC      DPTR
00198D A3                INC      DPTR
00198E A3                INC      DPTR
00198F E0                MOVX     A,@DPTR
001990 F532              MOV      vReadLen,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 19


001992 A3                INC      DPTR
001993 E0                MOVX     A,@DPTR
001994 F533              MOV      vReadLen+01H,A
  227:     BOOL    bDone = FALSE;
001996 C209              CLR      bDone
  228:     UINT16  vLoop;
  229: 
  230:     /* make sure the I2C is ready */
  231:     if (!_pkt_i2cm_CheckReady())
001998 719B              ACALL    _pkt_i2cm_CheckReady
00199A 4003              JC       ?C0393?PKT_I2CM
  232:     {
  233:         return bDone;
00199C A209              MOV      C,bDone
00199E 22                RET      
  234:     }
00199F         ?C0393?PKT_I2CM:
  235: 
  236:     /* lock globally interrupt */
  237:     bIntState = DRV_INT_LockGlobalInterrupt();
00199F 30AF05            JNB      EA,?C0395?PKT_I2CM
0019A2 C2AF              CLR      EA
0019A4 D3                SETB     C
0019A5 8001              SJMP     ?C0396?PKT_I2CM
0019A7         ?C0395?PKT_I2CM:
0019A7 C3                CLR      C
0019A8         ?C0396?PKT_I2CM:
0019A8 9208              MOV      bIntState,C
  238: 
  239:     /* send write stream */
  240:     if ((vWriteLen != 0)
0019AA E531              MOV      A,vWriteLen+01H
0019AC 4530              ORL      A,vWriteLen
0019AE 7010              JNZ      ?C0404?PKT_I2CM
0019B0 E531              MOV      A,vWriteLen+01H
0019B2 4530              ORL      A,vWriteLen
0019B4 6002              JZ       $ + 4H
0019B6 4142              AJMP     ?C0397?PKT_I2CM
0019B8 E533              MOV      A,vReadLen+01H
0019BA 4532              ORL      A,vReadLen
0019BC 6002              JZ       $ + 4H
0019BE 4142              AJMP     ?C0397?PKT_I2CM
  241:         || ((vWriteLen == 0) && (vReadLen == 0)))
  242:     {
  243:         /* send I2C start */
  244:         _pkt_i2cm_Start();
0019C0         ?C0404?PKT_I2CM:
0019C0 D292              SETB     IO_DUT_I2CM_SDA
0019C2 00                NOP      
0019C3 00                NOP      
0019C4 00                NOP      
0019C5 00                NOP      
0019C6 00                NOP      
0019C7 00                NOP      
0019C8 00                NOP      
0019C9 00                NOP      
0019CA 00                NOP      
0019CB 00                NOP      
0019CC 00                NOP      
0019CD 00                NOP      
0019CE 00                NOP      
0019CF 00                NOP      
0019D0 12273F            LCALL    ?L?COM0021
0019D3         ?C0427?PKT_I2CM:
0019D3 20820F            JB       IO_DUT_I2CM_SCL,?C0434?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 20


0019D6 12276A            LCALL    ?L?COM0028
0019D9 7002              JNZ      ?C0664?PKT_I2CM
0019DB 1536              DEC      _loop
0019DD         ?C0664?PKT_I2CM:
0019DD 4E                ORL      A,R6
0019DE 6005              JZ       ?C0434?PKT_I2CM
0019E0 121708            LCALL    ?L?COM0002
0019E3 80EE              SJMP     ?C0427?PKT_I2CM
0019E5         ?C0434?PKT_I2CM:
0019E5 00                NOP      
0019E6 00                NOP      
0019E7 00                NOP      
0019E8 00                NOP      
0019E9 00                NOP      
0019EA 00                NOP      
0019EB 00                NOP      
0019EC 00                NOP      
0019ED 00                NOP      
0019EE 00                NOP      
0019EF 00                NOP      
0019F0 00                NOP      
0019F1 00                NOP      
0019F2 00                NOP      
0019F3 C292              CLR      IO_DUT_I2CM_SDA
0019F5 00                NOP      
0019F6 00                NOP      
0019F7 00                NOP      
0019F8 00                NOP      
0019F9 00                NOP      
0019FA 00                NOP      
0019FB 00                NOP      
0019FC 00                NOP      
0019FD 00                NOP      
0019FE 00                NOP      
0019FF 00                NOP      
001A00 00                NOP      
001A01 00                NOP      
001A02 00                NOP      
001A03 C282              CLR      IO_DUT_I2CM_SCL
001A05 8000              SJMP     ?C0400?PKT_I2CM
001A07         ?C0400?PKT_I2CM:
  245: 
  246:         /* send I2C slave address + write */
  247:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
001A07 122780            LCALL    ?L?COM0035
001A0A 54FE              ANL      A,#0FEH
001A0C FF                MOV      R7,A
001A0D 11F1              ACALL    __pkt_i2cm_TxByte
001A0F 4002              JC       $ + 4H
001A11 41E8              AJMP     ?C0561?PKT_I2CM
  248:         {
  249:             goto _exit;
  250:         }
001A13         ?C0471?PKT_I2CM:
  251: 
  252:         /* send write buffer */
  253:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
001A13 E4                CLR      A
001A14 F534              MOV      vLoop,A
001A16 F535              MOV      vLoop+01H,A
001A18         ?C0473?PKT_I2CM:
001A18 C3                CLR      C
001A19 E535              MOV      A,vLoop+01H
001A1B 9531              SUBB     A,vWriteLen+01H
001A1D E534              MOV      A,vLoop
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 21


001A1F 9530              SUBB     A,vWriteLen
001A21 501F              JNC      ?C0397?PKT_I2CM
  254:         {
  255:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
001A23 122748            LCALL    ?L?COM0022
001A26 2535              ADD      A,vLoop+01H
001A28 F582              MOV      DPL,A
001A2A E583              MOV      A,DPH
001A2C 3534              ADDC     A,vLoop
001A2E F583              MOV      DPH,A
001A30 E0                MOVX     A,@DPTR
001A31 FF                MOV      R7,A
001A32 11F1              ACALL    __pkt_i2cm_TxByte
001A34 4002              JC       $ + 4H
001A36 41E8              AJMP     ?C0561?PKT_I2CM
  256:             {
  257:                 goto _exit;
  258:             }
001A38         ?C0476?PKT_I2CM:
  259:         }
001A38         ?C0475?PKT_I2CM:
001A38 0535              INC      vLoop+01H
001A3A E535              MOV      A,vLoop+01H
001A3C 7002              JNZ      ?C0666?PKT_I2CM
001A3E 0534              INC      vLoop
001A40         ?C0666?PKT_I2CM:
001A40 80D6              SJMP     ?C0473?PKT_I2CM
  260:     }
001A42         ?C0397?PKT_I2CM:
  261: 
  262:     /* send read stream */
  263:     if (vReadLen != 0)
001A42 E533              MOV      A,vReadLen+01H
001A44 4532              ORL      A,vReadLen
001A46 7002              JNZ      $ + 4H
001A48 41E6              AJMP     ?C0477?PKT_I2CM
  264:     {
  265:         /* send I2C start/restart */
  266:         _pkt_i2cm_Start();
001A4A D292              SETB     IO_DUT_I2CM_SDA
001A4C 00                NOP      
001A4D 00                NOP      
001A4E 00                NOP      
001A4F 00                NOP      
001A50 00                NOP      
001A51 00                NOP      
001A52 00                NOP      
001A53 00                NOP      
001A54 00                NOP      
001A55 00                NOP      
001A56 00                NOP      
001A57 00                NOP      
001A58 00                NOP      
001A59 00                NOP      
001A5A 12273F            LCALL    ?L?COM0021
001A5D         ?C0506?PKT_I2CM:
001A5D 20820F            JB       IO_DUT_I2CM_SCL,?C0513?PKT_I2CM
001A60 12276A            LCALL    ?L?COM0028
001A63 7002              JNZ      ?C0667?PKT_I2CM
001A65 1536              DEC      _loop
001A67         ?C0667?PKT_I2CM:
001A67 4E                ORL      A,R6
001A68 6005              JZ       ?C0513?PKT_I2CM
001A6A 121708            LCALL    ?L?COM0002
001A6D 80EE              SJMP     ?C0506?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 22


001A6F         ?C0513?PKT_I2CM:
001A6F 00                NOP      
001A70 00                NOP      
001A71 00                NOP      
001A72 00                NOP      
001A73 00                NOP      
001A74 00                NOP      
001A75 00                NOP      
001A76 00                NOP      
001A77 00                NOP      
001A78 00                NOP      
001A79 00                NOP      
001A7A 00                NOP      
001A7B 00                NOP      
001A7C 00                NOP      
001A7D C292              CLR      IO_DUT_I2CM_SDA
001A7F 00                NOP      
001A80 00                NOP      
001A81 00                NOP      
001A82 00                NOP      
001A83 00                NOP      
001A84 00                NOP      
001A85 00                NOP      
001A86 00                NOP      
001A87 00                NOP      
001A88 00                NOP      
001A89 00                NOP      
001A8A 00                NOP      
001A8B 00                NOP      
001A8C 00                NOP      
001A8D C282              CLR      IO_DUT_I2CM_SCL
001A8F 8000              SJMP     ?C0479?PKT_I2CM
001A91         ?C0479?PKT_I2CM:
  267: 
  268:         /* send I2C slave address + read */
  269:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
001A91 122780            LCALL    ?L?COM0035
001A94 4401              ORL      A,#01H
001A96 FF                MOV      R7,A
001A97 11F1              ACALL    __pkt_i2cm_TxByte
001A99 504D              JNC      ?C0561?PKT_I2CM
  270:         {
  271:             goto _exit;
  272:         }
001A9B         ?C0550?PKT_I2CM:
  273: 
  274:         /* read data */
  275:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001A9B E4                CLR      A
001A9C F534              MOV      vLoop,A
001A9E F535              MOV      vLoop+01H,A
001AA0         ?C0551?PKT_I2CM:
001AA0 C3                CLR      C
001AA1 E535              MOV      A,vLoop+01H
001AA3 9533              SUBB     A,vReadLen+01H
001AA5 E534              MOV      A,vLoop
001AA7 9532              SUBB     A,vReadLen
001AA9 503B              JNC      ?C0477?PKT_I2CM
  276:         {
  277:             pPayload->aBuf[vWriteLen+vLoop] =
001AAB E533              MOV      A,vReadLen+01H
001AAD 24FF              ADD      A,#0FFH
001AAF FF                MOV      R7,A
001AB0 E532              MOV      A,vReadLen
001AB2 34FF              ADDC     A,#0FFH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 23


001AB4 FE                MOV      R6,A
001AB5 EF                MOV      A,R7
001AB6 B53507            CJNE     A,vLoop+01H,?C0554?PKT_I2CM
001AB9 EE                MOV      A,R6
001ABA B53403            CJNE     A,vLoop,?C0554?PKT_I2CM
001ABD D3                SETB     C
001ABE 8001              SJMP     ?C0555?PKT_I2CM
001AC0         ?C0554?PKT_I2CM:
001AC0 C3                CLR      C
001AC1         ?C0555?PKT_I2CM:
001AC1 920A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001AC3 916D              ACALL    _pkt_i2cm_RxByte
001AC5 E531              MOV      A,vWriteLen+01H
001AC7 2535              ADD      A,vLoop+01H
001AC9 FD                MOV      R5,A
001ACA E530              MOV      A,vWriteLen
001ACC 3534              ADDC     A,vLoop
001ACE FC                MOV      R4,A
001ACF 122748            LCALL    ?L?COM0022
001AD2 2D                ADD      A,R5
001AD3 F582              MOV      DPL,A
001AD5 E583              MOV      A,DPH
001AD7 3C                ADDC     A,R4
001AD8 F583              MOV      DPH,A
001ADA EF                MOV      A,R7
001ADB F0                MOVX     @DPTR,A
  278:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  279:         }
001ADC 0535              INC      vLoop+01H
001ADE E535              MOV      A,vLoop+01H
001AE0 7002              JNZ      ?C0670?PKT_I2CM
001AE2 0534              INC      vLoop
001AE4         ?C0670?PKT_I2CM:
001AE4 80BA              SJMP     ?C0551?PKT_I2CM
  280:     }
001AE6         ?C0477?PKT_I2CM:
  281: 
  282:     /* I2C stream done */
  283:     bDone = TRUE;
001AE6 D209              SETB     bDone
  284: 
  285: _exit:
001AE8         _exit:
  286:     /* send I2C stop */
  287:     _pkt_i2cm_Stop();
001AE8         ?C0561?PKT_I2CM:
001AE8 C292              CLR      IO_DUT_I2CM_SDA
001AEA 00                NOP      
001AEB 00                NOP      
001AEC 00                NOP      
001AED 00                NOP      
001AEE 00                NOP      
001AEF 00                NOP      
001AF0 00                NOP      
001AF1 00                NOP      
001AF2 00                NOP      
001AF3 00                NOP      
001AF4 00                NOP      
001AF5 00                NOP      
001AF6 00                NOP      
001AF7 00                NOP      
001AF8 12273F            LCALL    ?L?COM0021
001AFB         ?C0584?PKT_I2CM:
001AFB 20820F            JB       IO_DUT_I2CM_SCL,?C0591?PKT_I2CM
001AFE 12276A            LCALL    ?L?COM0028
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 24


001B01 7002              JNZ      ?C0671?PKT_I2CM
001B03 1536              DEC      _loop
001B05         ?C0671?PKT_I2CM:
001B05 4E                ORL      A,R6
001B06 6005              JZ       ?C0591?PKT_I2CM
001B08 121708            LCALL    ?L?COM0002
001B0B 80EE              SJMP     ?C0584?PKT_I2CM
001B0D         ?C0591?PKT_I2CM:
001B0D 00                NOP      
001B0E 00                NOP      
001B0F 00                NOP      
001B10 00                NOP      
001B11 00                NOP      
001B12 00                NOP      
001B13 00                NOP      
001B14 00                NOP      
001B15 00                NOP      
001B16 00                NOP      
001B17 00                NOP      
001B18 00                NOP      
001B19 00                NOP      
001B1A 00                NOP      
001B1B D292              SETB     IO_DUT_I2CM_SDA
  288: 
  289:     /* unlock globally interrupt */
  290:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001B1D A208              MOV      C,bIntState
001B1F 92AF              MOV      EA,C
  291: 
  292:     return bDone;
001B21 A209              MOV      C,bDone
  293: }
001B23 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  348: UINT16 PKT_I2CM_Stream(void)
  349: {
  350:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  351:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
001B24 752C00            MOV      pPayload,#HIGH vFrame+0CH
001B27 752D0C            MOV      pPayload+01H,#LOW vFrame+0CH
  352: 
  353:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  354:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
001B2A 122728            LCALL    ?L?COM001E
001B2D E0                MOVX     A,@DPTR
001B2E FE                MOV      R6,A
001B2F A3                INC      DPTR
001B30 E0                MOVX     A,@DPTR
001B31 FF                MOV      R7,A
001B32 2405              ADD      A,#05H
001B34 FD                MOV      R5,A
001B35 E4                CLR      A
001B36 3E                ADDC     A,R6
001B37 FC                MOV      R4,A
001B38 90000A            MOV      DPTR,#vFrame+0AH
001B3B E0                MOVX     A,@DPTR
001B3C B50424            CJNE     A,AR4,?C0642?PKT_I2CM
001B3F A3                INC      DPTR
001B40 E0                MOVX     A,@DPTR
001B41 B5051F            CJNE     A,AR5,?C0642?PKT_I2CM
001B44 122728            LCALL    ?L?COM001E
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 25


001B47 A3                INC      DPTR
001B48 A3                INC      DPTR
001B49 E0                MOVX     A,@DPTR
001B4A FC                MOV      R4,A
001B4B A3                INC      DPTR
001B4C E0                MOVX     A,@DPTR
001B4D FD                MOV      R5,A
001B4E EF                MOV      A,R7
001B4F 2D                ADD      A,R5
001B50 FF                MOV      R7,A
001B51 EE                MOV      A,R6
001B52 3C                ADDC     A,R4
001B53 FE                MOV      R6,A
001B54 E4                CLR      A
001B55 FC                MOV      R4,A
001B56 FD                MOV      R5,A
001B57 7B33              MOV      R3,#033H
001B59 7A04              MOV      R2,#04H
001B5B F9                MOV      R1,A
001B5C F8                MOV      R0,A
001B5D C3                CLR      C
001B5E 12086B            LCALL    ?C?SLCMP
001B61 5005              JNC      ?C0641?PKT_I2CM
001B63         ?C0642?PKT_I2CM:
  355:     {
  356:         return PKT_REPLY_Fail_InvalidLen;
001B63 7E03              MOV      R6,#03H
001B65 7F04              MOV      R7,#04H
001B67 22                RET      
  357:     }
001B68         ?C0641?PKT_I2CM:
  358: 
  359:   #if PKT_I2CM_VS_SUPPORT
  360:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
  361:         pkt_i2cm_vs_Stream(pPayload) :
  362:         pkt_i2cm_Stream(pPayload))
  363:   #else
  364:     if (pkt_i2cm_Stream(pPayload))
001B68 AF2D              MOV      R7,pPayload+01H
001B6A AE2C              MOV      R6,pPayload
001B6C 317C              ACALL    _pkt_i2cm_Stream
001B6E 5026              JNC      ?C0644?PKT_I2CM
  365:   #endif
  366:     {
  367:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  368:                            + pPayload->vWriteLen
  369:                            + pPayload->vReadLen);
001B70 122728            LCALL    ?L?COM001E
001B73 E0                MOVX     A,@DPTR
001B74 FE                MOV      R6,A
001B75 A3                INC      DPTR
001B76 E0                MOVX     A,@DPTR
001B77 2405              ADD      A,#05H
001B79 FF                MOV      R7,A
001B7A E4                CLR      A
001B7B 3E                ADDC     A,R6
001B7C FE                MOV      R6,A
001B7D 122728            LCALL    ?L?COM001E
001B80 A3                INC      DPTR
001B81 A3                INC      DPTR
001B82 E0                MOVX     A,@DPTR
001B83 FC                MOV      R4,A
001B84 A3                INC      DPTR
001B85 E0                MOVX     A,@DPTR
001B86 2F                ADD      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 26


001B87 FF                MOV      R7,A
001B88 EC                MOV      A,R4
001B89 3E                ADDC     A,R6
001B8A 90000A            MOV      DPTR,#vFrame+0AH
001B8D F0                MOVX     @DPTR,A
001B8E A3                INC      DPTR
001B8F EF                MOV      A,R7
001B90 F0                MOVX     @DPTR,A
  370:         return PKT_REPLY_Done_ExecNoError;
001B91 7E01              MOV      R6,#01H
001B93 7F40              MOV      R7,#040H
001B95 22                RET      
  371:     }
001B96         ?C0644?PKT_I2CM:
  372:     else
  373:     {
  374:         return PKT_REPLY_Fail_I2cNoAck;
001B96 7E03              MOV      R6,#03H
001B98 7F40              MOV      R7,#040H
  375:     }
  376: }
001B9A 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  176: static BOOL _pkt_i2cm_CheckReady(void)
  177: {
  178:     if ((PKT_I2CM_GET_SCL() == HIGH)
  179:         && (PKT_I2CM_GET_SDA() == HIGH))
001B9B 308205            JNB      IO_DUT_I2CM_SCL,?C0216?PKT_I2CM
001B9E 309202            JNB      IO_DUT_I2CM_SDA,?C0216?PKT_I2CM
  180:     {
  181:         /* the I2C only can be started, while SCL/SDA is at high level */
  182:         return TRUE;
001BA1 D3                SETB     C
001BA2 22                RET      
  183:     }
001BA3         ?C0216?PKT_I2CM:
  184:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001BA3 208202            JB       IO_DUT_I2CM_SCL,$ + 5H
001BA6 816B              AJMP     ?C0218?PKT_I2CM
001BA8 309202            JNB      IO_DUT_I2CM_SDA,$ + 5H
001BAB 816B              AJMP     ?C0218?PKT_I2CM
  185:              && (PKT_I2CM_GET_SDA() == LOW))
  186:     {
  187:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  188:          *  we should attempt to reset the I2C bus,
  189:          *  to recover the SDA to idle state.
  190:          *
  191:          * Memory (Management Interface) Reset:
  192:          *  1) Clock up to 9 cycles.
  193:          *  2) Look for SDA high in each cycle while SCL is high.
  194:          *  3) Create a START condition as SDA is high.
  195:          */
  196: 
  197:         UINT8   vLoop;
  198: 
  199:         for (vLoop = 9; vLoop != 0; vLoop--)
001BAD 753809            MOV      vLoop,#09H
001BB0         ?C0220?PKT_I2CM:
  200:         {
  201:             PKT_I2CM_SET_SCL(LOW);
001BB0 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 27


001BB1 00                NOP      
001BB2 00                NOP      
001BB3 00                NOP      
001BB4 00                NOP      
001BB5 00                NOP      
001BB6 00                NOP      
001BB7 00                NOP      
001BB8 00                NOP      
001BB9 00                NOP      
001BBA 00                NOP      
001BBB 00                NOP      
001BBC 00                NOP      
001BBD 00                NOP      
001BBE C282              CLR      IO_DUT_I2CM_SCL
001BC0 8000              SJMP     ?C0255?PKT_I2CM
  202:             PKT_I2CM_SET_SCL(HIGH);
001BC2         ?C0255?PKT_I2CM:
001BC2 00                NOP      
001BC3 00                NOP      
001BC4 00                NOP      
001BC5 00                NOP      
001BC6 00                NOP      
001BC7 00                NOP      
001BC8 00                NOP      
001BC9 00                NOP      
001BCA 00                NOP      
001BCB 00                NOP      
001BCC 00                NOP      
001BCD 00                NOP      
001BCE 00                NOP      
001BCF 00                NOP      
001BD0 122756            LCALL    ?L?COM0023
001BD3         ?C0269?PKT_I2CM:
001BD3 20820F            JB       IO_DUT_I2CM_SCL,?C0222?PKT_I2CM
001BD6 122771            LCALL    ?L?COM0029
001BD9 7002              JNZ      ?C0660?PKT_I2CM
001BDB 1539              DEC      _loop
001BDD         ?C0660?PKT_I2CM:
001BDD 4E                ORL      A,R6
001BDE 6005              JZ       ?C0222?PKT_I2CM
001BE0 121708            LCALL    ?L?COM0002
001BE3 80EE              SJMP     ?C0269?PKT_I2CM
  203:         }
001BE5         ?C0222?PKT_I2CM:
001BE5 D538C8            DJNZ     vLoop,?C0220?PKT_I2CM
001BE8         ?C0221?PKT_I2CM:
  204: 
  205:         if (PKT_I2CM_GET_SDA() == HIGH)
001BE8 209202            JB       IO_DUT_I2CM_SDA,$ + 5H
001BEB 816B              AJMP     ?C0218?PKT_I2CM
  206:         {
  207:             _pkt_i2cm_Start();
001BED D292              SETB     IO_DUT_I2CM_SDA
001BEF 00                NOP      
001BF0 00                NOP      
001BF1 00                NOP      
001BF2 00                NOP      
001BF3 00                NOP      
001BF4 00                NOP      
001BF5 00                NOP      
001BF6 00                NOP      
001BF7 00                NOP      
001BF8 00                NOP      
001BF9 00                NOP      
001BFA 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 28


001BFB 00                NOP      
001BFC 00                NOP      
001BFD 122756            LCALL    ?L?COM0023
001C00         ?C0300?PKT_I2CM:
001C00 20820F            JB       IO_DUT_I2CM_SCL,?C0307?PKT_I2CM
001C03 122771            LCALL    ?L?COM0029
001C06 7002              JNZ      ?C0661?PKT_I2CM
001C08 1539              DEC      _loop
001C0A         ?C0661?PKT_I2CM:
001C0A 4E                ORL      A,R6
001C0B 6005              JZ       ?C0307?PKT_I2CM
001C0D 121708            LCALL    ?L?COM0002
001C10 80EE              SJMP     ?C0300?PKT_I2CM
001C12         ?C0307?PKT_I2CM:
001C12 00                NOP      
001C13 00                NOP      
001C14 00                NOP      
001C15 00                NOP      
001C16 00                NOP      
001C17 00                NOP      
001C18 00                NOP      
001C19 00                NOP      
001C1A 00                NOP      
001C1B 00                NOP      
001C1C 00                NOP      
001C1D 00                NOP      
001C1E 00                NOP      
001C1F 00                NOP      
001C20 C292              CLR      IO_DUT_I2CM_SDA
001C22 00                NOP      
001C23 00                NOP      
001C24 00                NOP      
001C25 00                NOP      
001C26 00                NOP      
001C27 00                NOP      
001C28 00                NOP      
001C29 00                NOP      
001C2A 00                NOP      
001C2B 00                NOP      
001C2C 00                NOP      
001C2D 00                NOP      
001C2E 00                NOP      
001C2F 00                NOP      
001C30 C282              CLR      IO_DUT_I2CM_SCL
001C32 8000              SJMP     ?C0349?PKT_I2CM
  208:             _pkt_i2cm_Stop();
001C34         ?C0349?PKT_I2CM:
001C34 C292              CLR      IO_DUT_I2CM_SDA
001C36 00                NOP      
001C37 00                NOP      
001C38 00                NOP      
001C39 00                NOP      
001C3A 00                NOP      
001C3B 00                NOP      
001C3C 00                NOP      
001C3D 00                NOP      
001C3E 00                NOP      
001C3F 00                NOP      
001C40 00                NOP      
001C41 00                NOP      
001C42 00                NOP      
001C43 00                NOP      
001C44 122756            LCALL    ?L?COM0023
001C47         ?C0372?PKT_I2CM:
001C47 20820F            JB       IO_DUT_I2CM_SCL,?C0379?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 29


001C4A 122771            LCALL    ?L?COM0029
001C4D 7002              JNZ      ?C0663?PKT_I2CM
001C4F 1539              DEC      _loop
001C51         ?C0663?PKT_I2CM:
001C51 4E                ORL      A,R6
001C52 6005              JZ       ?C0379?PKT_I2CM
001C54 121708            LCALL    ?L?COM0002
001C57 80EE              SJMP     ?C0372?PKT_I2CM
001C59         ?C0379?PKT_I2CM:
001C59 00                NOP      
001C5A 00                NOP      
001C5B 00                NOP      
001C5C 00                NOP      
001C5D 00                NOP      
001C5E 00                NOP      
001C5F 00                NOP      
001C60 00                NOP      
001C61 00                NOP      
001C62 00                NOP      
001C63 00                NOP      
001C64 00                NOP      
001C65 00                NOP      
001C66 00                NOP      
001C67 D292              SETB     IO_DUT_I2CM_SDA
  209: 
  210:             /* we have successfully recovered the SDA line to idle state */
  211:             return TRUE;
001C69 D3                SETB     C
001C6A 22                RET      
  212:         }
  213:     }
  214:     else
  215:     {
  216:         /* unsupported stretching on SCL/SDA line, operation fail */
  217:     }
001C6B         ?C0218?PKT_I2CM:
  218: 
  219:     return FALSE;
001C6B C3                CLR      C
  220: }
001C6C 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  153: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  154: {
  155:     UINT8   vLoop;
  156:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
001C6D E4                CLR      A
001C6E FD                MOV      R5,A
  157: 
  158:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
001C6F 7C08              MOV      R4,#08H
001C71         ?C0110?PKT_I2CM:
  159:     {
  160:         PKT_I2CM_SET_SCL(HIGH);
001C71 00                NOP      
001C72 00                NOP      
001C73 00                NOP      
001C74 00                NOP      
001C75 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 30


001C76 00                NOP      
001C77 00                NOP      
001C78 00                NOP      
001C79 00                NOP      
001C7A 00                NOP      
001C7B 00                NOP      
001C7C 00                NOP      
001C7D 00                NOP      
001C7E 00                NOP      
001C7F 12270A            LCALL    ?L?COM0019
001C82         ?C0135?PKT_I2CM:
001C82 20820F            JB       IO_DUT_I2CM_SCL,?C0114?PKT_I2CM
001C85 1225D2            LCALL    ?L?COM0017
001C88 7002              JNZ      ?C0655?PKT_I2CM
001C8A 1538              DEC      _loop
001C8C         ?C0655?PKT_I2CM:
001C8C 4E                ORL      A,R6
001C8D 6005              JZ       ?C0114?PKT_I2CM
001C8F 121708            LCALL    ?L?COM0002
001C92 80EE              SJMP     ?C0135?PKT_I2CM
001C94         ?C0114?PKT_I2CM:
  161:         vData <<= 1;
001C94 ED                MOV      A,R5
001C95 25E0              ADD      A,ACC
001C97 FD                MOV      R5,A
  162:         vData |= PKT_I2CM_GET_SDA();
001C98 A292              MOV      C,IO_DUT_I2CM_SDA
001C9A E4                CLR      A
001C9B 33                RLC      A
001C9C 4205              ORL      AR5,A
  163:         PKT_I2CM_SET_SCL(LOW);
001C9E 00                NOP      
001C9F 00                NOP      
001CA0 00                NOP      
001CA1 00                NOP      
001CA2 00                NOP      
001CA3 00                NOP      
001CA4 00                NOP      
001CA5 00                NOP      
001CA6 00                NOP      
001CA7 00                NOP      
001CA8 00                NOP      
001CA9 00                NOP      
001CAA 00                NOP      
001CAB 00                NOP      
001CAC C282              CLR      IO_DUT_I2CM_SCL
001CAE 8000              SJMP     ?C0112?PKT_I2CM
  164:     }
001CB0         ?C0112?PKT_I2CM:
001CB0 1C                DEC      R4
001CB1 EC                MOV      A,R4
001CB2 70BD              JNZ      ?C0110?PKT_I2CM
001CB4         ?C0163?PKT_I2CM:
  165: 
  166:     /* send ACK/NAK */
  167:     PKT_I2CM_SET_SDA(bSendNAK);
001CB4 A20A              MOV      C,bSendNAK
001CB6 9292              MOV      IO_DUT_I2CM_SDA,C
  168:     PKT_I2CM_SET_SCL(HIGH);
001CB8 00                NOP      
001CB9 00                NOP      
001CBA 00                NOP      
001CBB 00                NOP      
001CBC 00                NOP      
001CBD 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 31


001CBE 00                NOP      
001CBF 00                NOP      
001CC0 00                NOP      
001CC1 00                NOP      
001CC2 00                NOP      
001CC3 00                NOP      
001CC4 00                NOP      
001CC5 00                NOP      
001CC6 12270A            LCALL    ?L?COM0019
001CC9         ?C0186?PKT_I2CM:
001CC9 20820F            JB       IO_DUT_I2CM_SCL,?C0196?PKT_I2CM
001CCC 1225D2            LCALL    ?L?COM0017
001CCF 7002              JNZ      ?C0657?PKT_I2CM
001CD1 1538              DEC      _loop
001CD3         ?C0657?PKT_I2CM:
001CD3 4E                ORL      A,R6
001CD4 6005              JZ       ?C0196?PKT_I2CM
001CD6 121708            LCALL    ?L?COM0002
001CD9 80EE              SJMP     ?C0186?PKT_I2CM
  169:     PKT_I2CM_SET_SCL(LOW);
001CDB         ?C0196?PKT_I2CM:
001CDB 00                NOP      
001CDC 00                NOP      
001CDD 00                NOP      
001CDE 00                NOP      
001CDF 00                NOP      
001CE0 00                NOP      
001CE1 00                NOP      
001CE2 00                NOP      
001CE3 00                NOP      
001CE4 00                NOP      
001CE5 00                NOP      
001CE6 00                NOP      
001CE7 00                NOP      
001CE8 00                NOP      
001CE9 C282              CLR      IO_DUT_I2CM_SCL
001CEB 8000              SJMP     ?C0214?PKT_I2CM
001CED         ?C0214?PKT_I2CM:
  170:     PKT_I2CM_SET_SDA(HIGH);
001CED D292              SETB     IO_DUT_I2CM_SDA
  171: 
  172:     return vData;
001CEF AF05              MOV      R7,AR5
  173: }
001CF1 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  340: UINT16 PKT_I2CM_Inspect(void)
  341: {
  342:     _pkt_i2cm_Init();
  343: 
001CF2 00                NOP      
001CF3 00                NOP      
001CF4 00                NOP      
001CF5 00                NOP      
001CF6 00                NOP      
001CF7 00                NOP      
001CF8 00                NOP      
001CF9 00                NOP      
001CFA 00                NOP      
001CFB 00                NOP      
001CFC 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 32


001CFD 00                NOP      
001CFE 00                NOP      
001CFF 00                NOP      
001D00 D282              SETB     IO_DUT_I2CM_SCL
001D02 752C01            MOV      _loop,#01H
001D05 752DF4            MOV      _loop+01H,#0F4H
001D08         ?C0632?PKT_I2CM:
001D08 208212            JB       IO_DUT_I2CM_SCL,?C0636?PKT_I2CM
001D0B E52D              MOV      A,_loop+01H
001D0D 152D              DEC      _loop+01H
001D0F AE2C              MOV      R6,_loop
001D11 7002              JNZ      ?C0672?PKT_I2CM
001D13 152C              DEC      _loop
001D15         ?C0672?PKT_I2CM:
001D15 4E                ORL      A,R6
001D16 6005              JZ       ?C0636?PKT_I2CM
001D18 121708            LCALL    ?L?COM0002
001D1B 80EB              SJMP     ?C0632?PKT_I2CM
001D1D         ?C0636?PKT_I2CM:
001D1D D292              SETB     IO_DUT_I2CM_SDA
  344:     PKT_SetPayloadSize(0x00);
001D1F 122720            LCALL    ?L?COM001D
  345:     return PKT_REPLY_Done_ExecNoError;
001D22 7E01              MOV      R6,#01H
001D24 7F40              MOV      R7,#040H
  346: }
001D26 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
001D27 122720            LCALL    ?L?COM001D
   31: }
001D2A 7E01              MOV      R6,#01H
001D2C 7F40              MOV      R7,#040H
   32: 
001D2E 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
001D2F 122720            LCALL    ?L?COM001D
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
001D32 1217E3            LCALL    DRV_C2M_Reset
001D35 7E03              MOV      R6,#03H
001D37 5002              JNC      ?C0008?PKT_C2M
001D39 7E01              MOV      R6,#01H
001D3B         ?C0008?PKT_C2M:
001D3B 7F40              MOV      R7,#040H
   39: }
001D3D 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 33


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
001D3E B154              ACALL    DRV_C2M_Probe
001D40 90000C            MOV      DPTR,#vFrame+0CH
001D43 1208B2            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
001D46 90000A            MOV      DPTR,#vFrame+0AH
001D49 E4                CLR      A
001D4A F0                MOVX     @DPTR,A
001D4B A3                INC      DPTR
001D4C 7404              MOV      A,#04H
001D4E F0                MOVX     @DPTR,A
   46: }
001D4F 7E01              MOV      R6,#01H
001D51 7F40              MOV      R7,#040H
   47: 
001D53 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
  447:     vDevice.U32 = 0xFFFFFFFFUL;
001D54 74FF              MOV      A,#0FFH
001D56 F52F              MOV      vDevice+03H,A
001D58 F52E              MOV      vDevice+02H,A
001D5A F52D              MOV      vDevice+01H,A
001D5C F52C              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
001D5E 209702            JB       IO_DUT_C2M_SCL,$ + 5H
001D61 A1F0              AJMP     _exit?DRV_C2M
001D63 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
001D66 A1F0              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
  453:     }
  454: 
  455:     drv_c2m_Init();
001D68         ?C0852?DRV_C2M:
001D68 1226F1            LCALL    ?L?COM0014
001D6B 7F02              MOV      R7,#02H
001D6D B1F9              ACALL    _c2m_WriteAR
001D6F 1224EE            LCALL    _c2m_WriteDR
001D72 7F04              MOV      R7,#04H
001D74 1224EE            LCALL    _c2m_WriteDR
001D77 7F01              MOV      R7,#01H
001D79 1224EE            LCALL    _c2m_WriteDR
001D7C 7F14              MOV      R7,#014H
001D7E 7E00              MOV      R6,#00H
001D80 122477            LCALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
001D83 E4                CLR      A
001D84 FF                MOV      R7,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 34


001D85 1217FA            LCALL    _drv_c2m_ReadSFR
001D88 8F2C              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
001D8A 7F01              MOV      R7,#01H
001D8C 1217FA            LCALL    _drv_c2m_ReadSFR
001D8F 8F2D              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
001D91 E52C              MOV      A,vDevice
001D93 F4                CPL      A
001D94 605A              JZ       _exit?DRV_C2M
  462:     {
  463:         /* no device probed */
  464:         goto _exit;
  465:     }
001D96         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
001D96 7514B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
001D99 122778            LCALL    ?L?COM0034
001D9C 1217C1            LCALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
001D9F D168              ACALL    drv_c2m_ReadData
001DA1 EF                MOV      A,R7
001DA2 640D              XRL      A,#0DH
001DA4 6021              JZ       ?C0863?DRV_C2M
  472:     {
  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
001DA6 7514AD            MOV      vFPDAT,#0ADH
  475:         c2m_WriteAR(vFPDAT);
001DA9 122778            LCALL    ?L?COM0034
001DAC 122730            LCALL    ?L?COM001F
001DAF         ?C0870?DRV_C2M:
001DAF 122000            LCALL    c2m_ReadAR
001DB2 EF                MOV      A,R7
001DB3 20E00C            JB       ACC.0,?C0868?DRV_C2M
001DB6 7830              MOV      R0,#LOW _timeout
001DB8 122579            LCALL    ?L?COM0004
001DBB 6005              JZ       ?C0868?DRV_C2M
001DBD 121708            LCALL    ?L?COM0002
001DC0 80ED              SJMP     ?C0870?DRV_C2M
001DC2         ?C0868?DRV_C2M:
001DC2 122591            LCALL    ?L?COM0015
001DC5 7029              JNZ      _exit?DRV_C2M
001DC7         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
001DC7         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
001DC7 D168              ACALL    drv_c2m_ReadData
001DC9 8F2E              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
001DCB AF14              MOV      R7,vFPDAT
001DCD B1F9              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
001DCF 7F01              MOV      R7,#01H
001DD1 122730            LCALL    ?L?COM001F
001DD4         ?C0879?DRV_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 35


001DD4 122000            LCALL    c2m_ReadAR
001DD7 EF                MOV      A,R7
001DD8 20E00C            JB       ACC.0,?C0877?DRV_C2M
001DDB 7830              MOV      R0,#LOW _timeout
001DDD 122579            LCALL    ?L?COM0004
001DE0 6005              JZ       ?C0877?DRV_C2M
001DE2 121708            LCALL    ?L?COM0002
001DE5 80ED              SJMP     ?C0879?DRV_C2M
001DE7         ?C0877?DRV_C2M:
001DE7 D186              ACALL    c2m_ReadDR
001DE9 BF0D04            CJNE     R7,#0DH,_exit?DRV_C2M
001DEC         ?C0881?DRV_C2M:
001DEC         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
001DEC D168              ACALL    drv_c2m_ReadData
001DEE 8F2F              MOV      vDevice+03H,R7
  486: 
  487: _exit:
001DF0         _exit:
  488:     return vDevice.U32;
001DF0 AF2F              MOV      R7,vDevice+03H
001DF2 AE2E              MOV      R6,vDevice+02H
001DF4 AD2D              MOV      R5,vDevice+01H
001DF6 AC2C              MOV      R4,vDevice
  489: }
001DF8 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
001DF9 D213              SETB     bIns0
001DFB D214              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
001DFD 8F20              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
001DFF 30AF05            JNB      EA,?C0007?DRV_C2M
001E02 C2AF              CLR      EA
001E04 D3                SETB     C
001E05 8001              SJMP     ?C0008?DRV_C2M
001E07         ?C0007?DRV_C2M:
001E07 C3                CLR      C
001E08         ?C0008?DRV_C2M:
001E08 122598            LCALL    ?L?COM000A
001E0B 00                NOP      
001E0C 00                NOP      
001E0D 00                NOP      
001E0E 00                NOP      
001E0F 1225EC            LCALL    ?L?COM0012
001E12 00                NOP      
001E13 00                NOP      
001E14 00                NOP      
001E15 00                NOP      
001E16 1225D9            LCALL    ?L?COM0018
001E19 00                NOP      
001E1A 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 36


001E1B 00                NOP      
001E1C 00                NOP      
001E1D 1226DE            LCALL    ?L?COM0033
001E20 00                NOP      
001E21 00                NOP      
001E22 00                NOP      
001E23 00                NOP      
001E24 1226D5            LCALL    ?L?COM0032
001E27 00                NOP      
001E28 00                NOP      
001E29 00                NOP      
001E2A 00                NOP      
001E2B 1226CC            LCALL    ?L?COM0031
001E2E 00                NOP      
001E2F 00                NOP      
001E30 00                NOP      
001E31 00                NOP      
001E32 1226C3            LCALL    ?L?COM0030
001E35 00                NOP      
001E36 00                NOP      
001E37 00                NOP      
001E38 00                NOP      
001E39 1226BA            LCALL    ?L?COM002F
001E3C 00                NOP      
001E3D 00                NOP      
001E3E 00                NOP      
001E3F 00                NOP      
001E40 1226B1            LCALL    ?L?COM002E
001E43 00                NOP      
001E44 00                NOP      
001E45 00                NOP      
001E46 00                NOP      
001E47 1226A8            LCALL    ?L?COM002D
001E4A 00                NOP      
001E4B 00                NOP      
001E4C 00                NOP      
001E4D 00                NOP      
001E4E 12269F            LCALL    ?L?COM002C
001E51 00                NOP      
001E52 00                NOP      
001E53 00                NOP      
001E54 00                NOP      
001E55 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
  197:     c2m_TxStop();       /* tx frame stop */
001E57 D2A0              SETB     IO_DUT_C2M_SDA
001E59 53A6FE            ANL      P2MDOUT,#0FEH
001E5C 1225A0            LCALL    ?L?COM000B
001E5F 00                NOP      
001E60 00                NOP      
001E61 00                NOP      
001E62 00                NOP      
001E63 D297              SETB     IO_DUT_C2M_SCL
001E65 02261E            LJMP     ?L?COM0011
  198: 
  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 37


  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
001E68 E4                CLR      A
001E69 754110            MOV      _timeout+03H,#010H
001E6C 754027            MOV      _timeout+02H,#027H
001E6F F53F              MOV      _timeout+01H,A
001E71 F53E              MOV      _timeout,A
001E73         ?C0794?DRV_C2M:
001E73 122000            LCALL    c2m_ReadAR
001E76 EF                MOV      A,R7
001E77 20E00C            JB       ACC.0,?C0792?DRV_C2M
001E7A 783E              MOV      R0,#LOW _timeout
001E7C 122579            LCALL    ?L?COM0004
001E7F 6005              JZ       ?C0792?DRV_C2M
001E81 121708            LCALL    ?L?COM0002
001E84 80ED              SJMP     ?C0794?DRV_C2M
001E86         ?C0792?DRV_C2M:
;----                  JMP      c2m_ReadDR
  367: }
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
001E86 C213              CLR      bIns0
001E88 C214              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
001E8A C215              CLR      bLength0
001E8C C216              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
001E8E 30AF05            JNB      EA,?C0584?DRV_C2M
001E91 C2AF              CLR      EA
001E93 D3                SETB     C
001E94 8001              SJMP     ?C0585?DRV_C2M
001E96         ?C0584?DRV_C2M:
001E96 C3                CLR      C
001E97         ?C0585?DRV_C2M:
001E97 122598            LCALL    ?L?COM000A
001E9A 00                NOP      
001E9B 00                NOP      
001E9C 00                NOP      
001E9D 00                NOP      
001E9E 1225EC            LCALL    ?L?COM0012
001EA1 00                NOP      
001EA2 00                NOP      
001EA3 00                NOP      
001EA4 00                NOP      
001EA5 1225D9            LCALL    ?L?COM0018
001EA8 00                NOP      
001EA9 00                NOP      
001EAA 00                NOP      
001EAB 00                NOP      
001EAC 122696            LCALL    ?L?COM002B
001EAF 00                NOP      
001EB0 00                NOP      
001EB1 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 38


001EB2 00                NOP      
001EB3 12268D            LCALL    ?L?COM002A
001EB6 00                NOP      
001EB7 00                NOP      
001EB8 00                NOP      
001EB9 00                NOP      
001EBA 1225E2            LCALL    ?L?COM001C
001EBD 00                NOP      
001EBE D297              SETB     IO_DUT_C2M_SCL
001EC0 00                NOP      
001EC1 00                NOP      
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
001EC2 754227            MOV      _timeout,#027H
001EC5 754310            MOV      _timeout+01H,#010H
001EC8         ?C0687?DRV_C2M:
001EC8 00                NOP      
001EC9 00                NOP      
001ECA C297              CLR      IO_DUT_C2M_SCL
001ECC 00                NOP      
001ECD 00                NOP      
001ECE 121702            LCALL    ?L?COM0001
001ED1 20000D            JB       bC2Bit0,?C0700?DRV_C2M
001ED4 E543              MOV      A,_timeout+01H
001ED6 1543              DEC      _timeout+01H
001ED8 AE42              MOV      R6,_timeout
001EDA 7002              JNZ      ?C1014?DRV_C2M
001EDC 1542              DEC      _timeout
001EDE         ?C1014?DRV_C2M:
001EDE 4E                ORL      A,R6
001EDF 70E7              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
001EE1         ?C0700?DRV_C2M:
001EE1 00                NOP      
001EE2 00                NOP      
001EE3 C297              CLR      IO_DUT_C2M_SCL
001EE5 00                NOP      
001EE6 00                NOP      
001EE7 A2A0              MOV      C,IO_DUT_C2M_SDA
001EE9 D297              SETB     IO_DUT_C2M_SCL
001EEB 9200              MOV      bC2Bit0,C
001EED 00                NOP      
001EEE 00                NOP      
001EEF C297              CLR      IO_DUT_C2M_SCL
001EF1 00                NOP      
001EF2 00                NOP      
001EF3 A2A0              MOV      C,IO_DUT_C2M_SDA
001EF5 D297              SETB     IO_DUT_C2M_SCL
001EF7 9201              MOV      bC2Bit1,C
001EF9 00                NOP      
001EFA 00                NOP      
001EFB C297              CLR      IO_DUT_C2M_SCL
001EFD 00                NOP      
001EFE 00                NOP      
001EFF A2A0              MOV      C,IO_DUT_C2M_SDA
001F01 D297              SETB     IO_DUT_C2M_SCL
001F03 9202              MOV      bC2Bit2,C
001F05 00                NOP      
001F06 00                NOP      
001F07 C297              CLR      IO_DUT_C2M_SCL
001F09 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 39


001F0A 00                NOP      
001F0B A2A0              MOV      C,IO_DUT_C2M_SDA
001F0D D297              SETB     IO_DUT_C2M_SCL
001F0F 9203              MOV      bC2Bit3,C
001F11 00                NOP      
001F12 00                NOP      
001F13 C297              CLR      IO_DUT_C2M_SCL
001F15 00                NOP      
001F16 00                NOP      
001F17 A2A0              MOV      C,IO_DUT_C2M_SDA
001F19 D297              SETB     IO_DUT_C2M_SCL
001F1B 9204              MOV      bC2Bit4,C
001F1D 00                NOP      
001F1E 00                NOP      
001F1F C297              CLR      IO_DUT_C2M_SCL
001F21 00                NOP      
001F22 00                NOP      
001F23 A2A0              MOV      C,IO_DUT_C2M_SDA
001F25 D297              SETB     IO_DUT_C2M_SCL
001F27 9205              MOV      bC2Bit5,C
001F29 00                NOP      
001F2A 00                NOP      
001F2B C297              CLR      IO_DUT_C2M_SCL
001F2D 00                NOP      
001F2E 00                NOP      
001F2F A2A0              MOV      C,IO_DUT_C2M_SDA
001F31 D297              SETB     IO_DUT_C2M_SCL
001F33 9206              MOV      bC2Bit6,C
001F35 00                NOP      
001F36 00                NOP      
001F37 C297              CLR      IO_DUT_C2M_SCL
001F39 00                NOP      
001F3A 00                NOP      
001F3B 122615            LCALL    ?L?COM000F
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
001F3E AF20              MOV      R7,vC2Data
  272: }
001F40 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
001F41 AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
001F43 C208              CLR      bDone
  550:     if (!drv_c2m_IsReady())
001F45 30976B            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001F48 30A068            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
001F4B         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 40


001F4B AF14              MOV      R7,vFPDAT
001F4D B1F9              ACALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001F4F 7F08              MOV      R7,#08H
001F51 122606            LCALL    ?L?COM0013
001F54         ?C0914?DRV_C2M:
001F54 122000            LCALL    c2m_ReadAR
001F57 EF                MOV      A,R7
001F58 20E00C            JB       ACC.0,?C0912?DRV_C2M
001F5B 782C              MOV      R0,#LOW _timeout
001F5D 122579            LCALL    ?L?COM0004
001F60 6005              JZ       ?C0912?DRV_C2M
001F62 121708            LCALL    ?L?COM0002
001F65 80ED              SJMP     ?C0914?DRV_C2M
001F67         ?C0912?DRV_C2M:
001F67 122591            LCALL    ?L?COM0015
001F6A 7047              JNZ      _exit?DRV_C2M
001F6C         ?C0916?DRV_C2M:
001F6C         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
001F6C AF03              MOV      R7,AR3
001F6E 122606            LCALL    ?L?COM0013
001F71         ?C0923?DRV_C2M:
001F71 122000            LCALL    c2m_ReadAR
001F74 EF                MOV      A,R7
001F75 20E00C            JB       ACC.0,?C0921?DRV_C2M
001F78 782C              MOV      R0,#LOW _timeout
001F7A 122579            LCALL    ?L?COM0004
001F7D 6005              JZ       ?C0921?DRV_C2M
001F7F 121708            LCALL    ?L?COM0002
001F82 80ED              SJMP     ?C0923?DRV_C2M
001F84         ?C0921?DRV_C2M:
001F84 122591            LCALL    ?L?COM0015
001F87 702A              JNZ      _exit?DRV_C2M
001F89         ?C0925?DRV_C2M:
001F89         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001F89 E4                CLR      A
001F8A FF                MOV      R7,A
001F8B 1217C1            LCALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001F8E E4                CLR      A
001F8F 752F40            MOV      _timeout+03H,#040H
001F92 752E9C            MOV      _timeout+02H,#09CH
001F95 F52D              MOV      _timeout+01H,A
001F97 F52C              MOV      _timeout,A
001F99         ?C0932?DRV_C2M:
001F99 122000            LCALL    c2m_ReadAR
001F9C EF                MOV      A,R7
001F9D 20E00C            JB       ACC.0,?C0930?DRV_C2M
001FA0 782C              MOV      R0,#LOW _timeout
001FA2 122579            LCALL    ?L?COM0004
001FA5 6005              JZ       ?C0930?DRV_C2M
001FA7 121708            LCALL    ?L?COM0002
001FAA 80ED              SJMP     ?C0932?DRV_C2M
001FAC         ?C0930?DRV_C2M:
001FAC D186              ACALL    c2m_ReadDR
001FAE BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001FB1         ?C0934?DRV_C2M:
001FB1         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
001FB1 D208              SETB     bDone
  564: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 41


  565: _exit:
001FB3         _exit:
  566:     return bDone;
001FB3 A208              MOV      C,bDone
  567: }
001FB5 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
001FB6 122720            LCALL    ?L?COM001D
   52:             PKT_REPLY_Done_ExecNoError :
   53:             PKT_REPLY_Fail_ExecErrorCode0);
001FB9 122086            LCALL    DRV_C2M_ChipErase
001FBC 7E03              MOV      R6,#03H
001FBE 5002              JNC      ?C0018?PKT_C2M
001FC0 7E01              MOV      R6,#01H
001FC2         ?C0018?PKT_C2M:
001FC2 7F40              MOV      R7,#040H
   54: }
001FC4 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
001FC5 90000A            MOV      DPTR,#vFrame+0AH
001FC8 E0                MOVX     A,@DPTR
001FC9 7004              JNZ      ?C0043?PKT_C2M
001FCB A3                INC      DPTR
001FCC E0                MOVX     A,@DPTR
001FCD 6401              XRL      A,#01H
001FCF         ?C0043?PKT_C2M:
001FCF 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
001FD1 7E03              MOV      R6,#03H
001FD3 7F04              MOV      R7,#04H
001FD5 22                RET      
   62: 
001FD6         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
001FD6 90000C            MOV      DPTR,#vFrame+0CH
001FD9 E0                MOVX     A,@DPTR
001FDA FF                MOV      R7,A
001FDB F141              ACALL    _DRV_C2M_PageErase
001FDD 7E03              MOV      R6,#03H
001FDF 5002              JNC      ?C0023?PKT_C2M
001FE1 7E01              MOV      R6,#01H
001FE3         ?C0023?PKT_C2M:
001FE3 7F40              MOV      R7,#040H
   66: }
001FE5 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 42




----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
001FE6 E4                CLR      A
001FE7 F510              MOV      vTCB_Idle,A
001FE9 F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
   76:     DRV_Init();
001FEB 122351            LCALL    DRV_Init
   77:     APL_Init();
001FEE 0201DD            LJMP     APL_Init
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   77: void thread_LED_Init(void)
   78: {
   79:     PT_INIT(&vTCB_LED);
   80: }
001FF1 E4                CLR      A
001FF2 F512              MOV      vTCB_LED,A
001FF4 F513              MOV      vTCB_LED+01H,A
   81: 
001FF6 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
001FF7 D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
001FF9 0214EA            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
002000 C213              CLR      bIns0
002002 D214              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
002004 30AF05            JNB      EA,?C0190?DRV_C2M
002007 C2AF              CLR      EA
002009 D3                SETB     C
00200A 8001              SJMP     ?C0191?DRV_C2M
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 43


00200C         ?C0190?DRV_C2M:
00200C C3                CLR      C
00200D         ?C0191?DRV_C2M:
00200D 122598            LCALL    ?L?COM000A
002010 00                NOP      
002011 00                NOP      
002012 00                NOP      
002013 00                NOP      
002014 B1EC              ACALL    ?L?COM0012
002016 00                NOP      
002017 00                NOP      
002018 00                NOP      
002019 00                NOP      
00201A B1D9              ACALL    ?L?COM0018
00201C 00                NOP      
00201D 00                NOP      
00201E 00                NOP      
00201F 00                NOP      
002020 B1E2              ACALL    ?L?COM001C
002022 00                NOP      
002023 D297              SETB     IO_DUT_C2M_SCL
002025 00                NOP      
002026 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
002027 00                NOP      
002028 00                NOP      
002029 C297              CLR      IO_DUT_C2M_SCL
00202B 00                NOP      
00202C 00                NOP      
00202D A2A0              MOV      C,IO_DUT_C2M_SDA
00202F D297              SETB     IO_DUT_C2M_SCL
002031 9200              MOV      bC2Bit0,C
002033 00                NOP      
002034 00                NOP      
002035 C297              CLR      IO_DUT_C2M_SCL
002037 00                NOP      
002038 00                NOP      
002039 A2A0              MOV      C,IO_DUT_C2M_SDA
00203B D297              SETB     IO_DUT_C2M_SCL
00203D 9201              MOV      bC2Bit1,C
00203F 00                NOP      
002040 00                NOP      
002041 C297              CLR      IO_DUT_C2M_SCL
002043 00                NOP      
002044 00                NOP      
002045 A2A0              MOV      C,IO_DUT_C2M_SDA
002047 D297              SETB     IO_DUT_C2M_SCL
002049 9202              MOV      bC2Bit2,C
00204B 00                NOP      
00204C 00                NOP      
00204D C297              CLR      IO_DUT_C2M_SCL
00204F 00                NOP      
002050 00                NOP      
002051 A2A0              MOV      C,IO_DUT_C2M_SDA
002053 D297              SETB     IO_DUT_C2M_SCL
002055 9203              MOV      bC2Bit3,C
002057 00                NOP      
002058 00                NOP      
002059 C297              CLR      IO_DUT_C2M_SCL
00205B 00                NOP      
00205C 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 44


00205D A2A0              MOV      C,IO_DUT_C2M_SDA
00205F D297              SETB     IO_DUT_C2M_SCL
002061 9204              MOV      bC2Bit4,C
002063 00                NOP      
002064 00                NOP      
002065 C297              CLR      IO_DUT_C2M_SCL
002067 00                NOP      
002068 00                NOP      
002069 A2A0              MOV      C,IO_DUT_C2M_SDA
00206B D297              SETB     IO_DUT_C2M_SCL
00206D 9205              MOV      bC2Bit5,C
00206F 00                NOP      
002070 00                NOP      
002071 C297              CLR      IO_DUT_C2M_SCL
002073 00                NOP      
002074 00                NOP      
002075 A2A0              MOV      C,IO_DUT_C2M_SDA
002077 D297              SETB     IO_DUT_C2M_SCL
002079 9206              MOV      bC2Bit6,C
00207B 00                NOP      
00207C 00                NOP      
00207D C297              CLR      IO_DUT_C2M_SCL
00207F 00                NOP      
002080 00                NOP      
002081 D115              ACALL    ?L?COM000F
  217:     c2m_RxStop();       /* rx frame stop */
  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
002083 AF20              MOV      R7,vC2Data
  223: }
002085 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
002086 C208              CLR      bDone
  511:     if (!drv_c2m_IsReady())
002088 309755            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
00208B 30A052            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
00208E         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
00208E AF14              MOV      R7,vFPDAT
002090 121DF9            LCALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
002093 7F03              MOV      R7,#03H
002095 D106              ACALL    ?L?COM0013
002097         ?C0892?DRV_C2M:
002097 1100              ACALL    c2m_ReadAR
002099 EF                MOV      A,R7
00209A 20E00B            JB       ACC.0,?C0890?DRV_C2M
00209D 782C              MOV      R0,#LOW _timeout
00209F B179              ACALL    ?L?COM0004
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 45


0020A1 6005              JZ       ?C0890?DRV_C2M
0020A3 121708            LCALL    ?L?COM0002
0020A6 80EF              SJMP     ?C0892?DRV_C2M
0020A8         ?C0890?DRV_C2M:
0020A8 B191              ACALL    ?L?COM0015
0020AA 7034              JNZ      _exit?DRV_C2M
0020AC         ?C0894?DRV_C2M:
0020AC         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
0020AC 7FDE              MOV      R7,#0DEH
0020AE 1217C1            LCALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
0020B1 7FAD              MOV      R7,#0ADH
0020B3 1217C1            LCALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
0020B6 7FA5              MOV      R7,#0A5H
0020B8 1217C1            LCALL    _drv_c2m_WriteData
  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
0020BB 752F00            MOV      _timeout+03H,#00H
0020BE 752E2D            MOV      _timeout+02H,#02DH
0020C1 752D31            MOV      _timeout+01H,#031H
0020C4 752C01            MOV      _timeout,#01H
0020C7         ?C0901?DRV_C2M:
0020C7 1100              ACALL    c2m_ReadAR
0020C9 EF                MOV      A,R7
0020CA 20E00B            JB       ACC.0,?C0899?DRV_C2M
0020CD 782C              MOV      R0,#LOW _timeout
0020CF B179              ACALL    ?L?COM0004
0020D1 6005              JZ       ?C0899?DRV_C2M
0020D3 121708            LCALL    ?L?COM0002
0020D6 80EF              SJMP     ?C0901?DRV_C2M
0020D8         ?C0899?DRV_C2M:
0020D8 121E86            LCALL    c2m_ReadDR
0020DB BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0020DE         ?C0903?DRV_C2M:
0020DE         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
0020DE D208              SETB     bDone
  525: 
  526: _exit:
0020E0         _exit:
  527:     return bDone;
0020E0 A208              MOV      C,bDone
  528: }
0020E2 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
;---- Variable 'vCount' assigned to Register 'R3' ----
0020E3 D1E7              ACALL    ?L?COM0025
0020E5 7005              JNZ      ?C0936?DRV_C2M
0020E7 7E01              MOV      R6,#01H
0020E9 FF                MOV      R7,A
0020EA 8004              SJMP     ?C0937?DRV_C2M
0020EC         ?C0936?DRV_C2M:
0020EC EB                MOV      A,R3
0020ED FF                MOV      R7,A
0020EE 7E00              MOV      R6,#00H
0020F0         ?C0937?DRV_C2M:
0020F0 8E38              MOV      vLen,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 46


0020F2 8F39              MOV      vLen+01H,R7
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
  595:     BOOL    bDone = FALSE;
0020F4 C208              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
0020F6 30975F            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
0020F9 30A05C            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
0020FC         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
0020FC AF14              MOV      R7,vFPDAT
0020FE 121DF9            LCALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
002101 7F06              MOV      R7,#06H
002103 B1AC              ACALL    ?L?COM0006
002105         ?C0947?DRV_C2M:
002105 1100              ACALL    c2m_ReadAR
002107 EF                MOV      A,R7
002108 20E009            JB       ACC.0,?C0945?DRV_C2M
00210B B177              ACALL    ?L?COM0003
00210D 6005              JZ       ?C0945?DRV_C2M
00210F 121708            LCALL    ?L?COM0002
002112 80F1              SJMP     ?C0947?DRV_C2M
002114         ?C0945?DRV_C2M:
002114 B191              ACALL    ?L?COM0015
002116 7040              JNZ      _exit?DRV_C2M
002118         ?C0949?DRV_C2M:
002118         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
002118 E536              MOV      A,vAddr
00211A FF                MOV      R7,A
00211B 1217C1            LCALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
00211E AF37              MOV      R7,vAddr+01H
002120 B1A7              ACALL    ?L?COM0005
002122         ?C0956?DRV_C2M:
002122 1100              ACALL    c2m_ReadAR
002124 EF                MOV      A,R7
002125 20E009            JB       ACC.0,?C0954?DRV_C2M
002128 B177              ACALL    ?L?COM0003
00212A 6005              JZ       ?C0954?DRV_C2M
00212C 121708            LCALL    ?L?COM0002
00212F 80F1              SJMP     ?C0956?DRV_C2M
002131         ?C0954?DRV_C2M:
002131 121E86            LCALL    c2m_ReadDR
002134 BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
002137         ?C0958?DRV_C2M:
002137         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  610:     while (vLen--)
002137 B1D2              ACALL    ?L?COM0017
002139 7002              JNZ      ?C1016?DRV_C2M
00213B 1538              DEC      vLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 47


00213D         ?C1016?DRV_C2M:
00213D 4E                ORL      A,R6
00213E 6016              JZ       ?C0960?DRV_C2M
  611:     {
  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
002140 121E68            LCALL    drv_c2m_ReadData
002143 0535              INC      pBuf+01H
002145 E535              MOV      A,pBuf+01H
002147 AC34              MOV      R4,pBuf
002149 7002              JNZ      ?C1017?DRV_C2M
00214B 0534              INC      pBuf
00214D         ?C1017?DRV_C2M:
00214D 14                DEC      A
00214E F582              MOV      DPL,A
002150 8C83              MOV      DPH,R4
002152 EF                MOV      A,R7
002153 F0                MOVX     @DPTR,A
  614:     }
002154 80E1              SJMP     ?C0959?DRV_C2M
002156         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
002156 D208              SETB     bDone
  616: 
  617: _exit:
002158         _exit:
  618:     return bDone;
002158 A208              MOV      C,bDone
  619: }
00215A 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
00215B D161              ACALL    ?L?COM0008
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
00215D 90000A            MOV      DPTR,#vFrame+0AH
002160 E0                MOVX     A,@DPTR
002161 7004              JNZ      ?C0044?PKT_C2M
002163 A3                INC      DPTR
002164 E0                MOVX     A,@DPTR
002165 6406              XRL      A,#06H
002167         ?C0044?PKT_C2M:
002167 700B              JNZ      ?C0026?PKT_C2M
002169 D3                SETB     C
00216A E531              MOV      A,vLen+01H
00216C 9432              SUBB     A,#032H
00216E E530              MOV      A,vLen
002170 9404              SUBB     A,#04H
002172 4005              JC       ?C0030?PKT_C2M
002174         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
002174 7E03              MOV      R6,#03H
002176 7F04              MOV      R7,#04H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 48


002178 22                RET      
   79:     }
002179         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
002179 E531              MOV      A,vLen+01H
00217B 2406              ADD      A,#06H
00217D 90000B            MOV      DPTR,#vFrame+0BH
002180 F0                MOVX     @DPTR,A
002181 E4                CLR      A
002182 3530              ADDC     A,vLen
002184 90000A            MOV      DPTR,#vFrame+0AH
002187 F0                MOVX     @DPTR,A
002188         ?C0031?PKT_C2M:
   83:     while (vLen != 0)
002188 E531              MOV      A,vLen+01H
00218A 4530              ORL      A,vLen
00218C 602C              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
00218E C3                CLR      C
00218F E530              MOV      A,vLen
002191 9401              SUBB     A,#01H
002193 5006              JNC      ?C0033?PKT_C2M
002195 AE30              MOV      R6,vLen
002197 AF31              MOV      R7,vLen+01H
002199 8004              SJMP     ?C0034?PKT_C2M
00219B         ?C0033?PKT_C2M:
00219B 7E01              MOV      R6,#01H
00219D 7F00              MOV      R7,#00H
00219F         ?C0034?PKT_C2M:
00219F 8E32              MOV      vReadLen,R6
0021A1 8F33              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
0021A3 AB33              MOV      R3,vReadLen+01H
0021A5 AD2F              MOV      R5,vAddr+01H
0021A7 AC2E              MOV      R4,vAddr
0021A9 AF2D              MOV      R7,pBuf+01H
0021AB AE2C              MOV      R6,pBuf
0021AD 11E3              ACALL    _DRV_C2M_FlashRead
0021AF 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
0021B1 7E03              MOV      R6,#03H
0021B3 7F40              MOV      R7,#040H
0021B5 22                RET      
   94:         }
0021B6         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
0021B6 D13B              ACALL    ?L?COM000C
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
0021B8 80CE              SJMP     ?C0031?PKT_C2M
0021BA         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
0021BA 7E01              MOV      R6,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 49


0021BC 7F40              MOV      R7,#040H
  102: }
0021BE 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
0021BF D161              ACALL    ?L?COM0008
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
0021C1 2406              ADD      A,#06H
0021C3 FF                MOV      R7,A
0021C4 E4                CLR      A
0021C5 3530              ADDC     A,vLen
0021C7 FE                MOV      R6,A
0021C8 90000A            MOV      DPTR,#vFrame+0AH
0021CB E0                MOVX     A,@DPTR
0021CC 6E                XRL      A,R6
0021CD 7003              JNZ      ?C0045?PKT_C2M
0021CF A3                INC      DPTR
0021D0 E0                MOVX     A,@DPTR
0021D1 6F                XRL      A,R7
0021D2         ?C0045?PKT_C2M:
0021D2 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
0021D4 7E03              MOV      R6,#03H
0021D6 7F04              MOV      R7,#04H
0021D8 22                RET      
  114:     }
0021D9         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
0021D9 E531              MOV      A,vLen+01H
0021DB 4530              ORL      A,vLen
0021DD 602D              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
0021DF C3                CLR      C
0021E0 E530              MOV      A,vLen
0021E2 9401              SUBB     A,#01H
0021E4 5006              JNC      ?C0040?PKT_C2M
0021E6 AE30              MOV      R6,vLen
0021E8 AF31              MOV      R7,vLen+01H
0021EA 8004              SJMP     ?C0041?PKT_C2M
0021EC         ?C0040?PKT_C2M:
0021EC 7E01              MOV      R6,#01H
0021EE 7F00              MOV      R7,#00H
0021F0         ?C0041?PKT_C2M:
0021F0 8E32              MOV      vWriteLen,R6
0021F2 8F33              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 50


  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
0021F4 AB33              MOV      R3,vWriteLen+01H
0021F6 AD2D              MOV      R5,pBuf+01H
0021F8 AC2C              MOV      R4,pBuf
0021FA AF2F              MOV      R7,vAddr+01H
0021FC AE2E              MOV      R6,vAddr
0021FE 12172C            LCALL    _DRV_C2M_FlashWrite
002201 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
002203 7E03              MOV      R6,#03H
002205 7F40              MOV      R7,#040H
002207 22                RET      
  128:         }
002208         ?C0042?PKT_C2M:
  129: 
  130:         pBuf  += vWriteLen;
002208 D13B              ACALL    ?L?COM000C
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
00220A 80CD              SJMP     ?C0038?PKT_C2M
00220C         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
00220C 7E01              MOV      R6,#01H
00220E 7F40              MOV      R7,#040H
  136: }
002210 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
   41: 
002211 752401            MOV      PT_YIELD_FLAG,#01H
002214         ?C0001?THREAD_IDLE:
002214 E510              MOV      A,vTCB_Idle
002216 7031              JNZ      ?C0002?THREAD_IDLE
002218 E511              MOV      A,vTCB_Idle+01H
00221A 24CF              ADD      A,#0CFH
00221C 6019              JZ       ?C0012?THREAD_IDLE
00221E 2431              ADD      A,#031H
002220 7027              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
002222         ?C0004?THREAD_IDLE:
   43:     {
   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
002222 120042            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
002225 E50F              MOV      A,vTickCount+03H
002227 2432              ADD      A,#032H
002229 B1F8              ACALL    ?L?COM0020
00222B 9004BC            MOV      DPTR,#vEndTick
00222E 1208B2            LCALL    ?C?LSTXDATA
002231 751000            MOV      vTCB_Idle,#00H
002234 751131            MOV      vTCB_Idle+01H,#031H
002237         ?C0012?THREAD_IDLE:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 51


002237 00                NOP      
002238 9004BC            MOV      DPTR,#vEndTick
00223B B1BB              ACALL    ?L?COM000D
00223D 7F00              MOV      R7,#00H
00223F 5002              JNC      ?C0014?THREAD_IDLE
002241 7F01              MOV      R7,#01H
002243         ?C0014?THREAD_IDLE:
002243         ?C0015?THREAD_IDLE:
002243 EF                MOV      A,R7
002244 60DC              JZ       ?C0004?THREAD_IDLE
002246 7F00              MOV      R7,#00H
002248 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
002249         ?C0002?THREAD_IDLE:
002249 E4                CLR      A
00224A F524              MOV      PT_YIELD_FLAG,A
00224C F510              MOV      vTCB_Idle,A
00224E F511              MOV      vTCB_Idle+01H,A
002250 7F03              MOV      R7,#03H
   53: }
002252 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
002253 752401            MOV      PT_YIELD_FLAG,#01H
002256         ?C0001?THREAD_LED:
002256 E512              MOV      A,vTCB_LED
002258 7031              JNZ      ?C0002?THREAD_LED
00225A E513              MOV      A,vTCB_LED+01H
00225C 24C8              ADD      A,#0C8H
00225E 6019              JZ       ?C0015?THREAD_LED
002260 2438              ADD      A,#038H
002262 7027              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_STATUS_OUT), LOW);
   48:         }
   49:         else
   50:       #endif
   51:         {
002264         ?C0008?THREAD_LED:
   52:             /* system running abnormally */
   53:             DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
002264 63A008            XRL      P2,#08H
   54:         }
   55: 
   56:         OS_SLEEP_MS(&vTCB_LED, 100);
002267 E50F              MOV      A,vTickCount+03H
002269 2464              ADD      A,#064H
00226B B1F8              ACALL    ?L?COM0020
00226D 9004C0            MOV      DPTR,#vEndTick
002270 1208B2            LCALL    ?C?LSTXDATA
002273 751200            MOV      vTCB_LED,#00H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 52


002276 751338            MOV      vTCB_LED+01H,#038H
002279         ?C0015?THREAD_LED:
002279 00                NOP      
00227A 9004C0            MOV      DPTR,#vEndTick
00227D B1BB              ACALL    ?L?COM000D
00227F 7F00              MOV      R7,#00H
002281 5002              JNC      ?C0017?THREAD_LED
002283 7F01              MOV      R7,#01H
002285         ?C0017?THREAD_LED:
002285         ?C0018?THREAD_LED:
002285 EF                MOV      A,R7
002286 60DC              JZ       ?C0008?THREAD_LED
002288 7F00              MOV      R7,#00H
00228A 22                RET      
   57:     }
   58: 
   59:     PT_END(&vTCB_LED);
00228B         ?C0002?THREAD_LED:
00228B E4                CLR      A
00228C F524              MOV      PT_YIELD_FLAG,A
00228E F512              MOV      vTCB_LED,A
002290 F513              MOV      vTCB_LED+01H,A
002292 7F03              MOV      R7,#03H
   60: }
002294 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   61: void main(void)
   62: {
   63: 	/* previous init */
   64: 	DRV_PreInit();
002295 51C7              ACALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
002297 51B2              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
002299 121FF7            LCALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
00229C         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
00229C E4                CLR      A
00229D F523              MOV      i,A
00229F         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
00229F E523              MOV      A,i
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 53


0022A1 75F006            MOV      B,#06H
0022A4 A4                MUL      AB
0022A5 2452              ADD      A,#LOW aThreadList
0022A7 F582              MOV      DPL,A
0022A9 E4                CLR      A
0022AA 3415              ADDC     A,#HIGH aThreadList
0022AC D126              ACALL    ?L?COM0016
0022AE 40EF              JC       ?C0003?OS
0022B0 80EA              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
0022B2 E4                CLR      A
0022B3 F523              MOV      i,A
0022B5         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
0022B5 E523              MOV      A,i
0022B7 75F006            MOV      B,#06H
0022BA A4                MUL      AB
0022BB 2455              ADD      A,#LOW aThreadList+03H
0022BD F582              MOV      DPL,A
0022BF E4                CLR      A
0022C0 3415              ADDC     A,#HIGH aThreadList+03H
0022C2 D126              ACALL    ?L?COM0016
0022C4 40EF              JC       ?C0007?OS
   83:     }
   84: }
0022C6 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
0022C7 E4                CLR      A
0022C8 F5A8              MOV      IE,A
0022CA F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
   94:     DRV_CLOCK_Init();
0022CC 75B283            MOV      OSCICN,#083H
0022CF         ?C0023?DRV:
0022CF E5B2              MOV      A,OSCICN
0022D1 C4                SWAP     A
0022D2 13                RRC      A
0022D3 13                RRC      A
0022D4 5403              ANL      A,#03H
0022D6 13                RRC      A
0022D7 50F6              JNC      ?C0023?DRV
0022D9         ?C0024?DRV:
0022D9 75B980            MOV      CLKMUL,#080H
0022DC 7F05              MOV      R7,#05H
0022DE 7E00              MOV      R6,#00H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 54


0022E0 12170C            LCALL    _DRV_CPU_DelayUs
0022E3 43B9C0            ORL      CLKMUL,#0C0H
0022E6         ?C0025?DRV:
0022E6 E5B9              MOV      A,CLKMUL
0022E8 C4                SWAP     A
0022E9 13                RRC      A
0022EA 5407              ANL      A,#07H
0022EC 13                RRC      A
0022ED 50F7              JNC      ?C0025?DRV
0022EF         ?C0026?DRV:
0022EF 75A902            MOV      CLKSEL,#02H
0022F2 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
0022F5 711E              ACALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
0022F7 438E08            ORL      CKCON,#08H
0022FA E589              MOV      A,TMOD
0022FC 540F              ANL      A,#0FH
0022FE 4420              ORL      A,#020H
002300 F589              MOV      TMOD,A
002302 758D98            MOV      TH1,#098H
002305 D28E              SETB     TR1
002307 AFD4              MOV      R7,P0SKIP
002309 EF                MOV      A,R7
00230A 54EF              ANL      A,#0EFH
00230C FF                MOV      R7,A
00230D 8FD4              MOV      P0SKIP,R7
00230F AFD4              MOV      R7,P0SKIP
002311 EF                MOV      A,R7
002312 54DF              ANL      A,#0DFH
002314 FF                MOV      R7,A
002315 8FD4              MOV      P0SKIP,R7
002317 43E101            ORL      XBR0,#01H
00231A 759802            MOV      SCON0,#02H
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
  106:     DRV_PCA_Init();
  107:   #endif
  108: 
  109:   #if DRV_WATCHDOG_SUPPORT
  110: 	DRV_WATCHDOG_Enable();
  111:   #endif
  112: }
00231D 22                RET      
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
00231E 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
002321 7590F6            MOV      P1,#0F6H
   42:     P2      = _PORT_INIT(P2);
002324 75A0FF            MOV      P2,#0FFH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 55


   43:     P3      = _PORT_INIT(P3);
002327 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
00232A 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
00232D 75F2FF            MOV      P1MDIN,#0FFH
   46:     P2MDIN  = _PORT_MDIN(P2);
002330 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
002333 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
002336 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
002339 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
00233C 75A60A            MOV      P2MDOUT,#0AH
   51:     P3MDOUT = _PORT_MDOUT(P3);
00233F E4                CLR      A
002340 F5A7              MOV      P3MDOUT,A
   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
002342 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
002345 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
002348 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
00234B F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
00234D 75E240            MOV      XBR1,#040H
   61: }
002350 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
002351 438E10            ORL      CKCON,#010H
002354 E4                CLR      A
002355 F5C8              MOV      TMR2CN,A
002357 75CA40            MOV      TMR2RLL,#040H
00235A 75CC40            MOV      TMR2L,#040H
00235D 75CBA2            MOV      TMR2RLH,#0A2H
002360 75CDA2            MOV      TMR2H,#0A2H
002363 C2CF              CLR      TF2H
002365 D2CA              SETB     TR2
002367 C2BD              CLR      PT2
002369 D2AD              SETB     ET2
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 56


00236B F50F              MOV      vTickCount+03H,A
00236D F50E              MOV      vTickCount+02H,A
00236F F50D              MOV      vTickCount+01H,A
002371 F50C              MOV      vTickCount,A
   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
002373 7180              ACALL    DRV_USB_Init
;----                  JMP      DRV_C2M_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------


----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
002375 53A57F            ANL      P1MDOUT,#07FH
002378 53A6FE            ANL      P2MDOUT,#0FEH
00237B D297              SETB     IO_DUT_C2M_SCL
00237D D2A0              SETB     IO_DUT_C2M_SDA
  693: 
00237F 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   44: void DRV_USB_Init(void)
   45: {
   46:     static SEG_CODE UINT8 aVN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_VendorName;
   47:     static SEG_CODE UINT8 aPN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_PartNumber;
   48:     static SEG_CODE UINT8 aSN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_SerialNumber;
   49:     UINT8   vData;
   50:     UINT8   vLoop;
   51: 
   52:     /* init USB manufacture string */
   53:     aManufacturerStr[1] = 0x03;
002380 900445            MOV      DPTR,#aManufacturerStr+01H
002383 7403              MOV      A,#03H
002385 F0                MOVX     @DPTR,A
   54:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002386 7F02              MOV      R7,#02H
002388         ?C0001?DRV_USB:
002388 EF                MOV      A,R7
002389 C3                CLR      C
00238A 9422              SUBB     A,#022H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 57


00238C 5029              JNC      ?C0002?DRV_USB
   55:     {
   56:         vData = aVN[(vLoop>>1)-1];
00238E EF                MOV      A,R7
00238F C3                CLR      C
002390 13                RRC      A
002391 90151E            MOV      DPTR,#aVN-01H
002394 B18A              ACALL    ?L?COM0027
002396 401F              JC       ?C0002?DRV_USB
002398 E524              MOV      A,vData
00239A 947F              SUBB     A,#07FH
00239C 5019              JNC      ?C0002?DRV_USB
   57: 
   58:         if ((vData < 0x20) || (vData >= 0x7F))
   59:         {
   60:             break;
   61:         }
00239E         ?C0004?DRV_USB:
   62: 
   63:         aManufacturerStr[vLoop+0] = vData;
00239E 7444              MOV      A,#LOW aManufacturerStr
0023A0 2F                ADD      A,R7
0023A1 F582              MOV      DPL,A
0023A3 E4                CLR      A
0023A4 3404              ADDC     A,#HIGH aManufacturerStr
0023A6 F583              MOV      DPH,A
0023A8 E524              MOV      A,vData
0023AA F0                MOVX     @DPTR,A
   64:         aManufacturerStr[vLoop+1] = 0;
0023AB 7445              MOV      A,#LOW aManufacturerStr+01H
0023AD 2F                ADD      A,R7
0023AE F582              MOV      DPL,A
0023B0 E4                CLR      A
0023B1 3404              ADDC     A,#HIGH aManufacturerStr+01H
0023B3 B183              ACALL    ?L?COM0026
0023B5 80D1              SJMP     ?C0001?DRV_USB
0023B7         ?C0002?DRV_USB:
   65:     }
   66:     aManufacturerStr[0] = vLoop;
0023B7 900444            MOV      DPTR,#aManufacturerStr
0023BA EF                MOV      A,R7
0023BB F0                MOVX     @DPTR,A
   67: 
   68:     /* init USB product string */
   69:     aProductStr[1] = 0x03;
0023BC 900467            MOV      DPTR,#aProductStr+01H
0023BF 7403              MOV      A,#03H
0023C1 F0                MOVX     @DPTR,A
   70:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
0023C2 7F02              MOV      R7,#02H
0023C4         ?C0006?DRV_USB:
0023C4 EF                MOV      A,R7
0023C5 C3                CLR      C
0023C6 9422              SUBB     A,#022H
0023C8 5029              JNC      ?C0007?DRV_USB
   71:     {
   72:         vData = aPN[(vLoop>>1)-1];
0023CA EF                MOV      A,R7
0023CB C3                CLR      C
0023CC 13                RRC      A
0023CD 90152F            MOV      DPTR,#aPN-01H
0023D0 B18A              ACALL    ?L?COM0027
0023D2 401F              JC       ?C0007?DRV_USB
0023D4 E524              MOV      A,vData
0023D6 947F              SUBB     A,#07FH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 58


0023D8 5019              JNC      ?C0007?DRV_USB
   73: 
   74:         if ((vData < 0x20) || (vData >= 0x7F))
   75:         {
   76:             break;
   77:         }
0023DA         ?C0009?DRV_USB:
   78: 
   79:         aProductStr[vLoop+0] = vData;
0023DA 7466              MOV      A,#LOW aProductStr
0023DC 2F                ADD      A,R7
0023DD F582              MOV      DPL,A
0023DF E4                CLR      A
0023E0 3404              ADDC     A,#HIGH aProductStr
0023E2 F583              MOV      DPH,A
0023E4 E524              MOV      A,vData
0023E6 F0                MOVX     @DPTR,A
   80:         aProductStr[vLoop+1] = 0;
0023E7 7467              MOV      A,#LOW aProductStr+01H
0023E9 2F                ADD      A,R7
0023EA F582              MOV      DPL,A
0023EC E4                CLR      A
0023ED 3404              ADDC     A,#HIGH aProductStr+01H
0023EF B183              ACALL    ?L?COM0026
0023F1 80D1              SJMP     ?C0006?DRV_USB
0023F3         ?C0007?DRV_USB:
   81:     }
   82:     aProductStr[0] = vLoop;
0023F3 900466            MOV      DPTR,#aProductStr
0023F6 EF                MOV      A,R7
0023F7 F0                MOVX     @DPTR,A
   83: 
   84:     /* init USB serial number string */
   85:     aSerialNumberStr[1] = 0x03;
0023F8 900489            MOV      DPTR,#aSerialNumberStr+01H
0023FB 7403              MOV      A,#03H
0023FD F0                MOVX     @DPTR,A
   86:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
0023FE 7F02              MOV      R7,#02H
002400         ?C0011?DRV_USB:
002400 EF                MOV      A,R7
002401 C3                CLR      C
002402 9422              SUBB     A,#022H
002404 5029              JNC      ?C0012?DRV_USB
   87:     {
   88:         vData = aSN[(vLoop>>1)-1];
002406 EF                MOV      A,R7
002407 C3                CLR      C
002408 13                RRC      A
002409 901540            MOV      DPTR,#aSN-01H
00240C B18A              ACALL    ?L?COM0027
00240E 401F              JC       ?C0012?DRV_USB
002410 E524              MOV      A,vData
002412 947F              SUBB     A,#07FH
002414 5019              JNC      ?C0012?DRV_USB
   89: 
   90:         if ((vData < 0x20) || (vData >= 0x7F))
   91:         {
   92:             break;
   93:         }
002416         ?C0014?DRV_USB:
   94: 
   95:         aSerialNumberStr[vLoop+0] = vData;
002416 7488              MOV      A,#LOW aSerialNumberStr
002418 2F                ADD      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 59


002419 F582              MOV      DPL,A
00241B E4                CLR      A
00241C 3404              ADDC     A,#HIGH aSerialNumberStr
00241E F583              MOV      DPH,A
002420 E524              MOV      A,vData
002422 F0                MOVX     @DPTR,A
   96:         aSerialNumberStr[vLoop+1] = 0;
002423 7489              MOV      A,#LOW aSerialNumberStr+01H
002425 2F                ADD      A,R7
002426 F582              MOV      DPL,A
002428 E4                CLR      A
002429 3404              ADDC     A,#HIGH aSerialNumberStr+01H
00242B B183              ACALL    ?L?COM0026
00242D 80D1              SJMP     ?C0011?DRV_USB
00242F         ?C0012?DRV_USB:
   97:     }
   98:     aSerialNumberStr[0] = vLoop;
00242F 900488            MOV      DPTR,#aSerialNumberStr
002432 EF                MOV      A,R7
002433 F0                MOVX     @DPTR,A
   99: 
  100:     /* set USB0 to the high priority level interrupt */
  101:     EIP1 |= (1<<1);
002434 43F602            ORL      EIP1,#02H
  102: 
  103:     /* init USB device */
  104:     USB_Clock_Start();
002437 120046            LCALL    USB_Clock_Start
  105:     USB_Init(DRV_USB_VID,
00243A 9004B1            MOV      DPTR,#?_USB_Init?BYTE+07H
00243D 7401              MOV      A,#01H
00243F F0                MOVX     @DPTR,A
002440 A3                INC      DPTR
002441 7404              MOV      A,#HIGH aProductStr
002443 F0                MOVX     @DPTR,A
002444 A3                INC      DPTR
002445 7466              MOV      A,#LOW aProductStr
002447 F0                MOVX     @DPTR,A
002448 A3                INC      DPTR
002449 7401              MOV      A,#01H
00244B F0                MOVX     @DPTR,A
00244C A3                INC      DPTR
00244D 7404              MOV      A,#HIGH aSerialNumberStr
00244F F0                MOVX     @DPTR,A
002450 A3                INC      DPTR
002451 7488              MOV      A,#LOW aSerialNumberStr
002453 F0                MOVX     @DPTR,A
002454 A3                INC      DPTR
002455 74FA              MOV      A,#0FAH
002457 F0                MOVX     @DPTR,A
002458 A3                INC      DPTR
002459 7480              MOV      A,#080H
00245B F0                MOVX     @DPTR,A
00245C A3                INC      DPTR
00245D 7401              MOV      A,#01H
00245F F0                MOVX     @DPTR,A
002460 A3                INC      DPTR
002461 E4                CLR      A
002462 F0                MOVX     @DPTR,A
002463 7B01              MOV      R3,#01H
002465 7A04              MOV      R2,#HIGH aManufacturerStr
002467 7944              MOV      R1,#LOW aManufacturerStr
002469 7D61              MOV      R5,#061H
00246B 7CEA              MOV      R4,#0EAH
00246D 7FC4              MOV      R7,#0C4H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 60


00246F 7E10              MOV      R6,#010H
002471 120DB4            LCALL    _USB_Init
  106:              DRV_USB_PID,
  107:              aManufacturerStr,
  108:              aProductStr,
  109:              aSerialNumberStr,
  110:              0xFA,      /* maximum current: 500mA */
  111:              0x80,      /* bus-powered, remote wakeup is unsupported */
  112:              0x100);    /* device release number 1.00 */
  113: 
  114:     /* the USB_Init() API will auto-enable global interrupt,
  115:      * disable it here, and will be enabled later.
  116:      */
  117:     DRV_INT_GlobalDisableInterrupt();
002474 C2AF              CLR      EA
  118: }
002476 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002477 8F82              MOV      DPL,R7
002479 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
   70:     if (DRV_INT_IsGlobalInterruptEnable())
00247B 30AF22            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
00247E EF                MOV      A,R7
00247F 250F              ADD      A,vTickCount+03H
002481 F537              MOV      vStopTick+03H,A
002483 EE                MOV      A,R6
002484 350E              ADDC     A,vTickCount+02H
002486 F536              MOV      vStopTick+02H,A
002488 E4                CLR      A
002489 350D              ADDC     A,vTickCount+01H
00248B F535              MOV      vStopTick+01H,A
00248D E4                CLR      A
00248E 350C              ADDC     A,vTickCount
002490 F534              MOV      vStopTick,A
002492         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
002492 AF37              MOV      R7,vStopTick+03H
002494 AE36              MOV      R6,vStopTick+02H
002496 AD35              MOV      R5,vStopTick+01H
002498 AC34              MOV      R4,vStopTick
00249A B1C6              ACALL    ?L?COM000E
00249C 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
00249E 80F2              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
0024A0         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 61


0024A0 E582              MOV      A,DPL
0024A2 1582              DEC      DPL
0024A4 AE83              MOV      R6,DPH
0024A6 7002              JNZ      ?C0012?DRV_CPU
0024A8 1583              DEC      DPH
0024AA         ?C0012?DRV_CPU:
0024AA 4E                ORL      A,R6
0024AB 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
0024AD 7FE8              MOV      R7,#0E8H
0024AF 7E03              MOV      R6,#03H
0024B1 12170C            LCALL    _DRV_CPU_DelayUs
   91:     	}
0024B4 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
0024B6         ?C0010?DRV_CPU:
0024B6 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
0024B7 C0E0              PUSH     ACC
0024B9 C0D0              PUSH     PSW
0024BB 75D000            MOV      PSW,#00H
0024BE C004              PUSH     AR4
0024C0 C005              PUSH     AR5
0024C2 C006              PUSH     AR6
0024C4 C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
0024C6 C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
0024C8 AF0F              MOV      R7,vTickCount+03H
0024CA AE0E              MOV      R6,vTickCount+02H
0024CC AD0D              MOV      R5,vTickCount+01H
0024CE AC0C              MOV      R4,vTickCount
0024D0 EF                MOV      A,R7
0024D1 2401              ADD      A,#01H
0024D3 F50F              MOV      vTickCount+03H,A
0024D5 E4                CLR      A
0024D6 3E                ADDC     A,R6
0024D7 F50E              MOV      vTickCount+02H,A
0024D9 E4                CLR      A
0024DA 3D                ADDC     A,R5
0024DB F50D              MOV      vTickCount+01H,A
0024DD E4                CLR      A
0024DE 3C                ADDC     A,R4
0024DF F50C              MOV      vTickCount,A
   45: }
0024E1 D007              POP      AR7
0024E3 D006              POP      AR6
0024E5 D005              POP      AR5
0024E7 D004              POP      AR4
0024E9 D0D0              POP      PSW
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 62


0024EB D0E0              POP      ACC
0024ED 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
  230:     c2m_SetIns(0x1);    /* instruction: write data */
0024EE D213              SETB     bIns0
0024F0 C214              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
0024F2 C215              CLR      bLength0
0024F4 C216              CLR      bLength1
  232:     c2m_SetData(vData);
0024F6 8F20              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
0024F8 30AF05            JNB      EA,?C0355?DRV_C2M
0024FB C2AF              CLR      EA
0024FD D3                SETB     C
0024FE 8001              SJMP     ?C0356?DRV_C2M
002500         ?C0355?DRV_C2M:
002500 C3                CLR      C
002501         ?C0356?DRV_C2M:
002501 B198              ACALL    ?L?COM000A
002503 00                NOP      
002504 00                NOP      
002505 00                NOP      
002506 00                NOP      
002507 B1EC              ACALL    ?L?COM0012
002509 00                NOP      
00250A 00                NOP      
00250B 00                NOP      
00250C 00                NOP      
00250D B1D9              ACALL    ?L?COM0018
00250F 00                NOP      
002510 00                NOP      
002511 00                NOP      
002512 00                NOP      
002513 D196              ACALL    ?L?COM002B
002515 00                NOP      
002516 00                NOP      
002517 00                NOP      
002518 00                NOP      
002519 D18D              ACALL    ?L?COM002A
00251B 00                NOP      
00251C 00                NOP      
00251D 00                NOP      
00251E 00                NOP      
00251F D1DE              ACALL    ?L?COM0033
002521 00                NOP      
002522 00                NOP      
002523 00                NOP      
002524 00                NOP      
002525 D1D5              ACALL    ?L?COM0032
002527 00                NOP      
002528 00                NOP      
002529 00                NOP      
00252A 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 63


00252B D1CC              ACALL    ?L?COM0031
00252D 00                NOP      
00252E 00                NOP      
00252F 00                NOP      
002530 00                NOP      
002531 D1C3              ACALL    ?L?COM0030
002533 00                NOP      
002534 00                NOP      
002535 00                NOP      
002536 00                NOP      
002537 D1BA              ACALL    ?L?COM002F
002539 00                NOP      
00253A 00                NOP      
00253B 00                NOP      
00253C 00                NOP      
00253D D1B1              ACALL    ?L?COM002E
00253F 00                NOP      
002540 00                NOP      
002541 00                NOP      
002542 00                NOP      
002543 D1A8              ACALL    ?L?COM002D
002545 00                NOP      
002546 00                NOP      
002547 00                NOP      
002548 00                NOP      
002549 D19F              ACALL    ?L?COM002C
00254B 00                NOP      
00254C 00                NOP      
00254D 00                NOP      
00254E 00                NOP      
00254F B1E2              ACALL    ?L?COM001C
002551 00                NOP      
002552 D297              SETB     IO_DUT_C2M_SCL
002554 00                NOP      
002555 00                NOP      
  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
  240:     c2m_TxByte();       /* tx address */
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
002556 754027            MOV      _timeout,#027H
002559 754110            MOV      _timeout+01H,#010H
00255C         ?C0557?DRV_C2M:
00255C 00                NOP      
00255D 00                NOP      
00255E C297              CLR      IO_DUT_C2M_SCL
002560 00                NOP      
002561 00                NOP      
002562 121702            LCALL    ?L?COM0001
002565 20000D            JB       bC2Bit0,?C0570?DRV_C2M
002568 E541              MOV      A,_timeout+01H
00256A 1541              DEC      _timeout+01H
00256C AE40              MOV      R6,_timeout
00256E 7002              JNZ      ?C1013?DRV_C2M
002570 1540              DEC      _timeout
002572         ?C1013?DRV_C2M:
002572 4E                ORL      A,R6
002573 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
002575         ?C0570?DRV_C2M:
002575 C11B              AJMP     ?L?COM0010
  244: 
  245:     /* unlock globally interrupt */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 64


  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
002577 783A              MOV      R0,#LOW _timeout
002579         ?L?COM0004:
002579 74FF              MOV      A,#0FFH
00257B 120894            LCALL    ?C?LLDIIDATA8
00257E EC                MOV      A,R4
00257F 4D                ORL      A,R5
002580 4E                ORL      A,R6
002581 4F                ORL      A,R7
002582 22                RET      
----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
002583 F583              MOV      DPH,A
002585 E4                CLR      A
002586 F0                MOVX     @DPTR,A
002587 0F                INC      R7
002588 0F                INC      R7
002589 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
00258A 93                MOVC     A,@A+DPTR
00258B F524              MOV      vData,A
00258D C3                CLR      C
00258E 9420              SUBB     A,#020H
002590 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION ?L?COM0015 (BEGIN) -----
002591 121E86            LCALL    c2m_ReadDR
002594 EF                MOV      A,R7
002595 640D              XRL      A,#0DH
002597 22                RET      
----- FUNCTION ?L?COM0015 (END) -------


----- FUNCTION ?L?COM000A (BEGIN) -----
002598 9209              MOV      bIntState,C
00259A 53A6FE            ANL      P2MDOUT,#0FEH
00259D 43A580            ORL      P1MDOUT,#080H
0025A0         ?L?COM000B:
0025A0 A211              MOV      C,bHigh
0025A2 92A0              MOV      IO_DUT_C2M_SDA,C
0025A4 C297              CLR      IO_DUT_C2M_SCL
0025A6 22                RET      
----- FUNCTION ?L?COM000A (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
0025A7 1217C1            LCALL    _drv_c2m_WriteData
0025AA AF03              MOV      R7,AR3
0025AC         ?L?COM0006:
0025AC 1217C1            LCALL    _drv_c2m_WriteData
0025AF         ?L?COM0007:
0025AF E4                CLR      A
0025B0 753D10            MOV      _timeout+03H,#010H
0025B3 753C27            MOV      _timeout+02H,#027H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 65


0025B6 F53B              MOV      _timeout+01H,A
0025B8 F53A              MOV      _timeout,A
0025BA 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM000D (BEGIN) -----
0025BB E0                MOVX     A,@DPTR
0025BC FC                MOV      R4,A
0025BD A3                INC      DPTR
0025BE E0                MOVX     A,@DPTR
0025BF FD                MOV      R5,A
0025C0 A3                INC      DPTR
0025C1 E0                MOVX     A,@DPTR
0025C2 FE                MOV      R6,A
0025C3 A3                INC      DPTR
0025C4 E0                MOVX     A,@DPTR
0025C5 FF                MOV      R7,A
0025C6         ?L?COM000E:
0025C6 AB0F              MOV      R3,vTickCount+03H
0025C8 AA0E              MOV      R2,vTickCount+02H
0025CA A90D              MOV      R1,vTickCount+01H
0025CC A80C              MOV      R0,vTickCount
0025CE C3                CLR      C
0025CF 020881            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM000D (END) -------


----- FUNCTION ?L?COM0017 (BEGIN) -----
0025D2 E539              MOV      A,vLen+01H
0025D4 1539              DEC      vLen+01H
0025D6 AE38              MOV      R6,vLen
0025D8 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM0018 (BEGIN) -----
0025D9 D297              SETB     IO_DUT_C2M_SCL
0025DB A214              MOV      C,bIns1
0025DD 92A0              MOV      IO_DUT_C2M_SDA,C
0025DF C297              CLR      IO_DUT_C2M_SCL
0025E1 22                RET      
----- FUNCTION ?L?COM0018 (END) -------


----- FUNCTION ?L?COM001C (BEGIN) -----
0025E2 D297              SETB     IO_DUT_C2M_SCL
0025E4 53A6FE            ANL      P2MDOUT,#0FEH
0025E7 D2A0              SETB     IO_DUT_C2M_SDA
0025E9 C297              CLR      IO_DUT_C2M_SCL
0025EB 22                RET      
----- FUNCTION ?L?COM001C (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
0025EC D297              SETB     IO_DUT_C2M_SCL
0025EE 43A601            ORL      P2MDOUT,#01H
0025F1 A213              MOV      C,bIns0
0025F3 92A0              MOV      IO_DUT_C2M_SDA,C
0025F5 C297              CLR      IO_DUT_C2M_SCL
0025F7 22                RET      
----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0020 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 66


0025F8 FF                MOV      R7,A
0025F9 E4                CLR      A
0025FA 350E              ADDC     A,vTickCount+02H
0025FC FE                MOV      R6,A
0025FD E4                CLR      A
0025FE 350D              ADDC     A,vTickCount+01H
002600 FD                MOV      R5,A
002601 E4                CLR      A
002602 350C              ADDC     A,vTickCount
002604 FC                MOV      R4,A
002605 22                RET      
----- FUNCTION ?L?COM0020 (END) -------


----- FUNCTION ?L?COM0013 (BEGIN) -----
002606 1217C1            LCALL    _drv_c2m_WriteData
002609 E4                CLR      A
00260A 752F10            MOV      _timeout+03H,#010H
00260D 752E27            MOV      _timeout+02H,#027H
002610 F52D              MOV      _timeout+01H,A
002612 F52C              MOV      _timeout,A
002614 22                RET      
----- FUNCTION ?L?COM0013 (END) -------


----- FUNCTION ?L?COM000F (BEGIN) -----
002615 A2A0              MOV      C,IO_DUT_C2M_SDA
002617 D297              SETB     IO_DUT_C2M_SCL
002619 9207              MOV      bC2Bit7,C
00261B         ?L?COM0010:
00261B 53A6FE            ANL      P2MDOUT,#0FEH
00261E         ?L?COM0011:
00261E 53A57F            ANL      P1MDOUT,#07FH
002621 A209              MOV      C,bIntState
002623 92AF              MOV      EA,C
002625 22                RET      
----- FUNCTION ?L?COM000F (END) -------


----- FUNCTION ?L?COM0016 (BEGIN) -----
002626 F583              MOV      DPH,A
002628 7401              MOV      A,#01H
00262A 93                MOVC     A,@A+DPTR
00262B FA                MOV      R2,A
00262C 7402              MOV      A,#02H
00262E 93                MOVC     A,@A+DPTR
00262F F9                MOV      R1,A
002630 1208EB            LCALL    ?C?ICALL
002633 0523              INC      i
002635 E523              MOV      A,i
002637 C3                CLR      C
002638 9403              SUBB     A,#03H
00263A 22                RET      
----- FUNCTION ?L?COM0016 (END) -------


----- FUNCTION ?L?COM000C (BEGIN) -----
00263B E533              MOV      A,vWriteLen+01H
00263D 252D              ADD      A,pBuf+01H
00263F F52D              MOV      pBuf+01H,A
002641 E532              MOV      A,vWriteLen
002643 352C              ADDC     A,pBuf
002645 F52C              MOV      pBuf,A
002647 E533              MOV      A,vWriteLen+01H
002649 252F              ADD      A,vAddr+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 67


00264B F52F              MOV      vAddr+01H,A
00264D E532              MOV      A,vWriteLen
00264F 352E              ADDC     A,vAddr
002651 F52E              MOV      vAddr,A
002653 C3                CLR      C
002654 E531              MOV      A,vLen+01H
002656 9533              SUBB     A,vWriteLen+01H
002658 F531              MOV      vLen+01H,A
00265A E530              MOV      A,vLen
00265C 9532              SUBB     A,vWriteLen
00265E F530              MOV      vLen,A
002660 22                RET      
----- FUNCTION ?L?COM000C (END) -------


----- FUNCTION ?L?COM0008 (BEGIN) -----
002661 7B0C              MOV      R3,#LOW vFrame+0CH
002663 7A00              MOV      R2,#HIGH vFrame+0CH
002665 EB                MOV      A,R3
002666 2406              ADD      A,#06H
002668 F52D              MOV      pBuf+01H,A
00266A E4                CLR      A
00266B 3A                ADDC     A,R2
00266C F52C              MOV      pBuf,A
00266E 8B82              MOV      DPL,R3
002670 8A83              MOV      DPH,R2
002672 A3                INC      DPTR
002673 A3                INC      DPTR
002674 E0                MOVX     A,@DPTR
002675 FE                MOV      R6,A
002676 A3                INC      DPTR
002677 E0                MOVX     A,@DPTR
002678 8E2E              MOV      vAddr,R6
00267A F52F              MOV      vAddr+01H,A
00267C EB                MOV      A,R3
00267D 2404              ADD      A,#04H
00267F F582              MOV      DPL,A
002681 E4                CLR      A
002682 3A                ADDC     A,R2
002683 F583              MOV      DPH,A
002685         ?L?COM0009:
002685 E0                MOVX     A,@DPTR
002686 F530              MOV      vLen,A
002688 A3                INC      DPTR
002689 E0                MOVX     A,@DPTR
00268A F531              MOV      vLen+01H,A
00268C 22                RET      
----- FUNCTION ?L?COM0008 (END) -------


----- FUNCTION ?L?COM002A (BEGIN) -----
00268D D297              SETB     IO_DUT_C2M_SCL
00268F A216              MOV      C,bLength1
002691 92A0              MOV      IO_DUT_C2M_SDA,C
002693 C297              CLR      IO_DUT_C2M_SCL
002695 22                RET      
----- FUNCTION ?L?COM002A (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
002696 D297              SETB     IO_DUT_C2M_SCL
002698 A215              MOV      C,bLength0
00269A 92A0              MOV      IO_DUT_C2M_SDA,C
00269C C297              CLR      IO_DUT_C2M_SCL
00269E 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 68


----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
00269F D297              SETB     IO_DUT_C2M_SCL
0026A1 A207              MOV      C,bC2Bit7
0026A3 92A0              MOV      IO_DUT_C2M_SDA,C
0026A5 C297              CLR      IO_DUT_C2M_SCL
0026A7 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
0026A8 D297              SETB     IO_DUT_C2M_SCL
0026AA A206              MOV      C,bC2Bit6
0026AC 92A0              MOV      IO_DUT_C2M_SDA,C
0026AE C297              CLR      IO_DUT_C2M_SCL
0026B0 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
0026B1 D297              SETB     IO_DUT_C2M_SCL
0026B3 A205              MOV      C,bC2Bit5
0026B5 92A0              MOV      IO_DUT_C2M_SDA,C
0026B7 C297              CLR      IO_DUT_C2M_SCL
0026B9 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
0026BA D297              SETB     IO_DUT_C2M_SCL
0026BC A204              MOV      C,bC2Bit4
0026BE 92A0              MOV      IO_DUT_C2M_SDA,C
0026C0 C297              CLR      IO_DUT_C2M_SCL
0026C2 22                RET      
----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
0026C3 D297              SETB     IO_DUT_C2M_SCL
0026C5 A203              MOV      C,bC2Bit3
0026C7 92A0              MOV      IO_DUT_C2M_SDA,C
0026C9 C297              CLR      IO_DUT_C2M_SCL
0026CB 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
0026CC D297              SETB     IO_DUT_C2M_SCL
0026CE A202              MOV      C,bC2Bit2
0026D0 92A0              MOV      IO_DUT_C2M_SDA,C
0026D2 C297              CLR      IO_DUT_C2M_SCL
0026D4 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
0026D5 D297              SETB     IO_DUT_C2M_SCL
0026D7 A201              MOV      C,bC2Bit1
0026D9 92A0              MOV      IO_DUT_C2M_SDA,C
0026DB C297              CLR      IO_DUT_C2M_SCL
0026DD 22                RET      
----- FUNCTION ?L?COM0032 (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 69



----- FUNCTION ?L?COM0033 (BEGIN) -----
0026DE D297              SETB     IO_DUT_C2M_SCL
0026E0 A200              MOV      C,bC2Bit0
0026E2 92A0              MOV      IO_DUT_C2M_SDA,C
0026E4 C297              CLR      IO_DUT_C2M_SCL
0026E6 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
0026E7 8E34              MOV      vAddr,R6
0026E9 8F35              MOV      vAddr+01H,R7
0026EB 8C36              MOV      pBuf,R4
0026ED 8D37              MOV      pBuf+01H,R5
0026EF EB                MOV      A,R3
0026F0 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
0026F1 43A580            ORL      P1MDOUT,#080H
0026F4 C297              CLR      IO_DUT_C2M_SCL
0026F6 7F14              MOV      R7,#014H
0026F8 7E00              MOV      R6,#00H
0026FA 12170C            LCALL    _DRV_CPU_DelayUs
0026FD D297              SETB     IO_DUT_C2M_SCL
0026FF 7F02              MOV      R7,#02H
002701 7E00              MOV      R6,#00H
002703 12170C            LCALL    _DRV_CPU_DelayUs
002706 53A57F            ANL      P1MDOUT,#07FH
002709 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM0019 (BEGIN) -----
00270A D282              SETB     IO_DUT_I2CM_SCL
00270C 753801            MOV      _loop,#01H
00270F 7539F4            MOV      _loop+01H,#0F4H
002712 22                RET      
----- FUNCTION ?L?COM0019 (END) -------


----- FUNCTION ?L?COM001A (BEGIN) -----
002713 7E04              MOV      R6,#04H
002715 7F44              MOV      R7,#044H
002717 7D00              MOV      R5,#00H
002719         ?L?COM001B:
002719 7B01              MOV      R3,#01H
00271B 7A00              MOV      R2,#HIGH vFrame
00271D 7900              MOV      R1,#LOW vFrame
00271F 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001D (BEGIN) -----
002720 E4                CLR      A
002721 90000A            MOV      DPTR,#vFrame+0AH
002724 F0                MOVX     @DPTR,A
002725 A3                INC      DPTR
002726 F0                MOVX     @DPTR,A
002727 22                RET      
----- FUNCTION ?L?COM001D (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 70


----- FUNCTION ?L?COM001E (BEGIN) -----
002728 852D82            MOV      DPL,pPayload+01H
00272B 852C83            MOV      DPH,pPayload
00272E A3                INC      DPTR
00272F 22                RET      
----- FUNCTION ?L?COM001E (END) -------


----- FUNCTION ?L?COM001F (BEGIN) -----
002730 1217C1            LCALL    _drv_c2m_WriteData
002733 E4                CLR      A
002734 753310            MOV      _timeout+03H,#010H
002737 753227            MOV      _timeout+02H,#027H
00273A F531              MOV      _timeout+01H,A
00273C F530              MOV      _timeout,A
00273E 22                RET      
----- FUNCTION ?L?COM001F (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
00273F D282              SETB     IO_DUT_I2CM_SCL
002741 753601            MOV      _loop,#01H
002744 7537F4            MOV      _loop+01H,#0F4H
002747 22                RET      
----- FUNCTION ?L?COM0021 (END) -------


----- FUNCTION ?L?COM0022 (BEGIN) -----
002748 E52F              MOV      A,pPayload+01H
00274A 2405              ADD      A,#05H
00274C F582              MOV      DPL,A
00274E E4                CLR      A
00274F 352E              ADDC     A,pPayload
002751 F583              MOV      DPH,A
002753 E582              MOV      A,DPL
002755 22                RET      
----- FUNCTION ?L?COM0022 (END) -------


----- FUNCTION ?L?COM0023 (BEGIN) -----
002756 D282              SETB     IO_DUT_I2CM_SCL
002758 753901            MOV      _loop,#01H
00275B 753AF4            MOV      _loop+01H,#0F4H
00275E 22                RET      
----- FUNCTION ?L?COM0023 (END) -------


----- FUNCTION ?L?COM0024 (BEGIN) -----
00275F 120262            LCALL    _printf
002762 900008            MOV      DPTR,#vFrame+08H
002765 7403              MOV      A,#03H
002767 F0                MOVX     @DPTR,A
002768 A3                INC      DPTR
002769 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
00276A E537              MOV      A,_loop+01H
00276C 1537              DEC      _loop+01H
00276E AE36              MOV      R6,_loop
002770 22                RET      
----- FUNCTION ?L?COM0028 (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  12:55:59  PAGE 71


----- FUNCTION ?L?COM0029 (BEGIN) -----
002771 E53A              MOV      A,_loop+01H
002773 153A              DEC      _loop+01H
002775 AE39              MOV      R6,_loop
002777 22                RET      
----- FUNCTION ?L?COM0029 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
002778 AF14              MOV      R7,vFPDAT
00277A 121DF9            LCALL    _c2m_WriteAR
00277D 7F02              MOV      R7,#02H
00277F 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0035 (BEGIN) -----
002780 852F82            MOV      DPL,pPayload+01H
002783 852E83            MOV      DPH,pPayload
002786 E0                MOVX     A,@DPTR
002787 22                RET      
----- FUNCTION ?L?COM0035 (END) -------


----- FUNCTION ?L?COM0036 (BEGIN) -----
002788 7D40              MOV      R5,#040H
00278A 120FF9            LCALL    _Block_Read
00278D 8F27              MOV      vBlockLen,R7
00278F 22                RET      
----- FUNCTION ?L?COM0036 (END) -------


