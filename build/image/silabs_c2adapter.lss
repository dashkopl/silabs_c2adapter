LX51 LINKER/LOCATER V4.66.41.0                                                          06/14/2016  17:45:41  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022DCF            LJMP     02DCFH
000083 022E06            LJMP     02E06H
----- FUNCTION CFG_Init (BEGIN) -----
 FILE: '..\cfg\cfg.c'
   37: void CFG_Init(void)
   38: {
   39:     CFG_DB_Init();
   40:     CFG_PWD_Init();
0001DD 0224CB            LJMP     CFG_PWD_Init
----- FUNCTION CFG_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 2


   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
00162C 74FF              MOV      A,#0FFH
00162E F531              MOV      vCRC,A
001630 F532              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
001632 E4                CLR      A
001633 FD                MOV      R5,A
001634 FC                MOV      R4,A
001635         ?C0001?THREAD_PKT:
001635 D3                SETB     C
001636 900045            MOV      DPTR,#vFrame+05H
001639 E0                MOVX     A,@DPTR
00163A 9D                SUBB     A,R5
00163B 900044            MOV      DPTR,#vFrame+04H
00163E E0                MOVX     A,@DPTR
00163F 9C                SUBB     A,R4
001640 4031              JC       ?C0002?THREAD_PKT
   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
001642 E531              MOV      A,vCRC
001644 FF                MOV      R7,A
001645 7448              MOV      A,#LOW vFrame+08H
001647 2D                ADD      A,R5
001648 F582              MOV      DPL,A
00164A 7400              MOV      A,#HIGH vFrame+08H
00164C 3C                ADDC     A,R4
00164D F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 3


00164F E0                MOVX     A,@DPTR
001650 6F                XRL      A,R7
001651 75F002            MOV      B,#02H
001654 A4                MUL      AB
001655 242A              ADD      A,#LOW aCRC16
001657 F582              MOV      DPL,A
001659 E5F0              MOV      A,B
00165B 3409              ADDC     A,#HIGH aCRC16
00165D F583              MOV      DPH,A
00165F E532              MOV      A,vCRC+01H
001661 FE                MOV      R6,A
001662 E4                CLR      A
001663 93                MOVC     A,@A+DPTR
001664 6E                XRL      A,R6
001665 F531              MOV      vCRC,A
001667 7401              MOV      A,#01H
001669 93                MOVC     A,@A+DPTR
00166A F532              MOV      vCRC+01H,A
   82:     }
00166C 0D                INC      R5
00166D BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
001670 0C                INC      R4
001671         ?C0066?THREAD_PKT:
001671 80C2              SJMP     ?C0001?THREAD_PKT
001673         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
001673 AE31              MOV      R6,vCRC
001675 AF32              MOV      R7,vCRC+01H
   85: }
001677 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
001678 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
00167B 123354            LCALL    ?L?COM0035
00167E 1207F3            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
001681 C247              CLR      bFlushFIFO
  242:     }
001683 22                RET      
001684         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
001684 90004B            MOV      DPTR,#vFrame+0BH
001687 E0                MOVX     A,@DPTR
001688 2404              ADD      A,#04H
00168A FE                MOV      R6,A
00168B 90004A            MOV      DPTR,#vFrame+0AH
00168E E0                MOVX     A,@DPTR
00168F 3400              ADDC     A,#00H
001691 900044            MOV      DPTR,#vFrame+04H
001694 F0                MOVX     @DPTR,A
001695 A3                INC      DPTR
001696 CE                XCH      A,R6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 4


001697 F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
001698 D12C              ACALL    _thread_pkt_CalcCRC
00169A 900046            MOV      DPTR,#vFrame+06H
00169D EE                MOV      A,R6
00169E F0                MOVX     @DPTR,A
00169F A3                INC      DPTR
0016A0 EF                MOV      A,R7
0016A1 F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
0016A2 C238              CLR      ?_thread_pkt_Dump?BIT
0016A4 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0016A7 12335A            LCALL    ?L?COM0036
0016AA 900045            MOV      DPTR,#vFrame+05H
0016AD E0                MOVX     A,@DPTR
0016AE 2408              ADD      A,#08H
0016B0 FD                MOV      R5,A
0016B1 900044            MOV      DPTR,#vFrame+04H
0016B4 E0                MOVX     A,@DPTR
0016B5 3400              ADDC     A,#00H
0016B7 FC                MOV      R4,A
0016B8 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
0016BB 123354            LCALL    ?L?COM0035
0016BE 1207F3            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
0016C1 12335A            LCALL    ?L?COM0036
0016C4 1234CC            LCALL    ?L?COM0063
  141:     if (bFlushFIFO)
0016C7 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
0016CA 7BFF              MOV      R3,#0FFH
0016CC 7A08              MOV      R2,#HIGH 01000867H
0016CE 7967              MOV      R1,#LOW 01000867H
0016D0 120262            LCALL    _printf
  145:         return FALSE;
0016D3 C3                CLR      C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 5


0016D4 22                RET      
  146:     }
0016D5         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
0016D5 C3                CLR      C
0016D6 E52E              MOV      A,vBlockLen
0016D8 9408              SUBB     A,#08H
0016DA E4                CLR      A
0016DB 9400              SUBB     A,#00H
0016DD 400E              JC       ?C0013?THREAD_PKT
0016DF 900040            MOV      DPTR,#vFrame
0016E2 E0                MOVX     A,@DPTR
0016E3 6443              XRL      A,#043H
0016E5 7004              JNZ      ?C0067?THREAD_PKT
0016E7 A3                INC      DPTR
0016E8 E0                MOVX     A,@DPTR
0016E9 644C              XRL      A,#04CH
0016EB         ?C0067?THREAD_PKT:
0016EB 601A              JZ       ?C0012?THREAD_PKT
0016ED         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
0016ED 7BFF              MOV      R3,#0FFH
0016EF 7A08              MOV      R2,#HIGH 01000874H
0016F1 7974              MOV      R1,#LOW 01000874H
0016F3 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
0016F6 900040            MOV      DPTR,#vFrame
0016F9 E0                MOVX     A,@DPTR
0016FA F535              MOV      ?_printf?BYTE+04H,A
0016FC A3                INC      DPTR
0016FD E0                MOVX     A,@DPTR
0016FE F536              MOV      ?_printf?BYTE+05H,A
001700 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
001703 D247              SETB     bFlushFIFO
  152:         return FALSE;
001705 C3                CLR      C
001706 22                RET      
  153:     }
001707         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
001707 900042            MOV      DPTR,#vFrame+02H
00170A E0                MOVX     A,@DPTR
00170B 7004              JNZ      ?C0068?THREAD_PKT
00170D A3                INC      DPTR
00170E E0                MOVX     A,@DPTR
00170F 6401              XRL      A,#01H
001711         ?C0068?THREAD_PKT:
001711 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
001713 7BFF              MOV      R3,#0FFH
001715 7A08              MOV      R2,#HIGH 010008A4H
001717 79A4              MOV      R1,#LOW 010008A4H
001719 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
00171C 900042            MOV      DPTR,#vFrame+02H
00171F E4                CLR      A
001720 F0                MOVX     @DPTR,A
001721 A3                INC      DPTR
001722 04                INC      A
001723 F0                MOVX     @DPTR,A
  159:         return FALSE;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 6


001724 C3                CLR      C
001725 22                RET      
  160:     }
001726         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
001726 E52E              MOV      A,vBlockLen
001728 24F8              ADD      A,#0F8H
00172A F52D              MOV      vRxTotalLen+01H,A
00172C E4                CLR      A
00172D 34FF              ADDC     A,#0FFH
00172F F52C              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
001731 E4                CLR      A
001732 F52F              MOV      vElaspedTime,A
001734 F530              MOV      vElaspedTime+01H,A
001736         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
001736 D3                SETB     C
001737 900045            MOV      DPTR,#vFrame+05H
00173A E0                MOVX     A,@DPTR
00173B 952D              SUBB     A,vRxTotalLen+01H
00173D 900044            MOV      DPTR,#vFrame+04H
001740 E0                MOVX     A,@DPTR
001741 952C              SUBB     A,vRxTotalLen
001743 4048              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
001745 7448              MOV      A,#LOW vFrame+08H
001747 252D              ADD      A,vRxTotalLen+01H
001749 F9                MOV      R1,A
00174A 7400              MOV      A,#HIGH vFrame+08H
00174C 352C              ADDC     A,vRxTotalLen
00174E FA                MOV      R2,A
00174F 7B01              MOV      R3,#01H
001751 1234CC            LCALL    ?L?COM0063
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
001754 E52E              MOV      A,vBlockLen
001756 7028              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
001758 7F01              MOV      R7,#01H
00175A FE                MOV      R6,A
00175B 121A3E            LCALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
00175E 0530              INC      vElaspedTime+01H
001760 E530              MOV      A,vElaspedTime+01H
001762 7002              JNZ      ?C0069?THREAD_PKT
001764 052F              INC      vElaspedTime
001766         ?C0069?THREAD_PKT:
001766 FF                MOV      R7,A
001767 AE2F              MOV      R6,vElaspedTime
001769 E4                CLR      A
00176A FC                MOV      R4,A
00176B FD                MOV      R5,A
00176C 7B50              MOV      R3,#050H
00176E 7AC3              MOV      R2,#0C3H
001770 F9                MOV      R1,A
001771 F8                MOV      R0,A
001772 D3                SETB     C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 7


001773 120607            LCALL    ?C?SLCMP
001776 50BE              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
001778 7BFF              MOV      R3,#0FFH
00177A 7A08              MOV      R2,#HIGH 010008BCH
00177C 79BC              MOV      R1,#LOW 010008BCH
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
00177E 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
001780         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
001780 E52E              MOV      A,vBlockLen
001782 252D              ADD      A,vRxTotalLen+01H
001784 F52D              MOV      vRxTotalLen+01H,A
001786 E4                CLR      A
001787 352C              ADDC     A,vRxTotalLen
001789 F52C              MOV      vRxTotalLen,A
  187:     }
00178B 80A9              SJMP     ?C0015?THREAD_PKT
00178D         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
00178D 900044            MOV      DPTR,#vFrame+04H
001790 E0                MOVX     A,@DPTR
001791 652C              XRL      A,vRxTotalLen
001793 7004              JNZ      ?C0070?THREAD_PKT
001795 A3                INC      DPTR
001796 E0                MOVX     A,@DPTR
001797 652D              XRL      A,vRxTotalLen+01H
001799         ?C0070?THREAD_PKT:
001799 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
00179B 7BFF              MOV      R3,#0FFH
00179D 7A08              MOV      R2,#HIGH 010008D0H
00179F 79D0              MOV      R1,#LOW 010008D0H
0017A1         
0017A1 123412            LCALL    ?L?COM004C
0017A4 7401              MOV      A,#01H
0017A6 F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
0017A7 C3                CLR      C
0017A8 22                RET      
  194:     }
0017A9         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
0017A9 D238              SETB     ?_thread_pkt_Dump?BIT
0017AB 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
0017AE D12C              ACALL    _thread_pkt_CalcCRC
0017B0 900046            MOV      DPTR,#vFrame+06H
0017B3 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 8


0017B4 6E                XRL      A,R6
0017B5 7003              JNZ      ?C0071?THREAD_PKT
0017B7 A3                INC      DPTR
0017B8 E0                MOVX     A,@DPTR
0017B9 6F                XRL      A,R7
0017BA         ?C0071?THREAD_PKT:
0017BA 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
0017BC 7BFF              MOV      R3,#0FFH
0017BE 7A08              MOV      R2,#HIGH 010008E8H
0017C0 79E8              MOV      R1,#LOW 010008E8H
0017C2 123412            LCALL    ?L?COM004C
0017C5 14                DEC      A
0017C6 F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
0017C7 C3                CLR      C
0017C8 22                RET      
  206:     }
0017C9         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
0017C9 D3                SETB     C
  209: }
0017CA 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0017CB EF                MOV      A,R7
0017CC 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017CF 0509              INC      vSCB_RxPkt+01H
0017D1 E509              MOV      A,vSCB_RxPkt+01H
0017D3 7002              JNZ      ?C0073?THREAD_PKT
0017D5 0508              INC      vSCB_RxPkt
0017D7         ?C0073?THREAD_PKT:
  284: 	}
0017D7         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0017D7 EF                MOV      A,R7
0017D8 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017DB 0509              INC      vSCB_RxPkt+01H
0017DD E509              MOV      A,vSCB_RxPkt+01H
0017DF 7002              JNZ      ?C0074?THREAD_PKT
0017E1 0508              INC      vSCB_RxPkt
0017E3         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0017E3 D247              SETB     bFlushFIFO
  291: 	}
  292: }
0017E5         ?C0047?THREAD_PKT:
0017E5 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 9


----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017E6 E4                CLR      A
0017E7 F50A              MOV      vTCB_Pkt,A
0017E9 F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017EB F508              MOV      vSCB_RxPkt,A
0017ED F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017EF 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
0017F0 121EB7            LCALL    _c2m_WriteAR
  355: }
0017F3 021D29            LJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION _CFG_RAM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   71: 
   72:             default:
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0017F6 A807              MOV      R0,AR7
0017F8 E2                MOVX     A,@R0
0017F9 FE                MOV      R6,A
0017FA 08                INC      R0
0017FB E2                MOVX     A,@R0
0017FC FF                MOV      R7,A
0017FD 22                RET      
----- FUNCTION _CFG_RAM_GET16 (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900048            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 10


00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24F6              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3408              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24F8              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3408              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 120704            LCALL    ?C?ICALL
  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 940D              SUBB     A,#0DH
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900048            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 11


  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 12069D            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 1216BB            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 12


0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 121678            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  115: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  116: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018B9 AD07              MOV      R5,AR7
  117:     UINT8   vLoop;
  118:     BOOL    vAck;
  119: 
  120:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018BB 7B08              MOV      R3,#08H
0018BD         ?C0001?PKT_I2CM:
  121:     {
  122:         /* transmitting data, MSB first, LSB last */
  123:         CROL(vData, 1);
0018BD 7801              MOV      R0,#01H
0018BF AF05              MOV      R7,AR5
0018C1 EF                MOV      A,R7
0018C2 08                INC      R0
0018C3 8001              SJMP     ?C0371?PKT_I2CM
0018C5         ?C0370?PKT_I2CM:
0018C5 23                RL       A
0018C6         ?C0371?PKT_I2CM:
0018C6 D8FD              DJNZ     R0,?C0370?PKT_I2CM
0018C8 FD                MOV      R5,A
  124:         PKT_I2CM_SET_SDA(vData & 0x1);
0018C9 13                RRC      A
0018CA 9292              MOV      IO_DUT_I2CM_SDA,C
  125: 
  126:         PKT_I2CM_SET_SCL(HIGH);
0018CC 123167            LCALL    ?L?COM000D
0018CF 12332B            LCALL    ?L?COM0030
0018D2         ?C0020?PKT_I2CM:
0018D2 20820E            JB       IO_DUT_I2CM_SCL,?C0027?PKT_I2CM
0018D5 123344            LCALL    ?L?COM0033
0018D8 7002              JNZ      ?C0372?PKT_I2CM
0018DA 153F              DEC      _loop
0018DC         ?C0372?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 13


0018DC 4E                ORL      A,R6
0018DD 6004              JZ       ?C0027?PKT_I2CM
0018DF 513A              ACALL    ?L?COM0008
0018E1 80EF              SJMP     ?C0020?PKT_I2CM
  127:         PKT_I2CM_SET_SCL(LOW);
0018E3         ?C0027?PKT_I2CM:
0018E3 123167            LCALL    ?L?COM000D
0018E6 C282              CLR      IO_DUT_I2CM_SCL
0018E8 8000              SJMP     ?C0003?PKT_I2CM
  128:     }
0018EA         ?C0003?PKT_I2CM:
0018EA DBD1              DJNZ     R3,?C0001?PKT_I2CM
0018EC         ?C0036?PKT_I2CM:
  129: 
  130:     /* release SDA */
  131:     PKT_I2CM_SET_SDA(HIGH);
0018EC D292              SETB     IO_DUT_I2CM_SDA
  132: 
  133:     /* check ACK */
  134:     PKT_I2CM_SET_SCL(HIGH);
0018EE 123167            LCALL    ?L?COM000D
0018F1 12332B            LCALL    ?L?COM0030
0018F4         ?C0047?PKT_I2CM:
0018F4 20820E            JB       IO_DUT_I2CM_SCL,?C0038?PKT_I2CM
0018F7 123344            LCALL    ?L?COM0033
0018FA 7002              JNZ      ?C0374?PKT_I2CM
0018FC 153F              DEC      _loop
0018FE         ?C0374?PKT_I2CM:
0018FE 4E                ORL      A,R6
0018FF 6004              JZ       ?C0038?PKT_I2CM
001901 513A              ACALL    ?L?COM0008
001903 80EF              SJMP     ?C0047?PKT_I2CM
001905         ?C0038?PKT_I2CM:
  135:     vAck = PKT_I2CM_GET_SDA();
001905 A292              MOV      C,IO_DUT_I2CM_SDA
001907 923A              MOV      vAck,C
  136:     PKT_I2CM_SET_SCL(LOW);
001909 123167            LCALL    ?L?COM000D
00190C C282              CLR      IO_DUT_I2CM_SCL
00190E 8000              SJMP     ?C0050?PKT_I2CM
001910         ?C0050?PKT_I2CM:
  137: 
  138:     return !vAck;
001910 A23A              MOV      C,vAck
001912 B3                CPL      C
  139: }
001913 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  210: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  211: {
001914 12349B            LCALL    ?L?COM005D
001917 A3                INC      DPTR
001918 1231E1            LCALL    ?L?COM0013
  212:     UINT16  vWriteLen = pPayload->vWriteLen;
  213:     UINT16  vReadLen  = pPayload->vReadLen;
00191B 12339B            LCALL    ?L?COM003E
  214:     BOOL    bIntState;
  215:     BOOL    bDone = FALSE;
00191E C239              CLR      bDone
  216:     UINT16  vLoop;
  217: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 14


  218:     /* make sure the I2C is ready */
  219:     if (!_pkt_i2cm_CheckReady())
001920 515E              ACALL    _pkt_i2cm_CheckReady
001922 4003              JC       ?C0213?PKT_I2CM
  220:     {
  221:         return bDone;
001924 A239              MOV      C,bDone
001926 22                RET      
  222:     }
001927         ?C0213?PKT_I2CM:
  223: 
  224:     /* lock globally interrupt */
  225:     bIntState = DRV_INT_LockGlobalInterrupt();
001927 30AF05            JNB      EA,?C0215?PKT_I2CM
00192A C2AF              CLR      EA
00192C D3                SETB     C
00192D 8001              SJMP     ?C0216?PKT_I2CM
00192F         ?C0215?PKT_I2CM:
00192F C3                CLR      C
001930         ?C0216?PKT_I2CM:
001930 9238              MOV      bIntState,C
  226: 
  227:     /* send write stream */
  228:     if ((vWriteLen != 0)
001932 E538              MOV      A,vWriteLen+01H
001934 4537              ORL      A,vWriteLen
001936 700C              JNZ      ?C0224?PKT_I2CM
001938 E538              MOV      A,vWriteLen+01H
00193A 4537              ORL      A,vWriteLen
00193C 706C              JNZ      ?C0217?PKT_I2CM
00193E E53A              MOV      A,vReadLen+01H
001940 4539              ORL      A,vReadLen
001942 7066              JNZ      ?C0217?PKT_I2CM
  229:         || ((vWriteLen == 0) && (vReadLen == 0)))
  230:     {
  231:         /* send I2C start */
  232:         _pkt_i2cm_Start();
001944         ?C0224?PKT_I2CM:
001944 D292              SETB     IO_DUT_I2CM_SDA
001946 123167            LCALL    ?L?COM000D
001949 1233DE            LCALL    ?L?COM0043
00194C         ?C0235?PKT_I2CM:
00194C 208211            JB       IO_DUT_I2CM_SCL,?C0239?PKT_I2CM
00194F E53E              MOV      A,_loop+01H
001951 153E              DEC      _loop+01H
001953 AE3D              MOV      R6,_loop
001955 7002              JNZ      ?C0385?PKT_I2CM
001957 153D              DEC      _loop
001959         ?C0385?PKT_I2CM:
001959 4E                ORL      A,R6
00195A 6004              JZ       ?C0239?PKT_I2CM
00195C 513A              ACALL    ?L?COM0008
00195E 80EC              SJMP     ?C0235?PKT_I2CM
001960         ?C0239?PKT_I2CM:
001960 12315E            LCALL    ?L?COM000B
001963 C282              CLR      IO_DUT_I2CM_SCL
001965 8000              SJMP     ?C0220?PKT_I2CM
001967         ?C0220?PKT_I2CM:
  233: 
  234:         /* send I2C slave address + write */
  235:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
001967 1234C4            LCALL    ?L?COM0062
00196A 54FE              ANL      A,#0FEH
00196C FF                MOV      R7,A
00196D 11B9              ACALL    __pkt_i2cm_TxByte
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 15


00196F 4002              JC       $ + 4H
001971 410E              AJMP     ?C0309?PKT_I2CM
  236:         {
  237:             goto _exit;
  238:         }
001973         ?C0255?PKT_I2CM:
  239: 
  240:         /* send write buffer */
  241:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
001973 E4                CLR      A
001974 F53B              MOV      vLoop,A
001976 F53C              MOV      vLoop+01H,A
001978         ?C0257?PKT_I2CM:
001978 C3                CLR      C
001979 E53C              MOV      A,vLoop+01H
00197B 9538              SUBB     A,vWriteLen+01H
00197D E53B              MOV      A,vLoop
00197F 9537              SUBB     A,vWriteLen
001981 5027              JNC      ?C0217?PKT_I2CM
  242:         {
  243:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
001983 E536              MOV      A,pPayload+01H
001985 2405              ADD      A,#05H
001987 F582              MOV      DPL,A
001989 E4                CLR      A
00198A 3535              ADDC     A,pPayload
00198C F583              MOV      DPH,A
00198E E582              MOV      A,DPL
001990 253C              ADD      A,vLoop+01H
001992 F582              MOV      DPL,A
001994 E583              MOV      A,DPH
001996 353B              ADDC     A,vLoop
001998 F583              MOV      DPH,A
00199A E0                MOVX     A,@DPTR
00199B FF                MOV      R7,A
00199C 11B9              ACALL    __pkt_i2cm_TxByte
00199E 506E              JNC      ?C0309?PKT_I2CM
  244:             {
  245:                 goto _exit;
  246:             }
0019A0         ?C0260?PKT_I2CM:
  247:         }
0019A0         ?C0259?PKT_I2CM:
0019A0 053C              INC      vLoop+01H
0019A2 E53C              MOV      A,vLoop+01H
0019A4 7002              JNZ      ?C0387?PKT_I2CM
0019A6 053B              INC      vLoop
0019A8         ?C0387?PKT_I2CM:
0019A8 80CE              SJMP     ?C0257?PKT_I2CM
  248:     }
0019AA         ?C0217?PKT_I2CM:
  249: 
  250:     /* send read stream */
  251:     if (vReadLen != 0)
0019AA E53A              MOV      A,vReadLen+01H
0019AC 4539              ORL      A,vReadLen
0019AE 605C              JZ       ?C0261?PKT_I2CM
  252:     {
  253:         /* send I2C start/restart */
  254:         _pkt_i2cm_Start();
0019B0 D292              SETB     IO_DUT_I2CM_SDA
0019B2 123167            LCALL    ?L?COM000D
0019B5 1233DE            LCALL    ?L?COM0043
0019B8         ?C0278?PKT_I2CM:
0019B8 208211            JB       IO_DUT_I2CM_SCL,?C0282?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 16


0019BB E53E              MOV      A,_loop+01H
0019BD 153E              DEC      _loop+01H
0019BF AE3D              MOV      R6,_loop
0019C1 7002              JNZ      ?C0388?PKT_I2CM
0019C3 153D              DEC      _loop
0019C5         ?C0388?PKT_I2CM:
0019C5 4E                ORL      A,R6
0019C6 6004              JZ       ?C0282?PKT_I2CM
0019C8 513A              ACALL    ?L?COM0008
0019CA 80EC              SJMP     ?C0278?PKT_I2CM
0019CC         ?C0282?PKT_I2CM:
0019CC 12315E            LCALL    ?L?COM000B
0019CF C282              CLR      IO_DUT_I2CM_SCL
0019D1 8000              SJMP     ?C0263?PKT_I2CM
0019D3         ?C0263?PKT_I2CM:
  255: 
  256:         /* send I2C slave address + read */
  257:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
0019D3 1234C4            LCALL    ?L?COM0062
0019D6 4401              ORL      A,#01H
0019D8 FF                MOV      R7,A
0019D9 11B9              ACALL    __pkt_i2cm_TxByte
0019DB 5031              JNC      ?C0309?PKT_I2CM
  258:         {
  259:             goto _exit;
  260:         }
0019DD         ?C0298?PKT_I2CM:
  261: 
  262:         /* read data */
  263:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
0019DD E4                CLR      A
0019DE F53B              MOV      vLoop,A
0019E0 F53C              MOV      vLoop+01H,A
0019E2         ?C0299?PKT_I2CM:
0019E2 1234BC            LCALL    ?L?COM0061
0019E5 9539              SUBB     A,vReadLen
0019E7 5023              JNC      ?C0261?PKT_I2CM
  264:         {
  265:             pPayload->aBuf[vWriteLen+vLoop] =
0019E9 E53A              MOV      A,vReadLen+01H
0019EB 24FF              ADD      A,#0FFH
0019ED FF                MOV      R7,A
0019EE E539              MOV      A,vReadLen
0019F0 34FF              ADDC     A,#0FFH
0019F2 FE                MOV      R6,A
0019F3 EF                MOV      A,R7
0019F4 B53C07            CJNE     A,vLoop+01H,?C0302?PKT_I2CM
0019F7 EE                MOV      A,R6
0019F8 B53B03            CJNE     A,vLoop,?C0302?PKT_I2CM
0019FB D3                SETB     C
0019FC 8001              SJMP     ?C0303?PKT_I2CM
0019FE         ?C0302?PKT_I2CM:
0019FE C3                CLR      C
0019FF         ?C0303?PKT_I2CM:
0019FF 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001A01 F144              ACALL    _pkt_i2cm_RxByte
001A03 123232            LCALL    ?L?COM001A
001A06 7002              JNZ      ?C0391?PKT_I2CM
001A08 053B              INC      vLoop
001A0A         ?C0391?PKT_I2CM:
001A0A 80D6              SJMP     ?C0299?PKT_I2CM
  266:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  267:         }
  268:     }
001A0C         ?C0261?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 17


  269: 
  270:     /* I2C stream done */
  271:     bDone = TRUE;
001A0C D239              SETB     bDone
  272: 
  273: _exit:
001A0E         _exit:
  274:     /* send I2C stop */
  275:     _pkt_i2cm_Stop();
001A0E         ?C0309?PKT_I2CM:
001A0E 123165            LCALL    ?L?COM000C
001A11 1233DE            LCALL    ?L?COM0043
001A14         ?C0320?PKT_I2CM:
001A14 208211            JB       IO_DUT_I2CM_SCL,?C0324?PKT_I2CM
001A17 E53E              MOV      A,_loop+01H
001A19 153E              DEC      _loop+01H
001A1B AE3D              MOV      R6,_loop
001A1D 7002              JNZ      ?C0392?PKT_I2CM
001A1F 153D              DEC      _loop
001A21         ?C0392?PKT_I2CM:
001A21 4E                ORL      A,R6
001A22 6004              JZ       ?C0324?PKT_I2CM
001A24 513A              ACALL    ?L?COM0008
001A26 80EC              SJMP     ?C0320?PKT_I2CM
001A28         ?C0324?PKT_I2CM:
001A28 123167            LCALL    ?L?COM000D
001A2B D292              SETB     IO_DUT_I2CM_SDA
  276: 
  277:     /* unlock globally interrupt */
  278:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001A2D A238              MOV      C,bIntState
001A2F 92AF              MOV      EA,C
  279: 
  280:     return bDone;
001A31 A239              MOV      C,bDone
  281: }
001A33 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001A34 A2A0              MOV      C,IO_DUT_C2M_SDA
001A36 D297              SETB     IO_DUT_C2M_SCL
001A38 9230              MOV      bC2Bit0,C
001A3A         ?L?COM0008:
001A3A 7F01              MOV      R7,#01H
001A3C 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
001A3E 8018              SJMP     ?C0013?DRV_CPU
001A40         ?C0001?DRV_CPU:
   39:     while (--vUsec)
001A40 EF                MOV      A,R7
001A41 1F                DEC      R7
001A42 7001              JNZ      ?C0011?DRV_CPU
001A44 1E                DEC      R6
001A45         ?C0011?DRV_CPU:
001A45 14                DEC      A
001A46 4E                ORL      A,R6
001A47 6014              JZ       ?C0003?DRV_CPU
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 18


   40:     {
   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A49 00                NOP      
001A4A 00                NOP      
001A4B 00                NOP      
001A4C 00                NOP      
001A4D 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A4E 00                NOP      
001A4F 00                NOP      
001A50 00                NOP      
001A51 00                NOP      
001A52 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
001A53 00                NOP      
001A54 00                NOP      
001A55 00                NOP      
001A56 00                NOP      
001A57 00                NOP      
   45: 		NOP(); NOP(); NOP();
001A58         
001A58 00                NOP      
001A59 00                NOP      
001A5A 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
   49:     }
001A5B 80E3              SJMP     ?C0001?DRV_CPU
   50: }
001A5D         ?C0003?DRV_CPU:
001A5D 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  164: static BOOL _pkt_i2cm_CheckReady(void)
  165: {
  166:     if ((PKT_I2CM_GET_SCL() == HIGH)
  167:         && (PKT_I2CM_GET_SDA() == HIGH))
001A5E 308205            JNB      IO_DUT_I2CM_SCL,?C0120?PKT_I2CM
001A61 309202            JNB      IO_DUT_I2CM_SDA,?C0120?PKT_I2CM
  168:     {
  169:         /* the I2C only can be started, while SCL/SDA is at high level */
  170:         return TRUE;
001A64 D3                SETB     C
001A65 22                RET      
  171:     }
001A66         ?C0120?PKT_I2CM:
  172:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001A66 308271            JNB      IO_DUT_I2CM_SCL,?C0122?PKT_I2CM
001A69 20926E            JB       IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  173:              && (PKT_I2CM_GET_SDA() == LOW))
  174:     {
  175:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  176:          *  we should attempt to reset the I2C bus,
  177:          *  to recover the SDA to idle state.
  178:          *
  179:          * Memory (Management Interface) Reset:
  180:          *  1) Clock up to 9 cycles.
  181:          *  2) Look for SDA high in each cycle while SCL is high.
  182:          *  3) Create a START condition as SDA is high.
  183:          */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 19


  184: 
  185:         UINT8   vLoop;
  186: 
  187:         for (vLoop = 9; vLoop != 0; vLoop--)
001A6C 753F09            MOV      vLoop,#09H
001A6F         ?C0124?PKT_I2CM:
  188:         {
  189:             PKT_I2CM_SET_SCL(LOW);
001A6F 123167            LCALL    ?L?COM000D
001A72 C282              CLR      IO_DUT_I2CM_SCL
001A74 8000              SJMP     ?C0144?PKT_I2CM
  190:             PKT_I2CM_SET_SCL(HIGH);
001A76         ?C0144?PKT_I2CM:
001A76 123167            LCALL    ?L?COM000D
001A79 1233D5            LCALL    ?L?COM0042
001A7C         ?C0149?PKT_I2CM:
001A7C 208211            JB       IO_DUT_I2CM_SCL,?C0126?PKT_I2CM
001A7F E541              MOV      A,_loop+01H
001A81 1541              DEC      _loop+01H
001A83 AE40              MOV      R6,_loop
001A85 7002              JNZ      ?C0381?PKT_I2CM
001A87 1540              DEC      _loop
001A89         ?C0381?PKT_I2CM:
001A89 4E                ORL      A,R6
001A8A 6004              JZ       ?C0126?PKT_I2CM
001A8C 513A              ACALL    ?L?COM0008
001A8E 80EC              SJMP     ?C0149?PKT_I2CM
  191:         }
001A90         ?C0126?PKT_I2CM:
001A90 D53FDC            DJNZ     vLoop,?C0124?PKT_I2CM
001A93         ?C0125?PKT_I2CM:
  192: 
  193:         if (PKT_I2CM_GET_SDA() == HIGH)
001A93 309244            JNB      IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  194:         {
  195:             _pkt_i2cm_Start();
001A96 D292              SETB     IO_DUT_I2CM_SDA
001A98 123167            LCALL    ?L?COM000D
001A9B 1233D5            LCALL    ?L?COM0042
001A9E         ?C0168?PKT_I2CM:
001A9E 208211            JB       IO_DUT_I2CM_SCL,?C0172?PKT_I2CM
001AA1 E541              MOV      A,_loop+01H
001AA3 1541              DEC      _loop+01H
001AA5 AE40              MOV      R6,_loop
001AA7 7002              JNZ      ?C0382?PKT_I2CM
001AA9 1540              DEC      _loop
001AAB         ?C0382?PKT_I2CM:
001AAB 4E                ORL      A,R6
001AAC 6004              JZ       ?C0172?PKT_I2CM
001AAE 513A              ACALL    ?L?COM0008
001AB0 80EC              SJMP     ?C0168?PKT_I2CM
001AB2         ?C0172?PKT_I2CM:
001AB2 12315E            LCALL    ?L?COM000B
001AB5 C282              CLR      IO_DUT_I2CM_SCL
001AB7 8000              SJMP     ?C0193?PKT_I2CM
  196:             _pkt_i2cm_Stop();
001AB9         ?C0193?PKT_I2CM:
001AB9 123165            LCALL    ?L?COM000C
001ABC 1233D5            LCALL    ?L?COM0042
001ABF         ?C0204?PKT_I2CM:
001ABF 208211            JB       IO_DUT_I2CM_SCL,?C0208?PKT_I2CM
001AC2 E541              MOV      A,_loop+01H
001AC4 1541              DEC      _loop+01H
001AC6 AE40              MOV      R6,_loop
001AC8 7002              JNZ      ?C0384?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 20


001ACA 1540              DEC      _loop
001ACC         ?C0384?PKT_I2CM:
001ACC 4E                ORL      A,R6
001ACD 6004              JZ       ?C0208?PKT_I2CM
001ACF 513A              ACALL    ?L?COM0008
001AD1 80EC              SJMP     ?C0204?PKT_I2CM
001AD3         ?C0208?PKT_I2CM:
001AD3 123167            LCALL    ?L?COM000D
001AD6 D292              SETB     IO_DUT_I2CM_SDA
  197: 
  198:             /* we have successfully recovered the SDA line to idle state */
  199:             return TRUE;
001AD8 D3                SETB     C
001AD9 22                RET      
  200:         }
  201:     }
  202:     else
  203:     {
  204:         /* unsupported stretching on SCL/SDA line, operation fail */
  205:     }
001ADA         ?C0122?PKT_I2CM:
  206: 
  207:     return FALSE;
001ADA C3                CLR      C
  208: }
001ADB 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
  640: (
001ADC 12341D            LCALL    ?L?COM004F
;---- Variable 'vCount' assigned to Register 'R3' ----
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
001ADF EB                MOV      A,R3
001AE0 7005              JNZ      ?C0962?DRV_C2M
001AE2 7E01              MOV      R6,#01H
001AE4 FF                MOV      R7,A
001AE5 8004              SJMP     ?C0963?DRV_C2M
001AE7         ?C0962?DRV_C2M:
001AE7 EB                MOV      A,R3
001AE8 FF                MOV      R7,A
001AE9 7E00              MOV      R6,#00H
001AEB         ?C0963?DRV_C2M:
001AEB 8E3F              MOV      vLen,R6
001AED 8F40              MOV      vLen+01H,R7
  647:     BOOL    bDone = FALSE;
001AEF C238              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
001AF1 309776            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001AF4 30A073            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
001AF7         ?C0964?DRV_C2M:
  654: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 21


  655:     c2m_WriteAR(vFPDAT);
001AF7 AF16              MOV      R7,vFPDAT
001AF9 D1B7              ACALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
001AFB 7F07              MOV      R7,#07H
001AFD 1231EE            LCALL    ?L?COM0015
001B00         ?C0973?DRV_C2M:
001B00 71FC              ACALL    c2m_ReadAR
001B02 EF                MOV      A,R7
001B03 20E009            JB       ACC.0,?C0971?DRV_C2M
001B06 12316E            LCALL    ?L?COM000E
001B09 6004              JZ       ?C0971?DRV_C2M
001B0B 513A              ACALL    ?L?COM0008
001B0D 80F1              SJMP     ?C0973?DRV_C2M
001B0F         ?C0971?DRV_C2M:
001B0F 1232D9            LCALL    ?L?COM002A
001B12 7056              JNZ      _exit?DRV_C2M
001B14         ?C0975?DRV_C2M:
001B14         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001B14 E53B              MOV      A,vAddr
001B16 FF                MOV      R7,A
001B17 716D              ACALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001B19 AF3C              MOV      R7,vAddr+01H
001B1B 1231E9            LCALL    ?L?COM0014
001B1E         ?C0982?DRV_C2M:
001B1E 71FC              ACALL    c2m_ReadAR
001B20 EF                MOV      A,R7
001B21 20E009            JB       ACC.0,?C0980?DRV_C2M
001B24 12316E            LCALL    ?L?COM000E
001B27 6004              JZ       ?C0980?DRV_C2M
001B29 513A              ACALL    ?L?COM0008
001B2B 80F1              SJMP     ?C0982?DRV_C2M
001B2D         ?C0980?DRV_C2M:
001B2D 1232D9            LCALL    ?L?COM002A
001B30 7038              JNZ      _exit?DRV_C2M
001B32         ?C0984?DRV_C2M:
001B32         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
001B32 123344            LCALL    ?L?COM0033
001B35 7002              JNZ      ?C1018?DRV_C2M
001B37 153F              DEC      vLen
001B39         ?C1018?DRV_C2M:
001B39 4E                ORL      A,R6
001B3A 6015              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
001B3C 053E              INC      pBuf+01H
001B3E E53E              MOV      A,pBuf+01H
001B40 AE3D              MOV      R6,pBuf
001B42 7002              JNZ      ?C1019?DRV_C2M
001B44 053D              INC      pBuf
001B46         ?C1019?DRV_C2M:
001B46 14                DEC      A
001B47 F582              MOV      DPL,A
001B49 8E83              MOV      DPH,R6
001B4B E0                MOVX     A,@DPTR
001B4C FF                MOV      R7,A
001B4D 716D              ACALL    _drv_c2m_WriteData
  666:     }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 22


001B4F 80E1              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
001B51         ?C0992?DRV_C2M:
001B51 1231F1            LCALL    ?L?COM0016
001B54         ?C0993?DRV_C2M:
001B54 71FC              ACALL    c2m_ReadAR
001B56 EF                MOV      A,R7
001B57 20E009            JB       ACC.0,?C0991?DRV_C2M
001B5A 12316E            LCALL    ?L?COM000E
001B5D 6004              JZ       ?C0991?DRV_C2M
001B5F 513A              ACALL    ?L?COM0008
001B61 80F1              SJMP     ?C0993?DRV_C2M
001B63         ?C0991?DRV_C2M:
001B63 B129              ACALL    c2m_ReadDR
001B65 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001B68         ?C0995?DRV_C2M:
001B68         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
001B68 D238              SETB     bDone
  669: 
  670: _exit:
001B6A         _exit:
  671:     return bDone;
001B6A A238              MOV      C,bDone
  672: }
001B6C 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
001B6D 122F30            LCALL    _c2m_WriteDR
  361: }
001B70 754527            MOV      _timeout,#027H
001B73 754610            MOV      _timeout+01H,#010H
001B76         ?C0788?DRV_C2M:
001B76 71FC              ACALL    c2m_ReadAR
001B78 EF                MOV      A,R7
001B79 30E111            JNB      ACC.1,?C0790?DRV_C2M
001B7C E546              MOV      A,_timeout+01H
001B7E 1546              DEC      _timeout+01H
001B80 AE45              MOV      R6,_timeout
001B82 7002              JNZ      ?C1015?DRV_C2M
001B84 1545              DEC      _timeout
001B86         ?C1015?DRV_C2M:
001B86 4E                ORL      A,R6
001B87 6004              JZ       ?C0790?DRV_C2M
001B89 513A              ACALL    ?L?COM0008
001B8B 80E9              SJMP     ?C0788?DRV_C2M
  362: 
001B8D         ?C0790?DRV_C2M:
001B8D 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 23


001B8E AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
001B90 C238              CLR      bDone
  550:     if (!drv_c2m_IsReady())
001B92 309764            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001B95 30A061            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
001B98         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
001B98 AF16              MOV      R7,vFPDAT
001B9A D1B7              ACALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001B9C 7F08              MOV      R7,#08H
001B9E 1232B1            LCALL    ?L?COM0026
001BA1         ?C0914?DRV_C2M:
001BA1 71FC              ACALL    c2m_ReadAR
001BA3 EF                MOV      A,R7
001BA4 20E00B            JB       ACC.0,?C0912?DRV_C2M
001BA7 7833              MOV      R0,#LOW _timeout
001BA9 123170            LCALL    ?L?COM000F
001BAC 6004              JZ       ?C0912?DRV_C2M
001BAE 513A              ACALL    ?L?COM0008
001BB0 80EF              SJMP     ?C0914?DRV_C2M
001BB2         ?C0912?DRV_C2M:
001BB2 1232D9            LCALL    ?L?COM002A
001BB5 7042              JNZ      _exit?DRV_C2M
001BB7         ?C0916?DRV_C2M:
001BB7         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
001BB7 AF03              MOV      R7,AR3
001BB9 1232B1            LCALL    ?L?COM0026
001BBC         ?C0923?DRV_C2M:
001BBC 71FC              ACALL    c2m_ReadAR
001BBE EF                MOV      A,R7
001BBF 20E00B            JB       ACC.0,?C0921?DRV_C2M
001BC2 7833              MOV      R0,#LOW _timeout
001BC4 123170            LCALL    ?L?COM000F
001BC7 6004              JZ       ?C0921?DRV_C2M
001BC9 513A              ACALL    ?L?COM0008
001BCB 80EF              SJMP     ?C0923?DRV_C2M
001BCD         ?C0921?DRV_C2M:
001BCD 1232D9            LCALL    ?L?COM002A
001BD0 7027              JNZ      _exit?DRV_C2M
001BD2         ?C0925?DRV_C2M:
001BD2         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001BD2 E4                CLR      A
001BD3 FF                MOV      R7,A
001BD4 716D              ACALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001BD6 E4                CLR      A
001BD7 753640            MOV      _timeout+03H,#040H
001BDA 75359C            MOV      _timeout+02H,#09CH
001BDD F534              MOV      _timeout+01H,A
001BDF F533              MOV      _timeout,A
001BE1         ?C0932?DRV_C2M:
001BE1 71FC              ACALL    c2m_ReadAR
001BE3 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 24


001BE4 20E00B            JB       ACC.0,?C0930?DRV_C2M
001BE7 7833              MOV      R0,#LOW _timeout
001BE9 123170            LCALL    ?L?COM000F
001BEC 6004              JZ       ?C0930?DRV_C2M
001BEE 513A              ACALL    ?L?COM0008
001BF0 80EF              SJMP     ?C0932?DRV_C2M
001BF2         ?C0930?DRV_C2M:
001BF2 B129              ACALL    c2m_ReadDR
001BF4 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001BF7         ?C0934?DRV_C2M:
001BF7         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
001BF7 D238              SETB     bDone
  564: 
  565: _exit:
001BF9         _exit:
  566:     return bDone;
001BF9 A238              MOV      C,bDone
  567: }
001BFB 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
001BFC C243              CLR      bIns0
001BFE D244              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
001C00 30AF05            JNB      EA,?C0190?DRV_C2M
001C03 C2AF              CLR      EA
001C05 D3                SETB     C
001C06 8001              SJMP     ?C0191?DRV_C2M
001C08         ?C0190?DRV_C2M:
001C08 C3                CLR      C
001C09         ?C0191?DRV_C2M:
001C09 1231FD            LCALL    ?L?COM0017
001C0C 00                NOP      
001C0D 00                NOP      
001C0E 00                NOP      
001C0F 00                NOP      
001C10 123295            LCALL    ?L?COM0024
001C13 00                NOP      
001C14 00                NOP      
001C15 00                NOP      
001C16 00                NOP      
001C17 12334B            LCALL    ?L?COM0034
001C1A 00                NOP      
001C1B 00                NOP      
001C1C 00                NOP      
001C1D 00                NOP      
001C1E 123386            LCALL    ?L?COM003B
001C21 00                NOP      
001C22 D297              SETB     IO_DUT_C2M_SCL
001C24 00                NOP      
001C25 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 25


  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
001C26 00                NOP      
001C27 00                NOP      
001C28 C297              CLR      IO_DUT_C2M_SCL
001C2A 00                NOP      
001C2B 00                NOP      
001C2C A2A0              MOV      C,IO_DUT_C2M_SDA
001C2E D297              SETB     IO_DUT_C2M_SCL
001C30 9230              MOV      bC2Bit0,C
001C32 00                NOP      
001C33 00                NOP      
001C34 C297              CLR      IO_DUT_C2M_SCL
001C36 00                NOP      
001C37 00                NOP      
001C38 A2A0              MOV      C,IO_DUT_C2M_SDA
001C3A D297              SETB     IO_DUT_C2M_SCL
001C3C 9231              MOV      bC2Bit1,C
001C3E 00                NOP      
001C3F 00                NOP      
001C40 C297              CLR      IO_DUT_C2M_SCL
001C42 00                NOP      
001C43 00                NOP      
001C44 A2A0              MOV      C,IO_DUT_C2M_SDA
001C46 D297              SETB     IO_DUT_C2M_SCL
001C48 9232              MOV      bC2Bit2,C
001C4A 00                NOP      
001C4B 00                NOP      
001C4C C297              CLR      IO_DUT_C2M_SCL
001C4E 00                NOP      
001C4F 00                NOP      
001C50 A2A0              MOV      C,IO_DUT_C2M_SDA
001C52 D297              SETB     IO_DUT_C2M_SCL
001C54 9233              MOV      bC2Bit3,C
001C56 00                NOP      
001C57 00                NOP      
001C58 C297              CLR      IO_DUT_C2M_SCL
001C5A 00                NOP      
001C5B 00                NOP      
001C5C A2A0              MOV      C,IO_DUT_C2M_SDA
001C5E D297              SETB     IO_DUT_C2M_SCL
001C60 9234              MOV      bC2Bit4,C
001C62 00                NOP      
001C63 00                NOP      
001C64 C297              CLR      IO_DUT_C2M_SCL
001C66 00                NOP      
001C67 00                NOP      
001C68 A2A0              MOV      C,IO_DUT_C2M_SDA
001C6A D297              SETB     IO_DUT_C2M_SCL
001C6C 9235              MOV      bC2Bit5,C
001C6E 00                NOP      
001C6F 00                NOP      
001C70 C297              CLR      IO_DUT_C2M_SCL
001C72 00                NOP      
001C73 00                NOP      
001C74 A2A0              MOV      C,IO_DUT_C2M_SDA
001C76 D297              SETB     IO_DUT_C2M_SCL
001C78 9236              MOV      bC2Bit6,C
001C7A 00                NOP      
001C7B 00                NOP      
001C7C C297              CLR      IO_DUT_C2M_SCL
001C7E 00                NOP      
001C7F 00                NOP      
001C80 123284            LCALL    ?L?COM0021
  217:     c2m_RxStop();       /* rx frame stop */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 26


  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
001C83 AF26              MOV      R7,vC2Data
  223: }
001C85 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
  447:     vDevice.U32 = 0xFFFFFFFFUL;
001C86 74FF              MOV      A,#0FFH
001C88 F536              MOV      vDevice+03H,A
001C8A F535              MOV      vDevice+02H,A
001C8C F534              MOV      vDevice+01H,A
001C8E F533              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
001C90 209702            JB       IO_DUT_C2M_SCL,$ + 5H
001C93 A120              AJMP     _exit?DRV_C2M
001C95 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
001C98 A120              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
  453:     }
  454: 
  455:     drv_c2m_Init();
001C9A         ?C0852?DRV_C2M:
001C9A 1232E0            LCALL    ?L?COM002B
001C9D 53A57F            ANL      P1MDOUT,#07FH
001CA0 7F02              MOV      R7,#02H
001CA2 D1B7              ACALL    _c2m_WriteAR
001CA4 122F30            LCALL    _c2m_WriteDR
001CA7 7F04              MOV      R7,#04H
001CA9 122F30            LCALL    _c2m_WriteDR
001CAC 7F01              MOV      R7,#01H
001CAE 122F30            LCALL    _c2m_WriteDR
001CB1 7F14              MOV      R7,#014H
001CB3 7E00              MOV      R6,#00H
001CB5 122B28            LCALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
001CB8 E4                CLR      A
001CB9 FF                MOV      R7,A
001CBA 1217F0            LCALL    _drv_c2m_ReadSFR
001CBD 8F33              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
001CBF 7F01              MOV      R7,#01H
001CC1 1217F0            LCALL    _drv_c2m_ReadSFR
001CC4 8F34              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
001CC6 E533              MOV      A,vDevice
001CC8 F4                CPL      A
001CC9 6055              JZ       _exit?DRV_C2M
  462:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 27


  463:         /* no device probed */
  464:         goto _exit;
  465:     }
001CCB         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
001CCB 7516B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
001CCE 1234A4            LCALL    ?L?COM005E
001CD1 716D              ACALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
001CD3 F126              ACALL    drv_c2m_ReadData
001CD5 EF                MOV      A,R7
001CD6 640D              XRL      A,#0DH
001CD8 601F              JZ       ?C0863?DRV_C2M
  472:     {
  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
001CDA 7516AD            MOV      vFPDAT,#0ADH
  475:         c2m_WriteAR(vFPDAT);
001CDD 1234A4            LCALL    ?L?COM005E
001CE0 1233AA            LCALL    ?L?COM003F
001CE3         ?C0870?DRV_C2M:
001CE3 71FC              ACALL    c2m_ReadAR
001CE5 EF                MOV      A,R7
001CE6 20E00B            JB       ACC.0,?C0868?DRV_C2M
001CE9 7837              MOV      R0,#LOW _timeout
001CEB 123170            LCALL    ?L?COM000F
001CEE 6004              JZ       ?C0868?DRV_C2M
001CF0 513A              ACALL    ?L?COM0008
001CF2 80EF              SJMP     ?C0870?DRV_C2M
001CF4         ?C0868?DRV_C2M:
001CF4 1232D9            LCALL    ?L?COM002A
001CF7 7027              JNZ      _exit?DRV_C2M
001CF9         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
001CF9         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
001CF9 F126              ACALL    drv_c2m_ReadData
001CFB 8F35              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
001CFD AF16              MOV      R7,vFPDAT
001CFF D1B7              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
001D01 7F01              MOV      R7,#01H
001D03 1233AA            LCALL    ?L?COM003F
001D06         ?C0879?DRV_C2M:
001D06 71FC              ACALL    c2m_ReadAR
001D08 EF                MOV      A,R7
001D09 20E00B            JB       ACC.0,?C0877?DRV_C2M
001D0C 7837              MOV      R0,#LOW _timeout
001D0E 123170            LCALL    ?L?COM000F
001D11 6004              JZ       ?C0877?DRV_C2M
001D13 513A              ACALL    ?L?COM0008
001D15 80EF              SJMP     ?C0879?DRV_C2M
001D17         ?C0877?DRV_C2M:
001D17 B129              ACALL    c2m_ReadDR
001D19 BF0D04            CJNE     R7,#0DH,_exit?DRV_C2M
001D1C         ?C0881?DRV_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 28


001D1C         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
001D1C F126              ACALL    drv_c2m_ReadData
001D1E 8F36              MOV      vDevice+03H,R7
  486: 
  487: _exit:
001D20         _exit:
  488:     return vDevice.U32;
001D20 AF36              MOV      R7,vDevice+03H
001D22 AE35              MOV      R6,vDevice+02H
001D24 AD34              MOV      R5,vDevice+01H
001D26 AC33              MOV      R4,vDevice
  489: }
001D28 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
001D29 C243              CLR      bIns0
001D2B C244              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
001D2D C245              CLR      bLength0
001D2F C246              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
001D31 30AF05            JNB      EA,?C0584?DRV_C2M
001D34 C2AF              CLR      EA
001D36 D3                SETB     C
001D37 8001              SJMP     ?C0585?DRV_C2M
001D39         ?C0584?DRV_C2M:
001D39 C3                CLR      C
001D3A         ?C0585?DRV_C2M:
001D3A 1231FD            LCALL    ?L?COM0017
001D3D 00                NOP      
001D3E 00                NOP      
001D3F 00                NOP      
001D40 00                NOP      
001D41 123295            LCALL    ?L?COM0024
001D44 00                NOP      
001D45 00                NOP      
001D46 00                NOP      
001D47 00                NOP      
001D48 12334B            LCALL    ?L?COM0034
001D4B 00                NOP      
001D4C 00                NOP      
001D4D 00                NOP      
001D4E 00                NOP      
001D4F 12342F            LCALL    ?L?COM0051
001D52 00                NOP      
001D53 00                NOP      
001D54 00                NOP      
001D55 00                NOP      
001D56 123426            LCALL    ?L?COM0050
001D59 00                NOP      
001D5A 00                NOP      
001D5B 00                NOP      
001D5C 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 29


001D5D 123386            LCALL    ?L?COM003B
001D60 00                NOP      
001D61 D297              SETB     IO_DUT_C2M_SCL
001D63 00                NOP      
001D64 00                NOP      
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
001D65 754927            MOV      _timeout,#027H
001D68 754A10            MOV      _timeout+01H,#010H
001D6B         ?C0687?DRV_C2M:
001D6B 00                NOP      
001D6C 00                NOP      
001D6D C297              CLR      IO_DUT_C2M_SCL
001D6F 00                NOP      
001D70 00                NOP      
001D71 5134              ACALL    ?L?COM0007
001D73 20300D            JB       bC2Bit0,?C0700?DRV_C2M
001D76 E54A              MOV      A,_timeout+01H
001D78 154A              DEC      _timeout+01H
001D7A AE49              MOV      R6,_timeout
001D7C 7002              JNZ      ?C1014?DRV_C2M
001D7E 1549              DEC      _timeout
001D80         ?C1014?DRV_C2M:
001D80 4E                ORL      A,R6
001D81 70E8              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
001D83         ?C0700?DRV_C2M:
001D83 00                NOP      
001D84 00                NOP      
001D85 C297              CLR      IO_DUT_C2M_SCL
001D87 00                NOP      
001D88 00                NOP      
001D89 A2A0              MOV      C,IO_DUT_C2M_SDA
001D8B D297              SETB     IO_DUT_C2M_SCL
001D8D 9230              MOV      bC2Bit0,C
001D8F 00                NOP      
001D90 00                NOP      
001D91 C297              CLR      IO_DUT_C2M_SCL
001D93 00                NOP      
001D94 00                NOP      
001D95 A2A0              MOV      C,IO_DUT_C2M_SDA
001D97 D297              SETB     IO_DUT_C2M_SCL
001D99 9231              MOV      bC2Bit1,C
001D9B 00                NOP      
001D9C 00                NOP      
001D9D C297              CLR      IO_DUT_C2M_SCL
001D9F 00                NOP      
001DA0 00                NOP      
001DA1 A2A0              MOV      C,IO_DUT_C2M_SDA
001DA3 D297              SETB     IO_DUT_C2M_SCL
001DA5 9232              MOV      bC2Bit2,C
001DA7 00                NOP      
001DA8 00                NOP      
001DA9 C297              CLR      IO_DUT_C2M_SCL
001DAB 00                NOP      
001DAC 00                NOP      
001DAD A2A0              MOV      C,IO_DUT_C2M_SDA
001DAF D297              SETB     IO_DUT_C2M_SCL
001DB1 9233              MOV      bC2Bit3,C
001DB3 00                NOP      
001DB4 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 30


001DB5 C297              CLR      IO_DUT_C2M_SCL
001DB7 00                NOP      
001DB8 00                NOP      
001DB9 A2A0              MOV      C,IO_DUT_C2M_SDA
001DBB D297              SETB     IO_DUT_C2M_SCL
001DBD 9234              MOV      bC2Bit4,C
001DBF 00                NOP      
001DC0 00                NOP      
001DC1 C297              CLR      IO_DUT_C2M_SCL
001DC3 00                NOP      
001DC4 00                NOP      
001DC5 A2A0              MOV      C,IO_DUT_C2M_SDA
001DC7 D297              SETB     IO_DUT_C2M_SCL
001DC9 9235              MOV      bC2Bit5,C
001DCB 00                NOP      
001DCC 00                NOP      
001DCD C297              CLR      IO_DUT_C2M_SCL
001DCF 00                NOP      
001DD0 00                NOP      
001DD1 A2A0              MOV      C,IO_DUT_C2M_SDA
001DD3 D297              SETB     IO_DUT_C2M_SCL
001DD5 9236              MOV      bC2Bit6,C
001DD7 00                NOP      
001DD8 00                NOP      
001DD9 C297              CLR      IO_DUT_C2M_SCL
001DDB 00                NOP      
001DDC 00                NOP      
001DDD 123284            LCALL    ?L?COM0021
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
001DE0 AF26              MOV      R7,vC2Data
  272: }
001DE2 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
001DE3 C238              CLR      bDone
  511:     if (!drv_c2m_IsReady())
001DE5 309752            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001DE8 30A04F            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
001DEB         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
001DEB AF16              MOV      R7,vFPDAT
001DED D1B7              ACALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
001DEF 7F03              MOV      R7,#03H
001DF1 1232B1            LCALL    ?L?COM0026
001DF4         ?C0892?DRV_C2M:
001DF4 71FC              ACALL    c2m_ReadAR
001DF6 EF                MOV      A,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 31


001DF7 20E00B            JB       ACC.0,?C0890?DRV_C2M
001DFA 7833              MOV      R0,#LOW _timeout
001DFC 123170            LCALL    ?L?COM000F
001DFF 6004              JZ       ?C0890?DRV_C2M
001E01 513A              ACALL    ?L?COM0008
001E03 80EF              SJMP     ?C0892?DRV_C2M
001E05         ?C0890?DRV_C2M:
001E05 1232D9            LCALL    ?L?COM002A
001E08 7030              JNZ      _exit?DRV_C2M
001E0A         ?C0894?DRV_C2M:
001E0A         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
001E0A 7FDE              MOV      R7,#0DEH
001E0C 716D              ACALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
001E0E 7FAD              MOV      R7,#0ADH
001E10 716D              ACALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
001E12 7FA5              MOV      R7,#0A5H
001E14 716D              ACALL    _drv_c2m_WriteData
  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
001E16 753600            MOV      _timeout+03H,#00H
001E19 75352D            MOV      _timeout+02H,#02DH
001E1C 753431            MOV      _timeout+01H,#031H
001E1F 753301            MOV      _timeout,#01H
001E22         ?C0901?DRV_C2M:
001E22 71FC              ACALL    c2m_ReadAR
001E24 EF                MOV      A,R7
001E25 20E00B            JB       ACC.0,?C0899?DRV_C2M
001E28 7833              MOV      R0,#LOW _timeout
001E2A 123170            LCALL    ?L?COM000F
001E2D 6004              JZ       ?C0899?DRV_C2M
001E2F 513A              ACALL    ?L?COM0008
001E31 80EF              SJMP     ?C0901?DRV_C2M
001E33         ?C0899?DRV_C2M:
001E33 B129              ACALL    c2m_ReadDR
001E35 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001E38         ?C0903?DRV_C2M:
001E38         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
001E38 D238              SETB     bDone
  525: 
  526: _exit:
001E3A         _exit:
  527:     return bDone;
001E3A A238              MOV      C,bDone
  528: }
001E3C 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
001E3D 12341D            LCALL    ?L?COM004F
;---- Variable 'vCount' assigned to Register 'R3' ----
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
001E40 EB                MOV      A,R3
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 32


001E41 7005              JNZ      ?C0936?DRV_C2M
001E43 7E01              MOV      R6,#01H
001E45 FF                MOV      R7,A
001E46 8004              SJMP     ?C0937?DRV_C2M
001E48         ?C0936?DRV_C2M:
001E48 EB                MOV      A,R3
001E49 FF                MOV      R7,A
001E4A 7E00              MOV      R6,#00H
001E4C         ?C0937?DRV_C2M:
001E4C 8E3F              MOV      vLen,R6
001E4E 8F40              MOV      vLen+01H,R7
  595:     BOOL    bDone = FALSE;
001E50 C238              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
001E52 30975F            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001E55 30A05C            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
001E58         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
001E58 AF16              MOV      R7,vFPDAT
001E5A D1B7              ACALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
001E5C 7F06              MOV      R7,#06H
001E5E 1231EE            LCALL    ?L?COM0015
001E61         ?C0947?DRV_C2M:
001E61 71FC              ACALL    c2m_ReadAR
001E63 EF                MOV      A,R7
001E64 20E009            JB       ACC.0,?C0945?DRV_C2M
001E67 12316E            LCALL    ?L?COM000E
001E6A 6004              JZ       ?C0945?DRV_C2M
001E6C 513A              ACALL    ?L?COM0008
001E6E 80F1              SJMP     ?C0947?DRV_C2M
001E70         ?C0945?DRV_C2M:
001E70 1232D9            LCALL    ?L?COM002A
001E73 703F              JNZ      _exit?DRV_C2M
001E75         ?C0949?DRV_C2M:
001E75         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001E75 E53D              MOV      A,vAddr
001E77 FF                MOV      R7,A
001E78 716D              ACALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001E7A AF3E              MOV      R7,vAddr+01H
001E7C 1231E9            LCALL    ?L?COM0014
001E7F         ?C0956?DRV_C2M:
001E7F 71FC              ACALL    c2m_ReadAR
001E81 EF                MOV      A,R7
001E82 20E009            JB       ACC.0,?C0954?DRV_C2M
001E85 12316E            LCALL    ?L?COM000E
001E88 6004              JZ       ?C0954?DRV_C2M
001E8A 513A              ACALL    ?L?COM0008
001E8C 80F1              SJMP     ?C0956?DRV_C2M
001E8E         ?C0954?DRV_C2M:
001E8E B129              ACALL    c2m_ReadDR
001E90 BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
001E93         ?C0958?DRV_C2M:
001E93         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 33


  610:     while (vLen--)
001E93 123344            LCALL    ?L?COM0033
001E96 7002              JNZ      ?C1016?DRV_C2M
001E98 153F              DEC      vLen
001E9A         ?C1016?DRV_C2M:
001E9A 4E                ORL      A,R6
001E9B 6015              JZ       ?C0960?DRV_C2M
  611:     {
  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
001E9D F126              ACALL    drv_c2m_ReadData
001E9F 053C              INC      pBuf+01H
001EA1 E53C              MOV      A,pBuf+01H
001EA3 AC3B              MOV      R4,pBuf
001EA5 7002              JNZ      ?C1017?DRV_C2M
001EA7 053B              INC      pBuf
001EA9         ?C1017?DRV_C2M:
001EA9 14                DEC      A
001EAA F582              MOV      DPL,A
001EAC 8C83              MOV      DPH,R4
001EAE EF                MOV      A,R7
001EAF F0                MOVX     @DPTR,A
  614:     }
001EB0 80E1              SJMP     ?C0959?DRV_C2M
001EB2         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
001EB2 D238              SETB     bDone
  616: 
  617: _exit:
001EB4         _exit:
  618:     return bDone;
001EB4 A238              MOV      C,bDone
  619: }
001EB6 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
001EB7 D243              SETB     bIns0
001EB9 D244              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
001EBB 8F26              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
001EBD 30AF05            JNB      EA,?C0007?DRV_C2M
001EC0 C2AF              CLR      EA
001EC2 D3                SETB     C
001EC3 8001              SJMP     ?C0008?DRV_C2M
001EC5         ?C0007?DRV_C2M:
001EC5 C3                CLR      C
001EC6         ?C0008?DRV_C2M:
001EC6 1231FD            LCALL    ?L?COM0017
001EC9 00                NOP      
001ECA 00                NOP      
001ECB 00                NOP      
001ECC 00                NOP      
001ECD 123295            LCALL    ?L?COM0024
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 34


001ED0 00                NOP      
001ED1 00                NOP      
001ED2 00                NOP      
001ED3 00                NOP      
001ED4 12334B            LCALL    ?L?COM0034
001ED7 00                NOP      
001ED8 00                NOP      
001ED9 00                NOP      
001EDA 00                NOP      
001EDB 123477            LCALL    ?L?COM0059
001EDE 00                NOP      
001EDF 00                NOP      
001EE0 00                NOP      
001EE1 00                NOP      
001EE2 12346E            LCALL    ?L?COM0058
001EE5 00                NOP      
001EE6 00                NOP      
001EE7 00                NOP      
001EE8 00                NOP      
001EE9 123465            LCALL    ?L?COM0057
001EEC 00                NOP      
001EED 00                NOP      
001EEE 00                NOP      
001EEF 00                NOP      
001EF0 12345C            LCALL    ?L?COM0056
001EF3 00                NOP      
001EF4 00                NOP      
001EF5 00                NOP      
001EF6 00                NOP      
001EF7 123453            LCALL    ?L?COM0055
001EFA 00                NOP      
001EFB 00                NOP      
001EFC 00                NOP      
001EFD 00                NOP      
001EFE 12344A            LCALL    ?L?COM0054
001F01 00                NOP      
001F02 00                NOP      
001F03 00                NOP      
001F04 00                NOP      
001F05 123441            LCALL    ?L?COM0053
001F08 00                NOP      
001F09 00                NOP      
001F0A 00                NOP      
001F0B 00                NOP      
001F0C 123438            LCALL    ?L?COM0052
001F0F 00                NOP      
001F10 00                NOP      
001F11 00                NOP      
001F12 00                NOP      
001F13 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
  197:     c2m_TxStop();       /* tx frame stop */
001F15 D2A0              SETB     IO_DUT_C2M_SDA
001F17 53A6FE            ANL      P2MDOUT,#0FEH
001F1A 123205            LCALL    ?L?COM0018
001F1D 00                NOP      
001F1E 00                NOP      
001F1F 00                NOP      
001F20 00                NOP      
001F21 D297              SETB     IO_DUT_C2M_SCL
001F23 02328D            LJMP     ?L?COM0023
  198: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 35


  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
001F26 E4                CLR      A
001F27 754810            MOV      _timeout+03H,#010H
001F2A 754727            MOV      _timeout+02H,#027H
001F2D F546              MOV      _timeout+01H,A
001F2F F545              MOV      _timeout,A
001F31         ?C0794?DRV_C2M:
001F31 71FC              ACALL    c2m_ReadAR
001F33 EF                MOV      A,R7
001F34 20E00B            JB       ACC.0,?C0792?DRV_C2M
001F37 7845              MOV      R0,#LOW _timeout
001F39 123170            LCALL    ?L?COM000F
001F3C 6004              JZ       ?C0792?DRV_C2M
001F3E 513A              ACALL    ?L?COM0008
001F40 80EF              SJMP     ?C0794?DRV_C2M
001F42         ?C0792?DRV_C2M:
  367: }
001F42 A129              AJMP     c2m_ReadDR
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  141: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  142: {
  143:     UINT8   vLoop;
  144:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
001F44 E4                CLR      A
001F45 FD                MOV      R5,A
  145: 
  146:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
001F46 7C08              MOV      R4,#08H
001F48         ?C0062?PKT_I2CM:
  147:     {
  148:         PKT_I2CM_SET_SCL(HIGH);
001F48 123167            LCALL    ?L?COM000D
001F4B 12332B            LCALL    ?L?COM0030
001F4E         ?C0075?PKT_I2CM:
001F4E 20820E            JB       IO_DUT_I2CM_SCL,?C0066?PKT_I2CM
001F51 123344            LCALL    ?L?COM0033
001F54 7002              JNZ      ?C0376?PKT_I2CM
001F56 153F              DEC      _loop
001F58         ?C0376?PKT_I2CM:
001F58 4E                ORL      A,R6
001F59 6004              JZ       ?C0066?PKT_I2CM
001F5B 513A              ACALL    ?L?COM0008
001F5D 80EF              SJMP     ?C0075?PKT_I2CM
001F5F         ?C0066?PKT_I2CM:
  149:         vData <<= 1;
001F5F ED                MOV      A,R5
001F60 25E0              ADD      A,ACC
001F62 FD                MOV      R5,A
  150:         vData |= PKT_I2CM_GET_SDA();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 36


001F63 A292              MOV      C,IO_DUT_I2CM_SDA
001F65 E4                CLR      A
001F66 33                RLC      A
001F67 4205              ORL      AR5,A
  151:         PKT_I2CM_SET_SCL(LOW);
001F69 123167            LCALL    ?L?COM000D
001F6C C282              CLR      IO_DUT_I2CM_SCL
001F6E 8000              SJMP     ?C0064?PKT_I2CM
  152:     }
001F70         ?C0064?PKT_I2CM:
001F70 DCD6              DJNZ     R4,?C0062?PKT_I2CM
001F72         ?C0091?PKT_I2CM:
  153: 
  154:     /* send ACK/NAK */
  155:     PKT_I2CM_SET_SDA(bSendNAK);
001F72 A23A              MOV      C,bSendNAK
001F74 9292              MOV      IO_DUT_I2CM_SDA,C
  156:     PKT_I2CM_SET_SCL(HIGH);
001F76 123167            LCALL    ?L?COM000D
001F79 12332B            LCALL    ?L?COM0030
001F7C         ?C0102?PKT_I2CM:
001F7C 20820E            JB       IO_DUT_I2CM_SCL,?C0109?PKT_I2CM
001F7F 123344            LCALL    ?L?COM0033
001F82 7002              JNZ      ?C0378?PKT_I2CM
001F84 153F              DEC      _loop
001F86         ?C0378?PKT_I2CM:
001F86 4E                ORL      A,R6
001F87 6004              JZ       ?C0109?PKT_I2CM
001F89 513A              ACALL    ?L?COM0008
001F8B 80EF              SJMP     ?C0102?PKT_I2CM
  157:     PKT_I2CM_SET_SCL(LOW);
001F8D         ?C0109?PKT_I2CM:
001F8D 123167            LCALL    ?L?COM000D
001F90 C282              CLR      IO_DUT_I2CM_SCL
001F92 8000              SJMP     ?C0118?PKT_I2CM
001F94         ?C0118?PKT_I2CM:
  158:     PKT_I2CM_SET_SDA(HIGH);
001F94 D292              SETB     IO_DUT_I2CM_SDA
  159: 
  160:     return vData;
001F96 AF05              MOV      R7,AR5
  161: }
001F98 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
001F99 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
001F9C 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
001F9F         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
001F9F C3                CLR      C
001FA0 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
001FA1         ?C0831?DRV_C2M:
001FA1 1232E0            LCALL    ?L?COM002B
001FA4 53A57F            ANL      P1MDOUT,#07FH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 37


  425:     return TRUE;
001FA7 D3                SETB     C
  426: }
001FA8 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
001FA9 438E10            ORL      CKCON,#010H
001FAC E4                CLR      A
001FAD F5C8              MOV      TMR2CN,A
001FAF 75CA40            MOV      TMR2RLL,#040H
001FB2 75CC40            MOV      TMR2L,#040H
001FB5 75CBA2            MOV      TMR2RLH,#0A2H
001FB8 75CDA2            MOV      TMR2H,#0A2H
001FBB C2CF              CLR      TF2H
001FBD D2CA              SETB     TR2
001FBF C2BD              CLR      PT2
001FC1 D2AD              SETB     ET2
001FC3 F50F              MOV      vTickCount+03H,A
001FC5 F50E              MOV      vTickCount+02H,A
001FC7 F50D              MOV      vTickCount+01H,A
001FC9 F50C              MOV      vTickCount,A
   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
001FCB 122E24            LCALL    DRV_USB_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
001FCE 75D107            MOV      REF0CN,#07H
001FD1 7FD0              MOV      R7,#0D0H
001FD3 7E07              MOV      R6,#07H
001FD5 513E              ACALL    _DRV_CPU_DelayUs
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
001FD7 F1E4              ACALL    DRV_ADC_Init
;----                  JMP      DRV_C2M_Init
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 38




----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
001FD9 53A57F            ANL      P1MDOUT,#07FH
001FDC 53A6FE            ANL      P2MDOUT,#0FEH
001FDF D297              SETB     IO_DUT_C2M_SCL
001FE1 D2A0              SETB     IO_DUT_C2M_SDA
  693: 
001FE3 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_ADC_Init (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   88: void DRV_ADC_Init(void)
   89: {
   90:   /* AD0SC value */
   91:   #define AD0SC_VAL (((CORE_CLOCK*10/DRV_ADC_SAR_RATE/1000/ADC_SAR_ConvClock+5)/10-1)&0x1F)
   92: 
   93:     /* default:
   94:      *  positive channel: temperature sensor;
   95:      *  negative channel: GND;
   96:      */
   97:     AMX0P = ADC_CHP_TEMP;
001FE4 75BB1E            MOV      AMX0P,#01EH
   98:     AMX0N = ADC_CHN_GND;
001FE7 75BA1F            MOV      AMX0N,#01FH
   99: 
  100:     /* ADC control:
  101:      *  right justify;
  102:      *  ADC start-of-conversion source is write of '1' to ADC0BUSY;
  103:      *  clear ADC flag;
  104:      *  enable ADC;
  105:      */
  106:     ADC0CF = (AD0SC_VAL<<3) | (0<<2);
001FEA 75BCB8            MOV      ADC0CF,#0B8H
  107:     ADC0CN = 0x80;
001FED 75E880            MOV      ADC0CN,#080H
  108: }
001FF0 22                RET      
----- FUNCTION DRV_ADC_Init (END) -------


----- FUNCTION _CFG_ROM_SET8 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
   71: 
001FF1 8D44              MOV      vData,R5
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
001FF3 7A00              MOV      R2,#HIGH vData
001FF5 7B44              MOV      R3,#LOW vData
001FF7 7D01              MOV      R5,#01H
001FF9 02222A            LJMP     _DRV_FLASH_Update
----- FUNCTION _CFG_ROM_SET8 (END) -------


----- FUNCTION _pkt_i2cm_vs_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  287: static BOOL pkt_i2cm_vs_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  288: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 39


002000 12349B            LCALL    ?L?COM005D
002003 A3                INC      DPTR
002004 1231E1            LCALL    ?L?COM0013
  289:     static UINT8 vRegOffset = 0x00;
  290:     UINT16  vWriteLen = pPayload->vWriteLen;
  291:     UINT16  vReadLen  = pPayload->vReadLen;
002007 12339B            LCALL    ?L?COM003E
  292: 
  293:     /* send write stream */
  294:     if (vWriteLen != 0)
00200A E538              MOV      A,vWriteLen+01H
00200C 4537              ORL      A,vWriteLen
00200E 6036              JZ       ?C0331?PKT_I2CM
  295:     {
  296:         /* 1st byte is always register offset */
  297:         vRegOffset = pPayload->aBuf[0];
002010 8F82              MOV      DPL,R7
002012 8E83              MOV      DPH,R6
002014 E582              MOV      A,DPL
002016 2405              ADD      A,#05H
002018 F582              MOV      DPL,A
00201A E4                CLR      A
00201B 3583              ADDC     A,DPH
00201D F583              MOV      DPH,A
00201F E0                MOVX     A,@DPTR
002020 F514              MOV      vRegOffset,A
  298:         if (vWriteLen > 0x100)
002022 D3                SETB     C
002023 E538              MOV      A,vWriteLen+01H
002025 9400              SUBB     A,#00H
002027 E537              MOV      A,vWriteLen
002029 9401              SUBB     A,#01H
00202B 4001              JC       ?C0332?PKT_I2CM
  299:         {
  300:             /* write length overflow */
  301:             return FALSE;
00202D 22                RET      
  302:         }
00202E         ?C0332?PKT_I2CM:
  303: 
  304:         /* send write buffer */
  305:         CFG_DB_WriteFlush(vRegOffset, (UINT8)(vWriteLen-1), &(pPayload->aBuf[1]));
00202E E538              MOV      A,vWriteLen+01H
002030 14                DEC      A
002031 FD                MOV      R5,A
002032 E536              MOV      A,pPayload+01H
002034 2406              ADD      A,#06H
002036 FB                MOV      R3,A
002037 E4                CLR      A
002038 3535              ADDC     A,pPayload
00203A FA                MOV      R2,A
00203B AF14              MOV      R7,vRegOffset
00203D 11F0              ACALL    _CFG_DB_WriteFlush
  306:         vRegOffset = (UINT8)(vRegOffset+vWriteLen-1);
00203F E514              MOV      A,vRegOffset
002041 2538              ADD      A,vWriteLen+01H
002043 14                DEC      A
002044 F514              MOV      vRegOffset,A
  307:     }
002046         ?C0331?PKT_I2CM:
  308: 
  309:     /* send read stream */
  310:     if (vReadLen != 0)
002046 E53A              MOV      A,vReadLen+01H
002048 4539              ORL      A,vReadLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 40


00204A 601C              JZ       ?C0334?PKT_I2CM
  311:     {
  312:         UINT16  vLoop;
  313: 
  314:         /* read data */
  315:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
00204C E4                CLR      A
00204D F53B              MOV      vLoop,A
00204F F53C              MOV      vLoop+01H,A
002051         ?C0335?PKT_I2CM:
002051 1234BC            LCALL    ?L?COM0061
002054 9539              SUBB     A,vReadLen
002056 5010              JNC      ?C0334?PKT_I2CM
  316:         {
  317:             pPayload->aBuf[vWriteLen+vLoop] = CFG_DB_ReadByte(vRegOffset++);
002058 AF14              MOV      R7,vRegOffset
00205A 0514              INC      vRegOffset
00205C 122D17            LCALL    _CFG_DB_ReadByte
00205F 123232            LCALL    ?L?COM001A
002062 7002              JNZ      ?C0393?PKT_I2CM
002064 053B              INC      vLoop
002066         ?C0393?PKT_I2CM:
002066 80E9              SJMP     ?C0335?PKT_I2CM
  318:         }
  319:     }
002068         ?C0334?PKT_I2CM:
  320: 
  321:     return TRUE;
002068 D3                SETB     C
  322: }
002069 22                RET      
----- FUNCTION _pkt_i2cm_vs_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  336: UINT16 PKT_I2CM_Stream(void)
  337: {
  338:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  339:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
00206A 753300            MOV      pPayload,#HIGH vFrame+0CH
00206D 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
  340: 
  341:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  342:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
002070 12337E            LCALL    ?L?COM003A
002073 E0                MOVX     A,@DPTR
002074 FE                MOV      R6,A
002075 A3                INC      DPTR
002076 E0                MOVX     A,@DPTR
002077 FF                MOV      R7,A
002078 2405              ADD      A,#05H
00207A FD                MOV      R5,A
00207B E4                CLR      A
00207C 3E                ADDC     A,R6
00207D FC                MOV      R4,A
00207E 90004A            MOV      DPTR,#vFrame+0AH
002081 E0                MOVX     A,@DPTR
002082 B50424            CJNE     A,AR4,?C0361?PKT_I2CM
002085 A3                INC      DPTR
002086 E0                MOVX     A,@DPTR
002087 B5051F            CJNE     A,AR5,?C0361?PKT_I2CM
00208A 12337E            LCALL    ?L?COM003A
00208D A3                INC      DPTR
00208E A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 41


00208F E0                MOVX     A,@DPTR
002090 FC                MOV      R4,A
002091 A3                INC      DPTR
002092 E0                MOVX     A,@DPTR
002093 FD                MOV      R5,A
002094 EF                MOV      A,R7
002095 2D                ADD      A,R5
002096 FF                MOV      R7,A
002097 EE                MOV      A,R6
002098 3C                ADDC     A,R4
002099 FE                MOV      R6,A
00209A E4                CLR      A
00209B FC                MOV      R4,A
00209C FD                MOV      R5,A
00209D 7B33              MOV      R3,#033H
00209F 7A04              MOV      R2,#04H
0020A1 F9                MOV      R1,A
0020A2 F8                MOV      R0,A
0020A3 C3                CLR      C
0020A4 120607            LCALL    ?C?SLCMP
0020A7 5005              JNC      ?C0360?PKT_I2CM
0020A9         ?C0361?PKT_I2CM:
  343:     {
  344:         return PKT_REPLY_Fail_InvalidLen;
0020A9 7E03              MOV      R6,#03H
0020AB 7F04              MOV      R7,#04H
0020AD 22                RET      
  345:     }
0020AE         ?C0360?PKT_I2CM:
  346: 
  347:   #if PKT_I2CM_VS_SUPPORT
  348:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
0020AE 853482            MOV      DPL,pPayload+01H
0020B1 853383            MOV      DPH,pPayload
0020B4 E0                MOVX     A,@DPTR
0020B5 AF34              MOV      R7,pPayload+01H
0020B7 AE33              MOV      R6,pPayload
0020B9 B4FE04            CJNE     A,#0FEH,?C0364?PKT_I2CM
0020BC 1100              ACALL    _pkt_i2cm_vs_Stream
0020BE 8003              SJMP     ?C0365?PKT_I2CM
0020C0         ?C0364?PKT_I2CM:
0020C0 121914            LCALL    _pkt_i2cm_Stream
0020C3         ?C0365?PKT_I2CM:
0020C3 5026              JNC      ?C0363?PKT_I2CM
  349:         pkt_i2cm_vs_Stream(pPayload) :
  350:         pkt_i2cm_Stream(pPayload))
  351:   #else
  352:     if (pkt_i2cm_Stream(pPayload))
  353:   #endif
  354:     {
  355:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  356:                            + pPayload->vWriteLen
  357:                            + pPayload->vReadLen);
0020C5 12337E            LCALL    ?L?COM003A
0020C8 E0                MOVX     A,@DPTR
0020C9 FE                MOV      R6,A
0020CA A3                INC      DPTR
0020CB E0                MOVX     A,@DPTR
0020CC 2405              ADD      A,#05H
0020CE FF                MOV      R7,A
0020CF E4                CLR      A
0020D0 3E                ADDC     A,R6
0020D1 FE                MOV      R6,A
0020D2 12337E            LCALL    ?L?COM003A
0020D5 A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 42


0020D6 A3                INC      DPTR
0020D7 E0                MOVX     A,@DPTR
0020D8 FC                MOV      R4,A
0020D9 A3                INC      DPTR
0020DA E0                MOVX     A,@DPTR
0020DB 2F                ADD      A,R7
0020DC FF                MOV      R7,A
0020DD EC                MOV      A,R4
0020DE 3E                ADDC     A,R6
0020DF 90004A            MOV      DPTR,#vFrame+0AH
0020E2 F0                MOVX     @DPTR,A
0020E3 A3                INC      DPTR
0020E4 EF                MOV      A,R7
0020E5 F0                MOVX     @DPTR,A
  358:         return PKT_REPLY_Done_ExecNoError;
0020E6 7E01              MOV      R6,#01H
0020E8 7F40              MOV      R7,#040H
0020EA 22                RET      
  359:     }
0020EB         ?C0363?PKT_I2CM:
  360:     else
  361:     {
  362:         return PKT_REPLY_Fail_I2cNoAck;
0020EB 7E03              MOV      R6,#03H
0020ED 7F40              MOV      R7,#040H
  363:     }
  364: }
0020EF 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _CFG_DB_WriteFlush (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  167: void CFG_DB_WriteFlush
  168: (
0020F0 8F3D              MOV      vOffset,R7
0020F2 8D3E              MOV      vCount,R5
0020F4 8A3F              MOV      pBuf,R2
0020F6 8B40              MOV      pBuf+01H,R3
  169:     IN       UINT8            vOffset,
  170:     IN       UINT8            vCount,
  171:     IN const UINT8 SEG_XDATA *pBuf
  172: )
  173: {
  174:     SINT8   vPID = cfg_db_GetPID(vOffset);
0020F8 122CD8            LCALL    _cfg_db_GetPID
0020FB 8F41              MOV      vPID,R7
  175:     UINT8   vPageSize;
  176: 
  177:     if ((vPID == MEMPAGE_PID_INVALID) || (vCount == 0))
0020FD E541              MOV      A,vPID
0020FF F4                CPL      A
002100 7002              JNZ      $ + 4H
002102 4129              AJMP     ?C0056?CFG_DB
002104 E53E              MOV      A,vCount
002106 7002              JNZ      $ + 4H
002108 4129              AJMP     ?C0056?CFG_DB
  178:     {
  179:         /* invalid page, or zero flush length */
  180:         return;
  181:     }
00210A         ?C0054?CFG_DB:
  182: 
  183:     /* limit Rx FIFO length to page boundary */
  184:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 43


00210A 12340A            LCALL    ?L?COM004A
00210D 4009              JC       ?C0057?CFG_DB
00210F 1233F7            LCALL    ?L?COM0048
002112 5004              JNC      ?C0057?CFG_DB
002114 7F20              MOV      R7,#020H
002116 8002              SJMP     ?C0058?CFG_DB
002118         ?C0057?CFG_DB:
002118 7F80              MOV      R7,#080H
00211A         ?C0058?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  185:     vOffset  &= (vPageSize - 1);
00211A EF                MOV      A,R7
00211B 14                DEC      A
00211C 523D              ANL      vOffset,A
  186:     if (vOffset+vCount > vPageSize)
00211E E53E              MOV      A,vCount
002120 FD                MOV      R5,A
002121 E53D              MOV      A,vOffset
002123 2D                ADD      A,R5
002124 FD                MOV      R5,A
002125 E4                CLR      A
002126 33                RLC      A
002127 FC                MOV      R4,A
002128 EF                MOV      A,R7
002129 FB                MOV      R3,A
00212A D3                SETB     C
00212B ED                MOV      A,R5
00212C 9B                SUBB     A,R3
00212D 7480              MOV      A,#080H
00212F F8                MOV      R0,A
002130 6C                XRL      A,R4
002131 98                SUBB     A,R0
002132 4008              JC       ?C0059?CFG_DB
  187:     {
  188:         vCount = (vOffset+vCount) - vPageSize;
002134 E53D              MOV      A,vOffset
002136 253E              ADD      A,vCount
002138 C3                CLR      C
002139 9F                SUBB     A,R7
00213A F53E              MOV      vCount,A
  189:     }
00213C         ?C0059?CFG_DB:
  190: 
  191:     if (vPID == MEMPAGE_PID_DIRECT_FE_60)
00213C E541              MOV      A,vPID
00213E 6401              XRL      A,#01H
002140 7027              JNZ      ?C0060?CFG_DB
  192:     {
  193:         /* A2.40-7F page */
  194: 
  195:         UINT8   vLoop;
  196:         for (vLoop=0; vLoop<vCount; vLoop++,vOffset++)
002142 F542              MOV      vLoop,A
002144         ?C0061?CFG_DB:
002144 E542              MOV      A,vLoop
002146 C3                CLR      C
002147 953E              SUBB     A,vCount
002149 501C              JNC      ?C0062?CFG_DB
  197:         {
  198:             UINT8   vData = pBuf[vLoop];
00214B 1232F5            LCALL    ?L?COM002C
00214E F543              MOV      vData,A
  199: 
  200:             switch (vOffset)
002150 E53D              MOV      A,vOffset
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 44


002152 24E5              ADD      A,#0E5H
002154 24FB              ADD      A,#0FBH
002156 5004              JNC      ?C0077?CFG_DB
002158 2408              ADD      A,#08H
00215A 7005              JNZ      ?C0063?CFG_DB
  201:             {
  202:                 case CFG(RT_EVB_CTRL):
  203:                     /* EVB/DUT related */
  204:                 case CFG(Vendor_PWD_Entry)+0:
  205:                 case CFG(Vendor_PWD_Entry)+1:
  206:                 case CFG(Vendor_PWD_Entry)+2:
  207:                 case CFG(Vendor_PWD_Entry)+3:
  208:                 case CFG(Vendor_Page_Select):
  209:                     CFG_SETV8(MEMPAGE_PID_DIRECT_FE_60, vOffset, vData);
00215C         ?C0077?CFG_DB:
00215C A83D              MOV      R0,vOffset
00215E E543              MOV      A,vData
002160 F2                MOVX     @R0,A
  210:                     break;
  211: 
  212:                 default:    /* read-only field */
  213:                     /* do nothing */
  214:                     break;
  215:             }
  216:         }
002161         ?C0063?CFG_DB:
002161 0542              INC      vLoop
002163 053D              INC      vOffset
002165 80DD              SJMP     ?C0061?CFG_DB
002167         ?C0062?CFG_DB:
  217: 
  218:         /* refresh password level */
  219:         CFG_PWD_RefreshLevel();
002167 61C3              AJMP     CFG_PWD_RefreshLevel
  220:     }
002169         ?C0060?CFG_DB:
  221:     else    /* other pages */
  222:     {
  223:         if (vPID == MEMPAGE_PID_DIRECT_FE_00)
002169 E541              MOV      A,vPID
00216B B4061B            CJNE     A,#06H,?C0083?CFG_DB
  224:         {
  225:             if (vOffset+vCount > MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
00216E E53D              MOV      A,vOffset
002170 253E              ADD      A,vCount
002172 FF                MOV      R7,A
002173 E4                CLR      A
002174 33                RLC      A
002175 FE                MOV      R6,A
002176 D3                SETB     C
002177 EF                MOV      A,R7
002178 9460              SUBB     A,#060H
00217A EE                MOV      A,R6
00217B 6480              XRL      A,#080H
00217D 9480              SUBB     A,#080H
00217F 4008              JC       ?C0083?CFG_DB
  226:             {
  227:                 /* cross-write from A2.00-5F to A2.60-7F field,
  228:                  * only accept A2.00-5F field data.
  229:                  */
  230:                 vCount = (vOffset+vCount) - MEMMAP_REAL_OFFSET(DDM_EVB_TEMP);
002181 E53D              MOV      A,vOffset
002183 253E              ADD      A,vCount
002185 24A0              ADD      A,#0A0H
002187 F53E              MOV      vCount,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 45


  231:             }
  232:         }
002189         ?C0083?CFG_DB:
  233: 
  234:         /* check password level, to make sure it's writable */
  235:         if (CFG_PWD_GetLevel() >= aPagePwdWriteTable[vPID])
002189 AF41              MOV      R7,vPID
00218B EF                MOV      A,R7
00218C 33                RLC      A
00218D 95E0              SUBB     A,ACC
00218F FE                MOV      R6,A
002190 7425              MOV      A,#LOW aPagePwdWriteTable
002192 2F                ADD      A,R7
002193 F582              MOV      DPL,A
002195 7416              MOV      A,#HIGH aPagePwdWriteTable
002197 3E                ADDC     A,R6
002198 123489            LCALL    ?L?COM005B
00219B 9F                SUBB     A,R7
00219C 5002              JNC      $ + 4H
00219E 4129              AJMP     ?C0056?CFG_DB
  236:         {
  237:             if (MEMPAGE_IsRAM(vPID))
0021A0 12340B            LCALL    ?L?COM004B
0021A3 405C              JC       ?C0086?CFG_DB
0021A5 1233F7            LCALL    ?L?COM0048
0021A8 5057              JNC      ?C0086?CFG_DB
  238:             {
  239:                 /* RAM page */
  240: 
  241:                 UINT8   vLoop;
  242:                 for (vLoop=0; vLoop<vCount; vLoop++)
0021AA E4                CLR      A
0021AB F542              MOV      vLoop,A
0021AD         ?C0087?CFG_DB:
0021AD E542              MOV      A,vLoop
0021AF C3                CLR      C
0021B0 953E              SUBB     A,vCount
0021B2 5075              JNC      ?C0056?CFG_DB
  243:                 {
  244:                     CFG_SETV8(vPID, vOffset+vLoop, pBuf[vLoop]);
0021B4 12340A            LCALL    ?L?COM004A
0021B7 401B              JC       ?C0093?CFG_DB
0021B9 1233F7            LCALL    ?L?COM0048
0021BC 5016              JNC      ?C0093?CFG_DB
0021BE 1232F5            LCALL    ?L?COM002C
0021C1 FF                MOV      R7,A
0021C2 E53D              MOV      A,vOffset
0021C4 2542              ADD      A,vLoop
0021C6 FE                MOV      R6,A
0021C7 E541              MOV      A,vPID
0021C9 14                DEC      A
0021CA C4                SWAP     A
0021CB 33                RLC      A
0021CC 54E0              ANL      A,#0E0H
0021CE 2E                ADD      A,R6
0021CF F8                MOV      R0,A
0021D0 EF                MOV      A,R7
0021D1 F2                MOVX     @R0,A
0021D2 8029              SJMP     ?C0089?CFG_DB
0021D4         ?C0093?CFG_DB:
0021D4 1234B4            LCALL    ?L?COM0060
0021D7 4024              JC       ?C0089?CFG_DB
0021D9 1234AC            LCALL    ?L?COM005F
0021DC 501F              JNC      ?C0089?CFG_DB
0021DE 123390            LCALL    ?L?COM003C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 46


0021E1         ?C0107?CFG_DB:
0021E1 C3                CLR      C
0021E2 33                RLC      A
0021E3 CE                XCH      A,R6
0021E4 33                RLC      A
0021E5 CE                XCH      A,R6
0021E6 D8F9              DJNZ     R0,?C0107?CFG_DB
0021E8 1233EF            LCALL    ?L?COM0047
0021EB E53D              MOV      A,vOffset
0021ED 2542              ADD      A,vLoop
0021EF 7C00              MOV      R4,#00H
0021F1 2F                ADD      A,R7
0021F2 FF                MOV      R7,A
0021F3 EC                MOV      A,R4
0021F4 3E                ADDC     A,R6
0021F5 FE                MOV      R6,A
0021F6 1232F5            LCALL    ?L?COM002C
0021F9 FD                MOV      R5,A
0021FA 121FF1            LCALL    _CFG_ROM_SET8
  245:                 }
0021FD         ?C0089?CFG_DB:
0021FD 0542              INC      vLoop
0021FF 80AC              SJMP     ?C0087?CFG_DB
  246:             }
002201         ?C0086?CFG_DB:
  247:             else if (MEMPAGE_IsROM(vPID))
002201 1234B4            LCALL    ?L?COM0060
002204 4023              JC       ?C0056?CFG_DB
002206 1234AC            LCALL    ?L?COM005F
002209 501E              JNC      ?C0056?CFG_DB
  248:             {
  249:                 /* ROM page */
  250:                 EEPROM_MEMCPY(MEMPAGE_ROM_LMA(vPID)+vOffset, pBuf, vCount);
00220B 123390            LCALL    ?L?COM003C
00220E         ?C0108?CFG_DB:
00220E C3                CLR      C
00220F 33                RLC      A
002210 CE                XCH      A,R6
002211 33                RLC      A
002212 CE                XCH      A,R6
002213 D8F9              DJNZ     R0,?C0108?CFG_DB
002215 1233EF            LCALL    ?L?COM0047
002218 7C00              MOV      R4,#00H
00221A EF                MOV      A,R7
00221B 253D              ADD      A,vOffset
00221D FF                MOV      R7,A
00221E EC                MOV      A,R4
00221F 3E                ADDC     A,R6
002220 FE                MOV      R6,A
002221 AB40              MOV      R3,pBuf+01H
002223 AA3F              MOV      R2,pBuf
002225 AD3E              MOV      R5,vCount
002227 512A              ACALL    _DRV_FLASH_Update
  251:             }
  252:             else
  253:             {
  254:                 /* VIRTUAL page */
  255:                 /* do nothing */
  256:             }
  257:         }
  258:     }
  259: }
002229         ?C0056?CFG_DB:
002229 22                RET      
----- FUNCTION _CFG_DB_WriteFlush (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 47




----- FUNCTION _DRV_FLASH_Update (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  179: void DRV_FLASH_Update
  180: (
00222A 8E45              MOV      vFlashAddr,R6
00222C 8F46              MOV      vFlashAddr+01H,R7
00222E 8A47              MOV      pBuf,R2
002230 8B48              MOV      pBuf+01H,R3
;---- Variable 'vLen' assigned to Register 'R1' ----
002232 A905              MOV      R1,AR5
  181:     IN       UINT16           vFlashAddr,
  182:     IN       UINT8            vLen,
  183:     IN const UINT8 SEG_XDATA *pBuf
  184: )
  185: {
  186:     UINT8  bIntStatus;
  187:     UINT8  bErase;
  188:     UINT8  vLoop;
  189:     UINT16 vPageBase;
  190:     UINT16 vPageOffset;
  191: 
  192:     /* globally lock interrupt */
  193:     bIntStatus = DRV_INT_LockGlobalInterrupt();
002234 30AF05            JNB      EA,?C0011?DRV_FLASH
002237 C2AF              CLR      EA
002239 D3                SETB     C
00223A 8001              SJMP     ?C0012?DRV_FLASH
00223C         ?C0011?DRV_FLASH:
00223C C3                CLR      C
00223D         ?C0012?DRV_FLASH:
00223D E4                CLR      A
00223E 33                RLC      A
00223F F549              MOV      bIntStatus,A
  194: 
  195:     /* calculate flash page base address & offset of this page */
  196:     vPageBase   = vFlashAddr & FLASH_PAGE_MASK;
002241 E545              MOV      A,vFlashAddr
002243 54FE              ANL      A,#0FEH
002245 F54A              MOV      vPageBase,A
002247 754B00            MOV      vPageBase+01H,#00H
  197:     vPageOffset = vFlashAddr & ~FLASH_PAGE_MASK;
00224A E545              MOV      A,vFlashAddr
00224C 5401              ANL      A,#01H
00224E F54C              MOV      vPageOffset,A
002250 85464D            MOV      vPageOffset+01H,vFlashAddr+01H
  198: 
  199:     /* check whether need to erase flash page */
  200:     bErase = FALSE;
;---- Variable 'bErase' assigned to Register 'R7' ----
002253 E4                CLR      A
002254 FF                MOV      R7,A
  201:     for (vLoop = 0; vLoop < vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R6' ----
002255 FE                MOV      R6,A
002256         ?C0013?DRV_FLASH:
002256 EE                MOV      A,R6
002257 C3                CLR      C
002258 99                SUBB     A,R1
002259 5033              JNC      ?C0014?DRV_FLASH
  202:     {
  203:         UINT8   vFlashData = CODE_U8(vPageBase+vPageOffset+vLoop);
00225B E54B              MOV      A,vPageBase+01H
00225D 254D              ADD      A,vPageOffset+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 48


00225F FD                MOV      R5,A
002260 E54A              MOV      A,vPageBase
002262 354C              ADDC     A,vPageOffset
002264 FC                MOV      R4,A
002265 EE                MOV      A,R6
002266 7A00              MOV      R2,#00H
002268 2D                ADD      A,R5
002269 FD                MOV      R5,A
00226A EA                MOV      A,R2
00226B 3C                ADDC     A,R4
00226C 8D82              MOV      DPL,R5
00226E F583              MOV      DPH,A
002270 E4                CLR      A
002271 93                MOVC     A,@A+DPTR
002272 F54E              MOV      vFlashData,A
  204:         UINT8   vRamData   = pBuf[vLoop];
002274 E548              MOV      A,pBuf+01H
002276 2E                ADD      A,R6
002277 F582              MOV      DPL,A
002279 E4                CLR      A
00227A 3547              ADDC     A,pBuf
00227C F583              MOV      DPH,A
00227E E0                MOVX     A,@DPTR
00227F F54F              MOV      vRamData,A
  205: 
  206:         if ((vFlashData & vRamData) != vRamData)
002281 554E              ANL      A,vFlashData
002283 654F              XRL      A,vRamData
002285 6004              JZ       ?C0015?DRV_FLASH
  207:         {
  208:             bErase = TRUE;
002287 7F01              MOV      R7,#01H
  209:             break;
002289 8003              SJMP     ?C0014?DRV_FLASH
  210:         }
  211:     }
00228B         ?C0015?DRV_FLASH:
00228B 0E                INC      R6
00228C 80C8              SJMP     ?C0013?DRV_FLASH
00228E         ?C0014?DRV_FLASH:
  212: 
  213:     if (!bErase)
00228E EF                MOV      A,R7
00228F 700B              JNZ      ?C0017?DRV_FLASH
  214:     {
  215:         /* no need to erase,
  216:           * just write the new data into flash is OK.
  217:           */
  218:         drv_flash_WriteBytes(vFlashAddr, vLen, (UINT16)pBuf, FALSE);
002291 1233B9            LCALL    ?L?COM0040
002294 AF46              MOV      R7,vFlashAddr+01H
002296 AE45              MOV      R6,vFlashAddr
002298 711C              ACALL    _drv_flash_WriteBytes
  219:     }
00229A 8075              SJMP     ?C0021?DRV_FLASH
00229C         ?C0017?DRV_FLASH:
  220:     else
  221:     {
  222:         UINT16 vWriteOffset;
  223: 
  224:         /* prepare cache page content, to the final flash page content:
  225:          *   1) copy other content into cache page;
  226:          *   2) update cache page with new data;
  227:          */
  228:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 49


00229C 123480            LCALL    ?L?COM005A
00229F AB4B              MOV      R3,vPageBase+01H
0022A1 AA4A              MOV      R2,vPageBase
0022A3 AD4D              MOV      R5,vPageOffset+01H
0022A5 AC4C              MOV      R4,vPageOffset
0022A7 7118              ACALL    ?L?COM0046
  229:         drv_flash_WriteBytes(vWriteOffset, vPageOffset, vPageBase, TRUE);
  230:         vWriteOffset += vPageOffset;
0022A9 E54D              MOV      A,vPageOffset+01H
0022AB 254F              ADD      A,vWriteOffset+01H
0022AD F54F              MOV      vWriteOffset+01H,A
0022AF E54C              MOV      A,vPageOffset
0022B1 354E              ADDC     A,vWriteOffset
0022B3 F54E              MOV      vWriteOffset,A
  231:         drv_flash_WriteBytes(vWriteOffset, vLen, (UINT16)pBuf, FALSE);
0022B5 1233B9            LCALL    ?L?COM0040
0022B8 7118              ACALL    ?L?COM0046
  232:         vWriteOffset += vLen;
0022BA E9                MOV      A,R1
0022BB FF                MOV      R7,A
0022BC 7E00              MOV      R6,#00H
0022BE 254F              ADD      A,vWriteOffset+01H
0022C0 F54F              MOV      vWriteOffset+01H,A
0022C2 EE                MOV      A,R6
0022C3 354E              ADDC     A,vWriteOffset
0022C5 F54E              MOV      vWriteOffset,A
  233:         drv_flash_WriteBytes(vWriteOffset,
  234:                              FLASH_PAGE_SIZE - (vPageOffset+vLen),
  235:                              vPageBase+vPageOffset + vLen,
  236:                              TRUE);
0022C7 E54D              MOV      A,vPageOffset+01H
0022C9 2F                ADD      A,R7
0022CA FF                MOV      R7,A
0022CB EE                MOV      A,R6
0022CC 354C              ADDC     A,vPageOffset
0022CE FE                MOV      R6,A
0022CF C3                CLR      C
0022D0 E4                CLR      A
0022D1 9F                SUBB     A,R7
0022D2 FD                MOV      R5,A
0022D3 7402              MOV      A,#02H
0022D5 9E                SUBB     A,R6
0022D6 FC                MOV      R4,A
0022D7 E54B              MOV      A,vPageBase+01H
0022D9 254D              ADD      A,vPageOffset+01H
0022DB FF                MOV      R7,A
0022DC E54A              MOV      A,vPageBase
0022DE 354C              ADDC     A,vPageOffset
0022E0 FE                MOV      R6,A
0022E1 7A00              MOV      R2,#00H
0022E3 EF                MOV      A,R7
0022E4 29                ADD      A,R1
0022E5 FB                MOV      R3,A
0022E6 EA                MOV      A,R2
0022E7 3E                ADDC     A,R6
0022E8 FA                MOV      R2,A
0022E9 D238              SETB     ?_drv_flash_WriteBytes?BIT
0022EB 7118              ACALL    ?L?COM0046
  237: 
  238:         /* erase target flash page */
  239:         drv_flash_ErasePage(vPageBase);
0022ED E4                CLR      A
0022EE FB                MOV      R3,A
0022EF 7D03              MOV      R5,#03H
0022F1 AF4B              MOV      R7,vPageBase+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 50


0022F3 AE4A              MOV      R6,vPageBase
0022F5 7176              ACALL    _drv_flash_Control
  240: 
  241:         /* copy cache page content into target flash page */
  242:         vWriteOffset  = FLASH_CACHE_PAGE_BASE;
0022F7 123480            LCALL    ?L?COM005A
0022FA AB4F              MOV      R3,vWriteOffset+01H
0022FC AA4E              MOV      R2,vWriteOffset
0022FE 7D00              MOV      R5,#00H
002300 7C02              MOV      R4,#02H
002302 AF4B              MOV      R7,vPageBase+01H
002304 AE4A              MOV      R6,vPageBase
002306 711C              ACALL    _drv_flash_WriteBytes
  243:         drv_flash_WriteBytes(vPageBase, FLASH_PAGE_SIZE, vWriteOffset, TRUE);
  244: 
  245:         /* erase flash cache page */
  246:         drv_flash_ErasePage(FLASH_CACHE_PAGE_BASE);
002308 E4                CLR      A
002309 FB                MOV      R3,A
00230A 7D03              MOV      R5,#03H
00230C FF                MOV      R7,A
00230D 7E3A              MOV      R6,#03AH
00230F 7176              ACALL    _drv_flash_Control
  247:     }
002311         ?C0021?DRV_FLASH:
  248: 
  249:     /* restore interrupt status */
  250:     DRV_INT_UnlockGlobalInterrupt(bIntStatus);
002311 E549              MOV      A,bIntStatus
002313 24FF              ADD      A,#0FFH
002315 92AF              MOV      EA,C
  251: }
002317 22                RET      
----- FUNCTION _DRV_FLASH_Update (END) -------


----- FUNCTION ?L?COM0046 (BEGIN) -----
002318 AF4F              MOV      R7,vWriteOffset+01H
00231A AE4E              MOV      R6,vWriteOffset
----- FUNCTION _drv_flash_WriteBytes (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  137: static void drv_flash_WriteBytes
  138: (
00231C 8E50              MOV      vFlashAddr,R6
00231E 8F51              MOV      vFlashAddr+01H,R7
002320 8C52              MOV      vLen,R4
002322 8D53              MOV      vLen+01H,R5
002324 8A54              MOV      vDataAddr,R2
002326 8B55              MOV      vDataAddr+01H,R3
  139:     IN UINT16     vFlashAddr,
  140:     IN UINT16     vLen,
  141:     IN UINT16     vDataAddr,
  142:     IN BOOL       bFromFlash
  143: )
  144: {
002328         ?C0005?DRV_FLASH:
  145:     while (vLen--)
002328 E553              MOV      A,vLen+01H
00232A 1553              DEC      vLen+01H
00232C AE52              MOV      R6,vLen
00232E 7002              JNZ      ?C0023?DRV_FLASH
002330 1552              DEC      vLen
002332         ?C0023?DRV_FLASH:
002332 4E                ORL      A,R6
002333 6040              JZ       ?C0010?DRV_FLASH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 51


  146:     {
  147:         UINT8   vData;
  148: 
  149:         vData = (bFromFlash? CODE_U8(vDataAddr) : XDATA_U8((vDataAddr)&0xFF));
002335 30380B            JNB      bFromFlash,?C0007?DRV_FLASH
002338 855582            MOV      DPL,vDataAddr+01H
00233B 855483            MOV      DPH,vDataAddr
00233E E4                CLR      A
00233F 93                MOVC     A,@A+DPTR
002340 FF                MOV      R7,A
002341 8008              SJMP     ?C0008?DRV_FLASH
002343         ?C0007?DRV_FLASH:
002343 855582            MOV      DPL,vDataAddr+01H
002346 758300            MOV      DPH,#00H
002349 E0                MOVX     A,@DPTR
00234A FF                MOV      R7,A
00234B         ?C0008?DRV_FLASH:
00234B 8F56              MOV      vData,R7
  150:         if (CODE_U8(vFlashAddr) != vData)
00234D 855182            MOV      DPL,vFlashAddr+01H
002350 855083            MOV      DPH,vFlashAddr
002353 E4                CLR      A
002354 93                MOVC     A,@A+DPTR
002355 6556              XRL      A,vData
002357 600A              JZ       ?C0009?DRV_FLASH
  151:         {
  152:             drv_flash_WriteByte(vFlashAddr, vData);
002359 AB56              MOV      R3,vData
00235B 7D01              MOV      R5,#01H
00235D AF51              MOV      R7,vFlashAddr+01H
00235F AE50              MOV      R6,vFlashAddr
002361 7176              ACALL    _drv_flash_Control
  153:         }
002363         ?C0009?DRV_FLASH:
  154:         vFlashAddr++;
002363 0551              INC      vFlashAddr+01H
002365 E551              MOV      A,vFlashAddr+01H
002367 7002              JNZ      ?C0024?DRV_FLASH
002369 0550              INC      vFlashAddr
00236B         ?C0024?DRV_FLASH:
  155:         vDataAddr++;
00236B 0555              INC      vDataAddr+01H
00236D E555              MOV      A,vDataAddr+01H
00236F 7002              JNZ      ?C0025?DRV_FLASH
002371 0554              INC      vDataAddr
002373         ?C0025?DRV_FLASH:
  156:     }
002373 80B3              SJMP     ?C0005?DRV_FLASH
  157: }
002375         ?C0010?DRV_FLASH:
002375 22                RET      
----- FUNCTION _drv_flash_WriteBytes (END) -------


----- FUNCTION _drv_flash_Control (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
   57: static void drv_flash_Control(UINT16 vFlashAddr, UINT8 vPSCTL, UINT8 vData)
   58: {
002376 8E57              MOV      vFlashAddr,R6
002378 8F58              MOV      vFlashAddr+01H,R7
;---- Variable 'vData' assigned to Register 'R3' ----
;---- Variable 'vPSCTL' assigned to Register 'R5' ----
   59:   #if DRV_WATCHDOG_SUPPORT
   60:     /* kick watchdog, to prevent watchdog reset MCU */
   61:     DRV_WATCHDOG_Kick();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 52


   62:   #endif
   63: 
   64:     /* Force Enable VDD Monitor as a reset source */
   65:     DRV_RESET_EnableVDDMonitor();
00237A 75FF80            MOV      VDM0CN,#080H
00237D 75EF06            MOV      RSTSRC,#06H
   66: 
   67:     /* enable flash erase/write */
   68:     PSCTL = vPSCTL;
002380 8D8F              MOV      PSCTL,R5
   69: 
   70:     /* write KEYs to unlock flash */
   71:     FLKEY = FLASH_KEY_1;
002382 A2AF              MOV      C,EA
002384 E4                CLR      A
002385 33                RLC      A
002386 24A5              ADD      A,#0A5H
002388 F5B7              MOV      FLKEY,A
   72:     FLKEY = FLASH_KEY_2;
00238A 75B7F1            MOV      FLKEY,#0F1H
   73: 
   74:     /* write data into flash */
   75:     XDATA_U8(vFlashAddr) = vData;
00238D 855882            MOV      DPL,vFlashAddr+01H
002390 855783            MOV      DPH,vFlashAddr
002393 EB                MOV      A,R3
002394 F0                MOVX     @DPTR,A
   76: 
   77:     /* disable flash erase/write */
   78:     PSCTL = 0x00;
002395 E4                CLR      A
002396 F58F              MOV      PSCTL,A
   79: }
002398 22                RET      
----- FUNCTION _drv_flash_Control (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  328: UINT16 PKT_I2CM_Inspect(void)
  329: {
  330:     _pkt_i2cm_Init();
  331: 
002399 123167            LCALL    ?L?COM000D
00239C D282              SETB     IO_DUT_I2CM_SCL
00239E 753301            MOV      _loop,#01H
0023A1 7534F4            MOV      _loop+01H,#0F4H
0023A4         ?C0351?PKT_I2CM:
0023A4 208212            JB       IO_DUT_I2CM_SCL,?C0355?PKT_I2CM
0023A7 E534              MOV      A,_loop+01H
0023A9 1534              DEC      _loop+01H
0023AB AE33              MOV      R6,_loop
0023AD 7002              JNZ      ?C0394?PKT_I2CM
0023AF 1533              DEC      _loop
0023B1         ?C0394?PKT_I2CM:
0023B1 4E                ORL      A,R6
0023B2 6005              JZ       ?C0355?PKT_I2CM
0023B4 121A3A            LCALL    ?L?COM0008
0023B7 80EB              SJMP     ?C0351?PKT_I2CM
0023B9         ?C0355?PKT_I2CM:
0023B9 D292              SETB     IO_DUT_I2CM_SDA
  332:     PKT_SetPayloadSize(0x00);
0023BB 123323            LCALL    ?L?COM002F
  333:     return PKT_REPLY_Done_ExecNoError;
0023BE 7E01              MOV      R6,#01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 53


0023C0 7F40              MOV      R7,#040H
  334: }
0023C2 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION CFG_PWD_RefreshLevel (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   38: void CFG_PWD_RefreshLevel(void)
   39: {
   40:     UINT32  vPasswd = CFG_GET(Vendor_PWD_Entry);
   41: 
0023C3 7F1B              MOV      R7,#01BH
0023C5 7E00              MOV      R6,#00H
0023C7 F1EB              ACALL    _CFG_RAM_GET32
0023C9 8F47              MOV      vPasswd+03H,R7
0023CB 8E46              MOV      vPasswd+02H,R6
0023CD 8D45              MOV      vPasswd+01H,R5
0023CF 8C44              MOV      vPasswd,R4
   42:     switch (vPasswd)
0023D1 1206CA            LCALL    ?C?LCASE
0023D4 23EA              DW       ?C0005?CFG_PWD
0023D6 F626              DW       0F626H
0023D8 52A7              DW       052A7H
0023DA 23F2              DW       ?C0013?CFG_PWD
0023DC FC54              DW       0FC54H
0023DE D402              DW       0D402H
0023E0 23EE              DW       ?C0009?CFG_PWD
0023E2 FDE7              DW       0FDE7H
0023E4 554F              DW       0554FH
0023E6 0000              DW       00H
0023E8 23F6              DW       ?C0014?CFG_PWD
   43:     {
   44:         case CFG_PWD_REBOOT:    /* reboot password */
0023EA         ?C0005?CFG_PWD:
   45:             DRV_RESET_SoftwareReset();
0023EA 75EF12            MOV      RSTSRC,#012H
   46:             break;
0023ED 22                RET      
   47: 
   48:         case CFG_PWD_FACTORY:   /* factory password */
0023EE         ?C0009?CFG_PWD:
   49:             PWD_LEVEL_SET(CFG_PWD_LEVEL_FACTORY);
0023EE 751508            MOV      vCfgPwdLevel,#08H
   50:             break;
0023F1 22                RET      
   51: 
   52:         case CFG_PWD_OEM:       /* OEM password */
0023F2         ?C0013?CFG_PWD:
   53:             PWD_LEVEL_SET(CFG_PWD_LEVEL_OEM);
0023F2 751504            MOV      vCfgPwdLevel,#04H
   54:             break;
0023F5 22                RET      
   55: 
   56:         default:
0023F6         ?C0014?CFG_PWD:
   57:             if (vPasswd == CFG_GET(Vendor_PWD_UserRW))
0023F6 7F7C              MOV      R7,#07CH
0023F8 12336D            LCALL    ?L?COM0039
0023FB 7004              JNZ      ?C0015?CFG_PWD
   58:             {
   59:                 /* UserRW password */
   60:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRW);
0023FD 751502            MOV      vCfgPwdLevel,#02H
   61:             }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 54


002400 22                RET      
002401         ?C0015?CFG_PWD:
   62:             else if (vPasswd == CFG_GET(Vendor_PWD_UserRO))
002401 7F78              MOV      R7,#078H
002403 12336D            LCALL    ?L?COM0039
002406 7004              JNZ      ?C0027?CFG_PWD
   63:             {
   64:                 /* UserRO password */
   65:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRO);
002408 751501            MOV      vCfgPwdLevel,#01H
   66:             }
00240B 22                RET      
   67:             else
   68:             {
00240C         ?C0027?CFG_PWD:
   69:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_NORMAL);
00240C E4                CLR      A
00240D F515              MOV      vCfgPwdLevel,A
   70:             }
   71:             break;
   72:     }
   73: }
00240F 22                RET      
----- FUNCTION CFG_PWD_RefreshLevel (END) -------


----- FUNCTION ?L?COM004E (BEGIN) -----
002410 FF                MOV      R7,A
002411 E4                CLR      A
002412 3438              ADDC     A,#038H
002414 FE                MOV      R6,A
----- FUNCTION _CFG_ROM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   76: 
   77:     return MEMPAGE_PID_INVALID;
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
002415 8F82              MOV      DPL,R7
002417 8E83              MOV      DPH,R6
002419 020655            LJMP     ?C?LLDCODE
----- FUNCTION _CFG_ROM_GET32 (END) -------


----- FUNCTION ?L?COM0045 (BEGIN) -----
00241C AF2E              MOV      R7,vRawADC+01H
00241E AE2D              MOV      R6,vRawADC
----- FUNCTION _apl_ddm_Calibrate (BEGIN) -----
 FILE: '..\apl\apl.c'
   28: static UINT16 apl_ddm_Calibrate
   29: (
002420 8E30              MOV      vRawADC,R6
002422 8F31              MOV      vRawADC+01H,R7
002424 8D32              MOV      vSlopeDelta,R5
   30:     IN UINT16   vRawADC,
   31:     IN UINT8    vSlopeDelta,
   32:     IN BOOL     bSignDDM
   33: )
   34: {
   35:     SINT64  vTmpData;
   36:     SINT32  vTmpSlope, vTmpOffset;
   37: 
   38:     vTmpSlope  = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Slope,  vSlopeDelta);
002426 E4                CLR      A
002427 2532              ADD      A,vSlopeDelta
002429 9110              ACALL    ?L?COM004E
00242B 8F3A              MOV      vTmpSlope+03H,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 55


00242D 8E39              MOV      vTmpSlope+02H,R6
00242F 8D38              MOV      vTmpSlope+01H,R5
002431 8C37              MOV      vTmpSlope,R4
   39:     vTmpOffset = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Offset, vSlopeDelta);
002433 E532              MOV      A,vSlopeDelta
002435 2404              ADD      A,#04H
002437 9110              ACALL    ?L?COM004E
002439 8F3E              MOV      vTmpOffset+03H,R7
00243B 8E3D              MOV      vTmpOffset+02H,R6
00243D 8D3C              MOV      vTmpOffset+01H,R5
00243F 8C3B              MOV      vTmpOffset,R4
   40: 
   41:     vTmpData = (((SINT64)vTmpSlope * vRawADC) >> Slope_ZoomIn_ShiftBits)
002441 AE30              MOV      R6,vRawADC
002443 AF31              MOV      R7,vRawADC+01H
002445 E4                CLR      A
002446 FC                MOV      R4,A
002447 FD                MOV      R5,A
002448 AB3A              MOV      R3,vTmpSlope+03H
00244A AA39              MOV      R2,vTmpSlope+02H
00244C A938              MOV      R1,vTmpSlope+01H
00244E A837              MOV      R0,vTmpSlope
002450 1205B8            LCALL    ?C?LMUL
002453 7808              MOV      R0,#08H
002455 12062E            LCALL    ?C?SLSHR
002458 EF                MOV      A,R7
002459 253E              ADD      A,vTmpOffset+03H
00245B F536              MOV      vTmpData+03H,A
00245D EE                MOV      A,R6
00245E 353D              ADDC     A,vTmpOffset+02H
002460 F535              MOV      vTmpData+02H,A
002462 ED                MOV      A,R5
002463 353C              ADDC     A,vTmpOffset+01H
002465 F534              MOV      vTmpData+01H,A
002467 EC                MOV      A,R4
002468 353B              ADDC     A,vTmpOffset
00246A F533              MOV      vTmpData,A
   42:                 + vTmpOffset;
   43: 
   44:     /* limit the calibrated value to 16-bit formatting,
   45:      *  to strictly follow MSA Standard.
   46:      */
   47:     return (UINT16)(bSignDDM? LIMIT_S16(vTmpData): LIMIT_U16(vTmpData));
00246C 303831            JNB      bSignDDM,?C0001?APL
00246F E4                CLR      A
002470 7FFF              MOV      R7,#0FFH
002472 7E7F              MOV      R6,#07FH
002474 1232CE            LCALL    ?L?COM0028
002477 C3                CLR      C
002478 120607            LCALL    ?C?SLCMP
00247B 4006              JC       ?C0003?APL
00247D 7E7F              MOV      R6,#07FH
00247F 7FFF              MOV      R7,#0FFH
002481 8047              SJMP     ?C0002?APL
002483         ?C0003?APL:
002483 7F00              MOV      R7,#00H
002485 7E80              MOV      R6,#080H
002487 7DFF              MOV      R5,#0FFH
002489 7CFF              MOV      R4,#0FFH
00248B 1232D0            LCALL    ?L?COM0029
00248E D3                SETB     C
00248F 120607            LCALL    ?C?SLCMP
002492 5006              JNC      ?C0005?APL
002494 7E80              MOV      R6,#080H
002496 7F00              MOV      R7,#00H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 56


002498 8004              SJMP     ?C0006?APL
00249A         ?C0005?APL:
00249A AE35              MOV      R6,vTmpData+02H
00249C AF36              MOV      R7,vTmpData+03H
00249E         ?C0006?APL:
00249E         ?C0004?APL:
00249E 802A              SJMP     ?C0002?APL
0024A0         ?C0001?APL:
0024A0 E4                CLR      A
0024A1 7FFF              MOV      R7,#0FFH
0024A3 7EFF              MOV      R6,#0FFH
0024A5 1232CE            LCALL    ?L?COM0028
0024A8 C3                CLR      C
0024A9 120607            LCALL    ?C?SLCMP
0024AC 4006              JC       ?C0007?APL
0024AE 7EFF              MOV      R6,#0FFH
0024B0 7FFF              MOV      R7,#0FFH
0024B2 8016              SJMP     ?C0008?APL
0024B4         ?C0007?APL:
0024B4 E4                CLR      A
0024B5 FF                MOV      R7,A
0024B6 FE                MOV      R6,A
0024B7 1232CE            LCALL    ?L?COM0028
0024BA D3                SETB     C
0024BB 120607            LCALL    ?C?SLCMP
0024BE 5006              JNC      ?C0009?APL
0024C0 7E00              MOV      R6,#00H
0024C2 7F00              MOV      R7,#00H
0024C4 8004              SJMP     ?C0010?APL
0024C6         ?C0009?APL:
0024C6 AE35              MOV      R6,vTmpData+02H
0024C8 AF36              MOV      R7,vTmpData+03H
0024CA         ?C0010?APL:
0024CA         ?C0008?APL:
0024CA         ?C0002?APL:
   48: }
0024CA 22                RET      
----- FUNCTION _apl_ddm_Calibrate (END) -------


----- FUNCTION CFG_PWD_Init (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   90: void CFG_PWD_Init(void)
   91: {
   92:     /* set default password */
   93:     CFG_SET(Vendor_PWD_Entry, CFG_PWD_DEFAULT);
0024CB         ?C0045?CFG_PWD:
0024CB E4                CLR      A
0024CC F531              MOV      ?_CFG_RAM_SET32?BYTE+05H,A
0024CE F530              MOV      ?_CFG_RAM_SET32?BYTE+04H,A
0024D0 F52F              MOV      ?_CFG_RAM_SET32?BYTE+03H,A
0024D2 F52E              MOV      ?_CFG_RAM_SET32?BYTE+02H,A
0024D4 7F1B              MOV      R7,#01BH
0024D6 FE                MOV      R6,A
0024D7 122CC9            LCALL    _CFG_RAM_SET32
0024DA         ?C0030?CFG_PWD:
   94: 
   95:     /* refresh password level */
   96:     CFG_PWD_RefreshLevel();
0024DA 61C3              AJMP     CFG_PWD_RefreshLevel
----- FUNCTION CFG_PWD_Init (END) -------


----- FUNCTION apl_ddm_GetEVBTemp (BEGIN) -----
 FILE: '..\apl\apl.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 57


   50: static UINT16 apl_ddm_GetEVBTemp(void)
   51: {
   52:     UINT16  vRawADC;
   53: 
   54:     /* get raw ADC value, and record it */
   55:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_TEMP));
0024DC 7B03              MOV      R3,#03H
0024DE 7D1F              MOV      R5,#01FH
0024E0 7F1E              MOV      R7,#01EH
0024E2 123317            LCALL    ?L?COM002E
0024E5 7F20              MOV      R7,#020H
0024E7 7E00              MOV      R6,#00H
0024E9 D1C6              ACALL    _CFG_RAM_SET16
0024EB         ?C0013?APL:
   56:     CFG_SET(DDM_ADC_EVB_TEMP, vRawADC);
   57: 
   58:     /* calibration */
   59:     return apl_ddm_Calibrate(vRawADC,
   60:                              GET_SLOPE_DELTA(DDM_EVB_TEMP_Slope),
   61:                              TRUE);
0024EB D238              SETB     ?_apl_ddm_Calibrate?BIT
0024ED E4                CLR      A
0024EE FD                MOV      R5,A
0024EF 811C              AJMP     ?L?COM0045
   62: }
----- FUNCTION apl_ddm_GetEVBTemp (END) -------


----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
  109: void APL_Entry(void)
  110: {
  111:     /* PWM_VBUF */
  112:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
0024F1 7818              MOV      R0,#018H
0024F3 E2                MOVX     A,@R0
0024F4 FF                MOV      R7,A
0024F5 8FFC              MOV      PCA0CPH0,R7
0024F7         ?C0163?APL:
  113: 
  114: 	/* DDM */
  115: 	CFG_SET_DDM(DDM_EVB_TEMP, apl_ddm_GetEVBTemp());
0024F7 91DC              ACALL    apl_ddm_GetEVBTemp
0024F9 AC06              MOV      R4,AR6
0024FB AD07              MOV      R5,AR7
0024FD E4                CLR      A
0024FE FF                MOV      R7,A
0024FF FE                MOV      R6,A
002500 D1C6              ACALL    _CFG_RAM_SET16
002502         ?C0170?APL:
  116: 	CFG_SET_DDM(DDM_EVB_VCC,  apl_ddm_GetEVBVCC());
002502 D1CE              ACALL    apl_ddm_GetEVBVCC
002504 AC06              MOV      R4,AR6
002506 AD07              MOV      R5,AR7
002508 7F02              MOV      R7,#02H
00250A 7E00              MOV      R6,#00H
00250C D1C6              ACALL    _CFG_RAM_SET16
00250E         ?C0177?APL:
  117: 	CFG_SET_DDM(DDM_EVB_VBUF, apl_ddm_GetEVBVBUF());
00250E D1E3              ACALL    apl_ddm_GetEVBVBUF
002510 AC06              MOV      R4,AR6
002512 AD07              MOV      R5,AR7
002514 7F04              MOV      R7,#04H
002516 7E00              MOV      R6,#00H
002518 D1C6              ACALL    _CFG_RAM_SET16
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 58


00251A         ?C0176?APL:
  118: 
  119:     /* RT_EVB_STAT */
  120:   #if 1
  121:     /* EVB Temperature */
  122:     if (((SINT16)CFG_GET(DDM_EVB_TEMP) > (SINT16)CFG_GET(DDM_EVB_TEMP_Max)) ||
  123:         ((SINT16)CFG_GET(DDM_EVB_TEMP) < (SINT16)CFG_GET(DDM_EVB_TEMP_Min)))
00251A 7F40              MOV      R7,#040H
00251C 123334            LCALL    ?L?COM0031
00251F C006              PUSH     AR6
002521 C007              PUSH     AR7
002523 FF                MOV      R7,A
002524 12327B            LCALL    ?L?COM0020
002527 D007              POP      AR7
002529 D006              POP      AR6
00252B D3                SETB     C
00252C 1233FF            LCALL    ?L?COM0049
00252F 5017              JNC      ?C0219?APL
002531 7F42              MOV      R7,#042H
002533 123334            LCALL    ?L?COM0031
002536 C006              PUSH     AR6
002538 C007              PUSH     AR7
00253A FF                MOV      R7,A
00253B 12327B            LCALL    ?L?COM0020
00253E D007              POP      AR7
002540 D006              POP      AR6
002542 C3                CLR      C
002543 1233FF            LCALL    ?L?COM0049
002546 500D              JNC      ?C0267?APL
  124:     {
  125:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, LOW);
002548         ?C0219?APL:
002548 E4                CLR      A
002549 F52C              MOV      _v,A
00254B 7819              MOV      R0,#019H
00254D E2                MOVX     A,@R0
00254E 12314C            LCALL    ?L?COM000A
002551 6020              JZ       ?C0231?APL
002553 800B              SJMP     ?C0626?APL
  126:     }
  127:     else
  128:     {
  129:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, HIGH);
002555         ?C0267?APL:
002555 752C01            MOV      _v,#01H
002558 7819              MOV      R0,#019H
00255A E2                MOVX     A,@R0
00255B 12314C            LCALL    ?L?COM000A
00255E 6013              JZ       ?C0231?APL
002560         
002560 7819              MOV      R0,#019H
002562 E2                MOVX     A,@R0
002563 FF                MOV      R7,A
002564 EF                MOV      A,R7
002565 54FE              ANL      A,#0FEH
002567 FB                MOV      R3,A
002568 E52C              MOV      A,_v
00256A 5401              ANL      A,#01H
00256C FF                MOV      R7,A
00256D EF                MOV      A,R7
00256E 4B                ORL      A,R3
00256F FF                MOV      R7,A
002570 E4                CLR      A
002571 EF                MOV      A,R7
002572 F2                MOVX     @R0,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 59


  130:     }
002573         ?C0231?APL:
  131: 
  132:     /* EVB VCC */
  133:     if (((UINT16)CFG_GET(DDM_EVB_VCC) > (UINT16)CFG_GET(DDM_EVB_VCC_Max)) ||
  134:         ((UINT16)CFG_GET(DDM_EVB_VCC) < (UINT16)CFG_GET(DDM_EVB_VCC_Min)))
002573 7F44              MOV      R7,#044H
002575 123334            LCALL    ?L?COM0031
002578 C006              PUSH     AR6
00257A C007              PUSH     AR7
00257C 7F02              MOV      R7,#02H
00257E 12327B            LCALL    ?L?COM0020
002581 D007              POP      AR7
002583 D006              POP      AR6
002585 D3                SETB     C
002586 ED                MOV      A,R5
002587 9F                SUBB     A,R7
002588 EC                MOV      A,R4
002589 9E                SUBB     A,R6
00258A 5019              JNC      ?C0316?APL
00258C 7F46              MOV      R7,#046H
00258E 123334            LCALL    ?L?COM0031
002591 C006              PUSH     AR6
002593 C007              PUSH     AR7
002595 7F02              MOV      R7,#02H
002597 12327B            LCALL    ?L?COM0020
00259A D007              POP      AR7
00259C D006              POP      AR6
00259E C3                CLR      C
00259F ED                MOV      A,R5
0025A0 9F                SUBB     A,R7
0025A1 EC                MOV      A,R4
0025A2 9E                SUBB     A,R6
0025A3 500F              JNC      ?C0364?APL
  135:     {
  136:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, LOW);
0025A5         ?C0316?APL:
0025A5 E4                CLR      A
0025A6 F52C              MOV      _v,A
0025A8 7819              MOV      R0,#019H
0025AA E2                MOVX     A,@R0
0025AB C3                CLR      C
0025AC 13                RRC      A
0025AD 12314C            LCALL    ?L?COM000A
0025B0 6033              JZ       ?C0328?APL
0025B2 800D              SJMP     ?C0627?APL
  137:     }
  138:     else
  139:     {
  140:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, HIGH);
0025B4         ?C0364?APL:
0025B4 752C01            MOV      _v,#01H
0025B7 7819              MOV      R0,#019H
0025B9 E2                MOVX     A,@R0
0025BA C3                CLR      C
0025BB 13                RRC      A
0025BC 12314C            LCALL    ?L?COM000A
0025BF 6024              JZ       ?C0328?APL
0025C1         
0025C1 12326F            LCALL    ?L?COM001D
0025C4 54FD              ANL      A,#0FDH
0025C6 FF                MOV      R7,A
0025C7 C004              PUSH     AR4
0025C9 C005              PUSH     AR5
0025CB C006              PUSH     AR6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 60


0025CD C007              PUSH     AR7
0025CF E52C              MOV      A,_v
0025D1 5401              ANL      A,#01H
0025D3 FF                MOV      R7,A
0025D4 E4                CLR      A
0025D5 7801              MOV      R0,#01H
0025D7 120642            LCALL    ?C?LSHL
0025DA D003              POP      AR3
0025DC D002              POP      AR2
0025DE D001              POP      AR1
0025E0 D000              POP      AR0
0025E2 1232C0            LCALL    ?L?COM0027
  141:     }
0025E5         ?C0328?APL:
  142: 
  143:     /* EVB VBUF */
  144:     if (((UINT16)CFG_GET(DDM_EVB_VBUF) > (UINT16)CFG_GET(DDM_EVB_VBUF_Max)) ||
  145:         ((UINT16)CFG_GET(DDM_EVB_VBUF) < (UINT16)CFG_GET(DDM_EVB_VBUF_Min)))
0025E5 7F48              MOV      R7,#048H
0025E7 123334            LCALL    ?L?COM0031
0025EA C006              PUSH     AR6
0025EC C007              PUSH     AR7
0025EE 123279            LCALL    ?L?COM001F
0025F1 D007              POP      AR7
0025F3 D006              POP      AR6
0025F5 D3                SETB     C
0025F6 ED                MOV      A,R5
0025F7 9F                SUBB     A,R7
0025F8 EC                MOV      A,R4
0025F9 9E                SUBB     A,R6
0025FA 5017              JNC      ?C0413?APL
0025FC 7F4A              MOV      R7,#04AH
0025FE 123334            LCALL    ?L?COM0031
002601 C006              PUSH     AR6
002603 C007              PUSH     AR7
002605 123279            LCALL    ?L?COM001F
002608 D007              POP      AR7
00260A D006              POP      AR6
00260C C3                CLR      C
00260D ED                MOV      A,R5
00260E 9F                SUBB     A,R7
00260F EC                MOV      A,R4
002610 9E                SUBB     A,R6
002611 500D              JNC      ?C0461?APL
  146:     {
  147:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, LOW);
002613         ?C0413?APL:
002613 E4                CLR      A
002614 F52C              MOV      _v,A
002616 1233E7            LCALL    ?L?COM0044
002619 12314C            LCALL    ?L?COM000A
00261C 6031              JZ       ?C0425?APL
00261E 800B              SJMP     ?C0628?APL
  148:     }
  149:     else
  150:     {
  151:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, HIGH);
002620         ?C0461?APL:
002620 752C01            MOV      _v,#01H
002623 1233E7            LCALL    ?L?COM0044
002626 12314C            LCALL    ?L?COM000A
002629 6024              JZ       ?C0425?APL
00262B         
00262B 12326F            LCALL    ?L?COM001D
00262E 54FB              ANL      A,#0FBH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 61


002630 FF                MOV      R7,A
002631 C004              PUSH     AR4
002633 C005              PUSH     AR5
002635 C006              PUSH     AR6
002637 C007              PUSH     AR7
002639 E52C              MOV      A,_v
00263B 5401              ANL      A,#01H
00263D FF                MOV      R7,A
00263E E4                CLR      A
00263F 7802              MOV      R0,#02H
002641 120642            LCALL    ?C?LSHL
002644 D003              POP      AR3
002646 D002              POP      AR2
002648 D001              POP      AR1
00264A D000              POP      AR0
00264C 1232C0            LCALL    ?L?COM0027
  152:     }
00264F         ?C0425?APL:
  153: 
  154:     /* EVB Global Ready */
  155:     if ((CFG_GET(RT_EVB_STAT_EVB_TEMP_Ready) == HIGH) &&
  156:         (CFG_GET(RT_EVB_STAT_EVB_VCC_Ready)  == HIGH) &&
  157:         (CFG_GET(RT_EVB_STAT_EVB_VBUF_Ready) == HIGH))
00264F 12326F            LCALL    ?L?COM001D
002652 1233C8            LCALL    ?L?COM0041
002655 702E              JNZ      ?C0557?APL
002657 7819              MOV      R0,#019H
002659 E2                MOVX     A,@R0
00265A C3                CLR      C
00265B 13                RRC      A
00265C 123272            LCALL    ?L?COM001E
00265F 5401              ANL      A,#01H
002661 FF                MOV      R7,A
002662 E4                CLR      A
002663 F8                MOV      R0,A
002664 C3                CLR      C
002665 12061D            LCALL    ?C?ULCMP
002668 701B              JNZ      ?C0557?APL
00266A 1233E7            LCALL    ?L?COM0044
00266D 123272            LCALL    ?L?COM001E
002670 5401              ANL      A,#01H
002672 FF                MOV      R7,A
002673 E4                CLR      A
002674 F8                MOV      R0,A
002675 C3                CLR      C
002676 12061D            LCALL    ?C?ULCMP
002679 700A              JNZ      ?C0557?APL
  158:     {
  159:         CFG_SET(RT_EVB_STAT_Global_Ready, HIGH);
00267B         ?C0509?APL:
00267B 752C01            MOV      _v,#01H
00267E 123143            LCALL    ?L?COM0009
002681 602E              JZ       ?C0569?APL
002683 8008              SJMP     ?C0629?APL
  160:     }
  161:     else
  162:     {
  163:         CFG_SET(RT_EVB_STAT_Global_Ready, LOW);
002685         ?C0557?APL:
002685 E4                CLR      A
002686 F52C              MOV      _v,A
002688 123143            LCALL    ?L?COM0009
00268B 6024              JZ       ?C0569?APL
00268D         
00268D 12326F            LCALL    ?L?COM001D
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 62


002690 547F              ANL      A,#07FH
002692 FF                MOV      R7,A
002693 C004              PUSH     AR4
002695 C005              PUSH     AR5
002697 C006              PUSH     AR6
002699 C007              PUSH     AR7
00269B E52C              MOV      A,_v
00269D 5401              ANL      A,#01H
00269F FF                MOV      R7,A
0026A0 E4                CLR      A
0026A1 7807              MOV      R0,#07H
0026A3 120642            LCALL    ?C?LSHL
0026A6 D003              POP      AR3
0026A8 D002              POP      AR2
0026AA D001              POP      AR1
0026AC D000              POP      AR0
0026AE 1232C0            LCALL    ?L?COM0027
  164:     }
  165:   #endif
  166: }
0026B1         ?C0569?APL:
0026B1 22                RET      
----- FUNCTION APL_Entry (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   27: UINT16 PKT_MDIOM_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
0026B2 123323            LCALL    ?L?COM002F
   31: }
0026B5 7E01              MOV      R6,#01H
0026B7 7F40              MOV      R7,#040H
   32: 
0026B9 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------


----- FUNCTION _CFG_ROM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   72:             default:
   73:                 break;
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
0026BA 8F82              MOV      DPL,R7
0026BC 8E83              MOV      DPH,R6
0026BE E4                CLR      A
0026BF 93                MOVC     A,@A+DPTR
0026C0 FE                MOV      R6,A
0026C1 7401              MOV      A,#01H
0026C3 93                MOVC     A,@A+DPTR
0026C4 FF                MOV      R7,A
0026C5 22                RET      
----- FUNCTION _CFG_ROM_GET16 (END) -------


----- FUNCTION _CFG_RAM_SET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   73:                 break;
   74:         }
;---- Variable 'vData' assigned to Register 'R4/R5' ----
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0026C6 A807              MOV      R0,AR7
0026C8 EC                MOV      A,R4
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 63


0026C9 F2                MOVX     @R0,A
0026CA 08                INC      R0
0026CB ED                MOV      A,R5
0026CC F2                MOVX     @R0,A
0026CD 22                RET      
----- FUNCTION _CFG_RAM_SET16 (END) -------


----- FUNCTION apl_ddm_GetEVBVCC (BEGIN) -----
 FILE: '..\apl\apl.c'
   64: static UINT16 apl_ddm_GetEVBVCC(void)
   65: {
   66:     UINT16  vRawADC;
   67: 
   68:     /* get raw ADC value, and record it */
   69:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VCC));
0026CE 7B03              MOV      R3,#03H
0026D0 7D1E              MOV      R5,#01EH
0026D2 7F1F              MOV      R7,#01FH
0026D4 123317            LCALL    ?L?COM002E
0026D7 7F22              MOV      R7,#022H
0026D9 7E00              MOV      R6,#00H
0026DB D1C6              ACALL    _CFG_RAM_SET16
0026DD         ?C0061?APL:
   70:     CFG_SET(DDM_ADC_EVB_VCC, vRawADC);
   71: 
   72:     /* calibration */
   73:     return apl_ddm_Calibrate(vRawADC,
   74:                              GET_SLOPE_DELTA(DDM_EVB_VCC_Slope),
   75:                              FALSE);
0026DD C238              CLR      ?_apl_ddm_Calibrate?BIT
0026DF 7D08              MOV      R5,#08H
0026E1 811C              AJMP     ?L?COM0045
   76: }
----- FUNCTION apl_ddm_GetEVBVCC (END) -------


----- FUNCTION apl_ddm_GetEVBVBUF (BEGIN) -----
 FILE: '..\apl\apl.c'
   78: static UINT16 apl_ddm_GetEVBVBUF(void)
   79: {
   80:     UINT16  vRawADC;
   81: 
   82:     /* get raw ADC value, and record it */
   83:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VBUF));
0026E3 7B03              MOV      R3,#03H
0026E5 7D1F              MOV      R5,#01FH
0026E7 7F0A              MOV      R7,#0AH
0026E9 123317            LCALL    ?L?COM002E
0026EC 7F24              MOV      R7,#024H
0026EE 7E00              MOV      R6,#00H
0026F0 D1C6              ACALL    _CFG_RAM_SET16
0026F2         ?C0109?APL:
   84:     CFG_SET(DDM_ADC_EVB_VBUF, vRawADC);
   85: 
   86:     /* calibration */
   87:     return apl_ddm_Calibrate(vRawADC,
   88:                              GET_SLOPE_DELTA(DDM_EVB_VBUF_Slope),
   89:                              FALSE);
0026F2 C238              CLR      ?_apl_ddm_Calibrate?BIT
0026F4 7D10              MOV      R5,#010H
0026F6 811C              AJMP     ?L?COM0045
   90: }
----- FUNCTION apl_ddm_GetEVBVBUF (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 64



----- FUNCTION _DRV_ADC_Sample (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   39: SINT16 DRV_ADC_Sample(UINT8 vPositive, UINT8 vNegative, UINT8 vAvgNum)
   40: {
;---- Variable 'vPositive' assigned to Register 'R7' ----
;---- Variable 'vAvgNum' assigned to Register 'R3' ----
;---- Variable 'vNegative' assigned to Register 'R5' ----
   41:     SINT16  vAdcSum;
   42:     UINT8   vLoop;
   43: 
   44:     /* select positive/negative channel */
   45:     AMX0P = vPositive;
0026F8 8FBB              MOV      AMX0P,R7
   46:     AMX0N = vNegative;
0026FA 8DBA              MOV      AMX0N,R5
   47: 
   48:     /* wait for ADC input stable */
   49:     DRV_CPU_DelayUs(ADC_SettlingTime);
0026FC 7FC8              MOV      R7,#0C8H
0026FE 7E00              MOV      R6,#00H
002700 121A3E            LCALL    _DRV_CPU_DelayUs
   50: 
   51:     /* sampling */
   52:     vAdcSum = 0;
;---- Variable 'vAdcSum' assigned to Register 'R4/R5' ----
002703 E4                CLR      A
002704 FD                MOV      R5,A
002705 FC                MOV      R4,A
   53:     for (vLoop = (1<<vAvgNum); vLoop > 0; vLoop--)
002706 04                INC      A
002707 A803              MOV      R0,AR3
002709 08                INC      R0
00270A 8002              SJMP     ?C0009?DRV_ADC
00270C         ?C0008?DRV_ADC:
00270C C3                CLR      C
00270D 33                RLC      A
00270E         ?C0009?DRV_ADC:
00270E D8FC              DJNZ     R0,?C0008?DRV_ADC
;---- Variable 'vLoop' assigned to Register 'R2' ----
002710 FA                MOV      R2,A
002711         ?C0001?DRV_ADC:
002711 EA                MOV      A,R2
002712 D3                SETB     C
002713 9400              SUBB     A,#00H
002715 401A              JC       ?C0002?DRV_ADC
   54:     {
   55:         /* clear the ADC last converted flag */
   56:         AD0INT = 0;
002717 C2ED              CLR      AD0INT
   57: 
   58:         /* start a new ADC converting */
   59:         AD0BUSY = 1;
002719 D2EC              SETB     AD0BUSY
00271B         ?C0004?DRV_ADC:
   60: 
   61:         /* waiting for ADC converted */
   62:         while (!AD0INT)
00271B 30EDFD            JNB      AD0INT,?C0004?DRV_ADC
   63:         {}
00271E         ?C0005?DRV_ADC:
   64: 
   65:         /* sum the ADC result */
   66:         vAdcSum += (SINT16)(((UINT16)ADC0H<<8)|ADC0L);
00271E AFBE              MOV      R7,ADC0H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 65


002720 EF                MOV      A,R7
002721 FE                MOV      R6,A
002722 A9BD              MOV      R1,ADC0L
002724 E9                MOV      A,R1
002725 F582              MOV      DPL,A
002727 E582              MOV      A,DPL
002729 2D                ADD      A,R5
00272A FD                MOV      R5,A
00272B EE                MOV      A,R6
00272C 3C                ADDC     A,R4
00272D FC                MOV      R4,A
   67:     }
00272E 1A                DEC      R2
00272F 80E0              SJMP     ?C0001?DRV_ADC
002731         ?C0002?DRV_ADC:
   68: 
   69:     /* calculate the averaged value */
   70:     return (vAdcSum>>vAvgNum);
002731 AF03              MOV      R7,AR3
002733 ED                MOV      A,R5
002734 AE04              MOV      R6,AR4
002736 A807              MOV      R0,AR7
002738 08                INC      R0
002739 8006              SJMP     ?C0011?DRV_ADC
00273B         ?C0010?DRV_ADC:
00273B CE                XCH      A,R6
00273C A2E7              MOV      C,ACC.7
00273E 13                RRC      A
00273F CE                XCH      A,R6
002740 13                RRC      A
002741         ?C0011?DRV_ADC:
002741 D8F8              DJNZ     R0,?C0010?DRV_ADC
002743 FF                MOV      R7,A
   71: }
002744 22                RET      
----- FUNCTION _DRV_ADC_Sample (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   33: UINT16 PKT_MDIOM_Probe(void)
   34: {
   35:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   36:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
002745 90004C            MOV      DPTR,#vFrame+0CH
   37: 
   38:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
002748 E0                MOVX     A,@DPTR
002749 FF                MOV      R7,A
00274A A3                INC      DPTR
00274B E0                MOVX     A,@DPTR
00274C FD                MOV      R5,A
00274D 7A04              MOV      R2,#HIGH vData
00274F 7BEA              MOV      R3,#LOW vData
002751 F15C              ACALL    _DRV_MDIOM_FrameRead
002753 7E01              MOV      R6,#01H
002755 4002              JC       ?C0005?PKT_MDIOM
   39:                              pPayload->vDevAddr,
   40:                              &vData))
   41:     {
   42:         return PKT_REPLY_Fail_MdioNoAck;
002757 7E03              MOV      R6,#03H
   43:     }
002759         ?C0005?PKT_MDIOM:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 66


   44: 
   45:     return PKT_REPLY_Done_ExecNoError;
002759 7F40              MOV      R7,#040H
   46: }
00275B 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  516: BOOL DRV_MDIOM_FrameRead
  517: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
00275C 8B82              MOV      DPL,R3
00275E 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  518:     IN  UINT8               vPortAddr,
  519:     IN  UINT8               vDevAddr,
  520:     OUT UINT16 SEG_XDATA   *pData
  521: )
  522: {
  523:     BOOL    bIntState;
  524: 
  525:     /* create MDIO frame: Read */
  526:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
002760 122FC8            LCALL    _drv_mdiom_CreateReadFrame
  527: 
  528:     /* lock globally interrupt */
  529:     bIntState = DRV_INT_LockGlobalInterrupt();
002763 30AF05            JNB      EA,?C2483?DRV_MDIOM
002766 C2AF              CLR      EA
002768 D3                SETB     C
002769 8001              SJMP     ?C2484?DRV_MDIOM
00276B         ?C2483?DRV_MDIOM:
00276B C3                CLR      C
00276C         ?C2484?DRV_MDIOM:
00276C 9238              MOV      bIntState,C
  530: 
  531:     /* transmit frame: Read */
  532:     drv_mdiom_RxDataFrame();
00276E F17C              ACALL    drv_mdiom_RxDataFrame
  533: 
  534:     /* unlock globally interrupt */
  535:     DRV_INT_UnlockGlobalInterrupt(bIntState);
002770 A238              MOV      C,bIntState
002772 123361            LCALL    ?L?COM0037
002775 4003              JC       ?C2488?DRV_MDIOM
002777 D3                SETB     C
002778 8001              SJMP     ?C2489?DRV_MDIOM
00277A         ?C2488?DRV_MDIOM:
00277A C3                CLR      C
00277B         ?C2489?DRV_MDIOM:
  536: 
  537:     /* check read status */
  538:     *pData = vMdioData;
  539:     return drv_mdiom_IsReadSuccess();
  540: }
00277B 22                RET      
----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  332: static void drv_mdiom_RxDataFrame(void)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 67


  333: {
  334:     drv_mdiom_StartFrame();
  335:     drv_mdiom_TxPreamble();
00277C 123053            LCALL    ?L?COM0001
00277F 1230A1            LCALL    ?L?COM0002
002782 122FDC            LCALL    ?L?COM0003
  336:     drv_mdiom_TxStartFrame();
  337:     drv_mdiom_TxOperationCode();
  338:     drv_mdiom_TxPortAddress();
  339:     drv_mdiom_TxDeviceAddress();
  340:     drv_mdiom_RxTurnAround();
002785 00                NOP      
002786 00                NOP      
002787 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002789 D294              SETB     IO_DUT_MDIOM_SDA_OUT
00278B C296              CLR      IO_DUT_MDIOM_SCL_OUT
00278D D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
00278F D296              SETB     IO_DUT_MDIOM_SCL_OUT
002791 00                NOP      
002792 00                NOP      
002793 1231B6            LCALL    ?L?COM0011
002796 9200              MOV      bMdioTurnAround0,C
  341:     drv_mdiom_RxData();
002798 1231B6            LCALL    ?L?COM0011
00279B 9227              MOV      bMdioData15,C
00279D 1231B6            LCALL    ?L?COM0011
0027A0 9226              MOV      bMdioData14,C
0027A2 1231B6            LCALL    ?L?COM0011
0027A5 9225              MOV      bMdioData13,C
0027A7 1231B6            LCALL    ?L?COM0011
0027AA 9224              MOV      bMdioData12,C
0027AC 1231B6            LCALL    ?L?COM0011
0027AF 9223              MOV      bMdioData11,C
0027B1 1231B6            LCALL    ?L?COM0011
0027B4 9222              MOV      bMdioData10,C
0027B6 1231B6            LCALL    ?L?COM0011
0027B9 9221              MOV      bMdioData9,C
0027BB 1231B6            LCALL    ?L?COM0011
0027BE 9220              MOV      bMdioData8,C
0027C0 1231B6            LCALL    ?L?COM0011
0027C3 922F              MOV      bMdioData7,C
0027C5 1231B6            LCALL    ?L?COM0011
0027C8 922E              MOV      bMdioData6,C
0027CA 1231B6            LCALL    ?L?COM0011
0027CD 922D              MOV      bMdioData5,C
0027CF 1231B6            LCALL    ?L?COM0011
0027D2 922C              MOV      bMdioData4,C
0027D4 1231B6            LCALL    ?L?COM0011
0027D7 922B              MOV      bMdioData3,C
0027D9 1231B6            LCALL    ?L?COM0011
0027DC 922A              MOV      bMdioData2,C
0027DE 1231B6            LCALL    ?L?COM0011
0027E1 9229              MOV      bMdioData1,C
0027E3 1231B6            LCALL    ?L?COM0011
0027E6 9228              MOV      bMdioData0,C
  342:     drv_mdiom_StopFrame();
0027E8 02333B            LJMP     ?L?COM0032
  343: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------


----- FUNCTION _CFG_RAM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   75:     }
   76: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 68


;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0027EB A807              MOV      R0,AR7
0027ED E2                MOVX     A,@R0
0027EE FC                MOV      R4,A
0027EF 08                INC      R0
0027F0 E2                MOVX     A,@R0
0027F1 FD                MOV      R5,A
0027F2 08                INC      R0
0027F3 E2                MOVX     A,@R0
0027F4 FE                MOV      R6,A
0027F5 08                INC      R0
0027F6 E2                MOVX     A,@R0
0027F7 FF                MOV      R7,A
0027F8 22                RET      
----- FUNCTION _CFG_RAM_GET32 (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   80: void thread_LED_Init(void)
   81: {
   82:     PT_INIT(&vTCB_LED);
   83: }
0027F9 E4                CLR      A
0027FA F512              MOV      vTCB_LED,A
0027FC F513              MOV      vTCB_LED+01H,A
   84: 
0027FE 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   48: UINT16 PKT_MDIOM_Read(void)
   49: {
   50:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   51: 
002800 12317A            LCALL    ?L?COM0010
002803 12280F            LCALL    _DRV_MDIOM_Read
002806 7E01              MOV      R6,#01H
002808 4002              JC       ?C0007?PKT_MDIOM
   52:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   53:                         pPayload->vDevAddr,
   54:                         pPayload->vOffset,
   55:                         pPayload->vDataCount,
   56:                         pPayload->aData))
   57:     {
   58:         return PKT_REPLY_Fail_MdioNoAck;
00280A 7E03              MOV      R6,#03H
   59:     }
00280C         ?C0007?PKT_MDIOM:
   60: 
   61:     return PKT_REPLY_Done_ExecNoError;
00280C 7F40              MOV      R7,#040H
   62: }
00280E 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  611: BOOL DRV_MDIOM_Read
  612: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 69


;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  613:     IN  UINT8               vPortAddr,
  614:     IN  UINT8               vDevAddr,
  615:     IN  UINT16              vRegAddr,
  616:     IN  UINT16              vDataLen,
  617:     OUT UINT16 SEG_XDATA   *pDataBuf
  618: )
  619: {
  620:     BOOL    bResult = TRUE;
00280F D238              SETB     bResult
  621:     BOOL    bIntState;
  622: 
  623:     /* create MDIO frame: Address */
  624:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002811 11C1              ACALL    _drv_mdiom_CreateAddrFrame
  625: 
  626:     /* lock globally interrupt */
  627:     bIntState = DRV_INT_LockGlobalInterrupt();
002813 30AF05            JNB      EA,?C2499?DRV_MDIOM
002816 C2AF              CLR      EA
002818 D3                SETB     C
002819 8001              SJMP     ?C2500?DRV_MDIOM
00281B         ?C2499?DRV_MDIOM:
00281B C3                CLR      C
00281C         ?C2500?DRV_MDIOM:
00281C 9239              MOV      bIntState,C
  628: 
  629:     /* transmit frame: Address */
  630:     drv_mdiom_TxAddrFrame();
00281E 115A              ACALL    drv_mdiom_TxAddrFrame
  631: 
  632:     /* create MDIO frame: Post-Read-Increment-Address */
  633:     drv_mdiom_SetOperationCode(1, 0);
002820 D20D              SETB     bMdioOperationCode1
002822 C20C              CLR      bMdioOperationCode0
002824         ?C2504?DRV_MDIOM:
  634: 
  635:     /* transmit frame: Post-Read-Increment-Address */
  636:     while (vDataLen-- != 0)
002824 E53A              MOV      A,vDataLen+01H
002826 153A              DEC      vDataLen+01H
002828 AE39              MOV      R6,vDataLen
00282A 7002              JNZ      ?C2544?DRV_MDIOM
00282C 1539              DEC      vDataLen
00282E         ?C2544?DRV_MDIOM:
00282E 4E                ORL      A,R6
00282F 6022              JZ       ?C2511?DRV_MDIOM
  637:     {
  638:         drv_mdiom_RxDataFrame();
002831 12277C            LCALL    drv_mdiom_RxDataFrame
  639: 
  640:         /* check read status */
  641:         *pDataBuf++ = vMdioData;
002834 E53C              MOV      A,pDataBuf+01H
002836 FF                MOV      R7,A
002837 2402              ADD      A,#02H
002839 F53C              MOV      pDataBuf+01H,A
00283B E53B              MOV      A,pDataBuf
00283D FE                MOV      R6,A
00283E 3400              ADDC     A,#00H
002840 F53B              MOV      pDataBuf,A
002842 8F82              MOV      DPL,R7
002844 8E83              MOV      DPH,R6
002846 123363            LCALL    ?L?COM0038
002849 4003              JC       ?C2507?DRV_MDIOM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 70


00284B D3                SETB     C
00284C 8001              SJMP     ?C2508?DRV_MDIOM
00284E         ?C2507?DRV_MDIOM:
00284E C3                CLR      C
00284F         ?C2508?DRV_MDIOM:
00284F 40D3              JC       ?C2504?DRV_MDIOM
  642:         if (!drv_mdiom_IsReadSuccess())
  643:         {
  644:             bResult = FALSE;
002851 C238              CLR      bResult
  645:             break;
  646:         }
  647:     }
002853         ?C2511?DRV_MDIOM:
  648: 
  649:     /* unlock globally interrupt */
  650:     DRV_INT_UnlockGlobalInterrupt(bIntState);
002853 A239              MOV      C,bIntState
002855 92AF              MOV      EA,C
  651: 
  652:     return bResult;
002857 A238              MOV      C,bResult
  653: }
002859 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  306: static void drv_mdiom_TxAddrFrame(void)
  307: {
  308:     drv_mdiom_StartFrame();
  309:     drv_mdiom_TxPreamble();
00285A 123053            LCALL    ?L?COM0001
00285D 1230A1            LCALL    ?L?COM0002
002860 F1DC              ACALL    ?L?COM0003
  310:     drv_mdiom_TxStartFrame();
  311:     drv_mdiom_TxOperationCode();
  312:     drv_mdiom_TxPortAddress();
  313:     drv_mdiom_TxDeviceAddress();
  314:     drv_mdiom_TxTurnAround();
002862 A201              MOV      C,bMdioTurnAround1
002864 12304C            LCALL    ?L?COM0004
002867 A200              MOV      C,bMdioTurnAround0
002869 12304C            LCALL    ?L?COM0004
  315:     drv_mdiom_TxAddr();
00286C A217              MOV      C,bMdioAddr15
00286E 12304C            LCALL    ?L?COM0004
002871 A216              MOV      C,bMdioAddr14
002873 12304C            LCALL    ?L?COM0004
002876 A215              MOV      C,bMdioAddr13
002878 12304C            LCALL    ?L?COM0004
00287B A214              MOV      C,bMdioAddr12
00287D 12304C            LCALL    ?L?COM0004
002880 A213              MOV      C,bMdioAddr11
002882 12304C            LCALL    ?L?COM0004
002885 A212              MOV      C,bMdioAddr10
002887 12304C            LCALL    ?L?COM0004
00288A A211              MOV      C,bMdioAddr9
00288C 12304C            LCALL    ?L?COM0004
00288F A210              MOV      C,bMdioAddr8
002891 12304C            LCALL    ?L?COM0004
002894 A21F              MOV      C,bMdioAddr7
002896 12304C            LCALL    ?L?COM0004
002899 A21E              MOV      C,bMdioAddr6
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 71


00289B 12304C            LCALL    ?L?COM0004
00289E A21D              MOV      C,bMdioAddr5
0028A0 12304C            LCALL    ?L?COM0004
0028A3 A21C              MOV      C,bMdioAddr4
0028A5 12304C            LCALL    ?L?COM0004
0028A8 A21B              MOV      C,bMdioAddr3
0028AA 12304C            LCALL    ?L?COM0004
0028AD A21A              MOV      C,bMdioAddr2
0028AF 12304C            LCALL    ?L?COM0004
0028B2 A219              MOV      C,bMdioAddr1
0028B4 12304C            LCALL    ?L?COM0004
0028B7 A218              MOV      C,bMdioAddr0
0028B9 12304C            LCALL    ?L?COM0004
0028BC 00                NOP      
0028BD 00                NOP      
  316:     drv_mdiom_StopFrame();
0028BE 02333B            LJMP     ?L?COM0032
  317: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  346: static void drv_mdiom_CreateAddrFrame
  347: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  348:     IN UINT8    vPortAddr,
  349:     IN UINT8    vDevAddr,
  350:     IN UINT16   vRegAddr
  351: )
  352: {
  353:     drv_mdiom_SetStartFrame(0, 0);
0028C1 C20F              CLR      bMdioStartFrame1
0028C3 C20E              CLR      bMdioStartFrame0
  354:     drv_mdiom_SetOperationCode(0, 0);
0028C5 C20D              CLR      bMdioOperationCode1
0028C7 1230FA            LCALL    ?L?COM0005
0028CA C200              CLR      bMdioTurnAround0
  355:     drv_mdiom_SetPortAddress(vPortAddr);
  356:     drv_mdiom_SetDeviceAddress(vDevAddr);
  357:     drv_mdiom_SetTurnAround(1, 0);
  358:     drv_mdiom_SetAddr(vRegAddr);
0028CC 8A22              MOV      vMdioAddr,R2
0028CE 8B23              MOV      vMdioAddr+01H,R3
  359: }
0028D0 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------


----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  675: BOOL DRV_MDIOM_Write
  676: (
0028D1 8A37              MOV      vRegAddr,R2
0028D3 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
0028D5 AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
0028D7 AC07              MOV      R4,AR7
  677:     IN       UINT8              vPortAddr,
  678:     IN       UINT8              vDevAddr,
  679:     IN       UINT16             vRegAddr,
  680:     IN       UINT16             vDataLen,
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 72


  681:     IN const UINT16 SEG_XDATA  *pDataBuf
  682: )
  683: {
  684:     BOOL    bIntState;
  685: 
  686:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
0028D9         ?C2513?DRV_MDIOM:
0028D9 E53A              MOV      A,vDataLen+01H
0028DB 153A              DEC      vDataLen+01H
0028DD AA39              MOV      R2,vDataLen
0028DF 7002              JNZ      ?C2545?DRV_MDIOM
0028E1 1539              DEC      vDataLen
0028E3         ?C2545?DRV_MDIOM:
0028E3 4A                ORL      A,R2
0028E4 6043              JZ       ?C2514?DRV_MDIOM
  687:     {
  688:         /* prepare MDIO data */
  689:         drv_mdiom_SetData(*pDataBuf);
0028E6 853C82            MOV      DPL,pDataBuf+01H
0028E9 853B83            MOV      DPH,pDataBuf
0028EC E0                MOVX     A,@DPTR
0028ED F524              MOV      vMdioData,A
0028EF A3                INC      DPTR
0028F0 E0                MOVX     A,@DPTR
0028F1 F525              MOV      vMdioData+01H,A
  690: 
  691:         /* create MDIO frame: Address */
  692:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
0028F3 AF04              MOV      R7,AR4
0028F5 AD06              MOV      R5,AR6
0028F7 AB38              MOV      R3,vRegAddr+01H
0028F9 AA37              MOV      R2,vRegAddr
0028FB 11C1              ACALL    _drv_mdiom_CreateAddrFrame
  693: 
  694:         /* lock globally interrupt */
  695:         bIntState = DRV_INT_LockGlobalInterrupt();
0028FD 30AF05            JNB      EA,?C2519?DRV_MDIOM
002900 C2AF              CLR      EA
002902 D3                SETB     C
002903 8001              SJMP     ?C2520?DRV_MDIOM
002905         ?C2519?DRV_MDIOM:
002905 C3                CLR      C
002906         ?C2520?DRV_MDIOM:
002906 9238              MOV      bIntState,C
  696: 
  697:         /* transmit frame: Address */
  698:         drv_mdiom_TxAddrFrame();
002908 115A              ACALL    drv_mdiom_TxAddrFrame
  699: 
  700:         /* create MDIO frame: Write */
  701:         drv_mdiom_SetOperationCode(0, 1);
00290A C20D              CLR      bMdioOperationCode1
00290C D20C              SETB     bMdioOperationCode0
  702: 
  703:         /* transmit frame: Write */
  704:         drv_mdiom_TxDataFrame();
00290E 312B              ACALL    drv_mdiom_TxDataFrame
  705: 
  706:         /* unlock globally interrupt */
  707:         DRV_INT_UnlockGlobalInterrupt(bIntState);
002910 A238              MOV      C,bIntState
002912 92AF              MOV      EA,C
  708:     }
002914 0538              INC      vRegAddr+01H
002916 E538              MOV      A,vRegAddr+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 73


002918 7002              JNZ      ?C2546?DRV_MDIOM
00291A 0537              INC      vRegAddr
00291C         ?C2546?DRV_MDIOM:
00291C 7402              MOV      A,#02H
00291E 253C              ADD      A,pDataBuf+01H
002920 F53C              MOV      pDataBuf+01H,A
002922 E4                CLR      A
002923 353B              ADDC     A,pDataBuf
002925 F53B              MOV      pDataBuf,A
002927 80B0              SJMP     ?C2513?DRV_MDIOM
002929         ?C2514?DRV_MDIOM:
  709: 
  710:     return TRUE;
002929 D3                SETB     C
  711: }
00292A 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  319: static void drv_mdiom_TxDataFrame(void)
  320: {
  321:     drv_mdiom_StartFrame();
  322:     drv_mdiom_TxPreamble();
00292B 123053            LCALL    ?L?COM0001
00292E 1230A1            LCALL    ?L?COM0002
002931 F1DC              ACALL    ?L?COM0003
  323:     drv_mdiom_TxStartFrame();
  324:     drv_mdiom_TxOperationCode();
  325:     drv_mdiom_TxPortAddress();
  326:     drv_mdiom_TxDeviceAddress();
  327:     drv_mdiom_TxTurnAround();
002933 A201              MOV      C,bMdioTurnAround1
002935 12304C            LCALL    ?L?COM0004
002938 A200              MOV      C,bMdioTurnAround0
00293A 12304C            LCALL    ?L?COM0004
  328:     drv_mdiom_TxData();
00293D A227              MOV      C,bMdioData15
00293F 12304C            LCALL    ?L?COM0004
002942 A226              MOV      C,bMdioData14
002944 12304C            LCALL    ?L?COM0004
002947 A225              MOV      C,bMdioData13
002949 12304C            LCALL    ?L?COM0004
00294C A224              MOV      C,bMdioData12
00294E 12304C            LCALL    ?L?COM0004
002951 A223              MOV      C,bMdioData11
002953 12304C            LCALL    ?L?COM0004
002956 A222              MOV      C,bMdioData10
002958 12304C            LCALL    ?L?COM0004
00295B A221              MOV      C,bMdioData9
00295D 12304C            LCALL    ?L?COM0004
002960 A220              MOV      C,bMdioData8
002962 12304C            LCALL    ?L?COM0004
002965 A22F              MOV      C,bMdioData7
002967 12304C            LCALL    ?L?COM0004
00296A A22E              MOV      C,bMdioData6
00296C 12304C            LCALL    ?L?COM0004
00296F A22D              MOV      C,bMdioData5
002971 12304C            LCALL    ?L?COM0004
002974 A22C              MOV      C,bMdioData4
002976 12304C            LCALL    ?L?COM0004
002979 A22B              MOV      C,bMdioData3
00297B 12304C            LCALL    ?L?COM0004
00297E A22A              MOV      C,bMdioData2
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 74


002980 12304C            LCALL    ?L?COM0004
002983 A229              MOV      C,bMdioData1
002985 12304C            LCALL    ?L?COM0004
002988 A228              MOV      C,bMdioData0
00298A 12304C            LCALL    ?L?COM0004
00298D 00                NOP      
00298E 00                NOP      
  329:     drv_mdiom_StopFrame();
00298F 02333B            LJMP     ?L?COM0032
  330: }
----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   64: UINT16 PKT_MDIOM_Write(void)
   65: {
   66:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   67: 
002992 12317A            LCALL    ?L?COM0010
002995 11D1              ACALL    _DRV_MDIOM_Write
002997 7E01              MOV      R6,#01H
002999 4002              JC       ?C0009?PKT_MDIOM
   68:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   69:                          pPayload->vDevAddr,
   70:                          pPayload->vOffset,
   71:                          pPayload->vDataCount,
   72:                          pPayload->aData))
   73:     {
   74:         return PKT_REPLY_Fail_MdioNoAck;
00299B 7E03              MOV      R6,#03H
   75:     }
00299D         ?C0009?PKT_MDIOM:
   76: 
   77:     return PKT_REPLY_Done_ExecNoError;
00299D 7F40              MOV      R7,#040H
   78: }
00299F 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
0029A0 123323            LCALL    ?L?COM002F
   31: }
0029A3 7E01              MOV      R6,#01H
0029A5 7F40              MOV      R7,#040H
   32: 
0029A7 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
0029A8 123323            LCALL    ?L?COM002F
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 75


0029AB 121F99            LCALL    DRV_C2M_Reset
0029AE 7E03              MOV      R6,#03H
0029B0 5002              JNC      ?C0008?PKT_C2M
0029B2 7E01              MOV      R6,#01H
0029B4         ?C0008?PKT_C2M:
0029B4 7F40              MOV      R7,#040H
   39: }
0029B6 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
0029B7 121C86            LCALL    DRV_C2M_Probe
0029BA 90004C            MOV      DPTR,#vFrame+0CH
0029BD 120685            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
0029C0 90004A            MOV      DPTR,#vFrame+0AH
0029C3 E4                CLR      A
0029C4 F0                MOVX     @DPTR,A
0029C5 A3                INC      DPTR
0029C6 7404              MOV      A,#04H
0029C8 F0                MOVX     @DPTR,A
   46: }
0029C9 7E01              MOV      R6,#01H
0029CB 7F40              MOV      R7,#040H
   47: 
0029CD 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
0029CE 123323            LCALL    ?L?COM002F
   52:             PKT_REPLY_Done_ExecNoError :
   53:             PKT_REPLY_Fail_ExecErrorCode0);
0029D1 121DE3            LCALL    DRV_C2M_ChipErase
0029D4 7E03              MOV      R6,#03H
0029D6 5002              JNC      ?C0018?PKT_C2M
0029D8 7E01              MOV      R6,#01H
0029DA         ?C0018?PKT_C2M:
0029DA 7F40              MOV      R7,#040H
   54: }
0029DC 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
0029DD 90004A            MOV      DPTR,#vFrame+0AH
0029E0 E0                MOVX     A,@DPTR
0029E1 7004              JNZ      ?C0043?PKT_C2M
0029E3 A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 76


0029E4 E0                MOVX     A,@DPTR
0029E5 6401              XRL      A,#01H
0029E7         ?C0043?PKT_C2M:
0029E7 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
0029E9 7E03              MOV      R6,#03H
0029EB 7F04              MOV      R7,#04H
0029ED 22                RET      
   62: 
0029EE         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
0029EE 90004C            MOV      DPTR,#vFrame+0CH
0029F1 E0                MOVX     A,@DPTR
0029F2 FF                MOV      R7,A
0029F3 121B8E            LCALL    _DRV_C2M_PageErase
0029F6 7E03              MOV      R6,#03H
0029F8 5002              JNC      ?C0023?PKT_C2M
0029FA 7E01              MOV      R6,#01H
0029FC         ?C0023?PKT_C2M:
0029FC 7F40              MOV      R7,#040H
   66: }
0029FE 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
0029FF 1231BD            LCALL    ?L?COM0012
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
002A02 90004A            MOV      DPTR,#vFrame+0AH
002A05 E0                MOVX     A,@DPTR
002A06 7004              JNZ      ?C0044?PKT_C2M
002A08 A3                INC      DPTR
002A09 E0                MOVX     A,@DPTR
002A0A 6406              XRL      A,#06H
002A0C         ?C0044?PKT_C2M:
002A0C 700B              JNZ      ?C0026?PKT_C2M
002A0E D3                SETB     C
002A0F E538              MOV      A,vLen+01H
002A11 9432              SUBB     A,#032H
002A13 E537              MOV      A,vLen
002A15 9404              SUBB     A,#04H
002A17 4005              JC       ?C0030?PKT_C2M
002A19         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
002A19 7E03              MOV      R6,#03H
002A1B 7F04              MOV      R7,#04H
002A1D 22                RET      
   79:     }
002A1E         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 77


   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
002A1E E538              MOV      A,vLen+01H
002A20 2406              ADD      A,#06H
002A22 90004B            MOV      DPTR,#vFrame+0BH
002A25 F0                MOVX     @DPTR,A
002A26 E4                CLR      A
002A27 3537              ADDC     A,vLen
002A29 90004A            MOV      DPTR,#vFrame+0AH
002A2C F0                MOVX     @DPTR,A
002A2D         ?C0031?PKT_C2M:
   83:     while (vLen != 0)
002A2D E538              MOV      A,vLen+01H
002A2F 4537              ORL      A,vLen
002A31 602E              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
002A33 C3                CLR      C
002A34 E537              MOV      A,vLen
002A36 9401              SUBB     A,#01H
002A38 5006              JNC      ?C0033?PKT_C2M
002A3A AE37              MOV      R6,vLen
002A3C AF38              MOV      R7,vLen+01H
002A3E 8004              SJMP     ?C0034?PKT_C2M
002A40         ?C0033?PKT_C2M:
002A40 7E01              MOV      R6,#01H
002A42 7F00              MOV      R7,#00H
002A44         ?C0034?PKT_C2M:
002A44 8E39              MOV      vReadLen,R6
002A46 8F3A              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
002A48 AB3A              MOV      R3,vReadLen+01H
002A4A AD36              MOV      R5,vAddr+01H
002A4C AC35              MOV      R4,vAddr
002A4E AF34              MOV      R7,pBuf+01H
002A50 AE33              MOV      R6,pBuf
002A52 121E3D            LCALL    _DRV_C2M_FlashRead
002A55 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
002A57 7E03              MOV      R6,#03H
002A59 7F40              MOV      R7,#040H
002A5B 22                RET      
   94:         }
002A5C         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
002A5C 12320C            LCALL    ?L?COM0019
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
002A5F 80CC              SJMP     ?C0031?PKT_C2M
002A61         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
002A61 7E01              MOV      R6,#01H
002A63 7F40              MOV      R7,#040H
  102: }
002A65 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 78



----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002A66 1231BD            LCALL    ?L?COM0012
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
002A69 2406              ADD      A,#06H
002A6B FF                MOV      R7,A
002A6C E4                CLR      A
002A6D 3537              ADDC     A,vLen
002A6F FE                MOV      R6,A
002A70 90004A            MOV      DPTR,#vFrame+0AH
002A73 E0                MOVX     A,@DPTR
002A74 6E                XRL      A,R6
002A75 7003              JNZ      ?C0045?PKT_C2M
002A77 A3                INC      DPTR
002A78 E0                MOVX     A,@DPTR
002A79 6F                XRL      A,R7
002A7A         ?C0045?PKT_C2M:
002A7A 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
002A7C 7E03              MOV      R6,#03H
002A7E 7F04              MOV      R7,#04H
002A80 22                RET      
  114:     }
002A81         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
002A81 E538              MOV      A,vLen+01H
002A83 4537              ORL      A,vLen
002A85 602E              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002A87 C3                CLR      C
002A88 E537              MOV      A,vLen
002A8A 9401              SUBB     A,#01H
002A8C 5006              JNC      ?C0040?PKT_C2M
002A8E AE37              MOV      R6,vLen
002A90 AF38              MOV      R7,vLen+01H
002A92 8004              SJMP     ?C0041?PKT_C2M
002A94         ?C0040?PKT_C2M:
002A94 7E01              MOV      R6,#01H
002A96 7F00              MOV      R7,#00H
002A98         ?C0041?PKT_C2M:
002A98 8E39              MOV      vWriteLen,R6
002A9A 8F3A              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
002A9C AB3A              MOV      R3,vWriteLen+01H
002A9E AD34              MOV      R5,pBuf+01H
002AA0 AC33              MOV      R4,pBuf
002AA2 AF36              MOV      R7,vAddr+01H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 79


002AA4 AE35              MOV      R6,vAddr
002AA6 121ADC            LCALL    _DRV_C2M_FlashWrite
002AA9 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
002AAB 7E03              MOV      R6,#03H
002AAD 7F40              MOV      R7,#040H
002AAF 22                RET      
  128:         }
002AB0         ?C0042?PKT_C2M:
  129: 
  130:         pBuf  += vWriteLen;
002AB0 12320C            LCALL    ?L?COM0019
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
002AB3 80CC              SJMP     ?C0038?PKT_C2M
002AB5         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
002AB5 7E01              MOV      R6,#01H
002AB7 7F40              MOV      R7,#040H
  136: }
002AB9 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
   41: 
002ABA 752B01            MOV      PT_YIELD_FLAG,#01H
002ABD         ?C0001?THREAD_IDLE:
002ABD E510              MOV      A,vTCB_Idle
002ABF 7038              JNZ      ?C0002?THREAD_IDLE
002AC1 E511              MOV      A,vTCB_Idle+01H
002AC3 24CF              ADD      A,#0CFH
002AC5 601F              JZ       ?C0012?THREAD_IDLE
002AC7 2431              ADD      A,#031H
002AC9 702E              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
002ACB         ?C0004?THREAD_IDLE:
   43:     {
   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
002ACB 1224F1            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
002ACE E50F              MOV      A,vTickCount+03H
002AD0 2432              ADD      A,#032H
002AD2 FF                MOV      R7,A
002AD3 E4                CLR      A
002AD4 350E              ADDC     A,vTickCount+02H
002AD6 123492            LCALL    ?L?COM005C
002AD9 FC                MOV      R4,A
002ADA 9004FC            MOV      DPTR,#vEndTick
002ADD 120685            LCALL    ?C?LSTXDATA
002AE0 751000            MOV      vTCB_Idle,#00H
002AE3 751131            MOV      vTCB_Idle+01H,#031H
002AE6         ?C0012?THREAD_IDLE:
002AE6 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 80


002AE7 9004FC            MOV      DPTR,#vEndTick
002AEA 123258            LCALL    ?L?COM001B
002AED 7F00              MOV      R7,#00H
002AEF 5002              JNC      ?C0014?THREAD_IDLE
002AF1 7F01              MOV      R7,#01H
002AF3         ?C0014?THREAD_IDLE:
002AF3         ?C0015?THREAD_IDLE:
002AF3 EF                MOV      A,R7
002AF4 60D5              JZ       ?C0004?THREAD_IDLE
002AF6 7F00              MOV      R7,#00H
002AF8 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
002AF9         ?C0002?THREAD_IDLE:
002AF9 E4                CLR      A
002AFA F52B              MOV      PT_YIELD_FLAG,A
002AFC F510              MOV      vTCB_Idle,A
002AFE F511              MOV      vTCB_Idle+01H,A
002B00 7F03              MOV      R7,#03H
   53: }
002B02 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
002B03 E4                CLR      A
002B04 F510              MOV      vTCB_Idle,A
002B06 F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
002B08 1201DD            LCALL    CFG_Init
   76:     DRV_Init();
002B0B 121FA9            LCALL    DRV_Init
;----                  JMP      APL_Init
   77:     APL_Init();
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
  183: void APL_Init(void)
  184: {
  185:     /* copy initial setting */
  186:     CFG_SET(RT_EVB_CTRL, CFG_GET(INIT_RT_EVB_CTRL));
002B0E         ?C0598?APL:
002B0E 903860            MOV      DPTR,#03860H
002B11 E4                CLR      A
002B12 93                MOVC     A,@A+DPTR
002B13 FF                MOV      R7,A
002B14 7818              MOV      R0,#018H
002B16 EF                MOV      A,R7
002B17 F2                MOVX     @R0,A
002B18         ?C0619?APL:
  187: 
  188:     /* enable PWM_VBUF output */
  189:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
002B18 7818              MOV      R0,#018H
002B1A E2                MOVX     A,@R0
002B1B FF                MOV      R7,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 81


002B1C E4                CLR      A
002B1D 8FFC              MOV      PCA0CPH0,R7
002B1F         ?C0618?APL:
  190:     DRV_CPU_DelayMs(10);
002B1F 7F0A              MOV      R7,#0AH
002B21 7E00              MOV      R6,#00H
002B23 7128              ACALL    _DRV_CPU_DelayMs
  191:     DRV_IO_Write(IO(IO_VBUF_OEn), LOW);
002B25 C291              CLR      IO_VBUF_OEn
  192: }
002B27 22                RET      
----- FUNCTION APL_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002B28 8F82              MOV      DPL,R7
002B2A 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
   70:     if (DRV_INT_IsGlobalInterruptEnable())
002B2C 30AF23            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
002B2F EF                MOV      A,R7
002B30 250F              ADD      A,vTickCount+03H
002B32 F53E              MOV      vStopTick+03H,A
002B34 EE                MOV      A,R6
002B35 350E              ADDC     A,vTickCount+02H
002B37 F53D              MOV      vStopTick+02H,A
002B39 E4                CLR      A
002B3A 350D              ADDC     A,vTickCount+01H
002B3C F53C              MOV      vStopTick+01H,A
002B3E E4                CLR      A
002B3F 350C              ADDC     A,vTickCount
002B41 F53B              MOV      vStopTick,A
002B43         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
002B43 AF3E              MOV      R7,vStopTick+03H
002B45 AE3D              MOV      R6,vStopTick+02H
002B47 AD3C              MOV      R5,vStopTick+01H
002B49 AC3B              MOV      R4,vStopTick
002B4B 123263            LCALL    ?L?COM001C
002B4E 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
002B50 80F1              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
002B52         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
002B52 E582              MOV      A,DPL
002B54 1582              DEC      DPL
002B56 AE83              MOV      R6,DPH
002B58 7002              JNZ      ?C0012?DRV_CPU
002B5A 1583              DEC      DPH
002B5C         ?C0012?DRV_CPU:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 82


002B5C 4E                ORL      A,R6
002B5D 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
002B5F 7FE8              MOV      R7,#0E8H
002B61 7E03              MOV      R6,#03H
002B63 121A3E            LCALL    _DRV_CPU_DelayUs
   91:     	}
002B66 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
002B68         ?C0010?DRV_CPU:
002B68 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
002B69 752B01            MOV      PT_YIELD_FLAG,#01H
002B6C         ?C0001?THREAD_LED:
002B6C E512              MOV      A,vTCB_LED
002B6E 7054              JNZ      ?C0002?THREAD_LED
002B70 E513              MOV      A,vTCB_LED+01H
002B72 24C5              ADD      A,#0C5H
002B74 603B              JZ       ?C0029?THREAD_LED
002B76 243B              ADD      A,#03BH
002B78 704A              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
002B7A         ?C0004?THREAD_LED:
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
002B7A 7819              MOV      R0,#019H
002B7C E2                MOVX     A,@R0
002B7D C4                SWAP     A
002B7E 13                RRC      A
002B7F 13                RRC      A
002B80 13                RRC      A
002B81 5401              ANL      A,#01H
002B83 123272            LCALL    ?L?COM001E
002B86 1233C8            LCALL    ?L?COM0041
002B89 7006              JNZ      ?C0016?THREAD_LED
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_1_OUT), HIGH);
002B8B D293              SETB     IO_LED_1_OUT
   48:             DRV_IO_Write(IO(IO_LED_2_OUT), LOW);
002B8D C286              CLR      IO_LED_2_OUT
   49:         }
002B8F 8004              SJMP     ?C0022?THREAD_LED
   50:         else
   51:       #endif
   52:         {
002B91         ?C0016?THREAD_LED:
   53:             /* system running abnormally */
   54:             DRV_IO_Write(IO(IO_LED_1_OUT), LOW);
002B91 C293              CLR      IO_LED_1_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 83


   55:             DRV_IO_Write(IO(IO_LED_2_OUT), HIGH);
002B93 D286              SETB     IO_LED_2_OUT
   56:         }
002B95         ?C0022?THREAD_LED:
   57: 
   58:         DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
002B95 63A008            XRL      P2,#08H
   59:         OS_SLEEP_MS(&vTCB_LED, 500);
002B98 E50F              MOV      A,vTickCount+03H
002B9A 24F4              ADD      A,#0F4H
002B9C FF                MOV      R7,A
002B9D E50E              MOV      A,vTickCount+02H
002B9F 3401              ADDC     A,#01H
002BA1 123492            LCALL    ?L?COM005C
002BA4 FC                MOV      R4,A
002BA5 900500            MOV      DPTR,#vEndTick
002BA8 120685            LCALL    ?C?LSTXDATA
002BAB 751200            MOV      vTCB_LED,#00H
002BAE 75133B            MOV      vTCB_LED+01H,#03BH
002BB1         ?C0029?THREAD_LED:
002BB1 00                NOP      
002BB2 900500            MOV      DPTR,#vEndTick
002BB5 123258            LCALL    ?L?COM001B
002BB8 7F00              MOV      R7,#00H
002BBA 5002              JNC      ?C0031?THREAD_LED
002BBC 7F01              MOV      R7,#01H
002BBE         ?C0031?THREAD_LED:
002BBE         ?C0032?THREAD_LED:
002BBE EF                MOV      A,R7
002BBF 60B9              JZ       ?C0004?THREAD_LED
002BC1 7F00              MOV      R7,#00H
002BC3 22                RET      
   60:     }
   61: 
   62:     PT_END(&vTCB_LED);
002BC4         ?C0002?THREAD_LED:
002BC4 E4                CLR      A
002BC5 F52B              MOV      PT_YIELD_FLAG,A
002BC7 F512              MOV      vTCB_LED,A
002BC9 F513              MOV      vTCB_LED+01H,A
002BCB 7F03              MOV      R7,#03H
   63: }
002BCD 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
002BCE D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
002BD0 0215C6            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   61: void main(void)
   62: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 84


   63: 	/* previous init */
   64: 	DRV_PreInit();
002BD3 9106              ACALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
002BD5 71F0              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
002BD7 71CE              ACALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
002BD9         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
002BD9 E4                CLR      A
002BDA F52A              MOV      i,A
002BDC         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
002BDC E52A              MOV      A,i
002BDE 75F006            MOV      B,#06H
002BE1 A4                MUL      AB
002BE2 240C              ADD      A,#LOW aThreadList
002BE4 F582              MOV      DPL,A
002BE6 E4                CLR      A
002BE7 3416              ADDC     A,#HIGH aThreadList
002BE9 123302            LCALL    ?L?COM002D
002BEC 40EE              JC       ?C0003?OS
002BEE 80E9              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
002BF0 E4                CLR      A
002BF1 F52A              MOV      i,A
002BF3         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
002BF3 E52A              MOV      A,i
002BF5 75F006            MOV      B,#06H
002BF8 A4                MUL      AB
002BF9 240F              ADD      A,#LOW aThreadList+03H
002BFB F582              MOV      DPL,A
002BFD E4                CLR      A
002BFE 3416              ADDC     A,#HIGH aThreadList+03H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 85


002C00 123302            LCALL    ?L?COM002D
002C03 40EE              JC       ?C0007?OS
   83:     }
   84: }
002C05 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
002C06 E4                CLR      A
002C07 F5A8              MOV      IE,A
002C09 F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
   94:     DRV_CLOCK_Init();
002C0B 75B283            MOV      OSCICN,#083H
002C0E         ?C0026?DRV:
002C0E E5B2              MOV      A,OSCICN
002C10 C4                SWAP     A
002C11 13                RRC      A
002C12 13                RRC      A
002C13 5403              ANL      A,#03H
002C15 13                RRC      A
002C16 50F6              JNC      ?C0026?DRV
002C18         ?C0027?DRV:
002C18 75B980            MOV      CLKMUL,#080H
002C1B 7F05              MOV      R7,#05H
002C1D 7E00              MOV      R6,#00H
002C1F 121A3E            LCALL    _DRV_CPU_DelayUs
002C22 43B9C0            ORL      CLKMUL,#0C0H
002C25         ?C0028?DRV:
002C25 E5B9              MOV      A,CLKMUL
002C27 C4                SWAP     A
002C28 13                RRC      A
002C29 5407              ANL      A,#07H
002C2B 13                RRC      A
002C2C 50F7              JNC      ?C0028?DRV
002C2E         ?C0029?DRV:
002C2E 75A902            MOV      CLKSEL,#02H
002C31 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
002C34 9196              ACALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
002C36 438E08            ORL      CKCON,#08H
002C39 E589              MOV      A,TMOD
002C3B 540F              ANL      A,#0FH
002C3D 4420              ORL      A,#020H
002C3F F589              MOV      TMOD,A
002C41 758D98            MOV      TH1,#098H
002C44 D28E              SETB     TR1
002C46 AFD4              MOV      R7,P0SKIP
002C48 EF                MOV      A,R7
002C49 54EF              ANL      A,#0EFH
002C4B FF                MOV      R7,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 86


002C4C 8FD4              MOV      P0SKIP,R7
002C4E AFD4              MOV      R7,P0SKIP
002C50 EF                MOV      A,R7
002C51 54DF              ANL      A,#0DFH
002C53 FF                MOV      R7,A
002C54 8FD4              MOV      P0SKIP,R7
002C56 43E101            ORL      XBR0,#01H
002C59 759802            MOV      SCON0,#02H
;----                  JMP      DRV_PCA_Init
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_PCA_Init (BEGIN) -----
 FILE: '..\drv\drv_pca.c'
   37: void DRV_PCA_Init(void)
   38: {
   39:     UINT8   vPCA0ME = 0x00;
   40: 
;---- Variable 'vPCA0ME' assigned to Register 'R3' ----
002C5C E4                CLR      A
002C5D FB                MOV      R3,A
   41:     /* PCA channel init */
   42:   #define DECLARE_PCA(_name,_ch,_io,_mode,_init,_desc)                      \
   43:     do {                                                                    \
   44:         DRV_PCA_Write(_name, _init);                                        \
   45:         DRV_PCA_SetMode(_name, _mode);                                      \
   46:                                                                             \
   47:         if (_mode != PCA_MODE_DISABLE)                                      \
   48:         {                                                                   \
   49:             /* force no-skip this PCA channel for GPIO */                   \
   50:             drv_io_SetSkip(_PCA_IO(_name), DISABLE);                        \
   51:             vPCA0ME++;                                                      \
   52:         }                                                                   \
   53:     } while (0);
   54:   #include "cfg_hw_def.h"
   55:   #undef DECLARE_PCA
   56: 
   57:     /* init PCA0:
   58:      *  reset PCA counter;
   59:      *  PCA clock source: defined by DRV_PCA_SOURCE_CLOCK;
   60:      *  enable PCA;
   61:      */
   62:     PCA0H  = 0x00;
   63:     PCA0L  = 0x00;
   64:     PCA0MD = (DRV_PCA_SOURCE_CLOCK<<1);
   65:     PCA0CN = 0x40;
   66: 
   67:     /* enable CEXn at cross-bar */
   68:     XBR1 |= (vPCA0ME&0x7);
   69: }
   70: 
   71: #endif
   72: 
   72: 
002C5E 75FCFF            MOV      PCA0CPH0,#0FFH
002C61         ?C0011?DRV_PCA:
002C61 75DA42            MOV      PCA0CPM0,#042H
002C64 AFD4              MOV      R7,P0SKIP
002C66 EF                MOV      A,R7
002C67 54FD              ANL      A,#0FDH
002C69 FF                MOV      R7,A
002C6A 8FD4              MOV      P0SKIP,R7
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 87


002C6C 0B                INC      R3
   72: 
002C6D         ?C0022?DRV_PCA:
002C6D E4                CLR      A
002C6E F5E9              MOV      PCA0CPL1,A
002C70 F5EA              MOV      PCA0CPH1,A
002C72         ?C0026?DRV_PCA:
002C72 E4                CLR      A
002C73 F5DB              MOV      PCA0CPM1,A
002C75         ?C0037?DRV_PCA:
002C75 E4                CLR      A
002C76 F5EB              MOV      PCA0CPL2,A
002C78 F5EC              MOV      PCA0CPH2,A
002C7A         ?C0041?DRV_PCA:
002C7A E4                CLR      A
002C7B F5DC              MOV      PCA0CPM2,A
002C7D         ?C0052?DRV_PCA:
002C7D E4                CLR      A
002C7E F5ED              MOV      PCA0CPL3,A
002C80 F5EE              MOV      PCA0CPH3,A
002C82         ?C0056?DRV_PCA:
002C82 E4                CLR      A
002C83 F5DD              MOV      PCA0CPM3,A
002C85         ?C0047?DRV_PCA:
002C85 E4                CLR      A
002C86 F5FA              MOV      PCA0H,A
002C88 F5F9              MOV      PCA0L,A
002C8A 75D908            MOV      PCA0MD,#08H
002C8D 75D840            MOV      PCA0CN,#040H
002C90 EB                MOV      A,R3
002C91 5407              ANL      A,#07H
002C93 42E2              ORL      XBR1,A
002C95 22                RET      
----- FUNCTION DRV_PCA_Init (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
002C96 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
002C99 7590F7            MOV      P1,#0F7H
   42:     P2      = _PORT_INIT(P2);
002C9C 75A0FF            MOV      P2,#0FFH
   43:     P3      = _PORT_INIT(P3);
002C9F 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
002CA2 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
002CA5 75F2FE            MOV      P1MDIN,#0FEH
   46:     P2MDIN  = _PORT_MDIN(P2);
002CA8 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
002CAB 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
002CAE 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
002CB1 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
002CB4 75A60A            MOV      P2MDOUT,#0AH
   51:     P3MDOUT = _PORT_MDOUT(P3);
002CB7 E4                CLR      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 88


002CB8 F5A7              MOV      P3MDOUT,A
   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
002CBA 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
002CBD 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
002CC0 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
002CC3 F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
002CC5 75E240            MOV      XBR1,#040H
   61: }
002CC8 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


----- FUNCTION _CFG_RAM_SET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   77:     return MEMPAGE_PID_INVALID;
   78: }
;---- Variable 'vAddr' assigned to Register 'R2/R3' ----
002CC9 AB07              MOV      R3,AR7
002CCB AF31              MOV      R7,vData+03H
002CCD AE30              MOV      R6,vData+02H
002CCF AD2F              MOV      R5,vData+01H
002CD1 AC2E              MOV      R4,vData
002CD3 A803              MOV      R0,AR3
002CD5 020691            LJMP     ?C?LSTPDATA
----- FUNCTION _CFG_RAM_SET32 (END) -------


----- FUNCTION _cfg_db_GetPID (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   42: static SINT8 cfg_db_GetPID(IN UINT8 vOffset)
   43: {
;---- Variable 'vOffset' assigned to Register 'R7' ----
   44:     if (vOffset < MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
   45:     {
002CD8 EF                MOV      A,R7
002CD9 C3                CLR      C
002CDA 9460              SUBB     A,#060H
002CDC 5003              JNC      ?C0019?CFG_DB
   46:         return MEMPAGE_PID_DIRECT_FE_00;
   47:     }
002CDE 7F06              MOV      R7,#06H
002CE0 22                RET      
   48:     else if (vOffset < I2CS_PAGE_SIZE)
002CE1         ?C0019?CFG_DB:
   49:     {
002CE1 EF                MOV      A,R7
002CE2 C3                CLR      C
002CE3 9480              SUBB     A,#080H
002CE5 5003              JNC      ?C0022?CFG_DB
   50:         return MEMPAGE_PID_DIRECT_FE_60;
   51:     }
002CE7 7F01              MOV      R7,#01H
002CE9 22                RET      
   52:     else
002CEA         ?C0022?CFG_DB:
   53:     {
   54:         switch (CFG_GET8(Vendor_Page_Select))
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 89


002CEA 781F              MOV      R0,#01FH
002CEC E2                MOVX     A,@R0
002CED 2480              ADD      A,#080H
002CEF 6017              JZ       ?C0027?CFG_DB
002CF1 14                DEC      A
002CF2 6017              JZ       ?C0028?CFG_DB
002CF4 14                DEC      A
002CF5 6017              JZ       ?C0029?CFG_DB
002CF7 2483              ADD      A,#083H
002CF9 6016              JZ       ?C0030?CFG_DB
002CFB 243F              ADD      A,#03FH
002CFD 7015              JNZ      ?C0021?CFG_DB
   55:         {
   56:             /* RAM pages */
   57:             case 0xC0:
002CFF         ?C0025?CFG_DB:
   58:                 if (vOffset < I2CS_PAGE_SIZE+CFG_RAM_PAGE_SIZE)
002CFF EF                MOV      A,R7
002D00 C3                CLR      C
002D01 94A0              SUBB     A,#0A0H
002D03 500F              JNC      ?C0021?CFG_DB
   59:                 {
   60:                     return MEMPAGE_PID_EXTEND_FE_C0;
002D05 7F02              MOV      R7,#02H
002D07 22                RET      
   61:                 }
   62:                 break;
   63: 
   64:             /* ROM pages */
   65:             case 0x80: return MEMPAGE_PID_EXTEND_FE_80;
002D08         ?C0027?CFG_DB:
002D08 7F03              MOV      R7,#03H
002D0A 22                RET      
   66:             case 0x81: return MEMPAGE_PID_EXTEND_FE_81;
002D0B         ?C0028?CFG_DB:
002D0B 7F04              MOV      R7,#04H
002D0D 22                RET      
   67:             case 0x82: return MEMPAGE_PID_EXTEND_FE_82;
002D0E         ?C0029?CFG_DB:
002D0E 7F05              MOV      R7,#05H
002D10 22                RET      
   68: 
   69:             /* virtual pages */
   70:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
002D11         ?C0030?CFG_DB:
002D11 7F00              MOV      R7,#00H
002D13 22                RET      
   71: 
   72:             default:
   73:                 break;
   74:         }
   75:     }
002D14         ?C0021?CFG_DB:
   76: 
   77:     return MEMPAGE_PID_INVALID;
002D14 7FFF              MOV      R7,#0FFH
   78: }
002D16 22                RET      
----- FUNCTION _cfg_db_GetPID (END) -------


----- FUNCTION _CFG_DB_ReadByte (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   95: UINT8 CFG_DB_ReadByte(IN UINT8 vOffset)
   96: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 90


;---- Variable 'vOffset' assigned to Register 'R5' ----
002D17 AD07              MOV      R5,AR7
   97:     SINT8   vPID = cfg_db_GetPID(vOffset);
   98:     UINT8   vPageSize;
002D19 91D8              ACALL    _cfg_db_GetPID
;---- Variable 'vPID' assigned to Register 'R6' ----
002D1B AE07              MOV      R6,AR7
   99: 
  100:     if (vPID == MEMPAGE_PID_INVALID)
002D1D BEFF03            CJNE     R6,#0FFH,?C0032?CFG_DB
  101:     {
  102:         /* invalid page */
  103:         return (UINT8)I2CS_INVALID_DATA;
002D20 7FAA              MOV      R7,#0AAH
002D22 22                RET      
  104:     }
002D23         ?C0032?CFG_DB:
  105: 
  106:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
002D23 C3                CLR      C
002D24 EE                MOV      A,R6
002D25 6480              XRL      A,#080H
002D27 9481              SUBB     A,#081H
002D29 400C              JC       ?C0034?CFG_DB
002D2B D3                SETB     C
002D2C EE                MOV      A,R6
002D2D 6480              XRL      A,#080H
002D2F 9482              SUBB     A,#082H
002D31 5004              JNC      ?C0034?CFG_DB
002D33 7F20              MOV      R7,#020H
002D35 8002              SJMP     ?C0035?CFG_DB
002D37         ?C0034?CFG_DB:
002D37 7F80              MOV      R7,#080H
002D39         ?C0035?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  107:     vOffset  &= (vPageSize - 1);
002D39 EF                MOV      A,R7
002D3A 14                DEC      A
002D3B 5205              ANL      AR5,A
  108: 
  109:     /* check password level, to make sure it's readable */
  110:     if (CFG_PWD_GetLevel() >= aPagePwdReadTable[vPID])
002D3D EE                MOV      A,R6
002D3E FB                MOV      R3,A
002D3F 33                RLC      A
002D40 95E0              SUBB     A,ACC
002D42 FA                MOV      R2,A
002D43 741E              MOV      A,#LOW aPagePwdReadTable
002D45 2B                ADD      A,R3
002D46 F582              MOV      DPL,A
002D48 7416              MOV      A,#HIGH aPagePwdReadTable
002D4A 3A                ADDC     A,R2
002D4B 123489            LCALL    ?L?COM005B
002D4E 9F                SUBB     A,R7
002D4F 407B              JC       ?C0036?CFG_DB
  111:     {
  112:         /* password check pass */
  113:         switch (vPID)
002D51 EE                MOV      A,R6
002D52 6014              JZ       ?C0045?CFG_DB
002D54 14                DEC      A
002D55 7027              JNZ      ?C0037?CFG_DB
  114:         {
  115:             case MEMPAGE_PID_DIRECT_FE_60:
002D57         ?C0038?CFG_DB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 91


  116:                 switch (vOffset)
002D57 ED                MOV      A,R5
002D58 24E5              ADD      A,#0E5H
002D5A 24FD              ADD      A,#0FDH
002D5C 5004              JNC      ?C0042?CFG_DB
002D5E 6005              JZ       ?C0043?CFG_DB
002D60 801C              SJMP     ?C0037?CFG_DB
  117:                 {
  118:                     /* for security reason,
  119:                      *  the password entry is write-only field.
  120:                      */
  121:                     case CFG(Vendor_PWD_Entry)+0:
  122:                     case CFG(Vendor_PWD_Entry)+1:
  123:                     case CFG(Vendor_PWD_Entry)+2: return 0x00;
002D62         ?C0042?CFG_DB:
002D62 7F00              MOV      R7,#00H
002D64 22                RET      
  124:                     case CFG(Vendor_PWD_Entry)+3: return CFG_PWD_GetLevel();
002D65         ?C0043?CFG_DB:
002D65 AF15              MOV      R7,vCfgPwdLevel
002D67 22                RET      
  125: 
  126:                     default:
  127:                         break;
  128:                 }
  129:                 break;
  130: 
  131:             case MEMPAGE_PID_EXTEND_FE_FF:
002D68         ?C0045?CFG_DB:
  132:                 return (((vOffset >= CFG_HEAD(Vendor_FwVersion))
  133:                             && (vOffset <= CFG_TAIL(Vendor_FwVersion)))?
  134:                         FW_VERSION(vOffset-CFG_HEAD(Vendor_FwVersion)):
  135:                         (UINT8)I2CS_INVALID_DATA);
002D68 ED                MOV      A,R5
002D69 C3                CLR      C
002D6A 9478              SUBB     A,#078H
002D6C 400D              JC       ?C0046?CFG_DB
002D6E ED                MOV      A,R5
002D6F D3                SETB     C
002D70 947F              SUBB     A,#07FH
002D72 5007              JNC      ?C0046?CFG_DB
002D74 ED                MOV      A,R5
002D75 900170            MOV      DPTR,#__sig-070H
002D78 93                MOVC     A,@A+DPTR
002D79 FF                MOV      R7,A
002D7A 22                RET      
002D7B         ?C0046?CFG_DB:
002D7B 7FAA              MOV      R7,#0AAH
002D7D 22                RET      
  136: 
  137:             default:
  138:                 break;
  139:         }
002D7E         ?C0037?CFG_DB:
  140: 
  141:         return CFG_GETV8(vPID, vOffset);
002D7E C3                CLR      C
002D7F EE                MOV      A,R6
002D80 6480              XRL      A,#080H
002D82 9481              SUBB     A,#081H
002D84 4014              JC       ?C0049?CFG_DB
002D86 D3                SETB     C
002D87 EE                MOV      A,R6
002D88 6480              XRL      A,#080H
002D8A 9482              SUBB     A,#082H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 92


002D8C 500C              JNC      ?C0049?CFG_DB
002D8E EE                MOV      A,R6
002D8F 14                DEC      A
002D90 C4                SWAP     A
002D91 33                RLC      A
002D92 54E0              ANL      A,#0E0H
002D94 2D                ADD      A,R5
002D95 F8                MOV      R0,A
002D96 E2                MOVX     A,@R0
002D97 FF                MOV      R7,A
002D98 8031              SJMP     ?C0050?CFG_DB
002D9A         ?C0049?CFG_DB:
002D9A C3                CLR      C
002D9B EE                MOV      A,R6
002D9C 6480              XRL      A,#080H
002D9E 9483              SUBB     A,#083H
002DA0 4027              JC       ?C0051?CFG_DB
002DA2 D3                SETB     C
002DA3 EE                MOV      A,R6
002DA4 6480              XRL      A,#080H
002DA6 9486              SUBB     A,#086H
002DA8 501F              JNC      ?C0051?CFG_DB
002DAA AF06              MOV      R7,AR6
002DAC 123392            LCALL    ?L?COM003D
002DAF         ?C0106?CFG_DB:
002DAF C3                CLR      C
002DB0 33                RLC      A
002DB1 CE                XCH      A,R6
002DB2 33                RLC      A
002DB3 CE                XCH      A,R6
002DB4 D8F9              DJNZ     R0,?C0106?CFG_DB
002DB6 1233EF            LCALL    ?L?COM0047
002DB9 7C00              MOV      R4,#00H
002DBB EF                MOV      A,R7
002DBC 2D                ADD      A,R5
002DBD FF                MOV      R7,A
002DBE EC                MOV      A,R4
002DBF 3E                ADDC     A,R6
002DC0 8F82              MOV      DPL,R7
002DC2 F583              MOV      DPH,A
002DC4 E4                CLR      A
002DC5 93                MOVC     A,@A+DPTR
002DC6 FF                MOV      R7,A
002DC7 8002              SJMP     ?C0052?CFG_DB
002DC9         ?C0051?CFG_DB:
002DC9 7FAA              MOV      R7,#0AAH
002DCB         ?C0052?CFG_DB:
002DCB         ?C0050?CFG_DB:
002DCB 22                RET      
  142:     }
002DCC         ?C0036?CFG_DB:
  143:     else
  144:     {
  145:         /* password check fail */
  146:         return (UINT8)I2CS_INVALID_DATA;
002DCC 7FAA              MOV      R7,#0AAH
  147:     }
  148: }
002DCE 22                RET      
----- FUNCTION _CFG_DB_ReadByte (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 93


002DCF C0E0              PUSH     ACC
002DD1 C0D0              PUSH     PSW
002DD3 75D000            MOV      PSW,#00H
002DD6 C004              PUSH     AR4
002DD8 C005              PUSH     AR5
002DDA C006              PUSH     AR6
002DDC C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
002DDE C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
002DE0 AF0F              MOV      R7,vTickCount+03H
002DE2 AE0E              MOV      R6,vTickCount+02H
002DE4 AD0D              MOV      R5,vTickCount+01H
002DE6 AC0C              MOV      R4,vTickCount
002DE8 EF                MOV      A,R7
002DE9 2401              ADD      A,#01H
002DEB F50F              MOV      vTickCount+03H,A
002DED E4                CLR      A
002DEE 3E                ADDC     A,R6
002DEF F50E              MOV      vTickCount+02H,A
002DF1 E4                CLR      A
002DF2 3D                ADDC     A,R5
002DF3 F50D              MOV      vTickCount+01H,A
002DF5 E4                CLR      A
002DF6 3C                ADDC     A,R4
002DF7 F50C              MOV      vTickCount,A
   45: }
002DF9 D007              POP      AR7
002DFB D006              POP      AR6
002DFD D005              POP      AR5
002DFF D004              POP      AR4
002E01 D0D0              POP      PSW
002E03 D0E0              POP      ACC
002E05 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
002E06 C0E0              PUSH     ACC
002E08 C083              PUSH     DPH
002E0A C082              PUSH     DPL
002E0C C0D0              PUSH     PSW
002E0E 75D000            MOV      PSW,#00H
002E11 C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
002E13 121601            LCALL    Get_Interrupt_Source
002E16 1217CB            LCALL    _thread_Pkt_Notify
   69:   #endif
   70: }
002E19 D007              POP      AR7
002E1B D0D0              POP      PSW
002E1D D082              POP      DPL
002E1F D083              POP      DPH
002E21 D0E0              POP      ACC
002E23 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 94



----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   43: void DRV_USB_Init(void)
   44: {
   45:     UINT8   vData;
   46:     UINT8   vLoop;
   47: 
   48:     /* init USB manufacture string */
   49:     aManufacturerStr[1] = 0x03;
002E24 900485            MOV      DPTR,#aManufacturerStr+01H
002E27 7403              MOV      A,#03H
002E29 F0                MOVX     @DPTR,A
   50:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002E2A 7F02              MOV      R7,#02H
002E2C         ?C0001?DRV_USB:
002E2C EF                MOV      A,R7
002E2D C3                CLR      C
002E2E 9422              SUBB     A,#022H
002E30 5030              JNC      ?C0002?DRV_USB
   51:     {
   52:         vData = CFG_GETO8(EE_Vendor_Name, (vLoop>>1)-1);
002E32 EF                MOV      A,R7
002E33 C3                CLR      C
002E34 13                RRC      A
002E35 C3                CLR      C
002E36 9401              SUBB     A,#01H
002E38 2490              ADD      A,#090H
002E3A 1232A1            LCALL    ?L?COM0025
002E3D 4023              JC       ?C0002?DRV_USB
002E3F E52B              MOV      A,vData
002E41 947F              SUBB     A,#07FH
002E43 501D              JNC      ?C0002?DRV_USB
   53: 
   54:         if ((vData < 0x20) || (vData >= 0x7F))
   55:         {
   56:             break;
   57:         }
002E45         ?C0004?DRV_USB:
   58: 
   59:         aManufacturerStr[vLoop+0] = vData;
002E45 7484              MOV      A,#LOW aManufacturerStr
002E47 2F                ADD      A,R7
002E48 F582              MOV      DPL,A
002E4A E4                CLR      A
002E4B 3404              ADDC     A,#HIGH aManufacturerStr
002E4D F583              MOV      DPH,A
002E4F E52B              MOV      A,vData
002E51 F0                MOVX     @DPTR,A
   60:         aManufacturerStr[vLoop+1] = 0;
002E52 7485              MOV      A,#LOW aManufacturerStr+01H
002E54 2F                ADD      A,R7
002E55 F582              MOV      DPL,A
002E57 E4                CLR      A
002E58 3404              ADDC     A,#HIGH aManufacturerStr+01H
002E5A F583              MOV      DPH,A
002E5C E4                CLR      A
002E5D F0                MOVX     @DPTR,A
   61:     }
002E5E 0F                INC      R7
002E5F 0F                INC      R7
002E60 80CA              SJMP     ?C0001?DRV_USB
002E62         ?C0002?DRV_USB:
   62:     aManufacturerStr[0] = vLoop;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 95


002E62 900484            MOV      DPTR,#aManufacturerStr
002E65 EF                MOV      A,R7
002E66 F0                MOVX     @DPTR,A
   63: 
   64:     /* init USB product string */
   65:     aProductStr[1] = 0x03;
002E67 9004A7            MOV      DPTR,#aProductStr+01H
002E6A 7403              MOV      A,#03H
002E6C F0                MOVX     @DPTR,A
   66:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
002E6D 7F02              MOV      R7,#02H
002E6F         ?C0006?DRV_USB:
002E6F EF                MOV      A,R7
002E70 C3                CLR      C
002E71 9422              SUBB     A,#022H
002E73 5030              JNC      ?C0007?DRV_USB
   67:     {
   68:         vData = CFG_GETO8(EE_Vendor_PN, (vLoop>>1)-1);
002E75 EF                MOV      A,R7
002E76 C3                CLR      C
002E77 13                RRC      A
002E78 C3                CLR      C
002E79 9401              SUBB     A,#01H
002E7B 24A0              ADD      A,#0A0H
002E7D 1232A1            LCALL    ?L?COM0025
002E80 4023              JC       ?C0007?DRV_USB
002E82 E52B              MOV      A,vData
002E84 947F              SUBB     A,#07FH
002E86 501D              JNC      ?C0007?DRV_USB
   69: 
   70:         if ((vData < 0x20) || (vData >= 0x7F))
   71:         {
   72:             break;
   73:         }
002E88         ?C0009?DRV_USB:
   74: 
   75:         aProductStr[vLoop+0] = vData;
002E88 74A6              MOV      A,#LOW aProductStr
002E8A 2F                ADD      A,R7
002E8B F582              MOV      DPL,A
002E8D E4                CLR      A
002E8E 3404              ADDC     A,#HIGH aProductStr
002E90 F583              MOV      DPH,A
002E92 E52B              MOV      A,vData
002E94 F0                MOVX     @DPTR,A
   76:         aProductStr[vLoop+1] = 0;
002E95 74A7              MOV      A,#LOW aProductStr+01H
002E97 2F                ADD      A,R7
002E98 F582              MOV      DPL,A
002E9A E4                CLR      A
002E9B 3404              ADDC     A,#HIGH aProductStr+01H
002E9D F583              MOV      DPH,A
002E9F E4                CLR      A
002EA0 F0                MOVX     @DPTR,A
   77:     }
002EA1 0F                INC      R7
002EA2 0F                INC      R7
002EA3 80CA              SJMP     ?C0006?DRV_USB
002EA5         ?C0007?DRV_USB:
   78:     aProductStr[0] = vLoop;
002EA5 9004A6            MOV      DPTR,#aProductStr
002EA8 EF                MOV      A,R7
002EA9 F0                MOVX     @DPTR,A
   79: 
   80:     /* init USB serial number string */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 96


   81:     aSerialNumberStr[1] = 0x03;
002EAA 9004C9            MOV      DPTR,#aSerialNumberStr+01H
002EAD 7403              MOV      A,#03H
002EAF F0                MOVX     @DPTR,A
   82:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
002EB0 7F02              MOV      R7,#02H
002EB2         ?C0011?DRV_USB:
002EB2 EF                MOV      A,R7
002EB3 C3                CLR      C
002EB4 9422              SUBB     A,#022H
002EB6 5030              JNC      ?C0012?DRV_USB
   83:     {
   84:         vData = CFG_GETO8(EE_Vendor_SN, (vLoop>>1)-1);
002EB8 EF                MOV      A,R7
002EB9 C3                CLR      C
002EBA 13                RRC      A
002EBB C3                CLR      C
002EBC 9401              SUBB     A,#01H
002EBE 24B0              ADD      A,#0B0H
002EC0 1232A1            LCALL    ?L?COM0025
002EC3 4023              JC       ?C0012?DRV_USB
002EC5 E52B              MOV      A,vData
002EC7 947F              SUBB     A,#07FH
002EC9 501D              JNC      ?C0012?DRV_USB
   85: 
   86:         if ((vData < 0x20) || (vData >= 0x7F))
   87:         {
   88:             break;
   89:         }
002ECB         ?C0014?DRV_USB:
   90: 
   91:         aSerialNumberStr[vLoop+0] = vData;
002ECB 74C8              MOV      A,#LOW aSerialNumberStr
002ECD 2F                ADD      A,R7
002ECE F582              MOV      DPL,A
002ED0 E4                CLR      A
002ED1 3404              ADDC     A,#HIGH aSerialNumberStr
002ED3 F583              MOV      DPH,A
002ED5 E52B              MOV      A,vData
002ED7 F0                MOVX     @DPTR,A
   92:         aSerialNumberStr[vLoop+1] = 0;
002ED8 74C9              MOV      A,#LOW aSerialNumberStr+01H
002EDA 2F                ADD      A,R7
002EDB F582              MOV      DPL,A
002EDD E4                CLR      A
002EDE 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002EE0 F583              MOV      DPH,A
002EE2 E4                CLR      A
002EE3 F0                MOVX     @DPTR,A
   93:     }
002EE4 0F                INC      R7
002EE5 0F                INC      R7
002EE6 80CA              SJMP     ?C0011?DRV_USB
002EE8         ?C0012?DRV_USB:
   94:     aSerialNumberStr[0] = vLoop;
002EE8 9004C8            MOV      DPTR,#aSerialNumberStr
002EEB EF                MOV      A,R7
002EEC F0                MOVX     @DPTR,A
   95: 
   96:     /* set USB0 to the high priority level interrupt */
   97:     EIP1 |= (1<<1);
002EED 43F602            ORL      EIP1,#02H
   98: 
   99:     /* init USB device */
  100:     USB_Clock_Start();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 97


002EF0 120046            LCALL    USB_Clock_Start
  101:     USB_Init(DRV_USB_VID,
002EF3 9004F1            MOV      DPTR,#?_USB_Init?BYTE+07H
002EF6 7401              MOV      A,#01H
002EF8 F0                MOVX     @DPTR,A
002EF9 A3                INC      DPTR
002EFA 7404              MOV      A,#HIGH aProductStr
002EFC F0                MOVX     @DPTR,A
002EFD A3                INC      DPTR
002EFE 74A6              MOV      A,#LOW aProductStr
002F00 F0                MOVX     @DPTR,A
002F01 A3                INC      DPTR
002F02 7401              MOV      A,#01H
002F04 F0                MOVX     @DPTR,A
002F05 A3                INC      DPTR
002F06 7404              MOV      A,#HIGH aSerialNumberStr
002F08 F0                MOVX     @DPTR,A
002F09 A3                INC      DPTR
002F0A 74C8              MOV      A,#LOW aSerialNumberStr
002F0C F0                MOVX     @DPTR,A
002F0D A3                INC      DPTR
002F0E 74FA              MOV      A,#0FAH
002F10 F0                MOVX     @DPTR,A
002F11 A3                INC      DPTR
002F12 7480              MOV      A,#080H
002F14 F0                MOVX     @DPTR,A
002F15 A3                INC      DPTR
002F16 7401              MOV      A,#01H
002F18 F0                MOVX     @DPTR,A
002F19 A3                INC      DPTR
002F1A E4                CLR      A
002F1B F0                MOVX     @DPTR,A
002F1C 7B01              MOV      R3,#01H
002F1E 7A04              MOV      R2,#HIGH aManufacturerStr
002F20 7984              MOV      R1,#LOW aManufacturerStr
002F22 7D61              MOV      R5,#061H
002F24 7CEA              MOV      R4,#0EAH
002F26 7FC4              MOV      R7,#0C4H
002F28 7E10              MOV      R6,#010H
002F2A 120E90            LCALL    _USB_Init
  102:              DRV_USB_PID,
  103:              aManufacturerStr,
  104:              aProductStr,
  105:              aSerialNumberStr,
  106:              0xFA,      /* maximum current: 500mA */
  107:              0x80,      /* bus-powered, remote wakeup is unsupported */
  108:              0x100);    /* device release number 1.00 */
  109: 
  110:     /* the USB_Init() API will auto-enable global interrupt,
  111:      * disable it here, and will be enabled later.
  112:      */
  113:     DRV_INT_GlobalDisableInterrupt();
002F2D C2AF              CLR      EA
  114: }
002F2F 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 98


  230:     c2m_SetIns(0x1);    /* instruction: write data */
002F30 D243              SETB     bIns0
002F32 C244              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
002F34 C245              CLR      bLength0
002F36 C246              CLR      bLength1
  232:     c2m_SetData(vData);
002F38 8F26              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
002F3A 30AF05            JNB      EA,?C0355?DRV_C2M
002F3D C2AF              CLR      EA
002F3F D3                SETB     C
002F40 8001              SJMP     ?C0356?DRV_C2M
002F42         ?C0355?DRV_C2M:
002F42 C3                CLR      C
002F43         ?C0356?DRV_C2M:
002F43 1231FD            LCALL    ?L?COM0017
002F46 00                NOP      
002F47 00                NOP      
002F48 00                NOP      
002F49 00                NOP      
002F4A 123295            LCALL    ?L?COM0024
002F4D 00                NOP      
002F4E 00                NOP      
002F4F 00                NOP      
002F50 00                NOP      
002F51 12334B            LCALL    ?L?COM0034
002F54 00                NOP      
002F55 00                NOP      
002F56 00                NOP      
002F57 00                NOP      
002F58 12342F            LCALL    ?L?COM0051
002F5B 00                NOP      
002F5C 00                NOP      
002F5D 00                NOP      
002F5E 00                NOP      
002F5F 123426            LCALL    ?L?COM0050
002F62 00                NOP      
002F63 00                NOP      
002F64 00                NOP      
002F65 00                NOP      
002F66 123477            LCALL    ?L?COM0059
002F69 00                NOP      
002F6A 00                NOP      
002F6B 00                NOP      
002F6C 00                NOP      
002F6D 12346E            LCALL    ?L?COM0058
002F70 00                NOP      
002F71 00                NOP      
002F72 00                NOP      
002F73 00                NOP      
002F74 123465            LCALL    ?L?COM0057
002F77 00                NOP      
002F78 00                NOP      
002F79 00                NOP      
002F7A 00                NOP      
002F7B 12345C            LCALL    ?L?COM0056
002F7E 00                NOP      
002F7F 00                NOP      
002F80 00                NOP      
002F81 00                NOP      
002F82 123453            LCALL    ?L?COM0055
002F85 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 99


002F86 00                NOP      
002F87 00                NOP      
002F88 00                NOP      
002F89 12344A            LCALL    ?L?COM0054
002F8C 00                NOP      
002F8D 00                NOP      
002F8E 00                NOP      
002F8F 00                NOP      
002F90 123441            LCALL    ?L?COM0053
002F93 00                NOP      
002F94 00                NOP      
002F95 00                NOP      
002F96 00                NOP      
002F97 123438            LCALL    ?L?COM0052
002F9A 00                NOP      
002F9B 00                NOP      
002F9C 00                NOP      
002F9D 00                NOP      
002F9E 123386            LCALL    ?L?COM003B
002FA1 00                NOP      
002FA2 D297              SETB     IO_DUT_C2M_SCL
002FA4 00                NOP      
002FA5 00                NOP      
  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
  240:     c2m_TxByte();       /* tx address */
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
002FA6 754727            MOV      _timeout,#027H
002FA9 754810            MOV      _timeout+01H,#010H
002FAC         ?C0557?DRV_C2M:
002FAC 00                NOP      
002FAD 00                NOP      
002FAE C297              CLR      IO_DUT_C2M_SCL
002FB0 00                NOP      
002FB1 00                NOP      
002FB2 121A34            LCALL    ?L?COM0007
002FB5 20300D            JB       bC2Bit0,?C0570?DRV_C2M
002FB8 E548              MOV      A,_timeout+01H
002FBA 1548              DEC      _timeout+01H
002FBC AE47              MOV      R6,_timeout
002FBE 7002              JNZ      ?C1013?DRV_C2M
002FC0 1547              DEC      _timeout
002FC2         ?C1013?DRV_C2M:
002FC2 4E                ORL      A,R6
002FC3 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
002FC5         ?C0570?DRV_C2M:
002FC5 02328A            LJMP     ?L?COM0022
  244: 
  245:     /* unlock globally interrupt */
  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  378: static void drv_mdiom_CreateReadFrame
  379: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  380:     IN UINT8    vPortAddr,
  381:     IN UINT8    vDevAddr
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 100


  382: )
  383: {
  384:     drv_mdiom_SetStartFrame(0, 0);
002FC8 C20F              CLR      bMdioStartFrame1
002FCA C20E              CLR      bMdioStartFrame0
  385:     drv_mdiom_SetOperationCode(1, 1);
002FCC D20D              SETB     bMdioOperationCode1
002FCE D20C              SETB     bMdioOperationCode0
  386:     drv_mdiom_SetPortAddress(vPortAddr);
002FD0 1230FC            LCALL    ?L?COM0006
;----                  JMP      ?L?COM004D
  387:     drv_mdiom_SetDeviceAddress(vDevAddr);
  388:     drv_mdiom_SetTurnAround(1, 1);
  389:     drv_mdiom_SetData(0xFFFF);
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION ?L?COM004D (BEGIN) -----
002FD3 D200              SETB     bMdioTurnAround0
002FD5 74FF              MOV      A,#0FFH
002FD7 F524              MOV      vMdioData,A
002FD9 F525              MOV      vMdioData+01H,A
002FDB 22                RET      
----- FUNCTION ?L?COM004D (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
002FDC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FDE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FE0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FE2 A20F              MOV      C,bMdioStartFrame1
002FE4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FE6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FE8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FEA A20E              MOV      C,bMdioStartFrame0
002FEC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FEE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FF0 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FF2 A20D              MOV      C,bMdioOperationCode1
002FF4 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FF6 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002FF8 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002FFA A20C              MOV      C,bMdioOperationCode0
002FFC D296              SETB     IO_DUT_MDIOM_SCL_OUT
002FFE 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003000 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003002 A20B              MOV      C,bMdioPortAddr4
003004 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003006 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003008 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00300A A20A              MOV      C,bMdioPortAddr3
00300C D296              SETB     IO_DUT_MDIOM_SCL_OUT
00300E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003010 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003012 A209              MOV      C,bMdioPortAddr2
003014 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003016 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003018 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00301A A208              MOV      C,bMdioPortAddr1
00301C D296              SETB     IO_DUT_MDIOM_SCL_OUT
00301E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003020 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003022 A207              MOV      C,bMdioPortAddr0
003024 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003026 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 101


003028 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00302A A206              MOV      C,bMdioDeviceAddr4
00302C D296              SETB     IO_DUT_MDIOM_SCL_OUT
00302E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003030 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003032 A205              MOV      C,bMdioDeviceAddr3
003034 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003036 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003038 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00303A A204              MOV      C,bMdioDeviceAddr2
00303C D296              SETB     IO_DUT_MDIOM_SCL_OUT
00303E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003040 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003042 A203              MOV      C,bMdioDeviceAddr1
003044 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003046 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003048 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00304A A202              MOV      C,bMdioDeviceAddr0
00304C         ?L?COM0004:
00304C D296              SETB     IO_DUT_MDIOM_SCL_OUT
00304E 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003050 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003052 22                RET      
----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
003053 C283              CLR      IO_DUT_MDIOM_SCL_OEn
003055 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
003057 A248              MOV      C,bMdioPreamble
003059 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00305B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00305D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00305F A248              MOV      C,bMdioPreamble
003061 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003063 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003065 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003067 A248              MOV      C,bMdioPreamble
003069 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00306B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00306D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00306F A248              MOV      C,bMdioPreamble
003071 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003073 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003075 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003077 A248              MOV      C,bMdioPreamble
003079 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00307B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00307D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00307F A248              MOV      C,bMdioPreamble
003081 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003083 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003085 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003087 A248              MOV      C,bMdioPreamble
003089 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00308B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00308D C296              CLR      IO_DUT_MDIOM_SCL_OUT
00308F A248              MOV      C,bMdioPreamble
003091 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003093 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003095 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003097 A248              MOV      C,bMdioPreamble
003099 D296              SETB     IO_DUT_MDIOM_SCL_OUT
00309B 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00309D C296              CLR      IO_DUT_MDIOM_SCL_OUT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 102


00309F A248              MOV      C,bMdioPreamble
0030A1         ?L?COM0002:
0030A1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030A3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030A5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030A7 A248              MOV      C,bMdioPreamble
0030A9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030AB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030AD C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030AF A248              MOV      C,bMdioPreamble
0030B1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030B3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030B5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030B7 A248              MOV      C,bMdioPreamble
0030B9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030BB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030BD C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030BF A248              MOV      C,bMdioPreamble
0030C1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030C3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030C5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030C7 A248              MOV      C,bMdioPreamble
0030C9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030CB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030CD C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030CF A248              MOV      C,bMdioPreamble
0030D1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030D3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030D5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030D7 A248              MOV      C,bMdioPreamble
0030D9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030DB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030DD C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030DF A248              MOV      C,bMdioPreamble
0030E1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030E3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030E5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030E7 A248              MOV      C,bMdioPreamble
0030E9 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030EB 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030ED C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030EF A248              MOV      C,bMdioPreamble
0030F1 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030F3 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030F5 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030F7 A248              MOV      C,bMdioPreamble
0030F9 22                RET      
----- FUNCTION ?L?COM0001 (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
0030FA C20C              CLR      bMdioOperationCode0
0030FC         ?L?COM0006:
0030FC EF                MOV      A,R7
0030FD C4                SWAP     A
0030FE 540F              ANL      A,#0FH
003100 13                RRC      A
003101 920B              MOV      bMdioPortAddr4,C
003103 EF                MOV      A,R7
003104 13                RRC      A
003105 13                RRC      A
003106 13                RRC      A
003107 541F              ANL      A,#01FH
003109 13                RRC      A
00310A 920A              MOV      bMdioPortAddr3,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 103


00310C EF                MOV      A,R7
00310D 13                RRC      A
00310E 13                RRC      A
00310F 543F              ANL      A,#03FH
003111 13                RRC      A
003112 9209              MOV      bMdioPortAddr2,C
003114 EF                MOV      A,R7
003115 C3                CLR      C
003116 13                RRC      A
003117 13                RRC      A
003118 9208              MOV      bMdioPortAddr1,C
00311A EF                MOV      A,R7
00311B 13                RRC      A
00311C 9207              MOV      bMdioPortAddr0,C
00311E ED                MOV      A,R5
00311F C4                SWAP     A
003120 540F              ANL      A,#0FH
003122 13                RRC      A
003123 9206              MOV      bMdioDeviceAddr4,C
003125 ED                MOV      A,R5
003126 13                RRC      A
003127 13                RRC      A
003128 13                RRC      A
003129 541F              ANL      A,#01FH
00312B 13                RRC      A
00312C 9205              MOV      bMdioDeviceAddr3,C
00312E ED                MOV      A,R5
00312F 13                RRC      A
003130 13                RRC      A
003131 543F              ANL      A,#03FH
003133 13                RRC      A
003134 9204              MOV      bMdioDeviceAddr2,C
003136 ED                MOV      A,R5
003137 C3                CLR      C
003138 13                RRC      A
003139 13                RRC      A
00313A 9203              MOV      bMdioDeviceAddr1,C
00313C ED                MOV      A,R5
00313D 13                RRC      A
00313E 9202              MOV      bMdioDeviceAddr0,C
003140 D201              SETB     bMdioTurnAround1
003142 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
003143 7819              MOV      R0,#019H
003145 E2                MOVX     A,@R0
003146 C4                SWAP     A
003147 13                RRC      A
003148 13                RRC      A
003149 13                RRC      A
00314A 5401              ANL      A,#01H
00314C         ?L?COM000A:
00314C FF                MOV      R7,A
00314D EF                MOV      A,R7
00314E 5401              ANL      A,#01H
003150 FB                MOV      R3,A
003151 E4                CLR      A
003152 FA                MOV      R2,A
003153 F9                MOV      R1,A
003154 F8                MOV      R0,A
003155 AF2C              MOV      R7,_v
003157 FC                MOV      R4,A
003158 FD                MOV      R5,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 104


003159 FE                MOV      R6,A
00315A C3                CLR      C
00315B 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
00315E 7F03              MOV      R7,#03H
003160 7E00              MOV      R6,#00H
003162 121A3E            LCALL    _DRV_CPU_DelayUs
003165         ?L?COM000C:
003165 C292              CLR      IO_DUT_I2CM_SDA
003167         ?L?COM000D:
003167 7F03              MOV      R7,#03H
003169 7E00              MOV      R6,#00H
00316B 021A3E            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000E (BEGIN) -----
00316E 7841              MOV      R0,#LOW _timeout
003170         ?L?COM000F:
003170 74FF              MOV      A,#0FFH
003172 120667            LCALL    ?C?LLDIIDATA8
003175 EC                MOV      A,R4
003176 4D                ORL      A,R5
003177 4E                ORL      A,R6
003178 4F                ORL      A,R7
003179 22                RET      
----- FUNCTION ?L?COM000E (END) -------


----- FUNCTION ?L?COM0010 (BEGIN) -----
00317A 753300            MOV      pPayload,#HIGH vFrame+0CH
00317D 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
003180 853482            MOV      DPL,pPayload+01H
003183 853383            MOV      DPH,pPayload
003186 E0                MOVX     A,@DPTR
003187 FF                MOV      R7,A
003188 A3                INC      DPTR
003189 E0                MOVX     A,@DPTR
00318A FD                MOV      R5,A
00318B 853482            MOV      DPL,pPayload+01H
00318E 853383            MOV      DPH,pPayload
003191 A3                INC      DPTR
003192 A3                INC      DPTR
003193 E0                MOVX     A,@DPTR
003194 FA                MOV      R2,A
003195 A3                INC      DPTR
003196 E0                MOVX     A,@DPTR
003197 FB                MOV      R3,A
003198 E534              MOV      A,pPayload+01H
00319A 2404              ADD      A,#04H
00319C F582              MOV      DPL,A
00319E E4                CLR      A
00319F 3533              ADDC     A,pPayload
0031A1 F583              MOV      DPH,A
0031A3 E0                MOVX     A,@DPTR
0031A4 F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
0031A6 A3                INC      DPTR
0031A7 E0                MOVX     A,@DPTR
0031A8 F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
0031AA E534              MOV      A,pPayload+01H
0031AC 2406              ADD      A,#06H
0031AE F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 105


0031B0 E4                CLR      A
0031B1 3533              ADDC     A,pPayload
0031B3 F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
0031B5 22                RET      
----- FUNCTION ?L?COM0010 (END) -------


----- FUNCTION ?L?COM0011 (BEGIN) -----
0031B6 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031B8 A280              MOV      C,IO_DUT_MDIOM_SDA_IN
0031BA D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031BC 22                RET      
----- FUNCTION ?L?COM0011 (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
0031BD 7B4C              MOV      R3,#LOW vFrame+0CH
0031BF 7A00              MOV      R2,#HIGH vFrame+0CH
0031C1 EB                MOV      A,R3
0031C2 2406              ADD      A,#06H
0031C4 F534              MOV      pBuf+01H,A
0031C6 E4                CLR      A
0031C7 3A                ADDC     A,R2
0031C8 F533              MOV      pBuf,A
0031CA 8B82              MOV      DPL,R3
0031CC 8A83              MOV      DPH,R2
0031CE A3                INC      DPTR
0031CF A3                INC      DPTR
0031D0 E0                MOVX     A,@DPTR
0031D1 FE                MOV      R6,A
0031D2 A3                INC      DPTR
0031D3 E0                MOVX     A,@DPTR
0031D4 8E35              MOV      vAddr,R6
0031D6 F536              MOV      vAddr+01H,A
0031D8 EB                MOV      A,R3
0031D9 2404              ADD      A,#04H
0031DB F582              MOV      DPL,A
0031DD E4                CLR      A
0031DE 3A                ADDC     A,R2
0031DF F583              MOV      DPH,A
0031E1         ?L?COM0013:
0031E1 E0                MOVX     A,@DPTR
0031E2 F537              MOV      vLen,A
0031E4 A3                INC      DPTR
0031E5 E0                MOVX     A,@DPTR
0031E6 F538              MOV      vLen+01H,A
0031E8 22                RET      
----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
0031E9 121B6D            LCALL    _drv_c2m_WriteData
0031EC AF03              MOV      R7,AR3
0031EE         ?L?COM0015:
0031EE 121B6D            LCALL    _drv_c2m_WriteData
0031F1         ?L?COM0016:
0031F1 E4                CLR      A
0031F2 754410            MOV      _timeout+03H,#010H
0031F5 754327            MOV      _timeout+02H,#027H
0031F8 F542              MOV      _timeout+01H,A
0031FA F541              MOV      _timeout,A
0031FC 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 106


----- FUNCTION ?L?COM0017 (BEGIN) -----
0031FD 9239              MOV      bIntState,C
0031FF 53A6FE            ANL      P2MDOUT,#0FEH
003202 43A580            ORL      P1MDOUT,#080H
003205         ?L?COM0018:
003205 A241              MOV      C,bHigh
003207 92A0              MOV      IO_DUT_C2M_SDA,C
003209 C297              CLR      IO_DUT_C2M_SCL
00320B 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM0019 (BEGIN) -----
00320C E53A              MOV      A,vWriteLen+01H
00320E 2534              ADD      A,pBuf+01H
003210 F534              MOV      pBuf+01H,A
003212 E539              MOV      A,vWriteLen
003214 3533              ADDC     A,pBuf
003216 F533              MOV      pBuf,A
003218 E53A              MOV      A,vWriteLen+01H
00321A 2536              ADD      A,vAddr+01H
00321C F536              MOV      vAddr+01H,A
00321E E539              MOV      A,vWriteLen
003220 3535              ADDC     A,vAddr
003222 F535              MOV      vAddr,A
003224 C3                CLR      C
003225 E538              MOV      A,vLen+01H
003227 953A              SUBB     A,vWriteLen+01H
003229 F538              MOV      vLen+01H,A
00322B E537              MOV      A,vLen
00322D 9539              SUBB     A,vWriteLen
00322F F537              MOV      vLen,A
003231 22                RET      
----- FUNCTION ?L?COM0019 (END) -------


----- FUNCTION ?L?COM001A (BEGIN) -----
003232 E538              MOV      A,vWriteLen+01H
003234 253C              ADD      A,vLoop+01H
003236 FD                MOV      R5,A
003237 E537              MOV      A,vWriteLen
003239 353B              ADDC     A,vLoop
00323B FC                MOV      R4,A
00323C E536              MOV      A,pPayload+01H
00323E 2405              ADD      A,#05H
003240 F582              MOV      DPL,A
003242 E4                CLR      A
003243 3535              ADDC     A,pPayload
003245 F583              MOV      DPH,A
003247 E582              MOV      A,DPL
003249 2D                ADD      A,R5
00324A F582              MOV      DPL,A
00324C E583              MOV      A,DPH
00324E 3C                ADDC     A,R4
00324F F583              MOV      DPH,A
003251 EF                MOV      A,R7
003252 F0                MOVX     @DPTR,A
003253 053C              INC      vLoop+01H
003255 E53C              MOV      A,vLoop+01H
003257 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001B (BEGIN) -----
003258 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 107


003259 FC                MOV      R4,A
00325A A3                INC      DPTR
00325B E0                MOVX     A,@DPTR
00325C FD                MOV      R5,A
00325D A3                INC      DPTR
00325E E0                MOVX     A,@DPTR
00325F FE                MOV      R6,A
003260 A3                INC      DPTR
003261 E0                MOVX     A,@DPTR
003262 FF                MOV      R7,A
003263         ?L?COM001C:
003263 AB0F              MOV      R3,vTickCount+03H
003265 AA0E              MOV      R2,vTickCount+02H
003267 A90D              MOV      R1,vTickCount+01H
003269 A80C              MOV      R0,vTickCount
00326B C3                CLR      C
00326C 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM001B (END) -------


----- FUNCTION ?L?COM001D (BEGIN) -----
00326F 7819              MOV      R0,#019H
003271 E2                MOVX     A,@R0
003272         ?L?COM001E:
003272 FF                MOV      R7,A
003273 E4                CLR      A
003274 FC                MOV      R4,A
003275 FD                MOV      R5,A
003276 FE                MOV      R6,A
003277 EF                MOV      A,R7
003278 22                RET      
----- FUNCTION ?L?COM001D (END) -------


----- FUNCTION ?L?COM001F (BEGIN) -----
003279 7F04              MOV      R7,#04H
00327B         ?L?COM0020:
00327B FE                MOV      R6,A
00327C 1217F6            LCALL    _CFG_RAM_GET16
00327F AD07              MOV      R5,AR7
003281 AC06              MOV      R4,AR6
003283 22                RET      
----- FUNCTION ?L?COM001F (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
003284 A2A0              MOV      C,IO_DUT_C2M_SDA
003286 D297              SETB     IO_DUT_C2M_SCL
003288 9237              MOV      bC2Bit7,C
00328A         ?L?COM0022:
00328A 53A6FE            ANL      P2MDOUT,#0FEH
00328D         ?L?COM0023:
00328D 53A57F            ANL      P1MDOUT,#07FH
003290 A239              MOV      C,bIntState
003292 92AF              MOV      EA,C
003294 22                RET      
----- FUNCTION ?L?COM0021 (END) -------


----- FUNCTION ?L?COM0024 (BEGIN) -----
003295 D297              SETB     IO_DUT_C2M_SCL
003297 43A601            ORL      P2MDOUT,#01H
00329A A243              MOV      C,bIns0
00329C 92A0              MOV      IO_DUT_C2M_SDA,C
00329E C297              CLR      IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 108


0032A0 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
0032A1 FD                MOV      R5,A
0032A2 E4                CLR      A
0032A3 3439              ADDC     A,#039H
0032A5 8D82              MOV      DPL,R5
0032A7 F583              MOV      DPH,A
0032A9 E4                CLR      A
0032AA 93                MOVC     A,@A+DPTR
0032AB F52B              MOV      vData,A
0032AD C3                CLR      C
0032AE 9420              SUBB     A,#020H
0032B0 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
0032B1 121B6D            LCALL    _drv_c2m_WriteData
0032B4 E4                CLR      A
0032B5 753610            MOV      _timeout+03H,#010H
0032B8 753527            MOV      _timeout+02H,#027H
0032BB F534              MOV      _timeout+01H,A
0032BD F533              MOV      _timeout,A
0032BF 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
0032C0 EF                MOV      A,R7
0032C1 4B                ORL      A,R3
0032C2 FF                MOV      R7,A
0032C3 EE                MOV      A,R6
0032C4 4A                ORL      A,R2
0032C5 ED                MOV      A,R5
0032C6 49                ORL      A,R1
0032C7 EC                MOV      A,R4
0032C8 48                ORL      A,R0
0032C9 7819              MOV      R0,#019H
0032CB EF                MOV      A,R7
0032CC F2                MOVX     @R0,A
0032CD 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
0032CE FD                MOV      R5,A
0032CF FC                MOV      R4,A
0032D0         ?L?COM0029:
0032D0 AB36              MOV      R3,vTmpData+03H
0032D2 AA35              MOV      R2,vTmpData+02H
0032D4 A934              MOV      R1,vTmpData+01H
0032D6 A833              MOV      R0,vTmpData
0032D8 22                RET      
----- FUNCTION ?L?COM0028 (END) -------


----- FUNCTION ?L?COM002A (BEGIN) -----
0032D9 121D29            LCALL    c2m_ReadDR
0032DC EF                MOV      A,R7
0032DD 640D              XRL      A,#0DH
0032DF 22                RET      
----- FUNCTION ?L?COM002A (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 109




----- FUNCTION ?L?COM002B (BEGIN) -----
0032E0 43A580            ORL      P1MDOUT,#080H
0032E3 C297              CLR      IO_DUT_C2M_SCL
0032E5 7F14              MOV      R7,#014H
0032E7 7E00              MOV      R6,#00H
0032E9 121A3E            LCALL    _DRV_CPU_DelayUs
0032EC D297              SETB     IO_DUT_C2M_SCL
0032EE 7F02              MOV      R7,#02H
0032F0 7E00              MOV      R6,#00H
0032F2 021A3E            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
0032F5 E540              MOV      A,pBuf+01H
0032F7 2542              ADD      A,vLoop
0032F9 F582              MOV      DPL,A
0032FB E4                CLR      A
0032FC 353F              ADDC     A,pBuf
0032FE F583              MOV      DPH,A
003300 E0                MOVX     A,@DPTR
003301 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
003302 F583              MOV      DPH,A
003304 7401              MOV      A,#01H
003306 93                MOVC     A,@A+DPTR
003307 FA                MOV      R2,A
003308 7402              MOV      A,#02H
00330A 93                MOVC     A,@A+DPTR
00330B F9                MOV      R1,A
00330C 120704            LCALL    ?C?ICALL
00330F 052A              INC      i
003311 E52A              MOV      A,i
003313 C3                CLR      C
003314 9403              SUBB     A,#03H
003316 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
003317 1226F8            LCALL    _DRV_ADC_Sample
00331A 8E2D              MOV      vRawADC,R6
00331C 8F2E              MOV      vRawADC+01H,R7
00331E AD2E              MOV      R5,vRawADC+01H
003320 AC2D              MOV      R4,vRawADC
003322 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
003323 E4                CLR      A
003324 90004A            MOV      DPTR,#vFrame+0AH
003327 F0                MOVX     @DPTR,A
003328 A3                INC      DPTR
003329 F0                MOVX     @DPTR,A
00332A 22                RET      
----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 110


00332B D282              SETB     IO_DUT_I2CM_SCL
00332D 753F01            MOV      _loop,#01H
003330 7540F4            MOV      _loop+01H,#0F4H
003333 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
003334 7E38              MOV      R6,#038H
003336 1226BA            LCALL    _CFG_ROM_GET16
003339 E4                CLR      A
00333A 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
00333B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00333D D294              SETB     IO_DUT_MDIOM_SDA_OUT
00333F D283              SETB     IO_DUT_MDIOM_SCL_OEn
003341 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
003343 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0033 (BEGIN) -----
003344 E540              MOV      A,vLen+01H
003346 1540              DEC      vLen+01H
003348 AE3F              MOV      R6,vLen
00334A 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
00334B D297              SETB     IO_DUT_C2M_SCL
00334D A244              MOV      C,bIns1
00334F 92A0              MOV      IO_DUT_C2M_SDA,C
003351 C297              CLR      IO_DUT_C2M_SCL
003353 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0035 (BEGIN) -----
003354 7E04              MOV      R6,#04H
003356 7F44              MOV      R7,#044H
003358 7D00              MOV      R5,#00H
00335A         ?L?COM0036:
00335A 7B01              MOV      R3,#01H
00335C 7A00              MOV      R2,#HIGH vFrame
00335E 7940              MOV      R1,#LOW vFrame
003360 22                RET      
----- FUNCTION ?L?COM0035 (END) -------


----- FUNCTION ?L?COM0037 (BEGIN) -----
003361 92AF              MOV      EA,C
003363         ?L?COM0038:
003363 E524              MOV      A,vMdioData
003365 F0                MOVX     @DPTR,A
003366 A3                INC      DPTR
003367 E525              MOV      A,vMdioData+01H
003369 F0                MOVX     @DPTR,A
00336A A200              MOV      C,bMdioTurnAround0
00336C 22                RET      
----- FUNCTION ?L?COM0037 (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 111



----- FUNCTION ?L?COM0039 (BEGIN) -----
00336D 7E38              MOV      R6,#038H
00336F 122415            LCALL    _CFG_ROM_GET32
003372 AB47              MOV      R3,vPasswd+03H
003374 AA46              MOV      R2,vPasswd+02H
003376 A945              MOV      R1,vPasswd+01H
003378 A844              MOV      R0,vPasswd
00337A C3                CLR      C
00337B 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0039 (END) -------


----- FUNCTION ?L?COM003A (BEGIN) -----
00337E 853482            MOV      DPL,pPayload+01H
003381 853383            MOV      DPH,pPayload
003384 A3                INC      DPTR
003385 22                RET      
----- FUNCTION ?L?COM003A (END) -------


----- FUNCTION ?L?COM003B (BEGIN) -----
003386 D297              SETB     IO_DUT_C2M_SCL
003388 53A6FE            ANL      P2MDOUT,#0FEH
00338B D2A0              SETB     IO_DUT_C2M_SDA
00338D C297              CLR      IO_DUT_C2M_SCL
00338F 22                RET      
----- FUNCTION ?L?COM003B (END) -------


----- FUNCTION ?L?COM003C (BEGIN) -----
003390 AF41              MOV      R7,vPID
003392         ?L?COM003D:
003392 EF                MOV      A,R7
003393 33                RLC      A
003394 95E0              SUBB     A,ACC
003396 FE                MOV      R6,A
003397 EF                MOV      A,R7
003398 7807              MOV      R0,#07H
00339A 22                RET      
----- FUNCTION ?L?COM003C (END) -------


----- FUNCTION ?L?COM003E (BEGIN) -----
00339B 8F82              MOV      DPL,R7
00339D 8E83              MOV      DPH,R6
00339F A3                INC      DPTR
0033A0 A3                INC      DPTR
0033A1 A3                INC      DPTR
0033A2 E0                MOVX     A,@DPTR
0033A3 F539              MOV      vReadLen,A
0033A5 A3                INC      DPTR
0033A6 E0                MOVX     A,@DPTR
0033A7 F53A              MOV      vReadLen+01H,A
0033A9 22                RET      
----- FUNCTION ?L?COM003E (END) -------


----- FUNCTION ?L?COM003F (BEGIN) -----
0033AA 121B6D            LCALL    _drv_c2m_WriteData
0033AD E4                CLR      A
0033AE 753A10            MOV      _timeout+03H,#010H
0033B1 753927            MOV      _timeout+02H,#027H
0033B4 F538              MOV      _timeout+01H,A
0033B6 F537              MOV      _timeout,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 112


0033B8 22                RET      
----- FUNCTION ?L?COM003F (END) -------


----- FUNCTION ?L?COM0040 (BEGIN) -----
0033B9 E9                MOV      A,R1
0033BA FD                MOV      R5,A
0033BB 7C00              MOV      R4,#00H
0033BD AE47              MOV      R6,pBuf
0033BF AF48              MOV      R7,pBuf+01H
0033C1 AB07              MOV      R3,AR7
0033C3 AA06              MOV      R2,AR6
0033C5 C238              CLR      ?_drv_flash_WriteBytes?BIT
0033C7 22                RET      
----- FUNCTION ?L?COM0040 (END) -------


----- FUNCTION ?L?COM0041 (BEGIN) -----
0033C8 5401              ANL      A,#01H
0033CA FF                MOV      R7,A
0033CB E4                CLR      A
0033CC 7B01              MOV      R3,#01H
0033CE FA                MOV      R2,A
0033CF F9                MOV      R1,A
0033D0 F8                MOV      R0,A
0033D1 C3                CLR      C
0033D2 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0041 (END) -------


----- FUNCTION ?L?COM0042 (BEGIN) -----
0033D5 D282              SETB     IO_DUT_I2CM_SCL
0033D7 754001            MOV      _loop,#01H
0033DA 7541F4            MOV      _loop+01H,#0F4H
0033DD 22                RET      
----- FUNCTION ?L?COM0042 (END) -------


----- FUNCTION ?L?COM0043 (BEGIN) -----
0033DE D282              SETB     IO_DUT_I2CM_SCL
0033E0 753D01            MOV      _loop,#01H
0033E3 753EF4            MOV      _loop+01H,#0F4H
0033E6 22                RET      
----- FUNCTION ?L?COM0043 (END) -------


----- FUNCTION ?L?COM0044 (BEGIN) -----
0033E7 7819              MOV      R0,#019H
0033E9 E2                MOVX     A,@R0
0033EA 13                RRC      A
0033EB 13                RRC      A
0033EC 543F              ANL      A,#03FH
0033EE 22                RET      
----- FUNCTION ?L?COM0044 (END) -------


----- FUNCTION ?L?COM0047 (BEGIN) -----
0033EF 2480              ADD      A,#080H
0033F1 FF                MOV      R7,A
0033F2 EE                MOV      A,R6
0033F3 3436              ADDC     A,#036H
0033F5 FE                MOV      R6,A
0033F6 22                RET      
----- FUNCTION ?L?COM0047 (END) -------

LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 113



----- FUNCTION ?L?COM0048 (BEGIN) -----
0033F7 D3                SETB     C
0033F8 E541              MOV      A,vPID
0033FA 6480              XRL      A,#080H
0033FC 9482              SUBB     A,#082H
0033FE 22                RET      
----- FUNCTION ?L?COM0048 (END) -------


----- FUNCTION ?L?COM0049 (BEGIN) -----
0033FF ED                MOV      A,R5
003400 9F                SUBB     A,R7
003401 EE                MOV      A,R6
003402 6480              XRL      A,#080H
003404 F8                MOV      R0,A
003405 EC                MOV      A,R4
003406 6480              XRL      A,#080H
003408 98                SUBB     A,R0
003409 22                RET      
----- FUNCTION ?L?COM0049 (END) -------


----- FUNCTION ?L?COM004A (BEGIN) -----
00340A C3                CLR      C
00340B         ?L?COM004B:
00340B E541              MOV      A,vPID
00340D 6480              XRL      A,#080H
00340F 9481              SUBB     A,#081H
003411 22                RET      
----- FUNCTION ?L?COM004A (END) -------


----- FUNCTION ?L?COM004C (BEGIN) -----
003412 120262            LCALL    _printf
003415 900048            MOV      DPTR,#vFrame+08H
003418 7403              MOV      A,#03H
00341A F0                MOVX     @DPTR,A
00341B A3                INC      DPTR
00341C 22                RET      
----- FUNCTION ?L?COM004C (END) -------


----- FUNCTION ?L?COM004F (BEGIN) -----
00341D 8E3B              MOV      vAddr,R6
00341F 8F3C              MOV      vAddr+01H,R7
003421 8C3D              MOV      pBuf,R4
003423 8D3E              MOV      pBuf+01H,R5
003425 22                RET      
----- FUNCTION ?L?COM004F (END) -------


----- FUNCTION ?L?COM0050 (BEGIN) -----
003426 D297              SETB     IO_DUT_C2M_SCL
003428 A246              MOV      C,bLength1
00342A 92A0              MOV      IO_DUT_C2M_SDA,C
00342C C297              CLR      IO_DUT_C2M_SCL
00342E 22                RET      
----- FUNCTION ?L?COM0050 (END) -------


----- FUNCTION ?L?COM0051 (BEGIN) -----
00342F D297              SETB     IO_DUT_C2M_SCL
003431 A245              MOV      C,bLength0
003433 92A0              MOV      IO_DUT_C2M_SDA,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 114


003435 C297              CLR      IO_DUT_C2M_SCL
003437 22                RET      
----- FUNCTION ?L?COM0051 (END) -------


----- FUNCTION ?L?COM0052 (BEGIN) -----
003438 D297              SETB     IO_DUT_C2M_SCL
00343A A237              MOV      C,bC2Bit7
00343C 92A0              MOV      IO_DUT_C2M_SDA,C
00343E C297              CLR      IO_DUT_C2M_SCL
003440 22                RET      
----- FUNCTION ?L?COM0052 (END) -------


----- FUNCTION ?L?COM0053 (BEGIN) -----
003441 D297              SETB     IO_DUT_C2M_SCL
003443 A236              MOV      C,bC2Bit6
003445 92A0              MOV      IO_DUT_C2M_SDA,C
003447 C297              CLR      IO_DUT_C2M_SCL
003449 22                RET      
----- FUNCTION ?L?COM0053 (END) -------


----- FUNCTION ?L?COM0054 (BEGIN) -----
00344A D297              SETB     IO_DUT_C2M_SCL
00344C A235              MOV      C,bC2Bit5
00344E 92A0              MOV      IO_DUT_C2M_SDA,C
003450 C297              CLR      IO_DUT_C2M_SCL
003452 22                RET      
----- FUNCTION ?L?COM0054 (END) -------


----- FUNCTION ?L?COM0055 (BEGIN) -----
003453 D297              SETB     IO_DUT_C2M_SCL
003455 A234              MOV      C,bC2Bit4
003457 92A0              MOV      IO_DUT_C2M_SDA,C
003459 C297              CLR      IO_DUT_C2M_SCL
00345B 22                RET      
----- FUNCTION ?L?COM0055 (END) -------


----- FUNCTION ?L?COM0056 (BEGIN) -----
00345C D297              SETB     IO_DUT_C2M_SCL
00345E A233              MOV      C,bC2Bit3
003460 92A0              MOV      IO_DUT_C2M_SDA,C
003462 C297              CLR      IO_DUT_C2M_SCL
003464 22                RET      
----- FUNCTION ?L?COM0056 (END) -------


----- FUNCTION ?L?COM0057 (BEGIN) -----
003465 D297              SETB     IO_DUT_C2M_SCL
003467 A232              MOV      C,bC2Bit2
003469 92A0              MOV      IO_DUT_C2M_SDA,C
00346B C297              CLR      IO_DUT_C2M_SCL
00346D 22                RET      
----- FUNCTION ?L?COM0057 (END) -------


----- FUNCTION ?L?COM0058 (BEGIN) -----
00346E D297              SETB     IO_DUT_C2M_SCL
003470 A231              MOV      C,bC2Bit1
003472 92A0              MOV      IO_DUT_C2M_SDA,C
003474 C297              CLR      IO_DUT_C2M_SCL
003476 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 115


----- FUNCTION ?L?COM0058 (END) -------


----- FUNCTION ?L?COM0059 (BEGIN) -----
003477 D297              SETB     IO_DUT_C2M_SCL
003479 A230              MOV      C,bC2Bit0
00347B 92A0              MOV      IO_DUT_C2M_SDA,C
00347D C297              CLR      IO_DUT_C2M_SCL
00347F 22                RET      
----- FUNCTION ?L?COM0059 (END) -------


----- FUNCTION ?L?COM005A (BEGIN) -----
003480 754E3A            MOV      vWriteOffset,#03AH
003483 754F00            MOV      vWriteOffset+01H,#00H
003486 D238              SETB     ?_drv_flash_WriteBytes?BIT
003488 22                RET      
----- FUNCTION ?L?COM005A (END) -------


----- FUNCTION ?L?COM005B (BEGIN) -----
003489 F583              MOV      DPH,A
00348B E4                CLR      A
00348C 93                MOVC     A,@A+DPTR
00348D FF                MOV      R7,A
00348E E515              MOV      A,vCfgPwdLevel
003490 C3                CLR      C
003491 22                RET      
----- FUNCTION ?L?COM005B (END) -------


----- FUNCTION ?L?COM005C (BEGIN) -----
003492 FE                MOV      R6,A
003493 E4                CLR      A
003494 350D              ADDC     A,vTickCount+01H
003496 FD                MOV      R5,A
003497 E4                CLR      A
003498 350C              ADDC     A,vTickCount
00349A 22                RET      
----- FUNCTION ?L?COM005C (END) -------


----- FUNCTION ?L?COM005D (BEGIN) -----
00349B 8E35              MOV      pPayload,R6
00349D 8F36              MOV      pPayload+01H,R7
00349F 8F82              MOV      DPL,R7
0034A1 8E83              MOV      DPH,R6
0034A3 22                RET      
----- FUNCTION ?L?COM005D (END) -------


----- FUNCTION ?L?COM005E (BEGIN) -----
0034A4 AF16              MOV      R7,vFPDAT
0034A6 121EB7            LCALL    _c2m_WriteAR
0034A9 7F02              MOV      R7,#02H
0034AB 22                RET      
----- FUNCTION ?L?COM005E (END) -------


----- FUNCTION ?L?COM005F (BEGIN) -----
0034AC D3                SETB     C
0034AD E541              MOV      A,vPID
0034AF 6480              XRL      A,#080H
0034B1 9486              SUBB     A,#086H
0034B3 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  17:45:41  PAGE 116


----- FUNCTION ?L?COM005F (END) -------


----- FUNCTION ?L?COM0060 (BEGIN) -----
0034B4 C3                CLR      C
0034B5 E541              MOV      A,vPID
0034B7 6480              XRL      A,#080H
0034B9 9483              SUBB     A,#083H
0034BB 22                RET      
----- FUNCTION ?L?COM0060 (END) -------


----- FUNCTION ?L?COM0061 (BEGIN) -----
0034BC C3                CLR      C
0034BD E53C              MOV      A,vLoop+01H
0034BF 953A              SUBB     A,vReadLen+01H
0034C1 E53B              MOV      A,vLoop
0034C3 22                RET      
----- FUNCTION ?L?COM0061 (END) -------


----- FUNCTION ?L?COM0062 (BEGIN) -----
0034C4 853682            MOV      DPL,pPayload+01H
0034C7 853583            MOV      DPH,pPayload
0034CA E0                MOVX     A,@DPTR
0034CB 22                RET      
----- FUNCTION ?L?COM0062 (END) -------


----- FUNCTION ?L?COM0063 (BEGIN) -----
0034CC 7D40              MOV      R5,#040H
0034CE 1210D5            LCALL    _Block_Read
0034D1 8F2E              MOV      vBlockLen,R7
0034D3 22                RET      
----- FUNCTION ?L?COM0063 (END) -------


