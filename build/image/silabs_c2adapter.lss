LX51 LINKER/LOCATER V4.66.41.0                                                          06/14/2016  13:17:41  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   87: static void _thread_pkt_Dump(IN BOOL bRx)
   88: {
   89:   #if PKT_DEBUG_SUPPORT
   90: 
   91:     UINT16 vLoop;
   92: 
   93:   #if DRV_WATCHDOG_SUPPORT
   94:     DRV_WATCHDOG_Kick();
   95:   #endif
   96: 
   97:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
   98:            (bRx?"RX":"TX"),
   99:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  100:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  101:     {
  102:         if ((vLoop%16) == 0)
  103:         {
  104:             printf("\n");
  105:         }
  106:         else if ((vLoop%8) == 0)
  107:         {
  108:             printf(" -");
  109:         }
  110: 
  111:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  112:     }
  113:     printf("\n");
  114: 
  115:   #if DRV_WATCHDOG_SUPPORT
  116:     DRV_WATCHDOG_Kick();
  117:   #endif
  118: 
  119:   #else
  120:     NO_WARNING(bRx);
  121:   #endif
  122: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022858            LJMP     02858H
----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
   36: void APL_Entry(void)
   37: {
   38:     /* do nothing */
   39: }
000042 22                RET      
----- FUNCTION APL_Entry (END) -------


000083 0218D4            LJMP     018D4H
----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
   56: void APL_Init(void)
   57: {
   58:     /* perform entry once */
   59:     APL_Entry();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 2


0001DD 0142              AJMP     APL_Entry
----- FUNCTION APL_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   37: static UINT16 _thread_pkt_CalcCRC(void)
   38: {
   39:     /* CRC16-CCITT: X16+X15+X2+1 */
   40:     static SEG_CODE UINT16 aCRC16[256] =
   41:     {
   42:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   43:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   44:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   45:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   46:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   47:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   48:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   49:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   50:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   51:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   52:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   53:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   54:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   55:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   56:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   57:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   58:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   59:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   60:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   61:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   62:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   63:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   64:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   65:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   66:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   67:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   68:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   69:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   70:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   71:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   72:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   73:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   74:     };
   75: 
   76:     UINT16  vCRC = 0xFFFF;
001582 74FF              MOV      A,#0FFH
001584 F531              MOV      vCRC,A
001586 F532              MOV      vCRC+01H,A
   77:     UINT16  vLoop;
   78: 
   79:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
001588 E4                CLR      A
001589 FD                MOV      R5,A
00158A FC                MOV      R4,A
00158B         ?C0001?THREAD_PKT:
00158B D3                SETB     C
00158C 900005            MOV      DPTR,#vFrame+05H
00158F E0                MOVX     A,@DPTR
001590 9D                SUBB     A,R5
001591 900004            MOV      DPTR,#vFrame+04H
001594 E0                MOVX     A,@DPTR
001595 9C                SUBB     A,R4
001596 4031              JC       ?C0002?THREAD_PKT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 3


   80:     {
   81:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
001598 E531              MOV      A,vCRC
00159A FF                MOV      R7,A
00159B 7408              MOV      A,#LOW vFrame+08H
00159D 2D                ADD      A,R5
00159E F582              MOV      DPL,A
0015A0 7400              MOV      A,#HIGH vFrame+08H
0015A2 3C                ADDC     A,R4
0015A3 F583              MOV      DPH,A
0015A5 E0                MOVX     A,@DPTR
0015A6 6F                XRL      A,R7
0015A7 75F002            MOV      B,#02H
0015AA A4                MUL      AB
0015AB 241F              ADD      A,#LOW aCRC16
0015AD F582              MOV      DPL,A
0015AF E5F0              MOV      A,B
0015B1 3406              ADDC     A,#HIGH aCRC16
0015B3 F583              MOV      DPH,A
0015B5 E532              MOV      A,vCRC+01H
0015B7 FE                MOV      R6,A
0015B8 E4                CLR      A
0015B9 93                MOVC     A,@A+DPTR
0015BA 6E                XRL      A,R6
0015BB F531              MOV      vCRC,A
0015BD 7401              MOV      A,#01H
0015BF 93                MOVC     A,@A+DPTR
0015C0 F532              MOV      vCRC+01H,A
   82:     }
0015C2 0D                INC      R5
0015C3 BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
0015C6 0C                INC      R4
0015C7         ?C0066?THREAD_PKT:
0015C7 80C2              SJMP     ?C0001?THREAD_PKT
0015C9         ?C0002?THREAD_PKT:
   83: 
   84:     return vCRC;
0015C9 AE31              MOV      R6,vCRC
0015CB AF32              MOV      R7,vCRC+01H
   85: }
0015CD 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  235: static void _thread_pkt_Transmit(void)
  236: {
  237:     if (bFlushFIFO)
  238:     {
0015CE 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  239:         /* flush FIFO */
  240:         memset(&vFrame, 0x00, sizeof(vFrame));
0015D1 122B49            LCALL    ?L?COM0024
0015D4 1209EA            LCALL    ?C?MEMSET
  241:         bFlushFIFO = FALSE;
0015D7 C247              CLR      bFlushFIFO
  242:     }
0015D9 22                RET      
0015DA         ?C0042?THREAD_PKT:
  243:     else
  244:     {
  245:         /* update content length, and re-calculate CRC value */
  246:         vFrame.vLen = 4+PKT_GetPayloadSize();
0015DA 90000B            MOV      DPTR,#vFrame+0BH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 4


0015DD E0                MOVX     A,@DPTR
0015DE 2404              ADD      A,#04H
0015E0 FE                MOV      R6,A
0015E1 90000A            MOV      DPTR,#vFrame+0AH
0015E4 E0                MOVX     A,@DPTR
0015E5 3400              ADDC     A,#00H
0015E7 900004            MOV      DPTR,#vFrame+04H
0015EA F0                MOVX     @DPTR,A
0015EB A3                INC      DPTR
0015EC CE                XCH      A,R6
0015ED F0                MOVX     @DPTR,A
  247:         vFrame.vCRC = _thread_pkt_CalcCRC();
0015EE B182              ACALL    _thread_pkt_CalcCRC
0015F0 900006            MOV      DPTR,#vFrame+06H
0015F3 EE                MOV      A,R6
0015F4 F0                MOVX     @DPTR,A
0015F5 A3                INC      DPTR
0015F6 EF                MOV      A,R7
0015F7 F0                MOVX     @DPTR,A
  248: 
  249:         /* dump tx frame */
  250:         _thread_pkt_Dump(FALSE);
0015F8 C238              CLR      ?_thread_pkt_Dump?BIT
0015FA 12002A            LCALL    _thread_pkt_Dump
  251: 
  252:         /* emit frame */
  253:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0015FD 122B4F            LCALL    ?L?COM0025
001600 900005            MOV      DPTR,#vFrame+05H
001603 E0                MOVX     A,@DPTR
001604 2408              ADD      A,#08H
001606 FD                MOV      R5,A
001607 900004            MOV      DPTR,#vFrame+04H
00160A E0                MOVX     A,@DPTR
00160B 3400              ADDC     A,#00H
00160D FC                MOV      R4,A
00160E 020086            LJMP     _Block_Write
  254:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  124: static BOOL _thread_pkt_Receive(void)
  125: {
  126:     UINT16  vRxTotalLen;
  127:     UINT8   vBlockLen;
  128:     UINT16  vElaspedTime;
  129: 
  130:   #if 1
  131:     /* receive frame:
  132:      *  -> 1st block: pkt_header + pkt_content
  133:      *  -> 2nd block: pkt_content
  134:      *  -> 3rd block: pkt_content
  135:      *  -> ...
  136:      */
  137: 
  138:     /* receive 1st block */
  139:     memset(&vFrame, 0x00, sizeof(vFrame));
001611 122B49            LCALL    ?L?COM0024
001614 1209EA            LCALL    ?C?MEMSET
  140:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
001617 122B4F            LCALL    ?L?COM0025
00161A 122BEB            LCALL    ?L?COM0037
  141:     if (bFlushFIFO)
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 5


00161D 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  142:     {
  143:         /* flush FIFO */
  144:         printf("flush FIFO!\n");
001620 7BFF              MOV      R3,#0FFH
001622 7A05              MOV      R2,#HIGH 0100055CH
001624 795C              MOV      R1,#LOW 0100055CH
001626 120262            LCALL    _printf
  145:         return FALSE;
001629 C3                CLR      C
00162A 22                RET      
  146:     }
00162B         ?C0010?THREAD_PKT:
  147:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != PKT_MAGIC))
00162B C3                CLR      C
00162C E52E              MOV      A,vBlockLen
00162E 9408              SUBB     A,#08H
001630 E4                CLR      A
001631 9400              SUBB     A,#00H
001633 400E              JC       ?C0013?THREAD_PKT
001635 900000            MOV      DPTR,#vFrame
001638 E0                MOVX     A,@DPTR
001639 6443              XRL      A,#043H
00163B 7004              JNZ      ?C0067?THREAD_PKT
00163D A3                INC      DPTR
00163E E0                MOVX     A,@DPTR
00163F 644C              XRL      A,#04CH
001641         ?C0067?THREAD_PKT:
001641 601A              JZ       ?C0012?THREAD_PKT
001643         ?C0013?THREAD_PKT:
  148:     {
  149:         /* invalid frame, force flush FIFO, w/o responding */
  150:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
001643 7BFF              MOV      R3,#0FFH
001645 7A05              MOV      R2,#HIGH 01000569H
001647 7969              MOV      R1,#LOW 01000569H
001649 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
00164C 900000            MOV      DPTR,#vFrame
00164F E0                MOVX     A,@DPTR
001650 F535              MOV      ?_printf?BYTE+04H,A
001652 A3                INC      DPTR
001653 E0                MOVX     A,@DPTR
001654 F536              MOV      ?_printf?BYTE+05H,A
001656 120262            LCALL    _printf
  151:         bFlushFIFO = TRUE;
001659 D247              SETB     bFlushFIFO
  152:         return FALSE;
00165B C3                CLR      C
00165C 22                RET      
  153:     }
00165D         ?C0012?THREAD_PKT:
  154:     if (vFrame.vVersion != PKT_VERSION)
00165D 900002            MOV      DPTR,#vFrame+02H
001660 E0                MOVX     A,@DPTR
001661 7004              JNZ      ?C0068?THREAD_PKT
001663 A3                INC      DPTR
001664 E0                MOVX     A,@DPTR
001665 6401              XRL      A,#01H
001667         ?C0068?THREAD_PKT:
001667 6013              JZ       ?C0014?THREAD_PKT
  155:     {
  156:         /* invalid frame version, return supported version to host */
  157:         printf("invalid frame version!\n");
001669 7BFF              MOV      R3,#0FFH
00166B 7A05              MOV      R2,#HIGH 01000599H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 6


00166D 7999              MOV      R1,#LOW 01000599H
00166F 120262            LCALL    _printf
  158:         vFrame.vVersion = PKT_VERSION;
001672 900002            MOV      DPTR,#vFrame+02H
001675 E4                CLR      A
001676 F0                MOVX     @DPTR,A
001677 A3                INC      DPTR
001678 04                INC      A
001679 F0                MOVX     @DPTR,A
  159:         return FALSE;
00167A C3                CLR      C
00167B 22                RET      
  160:     }
00167C         ?C0014?THREAD_PKT:
  161:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
00167C E52E              MOV      A,vBlockLen
00167E 24F8              ADD      A,#0F8H
001680 F52D              MOV      vRxTotalLen+01H,A
001682 E4                CLR      A
001683 34FF              ADDC     A,#0FFH
001685 F52C              MOV      vRxTotalLen,A
  162: 
  163:     /* receive remaining blocks */
  164:     vElaspedTime = 0;
001687 E4                CLR      A
001688 F52F              MOV      vElaspedTime,A
00168A F530              MOV      vElaspedTime+01H,A
00168C         ?C0015?THREAD_PKT:
  165:     while (vRxTotalLen < vFrame.vLen)
00168C D3                SETB     C
00168D 900005            MOV      DPTR,#vFrame+05H
001690 E0                MOVX     A,@DPTR
001691 952D              SUBB     A,vRxTotalLen+01H
001693 900004            MOV      DPTR,#vFrame+04H
001696 E0                MOVX     A,@DPTR
001697 952C              SUBB     A,vRxTotalLen
001699 4047              JC       ?C0016?THREAD_PKT
  166:     {
  167:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
00169B 7408              MOV      A,#LOW vFrame+08H
00169D 252D              ADD      A,vRxTotalLen+01H
00169F F9                MOV      R1,A
0016A0 7400              MOV      A,#HIGH vFrame+08H
0016A2 352C              ADDC     A,vRxTotalLen
0016A4 FA                MOV      R2,A
0016A5 7B01              MOV      R3,#01H
0016A7 122BEB            LCALL    ?L?COM0037
  168:                                       DRV_USB_BLOCK_MAX_LEN);
  169: 
  170:         if (vBlockLen == 0)
0016AA E52E              MOV      A,vBlockLen
0016AC 7027              JNZ      ?C0017?THREAD_PKT
  171:         {
  172:             /* next block is still not ready */
  173: 
  174:             DRV_CPU_DelayUs(1);
0016AE 7F01              MOV      R7,#01H
0016B0 FE                MOV      R6,A
0016B1 F12A              ACALL    _DRV_CPU_DelayUs
  175:             if (++vElaspedTime >= 50000)
0016B3 0530              INC      vElaspedTime+01H
0016B5 E530              MOV      A,vElaspedTime+01H
0016B7 7002              JNZ      ?C0069?THREAD_PKT
0016B9 052F              INC      vElaspedTime
0016BB         ?C0069?THREAD_PKT:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 7


0016BB FF                MOV      R7,A
0016BC AE2F              MOV      R6,vElaspedTime
0016BE E4                CLR      A
0016BF FC                MOV      R4,A
0016C0 FD                MOV      R5,A
0016C1 7B50              MOV      R3,#050H
0016C3 7AC3              MOV      R2,#0C3H
0016C5 F9                MOV      R1,A
0016C6 F8                MOV      R0,A
0016C7 D3                SETB     C
0016C8 12087B            LCALL    ?C?SLCMP
0016CB 50BF              JNC      ?C0015?THREAD_PKT
  176:             {
  177:                 /* timeout: 50ms */
  178:                 printf("rx packet timeout!\n");
0016CD 7BFF              MOV      R3,#0FFH
0016CF 7A05              MOV      R2,#HIGH 010005B1H
0016D1 79B1              MOV      R1,#LOW 010005B1H
  179:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  180:                 return FALSE;
0016D3 8021              SJMP     ?C0076?THREAD_PKT
  181:             }
  182: 
  183:             continue;
  184:         }
0016D5         ?C0017?THREAD_PKT:
  185: 
  186:         vRxTotalLen += vBlockLen;
0016D5 E52E              MOV      A,vBlockLen
0016D7 252D              ADD      A,vRxTotalLen+01H
0016D9 F52D              MOV      vRxTotalLen+01H,A
0016DB E4                CLR      A
0016DC 352C              ADDC     A,vRxTotalLen
0016DE F52C              MOV      vRxTotalLen,A
  187:     }
0016E0 80AA              SJMP     ?C0015?THREAD_PKT
0016E2         ?C0016?THREAD_PKT:
  188: 
  189:     if (vRxTotalLen != vFrame.vLen)
0016E2 900004            MOV      DPTR,#vFrame+04H
0016E5 E0                MOVX     A,@DPTR
0016E6 652C              XRL      A,vRxTotalLen
0016E8 7004              JNZ      ?C0070?THREAD_PKT
0016EA A3                INC      DPTR
0016EB E0                MOVX     A,@DPTR
0016EC 652D              XRL      A,vRxTotalLen+01H
0016EE         ?C0070?THREAD_PKT:
0016EE 600E              JZ       ?C0022?THREAD_PKT
  190:     {
  191:         printf("invalid packet length!\n");
0016F0 7BFF              MOV      R3,#0FFH
0016F2 7A05              MOV      R2,#HIGH 010005C5H
0016F4 79C5              MOV      R1,#LOW 010005C5H
0016F6         
0016F6 122BB1            LCALL    ?L?COM002F
0016F9 7401              MOV      A,#01H
0016FB F0                MOVX     @DPTR,A
  192:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:         return FALSE;
0016FC C3                CLR      C
0016FD 22                RET      
  194:     }
0016FE         ?C0022?THREAD_PKT:
  195:   #endif
  196: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 8


  197: 	/* dump rx frame */
  198:     _thread_pkt_Dump(TRUE);
0016FE D238              SETB     ?_thread_pkt_Dump?BIT
001700 12002A            LCALL    _thread_pkt_Dump
  199: 
  200:     /* frame verify: CRC */
  201:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
001703 B182              ACALL    _thread_pkt_CalcCRC
001705 900006            MOV      DPTR,#vFrame+06H
001708 E0                MOVX     A,@DPTR
001709 6E                XRL      A,R6
00170A 7003              JNZ      ?C0071?THREAD_PKT
00170C A3                INC      DPTR
00170D E0                MOVX     A,@DPTR
00170E 6F                XRL      A,R7
00170F         ?C0071?THREAD_PKT:
00170F 600D              JZ       ?C0026?THREAD_PKT
  202:     {
  203:         printf("invalid CRC!\n");
001711 7BFF              MOV      R3,#0FFH
001713 7A05              MOV      R2,#HIGH 010005DDH
001715 79DD              MOV      R1,#LOW 010005DDH
001717 122BB1            LCALL    ?L?COM002F
00171A 14                DEC      A
00171B F0                MOVX     @DPTR,A
  204:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  205:         return FALSE;
00171C C3                CLR      C
00171D 22                RET      
  206:     }
00171E         ?C0026?THREAD_PKT:
  207: 
  208:     return TRUE;
00171E D3                SETB     C
  209: }
00171F 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001720 A2A0              MOV      C,IO_DUT_C2M_SDA
001722 D297              SETB     IO_DUT_C2M_SCL
001724 9230              MOV      bC2Bit0,C
001726         ?L?COM0008:
001726 7F01              MOV      R7,#01H
001728 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   35: void DRV_CPU_DelayUs(UINT16 vUsec)
   36: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   37:     NOP(); NOP(); NOP();
   38: 
00172A 8018              SJMP     ?C0013?DRV_CPU
00172C         ?C0001?DRV_CPU:
   39:     while (--vUsec)
00172C EF                MOV      A,R7
00172D 1F                DEC      R7
00172E 7001              JNZ      ?C0011?DRV_CPU
001730 1E                DEC      R6
001731         ?C0011?DRV_CPU:
001731 14                DEC      A
001732 4E                ORL      A,R6
001733 6014              JZ       ?C0003?DRV_CPU
   40:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 9


   41:       #if (CORE_CLOCK == 24000000UL)
   42: 		NOP(); NOP(); NOP(); NOP(); NOP();
001735 00                NOP      
001736 00                NOP      
001737 00                NOP      
001738 00                NOP      
001739 00                NOP      
   43: 		NOP(); NOP(); NOP(); NOP(); NOP();
00173A 00                NOP      
00173B 00                NOP      
00173C 00                NOP      
00173D 00                NOP      
00173E 00                NOP      
   44: 		NOP(); NOP(); NOP(); NOP(); NOP();
00173F 00                NOP      
001740 00                NOP      
001741 00                NOP      
001742 00                NOP      
001743 00                NOP      
   45: 		NOP(); NOP(); NOP();
001744         
001744 00                NOP      
001745 00                NOP      
001746 00                NOP      
   46:       #else
   47:         #error "Unsupported Core Clock!"
   48:       #endif
   49:     }
001747 80E3              SJMP     ?C0001?DRV_CPU
   50: }
001749         ?C0003?DRV_CPU:
001749 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  546: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  547: {
;---- Variable 'vPageNo' assigned to Register 'R3' ----
00174A AB07              MOV      R3,AR7
  548:     BOOL    bDone = FALSE;
  549: 
00174C C238              CLR      bDone
  550:     if (!drv_c2m_IsReady())
00174E 309769            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001751 30A066            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  551:     {
  552:         /* C2 bus is not ready */
  553:         goto _exit;
  554:     }
001754         ?C0905?DRV_C2M:
  555: 
  556:     c2m_WriteAR(vFPDAT);
001754 AF14              MOV      R7,vFPDAT
001756 12235C            LCALL    _c2m_WriteAR
  557:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001759 7F08              MOV      R7,#08H
00175B 122AEB            LCALL    ?L?COM001B
00175E         ?C0914?DRV_C2M:
00175E 1220E0            LCALL    c2m_ReadAR
001761 EF                MOV      A,R7
001762 20E00B            JB       ACC.0,?C0912?DRV_C2M
001765 7833              MOV      R0,#LOW _timeout
001767 1227E0            LCALL    ?L?COM000A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 10


00176A 6004              JZ       ?C0912?DRV_C2M
00176C F126              ACALL    ?L?COM0008
00176E 80EE              SJMP     ?C0914?DRV_C2M
001770         ?C0912?DRV_C2M:
001770 1227EA            LCALL    ?L?COM001D
001773 7045              JNZ      _exit?DRV_C2M
001775         ?C0916?DRV_C2M:
001775         ?C0909?DRV_C2M:
  558:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  559:     drv_c2m_WriteData(vPageNo); /* send page number */
001775 AF03              MOV      R7,AR3
001777 122AEB            LCALL    ?L?COM001B
00177A         ?C0923?DRV_C2M:
00177A 1220E0            LCALL    c2m_ReadAR
00177D EF                MOV      A,R7
00177E 20E00B            JB       ACC.0,?C0921?DRV_C2M
001781 7833              MOV      R0,#LOW _timeout
001783 1227E0            LCALL    ?L?COM000A
001786 6004              JZ       ?C0921?DRV_C2M
001788 F126              ACALL    ?L?COM0008
00178A 80EE              SJMP     ?C0923?DRV_C2M
00178C         ?C0921?DRV_C2M:
00178C 1227EA            LCALL    ?L?COM001D
00178F 7029              JNZ      _exit?DRV_C2M
001791         ?C0925?DRV_C2M:
001791         ?C0918?DRV_C2M:
  560:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  561:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001791 E4                CLR      A
001792 FF                MOV      R7,A
001793 F1BD              ACALL    _drv_c2m_WriteData
  562:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001795 E4                CLR      A
001796 753640            MOV      _timeout+03H,#040H
001799 75359C            MOV      _timeout+02H,#09CH
00179C F534              MOV      _timeout+01H,A
00179E F533              MOV      _timeout,A
0017A0         ?C0932?DRV_C2M:
0017A0 1220E0            LCALL    c2m_ReadAR
0017A3 EF                MOV      A,R7
0017A4 20E00B            JB       ACC.0,?C0930?DRV_C2M
0017A7 7833              MOV      R0,#LOW _timeout
0017A9 1227E0            LCALL    ?L?COM000A
0017AC 6004              JZ       ?C0930?DRV_C2M
0017AE F126              ACALL    ?L?COM0008
0017B0 80EE              SJMP     ?C0932?DRV_C2M
0017B2         ?C0930?DRV_C2M:
0017B2 1221FA            LCALL    c2m_ReadDR
0017B5 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0017B8         ?C0934?DRV_C2M:
0017B8         ?C0927?DRV_C2M:
  563:     bDone = TRUE;
0017B8 D238              SETB     bDone
  564: 
  565: _exit:
0017BA         _exit:
  566:     return bDone;
0017BA A238              MOV      C,bDone
  567: }
0017BC 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 11


  357: static void drv_c2m_WriteData(UINT8 vCmd)
  358: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  359:     c2m_WriteDR(vCmd);
  360:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
0017BD 1224A6            LCALL    _c2m_WriteDR
  361: }
0017C0 754527            MOV      _timeout,#027H
0017C3 754610            MOV      _timeout+01H,#010H
0017C6         ?C0788?DRV_C2M:
0017C6 1220E0            LCALL    c2m_ReadAR
0017C9 EF                MOV      A,R7
0017CA 30E111            JNB      ACC.1,?C0790?DRV_C2M
0017CD E546              MOV      A,_timeout+01H
0017CF 1546              DEC      _timeout+01H
0017D1 AE45              MOV      R6,_timeout
0017D3 7002              JNZ      ?C1015?DRV_C2M
0017D5 1545              DEC      _timeout
0017D7         ?C1015?DRV_C2M:
0017D7 4E                ORL      A,R6
0017D8 6004              JZ       ?C0790?DRV_C2M
0017DA F126              ACALL    ?L?COM0008
0017DC 80E8              SJMP     ?C0788?DRV_C2M
  362: 
0017DE         ?C0790?DRV_C2M:
0017DE 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  416: BOOL DRV_C2M_Reset(void)
  417: {
  418:     if (!drv_c2m_IsReady())
  419:     {
0017DF 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
0017E2 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
0017E5         ?C0824?DRV_C2M:
  420:         /* C2 bus is not ready */
  421:         return FALSE;
0017E5 C3                CLR      C
0017E6 22                RET      
  422:     }
  423: 
  424:     c2m_Reset();
0017E7         ?C0831?DRV_C2M:
0017E7 122AFA            LCALL    ?L?COM001C
  425:     return TRUE;
0017EA D3                SETB     C
  426: }
0017EB 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  346: void thread_PKT_Init(void)
  347: {
  348:     PT_INIT(&vTCB_Pkt);
  349:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0017EC E4                CLR      A
0017ED F50A              MOV      vTCB_Pkt,A
0017EF F50B              MOV      vTCB_Pkt+01H,A
  350: }
0017F1 F508              MOV      vSCB_RxPkt,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 12


0017F3 F509              MOV      vSCB_RxPkt+01H,A
  351: 
0017F5 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   27: UINT16 PKT_MDIOM_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
0017F6 122B28            LCALL    ?L?COM001F
   31: }
0017F9 7E01              MOV      R6,#01H
0017FB 7F40              MOV      R7,#040H
   32: 
0017FD 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  211: static void _thread_pkt_Handle(void)
  212: {
  213: 	UINT16  vCmd;
  214: 	UINT16  vReply;
  215: 	UINT8   vLoop;
  216: 
  217:     vCmd = PKT_GetCmd();
001800 900008            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  218: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  219: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  220: 	{
  221: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24EB              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3405              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  222: 		{
  223: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 13


00182F 25E0              ADD      A,ACC
001831 24ED              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
001835 E4                CLR      A
001836 3405              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 1208FB            LCALL    ?C?ICALL
  224: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  225: 		}
  226: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 940D              SUBB     A,#0DH
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  227: 
  228: 	PKT_SetReply(vReply);
001851 900008            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  229:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  230:     {
  231:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  232:     }
  233: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  309: OS_HANDLE thread_PKT_Entry(void)
  310: {
  311:     PT_BEGIN(&vTCB_Pkt);
  312: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50B              MOV      A,vTCB_Pkt+01H
001868 850AF0            MOV      B,vTCB_Pkt
00186B 1208CE            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 013C              DW       013CH
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 14


001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  313:     for (;;)
  314:     {
  315:         /* wait for packet */
  316:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750A01            MOV      vTCB_Pkt,#01H
00187D 750B3C            MOV      vTCB_Pkt+01H,#03CH
001880         ?C0059?THREAD_PKT:
001880 AE08              MOV      R6,vSCB_RxPkt
001882 AF09              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E509              MOV      A,vSCB_RxPkt+01H
001898 1509              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 1508              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  317: 
  318:         if (_thread_pkt_Receive())
00189E 121611            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  319:         {
  320:             _thread_pkt_Handle();
0018A3 1100              ACALL    _thread_pkt_Handle
  321:         }
0018A5         ?C0064?THREAD_PKT:
  322:         _thread_pkt_Transmit();
0018A5 1215CE            LCALL    _thread_pkt_Transmit
  323: 
  324:         /* reset packet counter */
  325:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F508              MOV      vSCB_RxPkt,A
0018AB F509              MOV      vSCB_RxPkt+01H,A
  326:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  327: 
  328:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50A              MOV      vTCB_Pkt,A
0018B4 F50B              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  329: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 15


 FILE: '..\pkt\thread_pkt.c'
  278: void thread_Pkt_Notify(IN UINT8 vEvent)
  279: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  280: 	if (vEvent & RX_COMPLETE)
  281: 	{
0018B9 EF                MOV      A,R7
0018BA 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  282: 		/* notify packet has been received */
  283: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0018BD 0509              INC      vSCB_RxPkt+01H
0018BF E509              MOV      A,vSCB_RxPkt+01H
0018C1 7002              JNZ      ?C0073?THREAD_PKT
0018C3 0508              INC      vSCB_RxPkt
0018C5         ?C0073?THREAD_PKT:
  284: 	}
0018C5         ?C0045?THREAD_PKT:
  285: 
  286: 	if (vEvent & FIFO_PURGE)
0018C5 EF                MOV      A,R7
0018C6 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  287: 	{
  288:         /* notify the FIFO needs to be flushed */
  289: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0018C9 0509              INC      vSCB_RxPkt+01H
0018CB E509              MOV      A,vSCB_RxPkt+01H
0018CD 7002              JNZ      ?C0074?THREAD_PKT
0018CF 0508              INC      vSCB_RxPkt
0018D1         ?C0074?THREAD_PKT:
  290:         bFlushFIFO = TRUE;
0018D1 D247              SETB     bFlushFIFO
  291: 	}
  292: }
0018D3         ?C0047?THREAD_PKT:
0018D3 22                RET      
----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   65: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
0018D4 C0E0              PUSH     ACC
0018D6 C083              PUSH     DPH
0018D8 C082              PUSH     DPL
0018DA C0D0              PUSH     PSW
0018DC 75D000            MOV      PSW,#00H
0018DF C007              PUSH     AR7
   66: {
   67:   #if PKT_SUPPORT
   68: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
0018E1 121532            LCALL    Get_Interrupt_Source
0018E4 11B9              ACALL    _thread_Pkt_Notify
   69:   #endif
   70: }
0018E6 D007              POP      AR7
0018E8 D0D0              POP      PSW
0018EA D082              POP      DPL
0018EC D083              POP      DPH
0018EE D0E0              POP      ACC
0018F0 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 16


  127: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  128: {
;---- Variable 'vData' assigned to Register 'R5' ----
0018F1 AD07              MOV      R5,AR7
  129:     UINT8   vLoop;
  130:     BOOL    vAck;
  131: 
  132:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R3' ----
0018F3 7B08              MOV      R3,#08H
0018F5         ?C0001?PKT_I2CM:
  133:     {
  134:         /* transmitting data, MSB first, LSB last */
  135:         CROL(vData, 1);
0018F5 7801              MOV      R0,#01H
0018F7 AF05              MOV      R7,AR5
0018F9 EF                MOV      A,R7
0018FA 08                INC      R0
0018FB 8001              SJMP     ?C0650?PKT_I2CM
0018FD         ?C0649?PKT_I2CM:
0018FD 23                RL       A
0018FE         ?C0650?PKT_I2CM:
0018FE D8FD              DJNZ     R0,?C0649?PKT_I2CM
001900 FD                MOV      R5,A
  136:         PKT_I2CM_SET_SDA(vData & 0x1);
001901 13                RRC      A
001902 9292              MOV      IO_DUT_I2CM_SDA,C
  137: 
  138:         PKT_I2CM_SET_SCL(HIGH);
001904 00                NOP      
001905 00                NOP      
001906 00                NOP      
001907 00                NOP      
001908 00                NOP      
001909 00                NOP      
00190A 00                NOP      
00190B 00                NOP      
00190C 00                NOP      
00190D 00                NOP      
00190E 00                NOP      
00190F 00                NOP      
001910 00                NOP      
001911 00                NOP      
001912 122B40            LCALL    ?L?COM0023
001915         ?C0032?PKT_I2CM:
001915 20820F            JB       IO_DUT_I2CM_SCL,?C0042?PKT_I2CM
001918 122B39            LCALL    ?L?COM0021
00191B 7002              JNZ      ?C0651?PKT_I2CM
00191D 153F              DEC      _loop
00191F         ?C0651?PKT_I2CM:
00191F 4E                ORL      A,R6
001920 6005              JZ       ?C0042?PKT_I2CM
001922 121726            LCALL    ?L?COM0008
001925 80EE              SJMP     ?C0032?PKT_I2CM
  139:         PKT_I2CM_SET_SCL(LOW);
001927         ?C0042?PKT_I2CM:
001927 00                NOP      
001928 00                NOP      
001929 00                NOP      
00192A 00                NOP      
00192B 00                NOP      
00192C 00                NOP      
00192D 00                NOP      
00192E 00                NOP      
00192F 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 17


001930 00                NOP      
001931 00                NOP      
001932 00                NOP      
001933 00                NOP      
001934 00                NOP      
001935 C282              CLR      IO_DUT_I2CM_SCL
001937 8000              SJMP     ?C0003?PKT_I2CM
  140:     }
001939         ?C0003?PKT_I2CM:
001939 1B                DEC      R3
00193A EB                MOV      A,R3
00193B 70B8              JNZ      ?C0001?PKT_I2CM
00193D         ?C0060?PKT_I2CM:
  141: 
  142:     /* release SDA */
  143:     PKT_I2CM_SET_SDA(HIGH);
00193D D292              SETB     IO_DUT_I2CM_SDA
  144: 
  145:     /* check ACK */
  146:     PKT_I2CM_SET_SCL(HIGH);
00193F 00                NOP      
001940 00                NOP      
001941 00                NOP      
001942 00                NOP      
001943 00                NOP      
001944 00                NOP      
001945 00                NOP      
001946 00                NOP      
001947 00                NOP      
001948 00                NOP      
001949 00                NOP      
00194A 00                NOP      
00194B 00                NOP      
00194C 00                NOP      
00194D 122B40            LCALL    ?L?COM0023
001950         ?C0083?PKT_I2CM:
001950 20820F            JB       IO_DUT_I2CM_SCL,?C0062?PKT_I2CM
001953 122B39            LCALL    ?L?COM0021
001956 7002              JNZ      ?C0653?PKT_I2CM
001958 153F              DEC      _loop
00195A         ?C0653?PKT_I2CM:
00195A 4E                ORL      A,R6
00195B 6005              JZ       ?C0062?PKT_I2CM
00195D 121726            LCALL    ?L?COM0008
001960 80EE              SJMP     ?C0083?PKT_I2CM
001962         ?C0062?PKT_I2CM:
  147:     vAck = PKT_I2CM_GET_SDA();
001962 A292              MOV      C,IO_DUT_I2CM_SDA
001964 923A              MOV      vAck,C
  148:     PKT_I2CM_SET_SCL(LOW);
001966 00                NOP      
001967 00                NOP      
001968 00                NOP      
001969 00                NOP      
00196A 00                NOP      
00196B 00                NOP      
00196C 00                NOP      
00196D 00                NOP      
00196E 00                NOP      
00196F 00                NOP      
001970 00                NOP      
001971 00                NOP      
001972 00                NOP      
001973 00                NOP      
001974 C282              CLR      IO_DUT_I2CM_SCL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 18


001976 8000              SJMP     ?C0086?PKT_I2CM
001978         ?C0086?PKT_I2CM:
  149: 
  150:     return !vAck;
001978 A23A              MOV      C,vAck
00197A B3                CPL      C
  151: }
00197B 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  222: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  223: {
00197C 8E35              MOV      pPayload,R6
00197E 8F36              MOV      pPayload+01H,R7
  224:     UINT16  vWriteLen = pPayload->vWriteLen;
  225:     UINT16  vReadLen  = pPayload->vReadLen;
001980 8F82              MOV      DPL,R7
001982 8E83              MOV      DPH,R6
001984 A3                INC      DPTR
001985 122A7A            LCALL    ?L?COM0011
  226:     BOOL    bIntState;
001988 8F82              MOV      DPL,R7
00198A 8E83              MOV      DPH,R6
00198C A3                INC      DPTR
00198D A3                INC      DPTR
00198E A3                INC      DPTR
00198F E0                MOVX     A,@DPTR
001990 F539              MOV      vReadLen,A
001992 A3                INC      DPTR
001993 E0                MOVX     A,@DPTR
001994 F53A              MOV      vReadLen+01H,A
  227:     BOOL    bDone = FALSE;
001996 C239              CLR      bDone
  228:     UINT16  vLoop;
  229: 
  230:     /* make sure the I2C is ready */
  231:     if (!_pkt_i2cm_CheckReady())
001998 719B              ACALL    _pkt_i2cm_CheckReady
00199A 4003              JC       ?C0393?PKT_I2CM
  232:     {
  233:         return bDone;
00199C A239              MOV      C,bDone
00199E 22                RET      
  234:     }
00199F         ?C0393?PKT_I2CM:
  235: 
  236:     /* lock globally interrupt */
  237:     bIntState = DRV_INT_LockGlobalInterrupt();
00199F 30AF05            JNB      EA,?C0395?PKT_I2CM
0019A2 C2AF              CLR      EA
0019A4 D3                SETB     C
0019A5 8001              SJMP     ?C0396?PKT_I2CM
0019A7         ?C0395?PKT_I2CM:
0019A7 C3                CLR      C
0019A8         ?C0396?PKT_I2CM:
0019A8 9238              MOV      bIntState,C
  238: 
  239:     /* send write stream */
  240:     if ((vWriteLen != 0)
0019AA E538              MOV      A,vWriteLen+01H
0019AC 4537              ORL      A,vWriteLen
0019AE 7010              JNZ      ?C0404?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 19


0019B0 E538              MOV      A,vWriteLen+01H
0019B2 4537              ORL      A,vWriteLen
0019B4 6002              JZ       $ + 4H
0019B6 4142              AJMP     ?C0397?PKT_I2CM
0019B8 E53A              MOV      A,vReadLen+01H
0019BA 4539              ORL      A,vReadLen
0019BC 6002              JZ       $ + 4H
0019BE 4142              AJMP     ?C0397?PKT_I2CM
  241:         || ((vWriteLen == 0) && (vReadLen == 0)))
  242:     {
  243:         /* send I2C start */
  244:         _pkt_i2cm_Start();
0019C0         ?C0404?PKT_I2CM:
0019C0 D292              SETB     IO_DUT_I2CM_SDA
0019C2 00                NOP      
0019C3 00                NOP      
0019C4 00                NOP      
0019C5 00                NOP      
0019C6 00                NOP      
0019C7 00                NOP      
0019C8 00                NOP      
0019C9 00                NOP      
0019CA 00                NOP      
0019CB 00                NOP      
0019CC 00                NOP      
0019CD 00                NOP      
0019CE 00                NOP      
0019CF 00                NOP      
0019D0 122B91            LCALL    ?L?COM002C
0019D3         ?C0427?PKT_I2CM:
0019D3 20820F            JB       IO_DUT_I2CM_SCL,?C0434?PKT_I2CM
0019D6 122BCD            LCALL    ?L?COM0033
0019D9 7002              JNZ      ?C0664?PKT_I2CM
0019DB 153D              DEC      _loop
0019DD         ?C0664?PKT_I2CM:
0019DD 4E                ORL      A,R6
0019DE 6005              JZ       ?C0434?PKT_I2CM
0019E0 121726            LCALL    ?L?COM0008
0019E3 80EE              SJMP     ?C0427?PKT_I2CM
0019E5         ?C0434?PKT_I2CM:
0019E5 00                NOP      
0019E6 00                NOP      
0019E7 00                NOP      
0019E8 00                NOP      
0019E9 00                NOP      
0019EA 00                NOP      
0019EB 00                NOP      
0019EC 00                NOP      
0019ED 00                NOP      
0019EE 00                NOP      
0019EF 00                NOP      
0019F0 00                NOP      
0019F1 00                NOP      
0019F2 00                NOP      
0019F3 C292              CLR      IO_DUT_I2CM_SDA
0019F5 00                NOP      
0019F6 00                NOP      
0019F7 00                NOP      
0019F8 00                NOP      
0019F9 00                NOP      
0019FA 00                NOP      
0019FB 00                NOP      
0019FC 00                NOP      
0019FD 00                NOP      
0019FE 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 20


0019FF 00                NOP      
001A00 00                NOP      
001A01 00                NOP      
001A02 00                NOP      
001A03 C282              CLR      IO_DUT_I2CM_SCL
001A05 8000              SJMP     ?C0400?PKT_I2CM
001A07         ?C0400?PKT_I2CM:
  245: 
  246:         /* send I2C slave address + write */
  247:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
001A07 122BE3            LCALL    ?L?COM0036
001A0A 54FE              ANL      A,#0FEH
001A0C FF                MOV      R7,A
001A0D 11F1              ACALL    __pkt_i2cm_TxByte
001A0F 4002              JC       $ + 4H
001A11 41E8              AJMP     ?C0561?PKT_I2CM
  248:         {
  249:             goto _exit;
  250:         }
001A13         ?C0471?PKT_I2CM:
  251: 
  252:         /* send write buffer */
  253:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
001A13 E4                CLR      A
001A14 F53B              MOV      vLoop,A
001A16 F53C              MOV      vLoop+01H,A
001A18         ?C0473?PKT_I2CM:
001A18 C3                CLR      C
001A19 E53C              MOV      A,vLoop+01H
001A1B 9538              SUBB     A,vWriteLen+01H
001A1D E53B              MOV      A,vLoop
001A1F 9537              SUBB     A,vWriteLen
001A21 501F              JNC      ?C0397?PKT_I2CM
  254:         {
  255:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
001A23 122B9A            LCALL    ?L?COM002D
001A26 253C              ADD      A,vLoop+01H
001A28 F582              MOV      DPL,A
001A2A E583              MOV      A,DPH
001A2C 353B              ADDC     A,vLoop
001A2E F583              MOV      DPH,A
001A30 E0                MOVX     A,@DPTR
001A31 FF                MOV      R7,A
001A32 11F1              ACALL    __pkt_i2cm_TxByte
001A34 4002              JC       $ + 4H
001A36 41E8              AJMP     ?C0561?PKT_I2CM
  256:             {
  257:                 goto _exit;
  258:             }
001A38         ?C0476?PKT_I2CM:
  259:         }
001A38         ?C0475?PKT_I2CM:
001A38 053C              INC      vLoop+01H
001A3A E53C              MOV      A,vLoop+01H
001A3C 7002              JNZ      ?C0666?PKT_I2CM
001A3E 053B              INC      vLoop
001A40         ?C0666?PKT_I2CM:
001A40 80D6              SJMP     ?C0473?PKT_I2CM
  260:     }
001A42         ?C0397?PKT_I2CM:
  261: 
  262:     /* send read stream */
  263:     if (vReadLen != 0)
001A42 E53A              MOV      A,vReadLen+01H
001A44 4539              ORL      A,vReadLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 21


001A46 7002              JNZ      $ + 4H
001A48 41E6              AJMP     ?C0477?PKT_I2CM
  264:     {
  265:         /* send I2C start/restart */
  266:         _pkt_i2cm_Start();
001A4A D292              SETB     IO_DUT_I2CM_SDA
001A4C 00                NOP      
001A4D 00                NOP      
001A4E 00                NOP      
001A4F 00                NOP      
001A50 00                NOP      
001A51 00                NOP      
001A52 00                NOP      
001A53 00                NOP      
001A54 00                NOP      
001A55 00                NOP      
001A56 00                NOP      
001A57 00                NOP      
001A58 00                NOP      
001A59 00                NOP      
001A5A 122B91            LCALL    ?L?COM002C
001A5D         ?C0506?PKT_I2CM:
001A5D 20820F            JB       IO_DUT_I2CM_SCL,?C0513?PKT_I2CM
001A60 122BCD            LCALL    ?L?COM0033
001A63 7002              JNZ      ?C0667?PKT_I2CM
001A65 153D              DEC      _loop
001A67         ?C0667?PKT_I2CM:
001A67 4E                ORL      A,R6
001A68 6005              JZ       ?C0513?PKT_I2CM
001A6A 121726            LCALL    ?L?COM0008
001A6D 80EE              SJMP     ?C0506?PKT_I2CM
001A6F         ?C0513?PKT_I2CM:
001A6F 00                NOP      
001A70 00                NOP      
001A71 00                NOP      
001A72 00                NOP      
001A73 00                NOP      
001A74 00                NOP      
001A75 00                NOP      
001A76 00                NOP      
001A77 00                NOP      
001A78 00                NOP      
001A79 00                NOP      
001A7A 00                NOP      
001A7B 00                NOP      
001A7C 00                NOP      
001A7D C292              CLR      IO_DUT_I2CM_SDA
001A7F 00                NOP      
001A80 00                NOP      
001A81 00                NOP      
001A82 00                NOP      
001A83 00                NOP      
001A84 00                NOP      
001A85 00                NOP      
001A86 00                NOP      
001A87 00                NOP      
001A88 00                NOP      
001A89 00                NOP      
001A8A 00                NOP      
001A8B 00                NOP      
001A8C 00                NOP      
001A8D C282              CLR      IO_DUT_I2CM_SCL
001A8F 8000              SJMP     ?C0479?PKT_I2CM
001A91         ?C0479?PKT_I2CM:
  267: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 22


  268:         /* send I2C slave address + read */
  269:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
001A91 122BE3            LCALL    ?L?COM0036
001A94 4401              ORL      A,#01H
001A96 FF                MOV      R7,A
001A97 11F1              ACALL    __pkt_i2cm_TxByte
001A99 504D              JNC      ?C0561?PKT_I2CM
  270:         {
  271:             goto _exit;
  272:         }
001A9B         ?C0550?PKT_I2CM:
  273: 
  274:         /* read data */
  275:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001A9B E4                CLR      A
001A9C F53B              MOV      vLoop,A
001A9E F53C              MOV      vLoop+01H,A
001AA0         ?C0551?PKT_I2CM:
001AA0 C3                CLR      C
001AA1 E53C              MOV      A,vLoop+01H
001AA3 953A              SUBB     A,vReadLen+01H
001AA5 E53B              MOV      A,vLoop
001AA7 9539              SUBB     A,vReadLen
001AA9 503B              JNC      ?C0477?PKT_I2CM
  276:         {
  277:             pPayload->aBuf[vWriteLen+vLoop] =
001AAB E53A              MOV      A,vReadLen+01H
001AAD 24FF              ADD      A,#0FFH
001AAF FF                MOV      R7,A
001AB0 E539              MOV      A,vReadLen
001AB2 34FF              ADDC     A,#0FFH
001AB4 FE                MOV      R6,A
001AB5 EF                MOV      A,R7
001AB6 B53C07            CJNE     A,vLoop+01H,?C0554?PKT_I2CM
001AB9 EE                MOV      A,R6
001ABA B53B03            CJNE     A,vLoop,?C0554?PKT_I2CM
001ABD D3                SETB     C
001ABE 8001              SJMP     ?C0555?PKT_I2CM
001AC0         ?C0554?PKT_I2CM:
001AC0 C3                CLR      C
001AC1         ?C0555?PKT_I2CM:
001AC1 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001AC3 916D              ACALL    _pkt_i2cm_RxByte
001AC5 E538              MOV      A,vWriteLen+01H
001AC7 253C              ADD      A,vLoop+01H
001AC9 FD                MOV      R5,A
001ACA E537              MOV      A,vWriteLen
001ACC 353B              ADDC     A,vLoop
001ACE FC                MOV      R4,A
001ACF 122B9A            LCALL    ?L?COM002D
001AD2 2D                ADD      A,R5
001AD3 F582              MOV      DPL,A
001AD5 E583              MOV      A,DPH
001AD7 3C                ADDC     A,R4
001AD8 F583              MOV      DPH,A
001ADA EF                MOV      A,R7
001ADB F0                MOVX     @DPTR,A
  278:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  279:         }
001ADC 053C              INC      vLoop+01H
001ADE E53C              MOV      A,vLoop+01H
001AE0 7002              JNZ      ?C0670?PKT_I2CM
001AE2 053B              INC      vLoop
001AE4         ?C0670?PKT_I2CM:
001AE4 80BA              SJMP     ?C0551?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 23


  280:     }
001AE6         ?C0477?PKT_I2CM:
  281: 
  282:     /* I2C stream done */
  283:     bDone = TRUE;
001AE6 D239              SETB     bDone
  284: 
  285: _exit:
001AE8         _exit:
  286:     /* send I2C stop */
  287:     _pkt_i2cm_Stop();
001AE8         ?C0561?PKT_I2CM:
001AE8 C292              CLR      IO_DUT_I2CM_SDA
001AEA 00                NOP      
001AEB 00                NOP      
001AEC 00                NOP      
001AED 00                NOP      
001AEE 00                NOP      
001AEF 00                NOP      
001AF0 00                NOP      
001AF1 00                NOP      
001AF2 00                NOP      
001AF3 00                NOP      
001AF4 00                NOP      
001AF5 00                NOP      
001AF6 00                NOP      
001AF7 00                NOP      
001AF8 122B91            LCALL    ?L?COM002C
001AFB         ?C0584?PKT_I2CM:
001AFB 20820F            JB       IO_DUT_I2CM_SCL,?C0591?PKT_I2CM
001AFE 122BCD            LCALL    ?L?COM0033
001B01 7002              JNZ      ?C0671?PKT_I2CM
001B03 153D              DEC      _loop
001B05         ?C0671?PKT_I2CM:
001B05 4E                ORL      A,R6
001B06 6005              JZ       ?C0591?PKT_I2CM
001B08 121726            LCALL    ?L?COM0008
001B0B 80EE              SJMP     ?C0584?PKT_I2CM
001B0D         ?C0591?PKT_I2CM:
001B0D 00                NOP      
001B0E 00                NOP      
001B0F 00                NOP      
001B10 00                NOP      
001B11 00                NOP      
001B12 00                NOP      
001B13 00                NOP      
001B14 00                NOP      
001B15 00                NOP      
001B16 00                NOP      
001B17 00                NOP      
001B18 00                NOP      
001B19 00                NOP      
001B1A 00                NOP      
001B1B D292              SETB     IO_DUT_I2CM_SDA
  288: 
  289:     /* unlock globally interrupt */
  290:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001B1D A238              MOV      C,bIntState
001B1F 92AF              MOV      EA,C
  291: 
  292:     return bDone;
001B21 A239              MOV      C,bDone
  293: }
001B23 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 24




----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  348: UINT16 PKT_I2CM_Stream(void)
  349: {
  350:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  351:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
001B24 753300            MOV      pPayload,#HIGH vFrame+0CH
001B27 75340C            MOV      pPayload+01H,#LOW vFrame+0CH
  352: 
  353:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  354:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
001B2A 122B62            LCALL    ?L?COM0028
001B2D E0                MOVX     A,@DPTR
001B2E FE                MOV      R6,A
001B2F A3                INC      DPTR
001B30 E0                MOVX     A,@DPTR
001B31 FF                MOV      R7,A
001B32 2405              ADD      A,#05H
001B34 FD                MOV      R5,A
001B35 E4                CLR      A
001B36 3E                ADDC     A,R6
001B37 FC                MOV      R4,A
001B38 90000A            MOV      DPTR,#vFrame+0AH
001B3B E0                MOVX     A,@DPTR
001B3C B50424            CJNE     A,AR4,?C0642?PKT_I2CM
001B3F A3                INC      DPTR
001B40 E0                MOVX     A,@DPTR
001B41 B5051F            CJNE     A,AR5,?C0642?PKT_I2CM
001B44 122B62            LCALL    ?L?COM0028
001B47 A3                INC      DPTR
001B48 A3                INC      DPTR
001B49 E0                MOVX     A,@DPTR
001B4A FC                MOV      R4,A
001B4B A3                INC      DPTR
001B4C E0                MOVX     A,@DPTR
001B4D FD                MOV      R5,A
001B4E EF                MOV      A,R7
001B4F 2D                ADD      A,R5
001B50 FF                MOV      R7,A
001B51 EE                MOV      A,R6
001B52 3C                ADDC     A,R4
001B53 FE                MOV      R6,A
001B54 E4                CLR      A
001B55 FC                MOV      R4,A
001B56 FD                MOV      R5,A
001B57 7B33              MOV      R3,#033H
001B59 7A04              MOV      R2,#04H
001B5B F9                MOV      R1,A
001B5C F8                MOV      R0,A
001B5D C3                CLR      C
001B5E 12087B            LCALL    ?C?SLCMP
001B61 5005              JNC      ?C0641?PKT_I2CM
001B63         ?C0642?PKT_I2CM:
  355:     {
  356:         return PKT_REPLY_Fail_InvalidLen;
001B63 7E03              MOV      R6,#03H
001B65 7F04              MOV      R7,#04H
001B67 22                RET      
  357:     }
001B68         ?C0641?PKT_I2CM:
  358: 
  359:   #if PKT_I2CM_VS_SUPPORT
  360:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 25


  361:         pkt_i2cm_vs_Stream(pPayload) :
  362:         pkt_i2cm_Stream(pPayload))
  363:   #else
  364:     if (pkt_i2cm_Stream(pPayload))
001B68 AF34              MOV      R7,pPayload+01H
001B6A AE33              MOV      R6,pPayload
001B6C 317C              ACALL    _pkt_i2cm_Stream
001B6E 5026              JNC      ?C0644?PKT_I2CM
  365:   #endif
  366:     {
  367:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  368:                            + pPayload->vWriteLen
  369:                            + pPayload->vReadLen);
001B70 122B62            LCALL    ?L?COM0028
001B73 E0                MOVX     A,@DPTR
001B74 FE                MOV      R6,A
001B75 A3                INC      DPTR
001B76 E0                MOVX     A,@DPTR
001B77 2405              ADD      A,#05H
001B79 FF                MOV      R7,A
001B7A E4                CLR      A
001B7B 3E                ADDC     A,R6
001B7C FE                MOV      R6,A
001B7D 122B62            LCALL    ?L?COM0028
001B80 A3                INC      DPTR
001B81 A3                INC      DPTR
001B82 E0                MOVX     A,@DPTR
001B83 FC                MOV      R4,A
001B84 A3                INC      DPTR
001B85 E0                MOVX     A,@DPTR
001B86 2F                ADD      A,R7
001B87 FF                MOV      R7,A
001B88 EC                MOV      A,R4
001B89 3E                ADDC     A,R6
001B8A 90000A            MOV      DPTR,#vFrame+0AH
001B8D F0                MOVX     @DPTR,A
001B8E A3                INC      DPTR
001B8F EF                MOV      A,R7
001B90 F0                MOVX     @DPTR,A
  370:         return PKT_REPLY_Done_ExecNoError;
001B91 7E01              MOV      R6,#01H
001B93 7F40              MOV      R7,#040H
001B95 22                RET      
  371:     }
001B96         ?C0644?PKT_I2CM:
  372:     else
  373:     {
  374:         return PKT_REPLY_Fail_I2cNoAck;
001B96 7E03              MOV      R6,#03H
001B98 7F40              MOV      R7,#040H
  375:     }
  376: }
001B9A 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  176: static BOOL _pkt_i2cm_CheckReady(void)
  177: {
  178:     if ((PKT_I2CM_GET_SCL() == HIGH)
  179:         && (PKT_I2CM_GET_SDA() == HIGH))
001B9B 308205            JNB      IO_DUT_I2CM_SCL,?C0216?PKT_I2CM
001B9E 309202            JNB      IO_DUT_I2CM_SDA,?C0216?PKT_I2CM
  180:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 26


  181:         /* the I2C only can be started, while SCL/SDA is at high level */
  182:         return TRUE;
001BA1 D3                SETB     C
001BA2 22                RET      
  183:     }
001BA3         ?C0216?PKT_I2CM:
  184:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001BA3 208202            JB       IO_DUT_I2CM_SCL,$ + 5H
001BA6 816B              AJMP     ?C0218?PKT_I2CM
001BA8 309202            JNB      IO_DUT_I2CM_SDA,$ + 5H
001BAB 816B              AJMP     ?C0218?PKT_I2CM
  185:              && (PKT_I2CM_GET_SDA() == LOW))
  186:     {
  187:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  188:          *  we should attempt to reset the I2C bus,
  189:          *  to recover the SDA to idle state.
  190:          *
  191:          * Memory (Management Interface) Reset:
  192:          *  1) Clock up to 9 cycles.
  193:          *  2) Look for SDA high in each cycle while SCL is high.
  194:          *  3) Create a START condition as SDA is high.
  195:          */
  196: 
  197:         UINT8   vLoop;
  198: 
  199:         for (vLoop = 9; vLoop != 0; vLoop--)
001BAD 753F09            MOV      vLoop,#09H
001BB0         ?C0220?PKT_I2CM:
  200:         {
  201:             PKT_I2CM_SET_SCL(LOW);
001BB0 00                NOP      
001BB1 00                NOP      
001BB2 00                NOP      
001BB3 00                NOP      
001BB4 00                NOP      
001BB5 00                NOP      
001BB6 00                NOP      
001BB7 00                NOP      
001BB8 00                NOP      
001BB9 00                NOP      
001BBA 00                NOP      
001BBB 00                NOP      
001BBC 00                NOP      
001BBD 00                NOP      
001BBE C282              CLR      IO_DUT_I2CM_SCL
001BC0 8000              SJMP     ?C0255?PKT_I2CM
  202:             PKT_I2CM_SET_SCL(HIGH);
001BC2         ?C0255?PKT_I2CM:
001BC2 00                NOP      
001BC3 00                NOP      
001BC4 00                NOP      
001BC5 00                NOP      
001BC6 00                NOP      
001BC7 00                NOP      
001BC8 00                NOP      
001BC9 00                NOP      
001BCA 00                NOP      
001BCB 00                NOP      
001BCC 00                NOP      
001BCD 00                NOP      
001BCE 00                NOP      
001BCF 00                NOP      
001BD0 122BA8            LCALL    ?L?COM002E
001BD3         ?C0269?PKT_I2CM:
001BD3 20820F            JB       IO_DUT_I2CM_SCL,?C0222?PKT_I2CM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 27


001BD6 122BD4            LCALL    ?L?COM0034
001BD9 7002              JNZ      ?C0660?PKT_I2CM
001BDB 1540              DEC      _loop
001BDD         ?C0660?PKT_I2CM:
001BDD 4E                ORL      A,R6
001BDE 6005              JZ       ?C0222?PKT_I2CM
001BE0 121726            LCALL    ?L?COM0008
001BE3 80EE              SJMP     ?C0269?PKT_I2CM
  203:         }
001BE5         ?C0222?PKT_I2CM:
001BE5 D53FC8            DJNZ     vLoop,?C0220?PKT_I2CM
001BE8         ?C0221?PKT_I2CM:
  204: 
  205:         if (PKT_I2CM_GET_SDA() == HIGH)
001BE8 209202            JB       IO_DUT_I2CM_SDA,$ + 5H
001BEB 816B              AJMP     ?C0218?PKT_I2CM
  206:         {
  207:             _pkt_i2cm_Start();
001BED D292              SETB     IO_DUT_I2CM_SDA
001BEF 00                NOP      
001BF0 00                NOP      
001BF1 00                NOP      
001BF2 00                NOP      
001BF3 00                NOP      
001BF4 00                NOP      
001BF5 00                NOP      
001BF6 00                NOP      
001BF7 00                NOP      
001BF8 00                NOP      
001BF9 00                NOP      
001BFA 00                NOP      
001BFB 00                NOP      
001BFC 00                NOP      
001BFD 122BA8            LCALL    ?L?COM002E
001C00         ?C0300?PKT_I2CM:
001C00 20820F            JB       IO_DUT_I2CM_SCL,?C0307?PKT_I2CM
001C03 122BD4            LCALL    ?L?COM0034
001C06 7002              JNZ      ?C0661?PKT_I2CM
001C08 1540              DEC      _loop
001C0A         ?C0661?PKT_I2CM:
001C0A 4E                ORL      A,R6
001C0B 6005              JZ       ?C0307?PKT_I2CM
001C0D 121726            LCALL    ?L?COM0008
001C10 80EE              SJMP     ?C0300?PKT_I2CM
001C12         ?C0307?PKT_I2CM:
001C12 00                NOP      
001C13 00                NOP      
001C14 00                NOP      
001C15 00                NOP      
001C16 00                NOP      
001C17 00                NOP      
001C18 00                NOP      
001C19 00                NOP      
001C1A 00                NOP      
001C1B 00                NOP      
001C1C 00                NOP      
001C1D 00                NOP      
001C1E 00                NOP      
001C1F 00                NOP      
001C20 C292              CLR      IO_DUT_I2CM_SDA
001C22 00                NOP      
001C23 00                NOP      
001C24 00                NOP      
001C25 00                NOP      
001C26 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 28


001C27 00                NOP      
001C28 00                NOP      
001C29 00                NOP      
001C2A 00                NOP      
001C2B 00                NOP      
001C2C 00                NOP      
001C2D 00                NOP      
001C2E 00                NOP      
001C2F 00                NOP      
001C30 C282              CLR      IO_DUT_I2CM_SCL
001C32 8000              SJMP     ?C0349?PKT_I2CM
  208:             _pkt_i2cm_Stop();
001C34         ?C0349?PKT_I2CM:
001C34 C292              CLR      IO_DUT_I2CM_SDA
001C36 00                NOP      
001C37 00                NOP      
001C38 00                NOP      
001C39 00                NOP      
001C3A 00                NOP      
001C3B 00                NOP      
001C3C 00                NOP      
001C3D 00                NOP      
001C3E 00                NOP      
001C3F 00                NOP      
001C40 00                NOP      
001C41 00                NOP      
001C42 00                NOP      
001C43 00                NOP      
001C44 122BA8            LCALL    ?L?COM002E
001C47         ?C0372?PKT_I2CM:
001C47 20820F            JB       IO_DUT_I2CM_SCL,?C0379?PKT_I2CM
001C4A 122BD4            LCALL    ?L?COM0034
001C4D 7002              JNZ      ?C0663?PKT_I2CM
001C4F 1540              DEC      _loop
001C51         ?C0663?PKT_I2CM:
001C51 4E                ORL      A,R6
001C52 6005              JZ       ?C0379?PKT_I2CM
001C54 121726            LCALL    ?L?COM0008
001C57 80EE              SJMP     ?C0372?PKT_I2CM
001C59         ?C0379?PKT_I2CM:
001C59 00                NOP      
001C5A 00                NOP      
001C5B 00                NOP      
001C5C 00                NOP      
001C5D 00                NOP      
001C5E 00                NOP      
001C5F 00                NOP      
001C60 00                NOP      
001C61 00                NOP      
001C62 00                NOP      
001C63 00                NOP      
001C64 00                NOP      
001C65 00                NOP      
001C66 00                NOP      
001C67 D292              SETB     IO_DUT_I2CM_SDA
  209: 
  210:             /* we have successfully recovered the SDA line to idle state */
  211:             return TRUE;
001C69 D3                SETB     C
001C6A 22                RET      
  212:         }
  213:     }
  214:     else
  215:     {
  216:         /* unsupported stretching on SCL/SDA line, operation fail */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 29


  217:     }
001C6B         ?C0218?PKT_I2CM:
  218: 
  219:     return FALSE;
001C6B C3                CLR      C
  220: }
001C6C 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  153: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  154: {
  155:     UINT8   vLoop;
  156:     UINT8   vData = 0;
;---- Variable 'vData' assigned to Register 'R5' ----
001C6D E4                CLR      A
001C6E FD                MOV      R5,A
  157: 
  158:     for (vLoop = 8; vLoop != 0; vLoop--)
;---- Variable 'vLoop' assigned to Register 'R4' ----
001C6F 7C08              MOV      R4,#08H
001C71         ?C0110?PKT_I2CM:
  159:     {
  160:         PKT_I2CM_SET_SCL(HIGH);
001C71 00                NOP      
001C72 00                NOP      
001C73 00                NOP      
001C74 00                NOP      
001C75 00                NOP      
001C76 00                NOP      
001C77 00                NOP      
001C78 00                NOP      
001C79 00                NOP      
001C7A 00                NOP      
001C7B 00                NOP      
001C7C 00                NOP      
001C7D 00                NOP      
001C7E 00                NOP      
001C7F 122B40            LCALL    ?L?COM0023
001C82         ?C0135?PKT_I2CM:
001C82 20820F            JB       IO_DUT_I2CM_SCL,?C0114?PKT_I2CM
001C85 122B39            LCALL    ?L?COM0021
001C88 7002              JNZ      ?C0655?PKT_I2CM
001C8A 153F              DEC      _loop
001C8C         ?C0655?PKT_I2CM:
001C8C 4E                ORL      A,R6
001C8D 6005              JZ       ?C0114?PKT_I2CM
001C8F 121726            LCALL    ?L?COM0008
001C92 80EE              SJMP     ?C0135?PKT_I2CM
001C94         ?C0114?PKT_I2CM:
  161:         vData <<= 1;
001C94 ED                MOV      A,R5
001C95 25E0              ADD      A,ACC
001C97 FD                MOV      R5,A
  162:         vData |= PKT_I2CM_GET_SDA();
001C98 A292              MOV      C,IO_DUT_I2CM_SDA
001C9A E4                CLR      A
001C9B 33                RLC      A
001C9C 4205              ORL      AR5,A
  163:         PKT_I2CM_SET_SCL(LOW);
001C9E 00                NOP      
001C9F 00                NOP      
001CA0 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 30


001CA1 00                NOP      
001CA2 00                NOP      
001CA3 00                NOP      
001CA4 00                NOP      
001CA5 00                NOP      
001CA6 00                NOP      
001CA7 00                NOP      
001CA8 00                NOP      
001CA9 00                NOP      
001CAA 00                NOP      
001CAB 00                NOP      
001CAC C282              CLR      IO_DUT_I2CM_SCL
001CAE 8000              SJMP     ?C0112?PKT_I2CM
  164:     }
001CB0         ?C0112?PKT_I2CM:
001CB0 1C                DEC      R4
001CB1 EC                MOV      A,R4
001CB2 70BD              JNZ      ?C0110?PKT_I2CM
001CB4         ?C0163?PKT_I2CM:
  165: 
  166:     /* send ACK/NAK */
  167:     PKT_I2CM_SET_SDA(bSendNAK);
001CB4 A23A              MOV      C,bSendNAK
001CB6 9292              MOV      IO_DUT_I2CM_SDA,C
  168:     PKT_I2CM_SET_SCL(HIGH);
001CB8 00                NOP      
001CB9 00                NOP      
001CBA 00                NOP      
001CBB 00                NOP      
001CBC 00                NOP      
001CBD 00                NOP      
001CBE 00                NOP      
001CBF 00                NOP      
001CC0 00                NOP      
001CC1 00                NOP      
001CC2 00                NOP      
001CC3 00                NOP      
001CC4 00                NOP      
001CC5 00                NOP      
001CC6 122B40            LCALL    ?L?COM0023
001CC9         ?C0186?PKT_I2CM:
001CC9 20820F            JB       IO_DUT_I2CM_SCL,?C0196?PKT_I2CM
001CCC 122B39            LCALL    ?L?COM0021
001CCF 7002              JNZ      ?C0657?PKT_I2CM
001CD1 153F              DEC      _loop
001CD3         ?C0657?PKT_I2CM:
001CD3 4E                ORL      A,R6
001CD4 6005              JZ       ?C0196?PKT_I2CM
001CD6 121726            LCALL    ?L?COM0008
001CD9 80EE              SJMP     ?C0186?PKT_I2CM
  169:     PKT_I2CM_SET_SCL(LOW);
001CDB         ?C0196?PKT_I2CM:
001CDB 00                NOP      
001CDC 00                NOP      
001CDD 00                NOP      
001CDE 00                NOP      
001CDF 00                NOP      
001CE0 00                NOP      
001CE1 00                NOP      
001CE2 00                NOP      
001CE3 00                NOP      
001CE4 00                NOP      
001CE5 00                NOP      
001CE6 00                NOP      
001CE7 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 31


001CE8 00                NOP      
001CE9 C282              CLR      IO_DUT_I2CM_SCL
001CEB 8000              SJMP     ?C0214?PKT_I2CM
001CED         ?C0214?PKT_I2CM:
  170:     PKT_I2CM_SET_SDA(HIGH);
001CED D292              SETB     IO_DUT_I2CM_SDA
  171: 
  172:     return vData;
001CEF AF05              MOV      R7,AR5
  173: }
001CF1 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  340: UINT16 PKT_I2CM_Inspect(void)
  341: {
  342:     _pkt_i2cm_Init();
  343: 
001CF2 00                NOP      
001CF3 00                NOP      
001CF4 00                NOP      
001CF5 00                NOP      
001CF6 00                NOP      
001CF7 00                NOP      
001CF8 00                NOP      
001CF9 00                NOP      
001CFA 00                NOP      
001CFB 00                NOP      
001CFC 00                NOP      
001CFD 00                NOP      
001CFE 00                NOP      
001CFF 00                NOP      
001D00 D282              SETB     IO_DUT_I2CM_SCL
001D02 753301            MOV      _loop,#01H
001D05 7534F4            MOV      _loop+01H,#0F4H
001D08         ?C0632?PKT_I2CM:
001D08 208212            JB       IO_DUT_I2CM_SCL,?C0636?PKT_I2CM
001D0B E534              MOV      A,_loop+01H
001D0D 1534              DEC      _loop+01H
001D0F AE33              MOV      R6,_loop
001D11 7002              JNZ      ?C0672?PKT_I2CM
001D13 1533              DEC      _loop
001D15         ?C0672?PKT_I2CM:
001D15 4E                ORL      A,R6
001D16 6005              JZ       ?C0636?PKT_I2CM
001D18 121726            LCALL    ?L?COM0008
001D1B 80EB              SJMP     ?C0632?PKT_I2CM
001D1D         ?C0636?PKT_I2CM:
001D1D D292              SETB     IO_DUT_I2CM_SDA
  344:     PKT_SetPayloadSize(0x00);
001D1F 122B28            LCALL    ?L?COM001F
  345:     return PKT_REPLY_Done_ExecNoError;
001D22 7E01              MOV      R6,#01H
001D24 7F40              MOV      R7,#040H
  346: }
001D26 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   33: UINT16 PKT_MDIOM_Probe(void)
   34: {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 32


   35:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   36:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
001D27 90000C            MOV      DPTR,#vFrame+0CH
   37: 
   38:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
001D2A E0                MOVX     A,@DPTR
001D2B FF                MOV      R7,A
001D2C A3                INC      DPTR
001D2D E0                MOVX     A,@DPTR
001D2E FD                MOV      R5,A
001D2F 7A04              MOV      R2,#HIGH vData
001D31 7BAA              MOV      R3,#LOW vData
001D33 B13E              ACALL    _DRV_MDIOM_FrameRead
001D35 7E01              MOV      R6,#01H
001D37 4002              JC       ?C0005?PKT_MDIOM
   39:                              pPayload->vDevAddr,
   40:                              &vData))
   41:     {
   42:         return PKT_REPLY_Fail_MdioNoAck;
001D39 7E03              MOV      R6,#03H
   43:     }
001D3B         ?C0005?PKT_MDIOM:
   44: 
   45:     return PKT_REPLY_Done_ExecNoError;
001D3B 7F40              MOV      R7,#040H
   46: }
001D3D 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  516: BOOL DRV_MDIOM_FrameRead
  517: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
001D3E 8B82              MOV      DPL,R3
001D40 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  518:     IN  UINT8               vPortAddr,
  519:     IN  UINT8               vDevAddr,
  520:     OUT UINT16 SEG_XDATA   *pData
  521: )
  522: {
  523:     BOOL    bIntState;
  524: 
  525:     /* create MDIO frame: Read */
  526:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
001D42 B1CC              ACALL    _drv_mdiom_CreateReadFrame
  527: 
  528:     /* lock globally interrupt */
  529:     bIntState = DRV_INT_LockGlobalInterrupt();
001D44 30AF05            JNB      EA,?C2483?DRV_MDIOM
001D47 C2AF              CLR      EA
001D49 D3                SETB     C
001D4A 8001              SJMP     ?C2484?DRV_MDIOM
001D4C         ?C2483?DRV_MDIOM:
001D4C C3                CLR      C
001D4D         ?C2484?DRV_MDIOM:
001D4D 9238              MOV      bIntState,C
  530: 
  531:     /* transmit frame: Read */
  532:     drv_mdiom_RxDataFrame();
001D4F B15D              ACALL    drv_mdiom_RxDataFrame
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 33


  533: 
  534:     /* unlock globally interrupt */
  535:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001D51 A238              MOV      C,bIntState
001D53 122B56            LCALL    ?L?COM0026
001D56 4003              JC       ?C2488?DRV_MDIOM
001D58 D3                SETB     C
001D59 8001              SJMP     ?C2489?DRV_MDIOM
001D5B         ?C2488?DRV_MDIOM:
001D5B C3                CLR      C
001D5C         ?C2489?DRV_MDIOM:
  536: 
  537:     /* check read status */
  538:     *pData = vMdioData;
  539:     return drv_mdiom_IsReadSuccess();
  540: }
001D5C 22                RET      
----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  332: static void drv_mdiom_RxDataFrame(void)
  333: {
  334:     drv_mdiom_StartFrame();
  335:     drv_mdiom_TxPreamble();
001D5D 12288F            LCALL    ?L?COM0001
001D60 1228DD            LCALL    ?L?COM0002
001D63 122936            LCALL    ?L?COM0003
  336:     drv_mdiom_TxStartFrame();
  337:     drv_mdiom_TxOperationCode();
  338:     drv_mdiom_TxPortAddress();
  339:     drv_mdiom_TxDeviceAddress();
  340:     drv_mdiom_RxTurnAround();
001D66 00                NOP      
001D67 00                NOP      
001D68 D296              SETB     IO_DUT_MDIOM_SCL_OUT
001D6A D294              SETB     IO_DUT_MDIOM_SDA_OUT
001D6C C296              CLR      IO_DUT_MDIOM_SCL_OUT
001D6E D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
001D70 D296              SETB     IO_DUT_MDIOM_SCL_OUT
001D72 00                NOP      
001D73 00                NOP      
001D74 122A3B            LCALL    ?L?COM000C
001D77 9200              MOV      bMdioTurnAround0,C
  341:     drv_mdiom_RxData();
001D79 122A3B            LCALL    ?L?COM000C
001D7C 9227              MOV      bMdioData15,C
001D7E 122A3B            LCALL    ?L?COM000C
001D81 9226              MOV      bMdioData14,C
001D83 122A3B            LCALL    ?L?COM000C
001D86 9225              MOV      bMdioData13,C
001D88 122A3B            LCALL    ?L?COM000C
001D8B 9224              MOV      bMdioData12,C
001D8D 122A3B            LCALL    ?L?COM000C
001D90 9223              MOV      bMdioData11,C
001D92 122A3B            LCALL    ?L?COM000C
001D95 9222              MOV      bMdioData10,C
001D97 122A3B            LCALL    ?L?COM000C
001D9A 9221              MOV      bMdioData9,C
001D9C 122A3B            LCALL    ?L?COM000C
001D9F 9220              MOV      bMdioData8,C
001DA1 122A3B            LCALL    ?L?COM000C
001DA4 922F              MOV      bMdioData7,C
001DA6 122A3B            LCALL    ?L?COM000C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 34


001DA9 922E              MOV      bMdioData6,C
001DAB 122A3B            LCALL    ?L?COM000C
001DAE 922D              MOV      bMdioData5,C
001DB0 122A3B            LCALL    ?L?COM000C
001DB3 922C              MOV      bMdioData4,C
001DB5 122A3B            LCALL    ?L?COM000C
001DB8 922B              MOV      bMdioData3,C
001DBA 122A3B            LCALL    ?L?COM000C
001DBD 922A              MOV      bMdioData2,C
001DBF 122A3B            LCALL    ?L?COM000C
001DC2 9229              MOV      bMdioData1,C
001DC4 122A3B            LCALL    ?L?COM000C
001DC7 9228              MOV      bMdioData0,C
  342:     drv_mdiom_StopFrame();
001DC9 022B30            LJMP     ?L?COM0020
  343: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------


----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  378: static void drv_mdiom_CreateReadFrame
  379: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  380:     IN UINT8    vPortAddr,
  381:     IN UINT8    vDevAddr
  382: )
  383: {
  384:     drv_mdiom_SetStartFrame(0, 0);
001DCC C20F              CLR      bMdioStartFrame1
001DCE C20E              CLR      bMdioStartFrame0
  385:     drv_mdiom_SetOperationCode(1, 1);
001DD0 D20D              SETB     bMdioOperationCode1
001DD2 D20C              SETB     bMdioOperationCode0
  386:     drv_mdiom_SetPortAddress(vPortAddr);
001DD4 1229AF            LCALL    ?L?COM0006
001DD7 D200              SETB     bMdioTurnAround0
  387:     drv_mdiom_SetDeviceAddress(vDevAddr);
  388:     drv_mdiom_SetTurnAround(1, 1);
  389:     drv_mdiom_SetData(0xFFFF);
001DD9 74FF              MOV      A,#0FFH
001DDB F524              MOV      vMdioData,A
001DDD F525              MOV      vMdioData+01H,A
  390: }
001DDF 22                RET      
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  611: BOOL DRV_MDIOM_Read
  612: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  613:     IN  UINT8               vPortAddr,
  614:     IN  UINT8               vDevAddr,
  615:     IN  UINT16              vRegAddr,
  616:     IN  UINT16              vDataLen,
  617:     OUT UINT16 SEG_XDATA   *pDataBuf
  618: )
  619: {
  620:     BOOL    bResult = TRUE;
001DE0 D238              SETB     bResult
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 35


  621:     BOOL    bIntState;
  622: 
  623:     /* create MDIO frame: Address */
  624:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
001DE2 D192              ACALL    _drv_mdiom_CreateAddrFrame
  625: 
  626:     /* lock globally interrupt */
  627:     bIntState = DRV_INT_LockGlobalInterrupt();
001DE4 30AF05            JNB      EA,?C2499?DRV_MDIOM
001DE7 C2AF              CLR      EA
001DE9 D3                SETB     C
001DEA 8001              SJMP     ?C2500?DRV_MDIOM
001DEC         ?C2499?DRV_MDIOM:
001DEC C3                CLR      C
001DED         ?C2500?DRV_MDIOM:
001DED 9239              MOV      bIntState,C
  628: 
  629:     /* transmit frame: Address */
  630:     drv_mdiom_TxAddrFrame();
001DEF D12A              ACALL    drv_mdiom_TxAddrFrame
  631: 
  632:     /* create MDIO frame: Post-Read-Increment-Address */
  633:     drv_mdiom_SetOperationCode(1, 0);
001DF1 D20D              SETB     bMdioOperationCode1
001DF3 C20C              CLR      bMdioOperationCode0
001DF5         ?C2504?DRV_MDIOM:
  634: 
  635:     /* transmit frame: Post-Read-Increment-Address */
  636:     while (vDataLen-- != 0)
001DF5 E53A              MOV      A,vDataLen+01H
001DF7 153A              DEC      vDataLen+01H
001DF9 AE39              MOV      R6,vDataLen
001DFB 7002              JNZ      ?C2544?DRV_MDIOM
001DFD 1539              DEC      vDataLen
001DFF         ?C2544?DRV_MDIOM:
001DFF 4E                ORL      A,R6
001E00 6021              JZ       ?C2511?DRV_MDIOM
  637:     {
  638:         drv_mdiom_RxDataFrame();
001E02 B15D              ACALL    drv_mdiom_RxDataFrame
  639: 
  640:         /* check read status */
  641:         *pDataBuf++ = vMdioData;
001E04 E53C              MOV      A,pDataBuf+01H
001E06 FF                MOV      R7,A
001E07 2402              ADD      A,#02H
001E09 F53C              MOV      pDataBuf+01H,A
001E0B E53B              MOV      A,pDataBuf
001E0D FE                MOV      R6,A
001E0E 3400              ADDC     A,#00H
001E10 F53B              MOV      pDataBuf,A
001E12 8F82              MOV      DPL,R7
001E14 8E83              MOV      DPH,R6
001E16 122B58            LCALL    ?L?COM0027
001E19 4003              JC       ?C2507?DRV_MDIOM
001E1B D3                SETB     C
001E1C 8001              SJMP     ?C2508?DRV_MDIOM
001E1E         ?C2507?DRV_MDIOM:
001E1E C3                CLR      C
001E1F         ?C2508?DRV_MDIOM:
001E1F 40D4              JC       ?C2504?DRV_MDIOM
  642:         if (!drv_mdiom_IsReadSuccess())
  643:         {
  644:             bResult = FALSE;
001E21 C238              CLR      bResult
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 36


  645:             break;
  646:         }
  647:     }
001E23         ?C2511?DRV_MDIOM:
  648: 
  649:     /* unlock globally interrupt */
  650:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001E23 A239              MOV      C,bIntState
001E25 92AF              MOV      EA,C
  651: 
  652:     return bResult;
001E27 A238              MOV      C,bResult
  653: }
001E29 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  306: static void drv_mdiom_TxAddrFrame(void)
  307: {
  308:     drv_mdiom_StartFrame();
  309:     drv_mdiom_TxPreamble();
001E2A 12288F            LCALL    ?L?COM0001
001E2D 1228DD            LCALL    ?L?COM0002
001E30 122936            LCALL    ?L?COM0003
  310:     drv_mdiom_TxStartFrame();
  311:     drv_mdiom_TxOperationCode();
  312:     drv_mdiom_TxPortAddress();
  313:     drv_mdiom_TxDeviceAddress();
  314:     drv_mdiom_TxTurnAround();
001E33 A201              MOV      C,bMdioTurnAround1
001E35 1229A6            LCALL    ?L?COM0004
001E38 A200              MOV      C,bMdioTurnAround0
001E3A 1229A6            LCALL    ?L?COM0004
  315:     drv_mdiom_TxAddr();
001E3D A217              MOV      C,bMdioAddr15
001E3F 1229A6            LCALL    ?L?COM0004
001E42 A216              MOV      C,bMdioAddr14
001E44 1229A6            LCALL    ?L?COM0004
001E47 A215              MOV      C,bMdioAddr13
001E49 1229A6            LCALL    ?L?COM0004
001E4C A214              MOV      C,bMdioAddr12
001E4E 1229A6            LCALL    ?L?COM0004
001E51 A213              MOV      C,bMdioAddr11
001E53 1229A6            LCALL    ?L?COM0004
001E56 A212              MOV      C,bMdioAddr10
001E58 1229A6            LCALL    ?L?COM0004
001E5B A211              MOV      C,bMdioAddr9
001E5D 1229A6            LCALL    ?L?COM0004
001E60 A210              MOV      C,bMdioAddr8
001E62 1229A6            LCALL    ?L?COM0004
001E65 A21F              MOV      C,bMdioAddr7
001E67 1229A6            LCALL    ?L?COM0004
001E6A A21E              MOV      C,bMdioAddr6
001E6C 1229A6            LCALL    ?L?COM0004
001E6F A21D              MOV      C,bMdioAddr5
001E71 1229A6            LCALL    ?L?COM0004
001E74 A21C              MOV      C,bMdioAddr4
001E76 1229A6            LCALL    ?L?COM0004
001E79 A21B              MOV      C,bMdioAddr3
001E7B 1229A6            LCALL    ?L?COM0004
001E7E A21A              MOV      C,bMdioAddr2
001E80 1229A6            LCALL    ?L?COM0004
001E83 A219              MOV      C,bMdioAddr1
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 37


001E85 1229A6            LCALL    ?L?COM0004
001E88 A218              MOV      C,bMdioAddr0
001E8A 1229A6            LCALL    ?L?COM0004
001E8D 00                NOP      
001E8E 00                NOP      
  316:     drv_mdiom_StopFrame();
001E8F 022B30            LJMP     ?L?COM0020
  317: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  346: static void drv_mdiom_CreateAddrFrame
  347: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  348:     IN UINT8    vPortAddr,
  349:     IN UINT8    vDevAddr,
  350:     IN UINT16   vRegAddr
  351: )
  352: {
  353:     drv_mdiom_SetStartFrame(0, 0);
001E92 C20F              CLR      bMdioStartFrame1
001E94 C20E              CLR      bMdioStartFrame0
  354:     drv_mdiom_SetOperationCode(0, 0);
001E96 C20D              CLR      bMdioOperationCode1
001E98 1229AD            LCALL    ?L?COM0005
001E9B C200              CLR      bMdioTurnAround0
  355:     drv_mdiom_SetPortAddress(vPortAddr);
  356:     drv_mdiom_SetDeviceAddress(vDevAddr);
  357:     drv_mdiom_SetTurnAround(1, 0);
  358:     drv_mdiom_SetAddr(vRegAddr);
001E9D 8A22              MOV      vMdioAddr,R2
001E9F 8B23              MOV      vMdioAddr+01H,R3
  359: }
001EA1 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------


----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  675: BOOL DRV_MDIOM_Write
  676: (
001EA2 8A37              MOV      vRegAddr,R2
001EA4 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
001EA6 AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
001EA8 AC07              MOV      R4,AR7
  677:     IN       UINT8              vPortAddr,
  678:     IN       UINT8              vDevAddr,
  679:     IN       UINT16             vRegAddr,
  680:     IN       UINT16             vDataLen,
  681:     IN const UINT16 SEG_XDATA  *pDataBuf
  682: )
  683: {
  684:     BOOL    bIntState;
  685: 
  686:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
001EAA         ?C2513?DRV_MDIOM:
001EAA E53A              MOV      A,vDataLen+01H
001EAC 153A              DEC      vDataLen+01H
001EAE AA39              MOV      R2,vDataLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 38


001EB0 7002              JNZ      ?C2545?DRV_MDIOM
001EB2 1539              DEC      vDataLen
001EB4         ?C2545?DRV_MDIOM:
001EB4 4A                ORL      A,R2
001EB5 6043              JZ       ?C2514?DRV_MDIOM
  687:     {
  688:         /* prepare MDIO data */
  689:         drv_mdiom_SetData(*pDataBuf);
001EB7 853C82            MOV      DPL,pDataBuf+01H
001EBA 853B83            MOV      DPH,pDataBuf
001EBD E0                MOVX     A,@DPTR
001EBE F524              MOV      vMdioData,A
001EC0 A3                INC      DPTR
001EC1 E0                MOVX     A,@DPTR
001EC2 F525              MOV      vMdioData+01H,A
  690: 
  691:         /* create MDIO frame: Address */
  692:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
001EC4 AF04              MOV      R7,AR4
001EC6 AD06              MOV      R5,AR6
001EC8 AB38              MOV      R3,vRegAddr+01H
001ECA AA37              MOV      R2,vRegAddr
001ECC D192              ACALL    _drv_mdiom_CreateAddrFrame
  693: 
  694:         /* lock globally interrupt */
  695:         bIntState = DRV_INT_LockGlobalInterrupt();
001ECE 30AF05            JNB      EA,?C2519?DRV_MDIOM
001ED1 C2AF              CLR      EA
001ED3 D3                SETB     C
001ED4 8001              SJMP     ?C2520?DRV_MDIOM
001ED6         ?C2519?DRV_MDIOM:
001ED6 C3                CLR      C
001ED7         ?C2520?DRV_MDIOM:
001ED7 9238              MOV      bIntState,C
  696: 
  697:         /* transmit frame: Address */
  698:         drv_mdiom_TxAddrFrame();
001ED9 D12A              ACALL    drv_mdiom_TxAddrFrame
  699: 
  700:         /* create MDIO frame: Write */
  701:         drv_mdiom_SetOperationCode(0, 1);
001EDB C20D              CLR      bMdioOperationCode1
001EDD D20C              SETB     bMdioOperationCode0
  702: 
  703:         /* transmit frame: Write */
  704:         drv_mdiom_TxDataFrame();
001EDF D1FC              ACALL    drv_mdiom_TxDataFrame
  705: 
  706:         /* unlock globally interrupt */
  707:         DRV_INT_UnlockGlobalInterrupt(bIntState);
001EE1 A238              MOV      C,bIntState
001EE3 92AF              MOV      EA,C
  708:     }
001EE5 0538              INC      vRegAddr+01H
001EE7 E538              MOV      A,vRegAddr+01H
001EE9 7002              JNZ      ?C2546?DRV_MDIOM
001EEB 0537              INC      vRegAddr
001EED         ?C2546?DRV_MDIOM:
001EED 7402              MOV      A,#02H
001EEF 253C              ADD      A,pDataBuf+01H
001EF1 F53C              MOV      pDataBuf+01H,A
001EF3 E4                CLR      A
001EF4 353B              ADDC     A,pDataBuf
001EF6 F53B              MOV      pDataBuf,A
001EF8 80B0              SJMP     ?C2513?DRV_MDIOM
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 39


001EFA         ?C2514?DRV_MDIOM:
  709: 
  710:     return TRUE;
001EFA D3                SETB     C
  711: }
001EFB 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  319: static void drv_mdiom_TxDataFrame(void)
  320: {
  321:     drv_mdiom_StartFrame();
  322:     drv_mdiom_TxPreamble();
001EFC 12288F            LCALL    ?L?COM0001
001EFF 1228DD            LCALL    ?L?COM0002
001F02 122936            LCALL    ?L?COM0003
  323:     drv_mdiom_TxStartFrame();
  324:     drv_mdiom_TxOperationCode();
  325:     drv_mdiom_TxPortAddress();
  326:     drv_mdiom_TxDeviceAddress();
  327:     drv_mdiom_TxTurnAround();
001F05 A201              MOV      C,bMdioTurnAround1
001F07 1229A6            LCALL    ?L?COM0004
001F0A A200              MOV      C,bMdioTurnAround0
001F0C 1229A6            LCALL    ?L?COM0004
  328:     drv_mdiom_TxData();
001F0F A227              MOV      C,bMdioData15
001F11 1229A6            LCALL    ?L?COM0004
001F14 A226              MOV      C,bMdioData14
001F16 1229A6            LCALL    ?L?COM0004
001F19 A225              MOV      C,bMdioData13
001F1B 1229A6            LCALL    ?L?COM0004
001F1E A224              MOV      C,bMdioData12
001F20 1229A6            LCALL    ?L?COM0004
001F23 A223              MOV      C,bMdioData11
001F25 1229A6            LCALL    ?L?COM0004
001F28 A222              MOV      C,bMdioData10
001F2A 1229A6            LCALL    ?L?COM0004
001F2D A221              MOV      C,bMdioData9
001F2F 1229A6            LCALL    ?L?COM0004
001F32 A220              MOV      C,bMdioData8
001F34 1229A6            LCALL    ?L?COM0004
001F37 A22F              MOV      C,bMdioData7
001F39 1229A6            LCALL    ?L?COM0004
001F3C A22E              MOV      C,bMdioData6
001F3E 1229A6            LCALL    ?L?COM0004
001F41 A22D              MOV      C,bMdioData5
001F43 1229A6            LCALL    ?L?COM0004
001F46 A22C              MOV      C,bMdioData4
001F48 1229A6            LCALL    ?L?COM0004
001F4B A22B              MOV      C,bMdioData3
001F4D 1229A6            LCALL    ?L?COM0004
001F50 A22A              MOV      C,bMdioData2
001F52 1229A6            LCALL    ?L?COM0004
001F55 A229              MOV      C,bMdioData1
001F57 1229A6            LCALL    ?L?COM0004
001F5A A228              MOV      C,bMdioData0
001F5C 1229A6            LCALL    ?L?COM0004
001F5F 00                NOP      
001F60 00                NOP      
  329:     drv_mdiom_StopFrame();
001F61 022B30            LJMP     ?L?COM0020
  330: }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 40


----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   48: UINT16 PKT_MDIOM_Read(void)
   49: {
   50:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   51: 
001F64 1229FF            LCALL    ?L?COM000B
001F67 B1E0              ACALL    _DRV_MDIOM_Read
001F69 7E01              MOV      R6,#01H
001F6B 4002              JC       ?C0007?PKT_MDIOM
   52:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   53:                         pPayload->vDevAddr,
   54:                         pPayload->vOffset,
   55:                         pPayload->vDataCount,
   56:                         pPayload->aData))
   57:     {
   58:         return PKT_REPLY_Fail_MdioNoAck;
001F6D 7E03              MOV      R6,#03H
   59:     }
001F6F         ?C0007?PKT_MDIOM:
   60: 
   61:     return PKT_REPLY_Done_ExecNoError;
001F6F 7F40              MOV      R7,#040H
   62: }
001F71 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   64: UINT16 PKT_MDIOM_Write(void)
   65: {
   66:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   67: 
001F72 1229FF            LCALL    ?L?COM000B
001F75 D1A2              ACALL    _DRV_MDIOM_Write
001F77 7E01              MOV      R6,#01H
001F79 4002              JC       ?C0009?PKT_MDIOM
   68:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   69:                          pPayload->vDevAddr,
   70:                          pPayload->vOffset,
   71:                          pPayload->vDataCount,
   72:                          pPayload->aData))
   73:     {
   74:         return PKT_REPLY_Fail_MdioNoAck;
001F7B 7E03              MOV      R6,#03H
   75:     }
001F7D         ?C0009?PKT_MDIOM:
   76: 
   77:     return PKT_REPLY_Done_ExecNoError;
001F7D 7F40              MOV      R7,#040H
   78: }
001F7F 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   27: UINT16 PKT_C2M_Inspect(void)
   28: {
   29:     PKT_SetPayloadSize(0x00);
   30:     return PKT_REPLY_Done_ExecNoError;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 41


001F80 122B28            LCALL    ?L?COM001F
   31: }
001F83 7E01              MOV      R6,#01H
001F85 7F40              MOV      R7,#040H
   32: 
001F87 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   33: UINT16 PKT_C2M_Reset(void)
   34: {
   35:     PKT_SetPayloadSize(0x00);
   36:     return (DRV_C2M_Reset() ?
001F88 122B28            LCALL    ?L?COM001F
   37:             PKT_REPLY_Done_ExecNoError :
   38:             PKT_REPLY_Fail_ExecErrorCode0);
001F8B 1217DF            LCALL    DRV_C2M_Reset
001F8E 7E03              MOV      R6,#03H
001F90 5002              JNC      ?C0008?PKT_C2M
001F92 7E01              MOV      R6,#01H
001F94         ?C0008?PKT_C2M:
001F94 7F40              MOV      R7,#040H
   39: }
001F96 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   41: UINT16 PKT_C2M_Probe(void)
   42: {
   43:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   44:     PKT_SetPayloadSize(sizeof(UINT32));
001F97 1222BF            LCALL    DRV_C2M_Probe
001F9A 90000C            MOV      DPTR,#vFrame+0CH
001F9D 1208C2            LCALL    ?C?LSTXDATA
   45:     return PKT_REPLY_Done_ExecNoError;
001FA0 90000A            MOV      DPTR,#vFrame+0AH
001FA3 E4                CLR      A
001FA4 F0                MOVX     @DPTR,A
001FA5 A3                INC      DPTR
001FA6 7404              MOV      A,#04H
001FA8 F0                MOVX     @DPTR,A
   46: }
001FA9 7E01              MOV      R6,#01H
001FAB 7F40              MOV      R7,#040H
   47: 
001FAD 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   48: UINT16 PKT_C2M_FlashChipErase(void)
   49: {
   50:     PKT_SetPayloadSize(0x00);
   51:     return (DRV_C2M_ChipErase() ?
001FAE 122B28            LCALL    ?L?COM001F
   52:             PKT_REPLY_Done_ExecNoError :
   53:             PKT_REPLY_Fail_ExecErrorCode0);
001FB1 122446            LCALL    DRV_C2M_ChipErase
001FB4 7E03              MOV      R6,#03H
001FB6 5002              JNC      ?C0018?PKT_C2M
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 42


001FB8 7E01              MOV      R6,#01H
001FBA         ?C0018?PKT_C2M:
001FBA 7F40              MOV      R7,#040H
   54: }
001FBC 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   56: UINT16 PKT_C2M_FlashPageErase(void)
   57: {
   58:     if (PKT_GetPayloadSize() != 1)
   59:     {
001FBD 90000A            MOV      DPTR,#vFrame+0AH
001FC0 E0                MOVX     A,@DPTR
001FC1 7004              JNZ      ?C0043?PKT_C2M
001FC3 A3                INC      DPTR
001FC4 E0                MOVX     A,@DPTR
001FC5 6401              XRL      A,#01H
001FC7         ?C0043?PKT_C2M:
001FC7 6005              JZ       ?C0021?PKT_C2M
   60:         return PKT_REPLY_Fail_InvalidLen;
   61:     }
001FC9 7E03              MOV      R6,#03H
001FCB 7F04              MOV      R7,#04H
001FCD 22                RET      
   62: 
001FCE         ?C0021?PKT_C2M:
   63:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   64:             PKT_REPLY_Done_ExecNoError :
   65:             PKT_REPLY_Fail_ExecErrorCode0);
001FCE 90000C            MOV      DPTR,#vFrame+0CH
001FD1 E0                MOVX     A,@DPTR
001FD2 FF                MOV      R7,A
001FD3 12174A            LCALL    _DRV_C2M_PageErase
001FD6 7E03              MOV      R6,#03H
001FD8 5002              JNC      ?C0023?PKT_C2M
001FDA 7E01              MOV      R6,#01H
001FDC         ?C0023?PKT_C2M:
001FDC 7F40              MOV      R7,#040H
   66: }
001FDE 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  363: static UINT8 drv_c2m_ReadData(void)
  364: {
  365:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  366:     return c2m_ReadDR();
001FDF E4                CLR      A
001FE0 754810            MOV      _timeout+03H,#010H
001FE3 754727            MOV      _timeout+02H,#027H
001FE6 F546              MOV      _timeout+01H,A
001FE8 F545              MOV      _timeout,A
001FEA         ?C0794?DRV_C2M:
001FEA 1220E0            LCALL    c2m_ReadAR
001FED EF                MOV      A,R7
001FEE 20E00C            JB       ACC.0,?C0792?DRV_C2M
001FF1 7845              MOV      R0,#LOW _timeout
001FF3 1227E0            LCALL    ?L?COM000A
001FF6 6005              JZ       ?C0792?DRV_C2M
001FF8 121726            LCALL    ?L?COM0008
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 43


001FFB 80ED              SJMP     ?C0794?DRV_C2M
001FFD         ?C0792?DRV_C2M:
  367: }
001FFD 0221FA            LJMP     c2m_ReadDR
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   68: UINT16 PKT_C2M_FlashRead(void)
   69: {
   70:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   71:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002000 122A56            LCALL    ?L?COM0010
   72:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   73:     UINT16           vLen  = pPayload->vDataLen;
   74: 
   75:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
002003 90000A            MOV      DPTR,#vFrame+0AH
002006 E0                MOVX     A,@DPTR
002007 7004              JNZ      ?C0044?PKT_C2M
002009 A3                INC      DPTR
00200A E0                MOVX     A,@DPTR
00200B 6406              XRL      A,#06H
00200D         ?C0044?PKT_C2M:
00200D 700B              JNZ      ?C0026?PKT_C2M
00200F D3                SETB     C
002010 E538              MOV      A,vLen+01H
002012 9432              SUBB     A,#032H
002014 E537              MOV      A,vLen
002016 9404              SUBB     A,#04H
002018 4005              JC       ?C0030?PKT_C2M
00201A         ?C0026?PKT_C2M:
   76:         || (vLen > sizeof(pPayload->aBuf)))
   77:     {
   78:         return PKT_REPLY_Fail_InvalidLen;
00201A 7E03              MOV      R6,#03H
00201C 7F04              MOV      R7,#04H
00201E 22                RET      
   79:     }
00201F         ?C0030?PKT_C2M:
   80: 
   81:     /* split too long read data buffer into pieces to read */
   82:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
00201F E538              MOV      A,vLen+01H
002021 2406              ADD      A,#06H
002023 90000B            MOV      DPTR,#vFrame+0BH
002026 F0                MOVX     @DPTR,A
002027 E4                CLR      A
002028 3537              ADDC     A,vLen
00202A 90000A            MOV      DPTR,#vFrame+0AH
00202D F0                MOVX     @DPTR,A
00202E         ?C0031?PKT_C2M:
   83:     while (vLen != 0)
00202E E538              MOV      A,vLen+01H
002030 4537              ORL      A,vLen
002032 602D              JZ       ?C0032?PKT_C2M
   84:     {
   85:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
002034 C3                CLR      C
002035 E537              MOV      A,vLen
002037 9401              SUBB     A,#01H
002039 5006              JNC      ?C0033?PKT_C2M
00203B AE37              MOV      R6,vLen
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 44


00203D AF38              MOV      R7,vLen+01H
00203F 8004              SJMP     ?C0034?PKT_C2M
002041         ?C0033?PKT_C2M:
002041 7E01              MOV      R6,#01H
002043 7F00              MOV      R7,#00H
002045         ?C0034?PKT_C2M:
002045 8E39              MOV      vReadLen,R6
002047 8F3A              MOV      vReadLen+01H,R7
   86: 
   87:       #if DRV_WATCHDOG_SUPPORT
   88:         DRV_WATCHDOG_Kick();
   89:       #endif
   90: 
   91:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
002049 AB3A              MOV      R3,vReadLen+01H
00204B AD36              MOV      R5,vAddr+01H
00204D AC35              MOV      R4,vAddr
00204F AF34              MOV      R7,pBuf+01H
002051 AE33              MOV      R6,pBuf
002053 1166              ACALL    _DRV_C2M_FlashRead
002055 4005              JC       ?C0035?PKT_C2M
   92:         {
   93:             return PKT_REPLY_Fail_ExecErrorCode0;
002057 7E03              MOV      R6,#03H
002059 7F40              MOV      R7,#040H
00205B 22                RET      
   94:         }
00205C         ?C0035?PKT_C2M:
   95: 
   96:         pBuf  += vReadLen;
00205C 122A91            LCALL    ?L?COM0014
   97:         vAddr += vReadLen;
   98:         vLen  -= vReadLen;
   99:     }
00205F 80CD              SJMP     ?C0031?PKT_C2M
002061         ?C0032?PKT_C2M:
  100: 
  101:     return PKT_REPLY_Done_ExecNoError;
002061 7E01              MOV      R6,#01H
002063 7F40              MOV      R7,#040H
  102: }
002065 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  587: BOOL DRV_C2M_FlashRead
  588: (
;---- Variable 'vCount' assigned to Register 'R3' ----
002066 122BBC            LCALL    ?L?COM0030
002069 7005              JNZ      ?C0936?DRV_C2M
00206B 7E01              MOV      R6,#01H
00206D FF                MOV      R7,A
00206E 8004              SJMP     ?C0937?DRV_C2M
002070         ?C0936?DRV_C2M:
002070 EB                MOV      A,R3
002071 FF                MOV      R7,A
002072 7E00              MOV      R6,#00H
002074         ?C0937?DRV_C2M:
002074 8E3F              MOV      vLen,R6
002076 8F40              MOV      vLen+01H,R7
  589:     OUT UINT8 SEG_XDATA *pBuf,
  590:     IN  UINT16           vAddr,
  591:     IN  UINT8            vCount
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 45


  592: )
  593: {
  594:     UINT16  vLen = ((vCount==0)?256:vCount);
  595:     BOOL    bDone = FALSE;
002078 C238              CLR      bDone
  596: 
  597:     if (!drv_c2m_IsReady())
00207A 309760            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
00207D 30A05D            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  598:     {
  599:         /* C2 bus is not ready */
  600:         goto _exit;
  601:     }
002080         ?C0938?DRV_C2M:
  602: 
  603:     c2m_WriteAR(vFPDAT);
002080 AF14              MOV      R7,vFPDAT
002082 715C              ACALL    _c2m_WriteAR
  604:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
002084 7F06              MOV      R7,#06H
002086 122A47            LCALL    ?L?COM000E
002089         ?C0947?DRV_C2M:
002089 11E0              ACALL    c2m_ReadAR
00208B EF                MOV      A,R7
00208C 20E009            JB       ACC.0,?C0945?DRV_C2M
00208F F1DE              ACALL    ?L?COM0009
002091 6005              JZ       ?C0945?DRV_C2M
002093 121726            LCALL    ?L?COM0008
002096 80F1              SJMP     ?C0947?DRV_C2M
002098         ?C0945?DRV_C2M:
002098 F1EA              ACALL    ?L?COM001D
00209A 7041              JNZ      _exit?DRV_C2M
00209C         ?C0949?DRV_C2M:
00209C         ?C0942?DRV_C2M:
  605:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  606:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
00209C E53D              MOV      A,vAddr
00209E FF                MOV      R7,A
00209F 1217BD            LCALL    _drv_c2m_WriteData
  607:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
0020A2 AF3E              MOV      R7,vAddr+01H
0020A4 122A42            LCALL    ?L?COM000D
0020A7         ?C0956?DRV_C2M:
0020A7 11E0              ACALL    c2m_ReadAR
0020A9 EF                MOV      A,R7
0020AA 20E009            JB       ACC.0,?C0954?DRV_C2M
0020AD F1DE              ACALL    ?L?COM0009
0020AF 6005              JZ       ?C0954?DRV_C2M
0020B1 121726            LCALL    ?L?COM0008
0020B4 80F1              SJMP     ?C0956?DRV_C2M
0020B6         ?C0954?DRV_C2M:
0020B6 31FA              ACALL    c2m_ReadDR
0020B8 BF0D22            CJNE     R7,#0DH,_exit?DRV_C2M
0020BB         ?C0958?DRV_C2M:
0020BB         ?C0959?DRV_C2M:
  608:     drv_c2m_WriteData(vCount);      /* read length    */
  609:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  610:     while (vLen--)
0020BB 122B39            LCALL    ?L?COM0021
0020BE 7002              JNZ      ?C1016?DRV_C2M
0020C0 153F              DEC      vLen
0020C2         ?C1016?DRV_C2M:
0020C2 4E                ORL      A,R6
0020C3 6016              JZ       ?C0960?DRV_C2M
  611:     {
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 46


  612:         /* read flash data into buffer */
  613:         *pBuf++ = drv_c2m_ReadData();
0020C5 121FDF            LCALL    drv_c2m_ReadData
0020C8 053C              INC      pBuf+01H
0020CA E53C              MOV      A,pBuf+01H
0020CC AC3B              MOV      R4,pBuf
0020CE 7002              JNZ      ?C1017?DRV_C2M
0020D0 053B              INC      pBuf
0020D2         ?C1017?DRV_C2M:
0020D2 14                DEC      A
0020D3 F582              MOV      DPL,A
0020D5 8C83              MOV      DPH,R4
0020D7 EF                MOV      A,R7
0020D8 F0                MOVX     @DPTR,A
  614:     }
0020D9 80E0              SJMP     ?C0959?DRV_C2M
0020DB         ?C0960?DRV_C2M:
  615:     bDone = TRUE;
0020DB D238              SETB     bDone
  616: 
  617: _exit:
0020DD         _exit:
  618:     return bDone;
0020DD A238              MOV      C,bDone
  619: }
0020DF 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  204: static UINT8 c2m_ReadAR(void)
  205: {
  206:     BOOL    bIntState;
  207: 
  208:     c2m_SetIns(0x2);    /* instruction: read address */
0020E0 C243              CLR      bIns0
0020E2 D244              SETB     bIns1
  209: 
  210:     /* lock globally interrupt */
  211:     bIntState = DRV_INT_LockGlobalInterrupt();
0020E4 30AF05            JNB      EA,?C0190?DRV_C2M
0020E7 C2AF              CLR      EA
0020E9 D3                SETB     C
0020EA 8001              SJMP     ?C0191?DRV_C2M
0020EC         ?C0190?DRV_C2M:
0020EC C3                CLR      C
0020ED         ?C0191?DRV_C2M:
0020ED 122A82            LCALL    ?L?COM0012
0020F0 00                NOP      
0020F1 00                NOP      
0020F2 00                NOP      
0020F3 00                NOP      
0020F4 122ADF            LCALL    ?L?COM001A
0020F7 00                NOP      
0020F8 00                NOP      
0020F9 00                NOP      
0020FA 00                NOP      
0020FB 1229F6            LCALL    ?L?COM0022
0020FE 00                NOP      
0020FF 00                NOP      
002100 00                NOP      
002101 00                NOP      
002102 122B6A            LCALL    ?L?COM0029
002105 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 47


002106 D297              SETB     IO_DUT_C2M_SCL
002108 00                NOP      
002109 00                NOP      
  212: 
  213:     c2m_TxStart();      /* tx frame start */
  214:     c2m_TxIns();        /* tx instruction */
  215:     c2m_TxTurnAround(); /* tx turn-around */
  216:     c2m_RxByte();       /* rx address */
00210A 00                NOP      
00210B 00                NOP      
00210C C297              CLR      IO_DUT_C2M_SCL
00210E 00                NOP      
00210F 00                NOP      
002110 A2A0              MOV      C,IO_DUT_C2M_SDA
002112 D297              SETB     IO_DUT_C2M_SCL
002114 9230              MOV      bC2Bit0,C
002116 00                NOP      
002117 00                NOP      
002118 C297              CLR      IO_DUT_C2M_SCL
00211A 00                NOP      
00211B 00                NOP      
00211C A2A0              MOV      C,IO_DUT_C2M_SDA
00211E D297              SETB     IO_DUT_C2M_SCL
002120 9231              MOV      bC2Bit1,C
002122 00                NOP      
002123 00                NOP      
002124 C297              CLR      IO_DUT_C2M_SCL
002126 00                NOP      
002127 00                NOP      
002128 A2A0              MOV      C,IO_DUT_C2M_SDA
00212A D297              SETB     IO_DUT_C2M_SCL
00212C 9232              MOV      bC2Bit2,C
00212E 00                NOP      
00212F 00                NOP      
002130 C297              CLR      IO_DUT_C2M_SCL
002132 00                NOP      
002133 00                NOP      
002134 A2A0              MOV      C,IO_DUT_C2M_SDA
002136 D297              SETB     IO_DUT_C2M_SCL
002138 9233              MOV      bC2Bit3,C
00213A 00                NOP      
00213B 00                NOP      
00213C C297              CLR      IO_DUT_C2M_SCL
00213E 00                NOP      
00213F 00                NOP      
002140 A2A0              MOV      C,IO_DUT_C2M_SDA
002142 D297              SETB     IO_DUT_C2M_SCL
002144 9234              MOV      bC2Bit4,C
002146 00                NOP      
002147 00                NOP      
002148 C297              CLR      IO_DUT_C2M_SCL
00214A 00                NOP      
00214B 00                NOP      
00214C A2A0              MOV      C,IO_DUT_C2M_SDA
00214E D297              SETB     IO_DUT_C2M_SCL
002150 9235              MOV      bC2Bit5,C
002152 00                NOP      
002153 00                NOP      
002154 C297              CLR      IO_DUT_C2M_SCL
002156 00                NOP      
002157 00                NOP      
002158 A2A0              MOV      C,IO_DUT_C2M_SDA
00215A D297              SETB     IO_DUT_C2M_SCL
00215C 9236              MOV      bC2Bit6,C
00215E 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 48


00215F 00                NOP      
002160 C297              CLR      IO_DUT_C2M_SCL
002162 00                NOP      
002163 00                NOP      
002164 122ACE            LCALL    ?L?COM0017
  217:     c2m_RxStop();       /* rx frame stop */
  218: 
  219:     /* unlock globally interrupt */
  220:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  221: 
  222:     return c2m_GetAddr();
002167 AF26              MOV      R7,vC2Data
  223: }
002169 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  639: BOOL DRV_C2M_FlashWrite
  640: (
;---- Variable 'vCount' assigned to Register 'R3' ----
00216A 122BBC            LCALL    ?L?COM0030
00216D 7005              JNZ      ?C0962?DRV_C2M
00216F 7E01              MOV      R6,#01H
002171 FF                MOV      R7,A
002172 8004              SJMP     ?C0963?DRV_C2M
002174         ?C0962?DRV_C2M:
002174 EB                MOV      A,R3
002175 FF                MOV      R7,A
002176 7E00              MOV      R6,#00H
002178         ?C0963?DRV_C2M:
002178 8E3F              MOV      vLen,R6
00217A 8F40              MOV      vLen+01H,R7
  641:     IN       UINT16           vAddr,
  642:     IN const UINT8 SEG_XDATA *pBuf,
  643:     IN       UINT8            vCount
  644: )
  645: {
  646:     UINT16  vLen = ((vCount==0)?256:vCount);
  647:     BOOL    bDone = FALSE;
00217C C238              CLR      bDone
  648: 
  649:     if (!drv_c2m_IsReady())
00217E 309776            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
002181 30A073            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  650:     {
  651:         /* C2 bus is not ready */
  652:         goto _exit;
  653:     }
002184         ?C0964?DRV_C2M:
  654: 
  655:     c2m_WriteAR(vFPDAT);
002184 AF14              MOV      R7,vFPDAT
002186 715C              ACALL    _c2m_WriteAR
  656:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
002188 7F07              MOV      R7,#07H
00218A 122A47            LCALL    ?L?COM000E
00218D         ?C0973?DRV_C2M:
00218D 11E0              ACALL    c2m_ReadAR
00218F EF                MOV      A,R7
002190 20E009            JB       ACC.0,?C0971?DRV_C2M
002193 F1DE              ACALL    ?L?COM0009
002195 6005              JZ       ?C0971?DRV_C2M
002197 121726            LCALL    ?L?COM0008
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 49


00219A 80F1              SJMP     ?C0973?DRV_C2M
00219C         ?C0971?DRV_C2M:
00219C F1EA              ACALL    ?L?COM001D
00219E 7057              JNZ      _exit?DRV_C2M
0021A0         ?C0975?DRV_C2M:
0021A0         ?C0968?DRV_C2M:
  657:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  658:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
0021A0 E53B              MOV      A,vAddr
0021A2 FF                MOV      R7,A
0021A3 1217BD            LCALL    _drv_c2m_WriteData
  659:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
0021A6 AF3C              MOV      R7,vAddr+01H
0021A8 122A42            LCALL    ?L?COM000D
0021AB         ?C0982?DRV_C2M:
0021AB 11E0              ACALL    c2m_ReadAR
0021AD EF                MOV      A,R7
0021AE 20E009            JB       ACC.0,?C0980?DRV_C2M
0021B1 F1DE              ACALL    ?L?COM0009
0021B3 6005              JZ       ?C0980?DRV_C2M
0021B5 121726            LCALL    ?L?COM0008
0021B8 80F1              SJMP     ?C0982?DRV_C2M
0021BA         ?C0980?DRV_C2M:
0021BA F1EA              ACALL    ?L?COM001D
0021BC 7039              JNZ      _exit?DRV_C2M
0021BE         ?C0984?DRV_C2M:
0021BE         ?C0985?DRV_C2M:
  660:     drv_c2m_WriteData(vCount);      /* write length   */
  661:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  662:     while (vLen--)
0021BE 122B39            LCALL    ?L?COM0021
0021C1 7002              JNZ      ?C1018?DRV_C2M
0021C3 153F              DEC      vLen
0021C5         ?C1018?DRV_C2M:
0021C5 4E                ORL      A,R6
0021C6 6016              JZ       ?C0992?DRV_C2M
  663:     {
  664:         /* write data into flash */
  665:         drv_c2m_WriteData(*pBuf++);
0021C8 053E              INC      pBuf+01H
0021CA E53E              MOV      A,pBuf+01H
0021CC AE3D              MOV      R6,pBuf
0021CE 7002              JNZ      ?C1019?DRV_C2M
0021D0 053D              INC      pBuf
0021D2         ?C1019?DRV_C2M:
0021D2 14                DEC      A
0021D3 F582              MOV      DPL,A
0021D5 8E83              MOV      DPH,R6
0021D7 E0                MOVX     A,@DPTR
0021D8 FF                MOV      R7,A
0021D9 1217BD            LCALL    _drv_c2m_WriteData
  666:     }
0021DC 80E0              SJMP     ?C0985?DRV_C2M
  667:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
0021DE         ?C0992?DRV_C2M:
0021DE 122A4A            LCALL    ?L?COM000F
0021E1         ?C0993?DRV_C2M:
0021E1 11E0              ACALL    c2m_ReadAR
0021E3 EF                MOV      A,R7
0021E4 20E009            JB       ACC.0,?C0991?DRV_C2M
0021E7 F1DE              ACALL    ?L?COM0009
0021E9 6005              JZ       ?C0991?DRV_C2M
0021EB 121726            LCALL    ?L?COM0008
0021EE 80F1              SJMP     ?C0993?DRV_C2M
0021F0         ?C0991?DRV_C2M:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 50


0021F0 31FA              ACALL    c2m_ReadDR
0021F2 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
0021F5         ?C0995?DRV_C2M:
0021F5         ?C0988?DRV_C2M:
  668:     bDone = TRUE;
0021F5 D238              SETB     bDone
  669: 
  670: _exit:
0021F7         _exit:
  671:     return bDone;
0021F7 A238              MOV      C,bDone
  672: }
0021F9 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  250: static UINT8 c2m_ReadDR(void)
  251: {
  252:     BOOL    bIntState;
  253: 
  254:     c2m_SetIns(0x0);    /* instruction: read data */
0021FA C243              CLR      bIns0
0021FC C244              CLR      bIns1
  255:     c2m_SetLength(0x1); /* length: 1 byte */
0021FE C245              CLR      bLength0
002200 C246              CLR      bLength1
  256: 
  257:     /* lock globally interrupt */
  258:     bIntState = DRV_INT_LockGlobalInterrupt();
002202 30AF05            JNB      EA,?C0584?DRV_C2M
002205 C2AF              CLR      EA
002207 D3                SETB     C
002208 8001              SJMP     ?C0585?DRV_C2M
00220A         ?C0584?DRV_C2M:
00220A C3                CLR      C
00220B         ?C0585?DRV_C2M:
00220B 122A82            LCALL    ?L?COM0012
00220E 00                NOP      
00220F 00                NOP      
002210 00                NOP      
002211 00                NOP      
002212 122ADF            LCALL    ?L?COM001A
002215 00                NOP      
002216 00                NOP      
002217 00                NOP      
002218 00                NOP      
002219 1229F6            LCALL    ?L?COM0022
00221C 00                NOP      
00221D 00                NOP      
00221E 00                NOP      
00221F 00                NOP      
002220 D297              SETB     IO_DUT_C2M_SCL
  259: 
  260:     c2m_TxStart();      /* tx frame start */
  261:     c2m_TxIns();        /* tx instruction */
  262:     c2m_TxLength();     /* tx length */
002222 A245              MOV      C,bLength0
002224 92A0              MOV      IO_DUT_C2M_SDA,C
002226 C297              CLR      IO_DUT_C2M_SCL
002228 00                NOP      
002229 00                NOP      
00222A 00                NOP      
00222B 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 51


00222C D297              SETB     IO_DUT_C2M_SCL
00222E A246              MOV      C,bLength1
002230 92A0              MOV      IO_DUT_C2M_SDA,C
002232 C297              CLR      IO_DUT_C2M_SCL
002234 00                NOP      
002235 00                NOP      
002236 00                NOP      
002237 00                NOP      
002238 122B6A            LCALL    ?L?COM0029
00223B 00                NOP      
00223C D297              SETB     IO_DUT_C2M_SCL
00223E 00                NOP      
00223F 00                NOP      
  263:     c2m_TxTurnAround(); /* tx turn-around */
  264:     c2m_Wait();         /* wait for target device ready */
002240 754927            MOV      _timeout,#027H
002243 754A10            MOV      _timeout+01H,#010H
002246         ?C0687?DRV_C2M:
002246 00                NOP      
002247 00                NOP      
002248 C297              CLR      IO_DUT_C2M_SCL
00224A 00                NOP      
00224B 00                NOP      
00224C 121720            LCALL    ?L?COM0007
00224F 20300D            JB       bC2Bit0,?C0700?DRV_C2M
002252 E54A              MOV      A,_timeout+01H
002254 154A              DEC      _timeout+01H
002256 AE49              MOV      R6,_timeout
002258 7002              JNZ      ?C1014?DRV_C2M
00225A 1549              DEC      _timeout
00225C         ?C1014?DRV_C2M:
00225C 4E                ORL      A,R6
00225D 70E7              JNZ      ?C0687?DRV_C2M
  265:     c2m_RxByte();       /* rx data */
00225F         ?C0700?DRV_C2M:
00225F 00                NOP      
002260 00                NOP      
002261 C297              CLR      IO_DUT_C2M_SCL
002263 00                NOP      
002264 00                NOP      
002265 A2A0              MOV      C,IO_DUT_C2M_SDA
002267 D297              SETB     IO_DUT_C2M_SCL
002269 9230              MOV      bC2Bit0,C
00226B 00                NOP      
00226C 00                NOP      
00226D C297              CLR      IO_DUT_C2M_SCL
00226F 00                NOP      
002270 00                NOP      
002271 A2A0              MOV      C,IO_DUT_C2M_SDA
002273 D297              SETB     IO_DUT_C2M_SCL
002275 9231              MOV      bC2Bit1,C
002277 00                NOP      
002278 00                NOP      
002279 C297              CLR      IO_DUT_C2M_SCL
00227B 00                NOP      
00227C 00                NOP      
00227D A2A0              MOV      C,IO_DUT_C2M_SDA
00227F D297              SETB     IO_DUT_C2M_SCL
002281 9232              MOV      bC2Bit2,C
002283 00                NOP      
002284 00                NOP      
002285 C297              CLR      IO_DUT_C2M_SCL
002287 00                NOP      
002288 00                NOP      
002289 A2A0              MOV      C,IO_DUT_C2M_SDA
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 52


00228B D297              SETB     IO_DUT_C2M_SCL
00228D 9233              MOV      bC2Bit3,C
00228F 00                NOP      
002290 00                NOP      
002291 C297              CLR      IO_DUT_C2M_SCL
002293 00                NOP      
002294 00                NOP      
002295 A2A0              MOV      C,IO_DUT_C2M_SDA
002297 D297              SETB     IO_DUT_C2M_SCL
002299 9234              MOV      bC2Bit4,C
00229B 00                NOP      
00229C 00                NOP      
00229D C297              CLR      IO_DUT_C2M_SCL
00229F 00                NOP      
0022A0 00                NOP      
0022A1 A2A0              MOV      C,IO_DUT_C2M_SDA
0022A3 D297              SETB     IO_DUT_C2M_SCL
0022A5 9235              MOV      bC2Bit5,C
0022A7 00                NOP      
0022A8 00                NOP      
0022A9 C297              CLR      IO_DUT_C2M_SCL
0022AB 00                NOP      
0022AC 00                NOP      
0022AD A2A0              MOV      C,IO_DUT_C2M_SDA
0022AF D297              SETB     IO_DUT_C2M_SCL
0022B1 9236              MOV      bC2Bit6,C
0022B3 00                NOP      
0022B4 00                NOP      
0022B5 C297              CLR      IO_DUT_C2M_SCL
0022B7 00                NOP      
0022B8 00                NOP      
0022B9 122ACE            LCALL    ?L?COM0017
  266:     c2m_RxStop();       /* rx frame stop */
  267: 
  268:     /* unlock globally interrupt */
  269:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  270: 
  271:     return c2m_GetData();
0022BC AF26              MOV      R7,vC2Data
  272: }
0022BE 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  443: UINT32 DRV_C2M_Probe(void)
  444: {
  445:     UU32    vDevice;
  446: 
  447:     vDevice.U32 = 0xFFFFFFFFUL;
0022BF 74FF              MOV      A,#0FFH
0022C1 F536              MOV      vDevice+03H,A
0022C3 F535              MOV      vDevice+02H,A
0022C5 F534              MOV      vDevice+01H,A
0022C7 F533              MOV      vDevice,A
  448: 
  449:     if (!drv_c2m_IsReady())
0022C9 209702            JB       IO_DUT_C2M_SCL,$ + 5H
0022CC 6153              AJMP     _exit?DRV_C2M
0022CE 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
0022D1 6153              AJMP     _exit?DRV_C2M
  450:     {
  451:         /* C2 bus is not ready */
  452:         goto _exit;
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 53


  453:     }
  454: 
  455:     drv_c2m_Init();
0022D3         ?C0852?DRV_C2M:
0022D3 122AFA            LCALL    ?L?COM001C
0022D6 7F02              MOV      R7,#02H
0022D8 715C              ACALL    _c2m_WriteAR
0022DA 91A6              ACALL    _c2m_WriteDR
0022DC 7F04              MOV      R7,#04H
0022DE 91A6              ACALL    _c2m_WriteDR
0022E0 7F01              MOV      R7,#01H
0022E2 91A6              ACALL    _c2m_WriteDR
0022E4 7F14              MOV      R7,#014H
0022E6 7E00              MOV      R6,#00H
0022E8 B170              ACALL    _DRV_CPU_DelayMs
  456: 
  457:     /* get C2 device id & revision id */
  458:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
0022EA E4                CLR      A
0022EB FF                MOV      R7,A
0022EC 91A2              ACALL    _drv_c2m_ReadSFR
0022EE 8F33              MOV      vDevice,R7
  459:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
0022F0 7F01              MOV      R7,#01H
0022F2 91A2              ACALL    _drv_c2m_ReadSFR
0022F4 8F34              MOV      vDevice+01H,R7
  460: 
  461:     if (vDevice.U8[0] == 0xFF)
0022F6 E533              MOV      A,vDevice
0022F8 F4                CPL      A
0022F9 6058              JZ       _exit?DRV_C2M
  462:     {
  463:         /* no device probed */
  464:         goto _exit;
  465:     }
0022FB         ?C0862?DRV_C2M:
  466: 
  467:     /* get C2 device derivative id */
  468:     vFPDAT = C2_FPDAT;
0022FB 7514B4            MOV      vFPDAT,#0B4H
  469:     c2m_WriteAR(vFPDAT);
0022FE 122BDB            LCALL    ?L?COM0035
002301 1217BD            LCALL    _drv_c2m_WriteData
  470:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  471:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
002304 121FDF            LCALL    drv_c2m_ReadData
002307 EF                MOV      A,R7
002308 640D              XRL      A,#0DH
00230A 601E              JZ       ?C0863?DRV_C2M
  472:     {
  473:         /* the FPDAT address may be incorrect, try another FPDAT address */
  474:         vFPDAT = C2_FPDAT2;
00230C 7514AD            MOV      vFPDAT,#0ADH
  475:         c2m_WriteAR(vFPDAT);
00230F 122BDB            LCALL    ?L?COM0035
002312 122B74            LCALL    ?L?COM002A
002315         ?C0870?DRV_C2M:
002315 11E0              ACALL    c2m_ReadAR
002317 EF                MOV      A,R7
002318 20E00B            JB       ACC.0,?C0868?DRV_C2M
00231B 7837              MOV      R0,#LOW _timeout
00231D F1E0              ACALL    ?L?COM000A
00231F 6005              JZ       ?C0868?DRV_C2M
002321 121726            LCALL    ?L?COM0008
002324 80EF              SJMP     ?C0870?DRV_C2M
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 54


002326         ?C0868?DRV_C2M:
002326 F1EA              ACALL    ?L?COM001D
002328 7029              JNZ      _exit?DRV_C2M
00232A         ?C0872?DRV_C2M:
  476:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  477:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  478:     }
00232A         ?C0863?DRV_C2M:
  479:     vDevice.U8[2] = drv_c2m_ReadData();
00232A 121FDF            LCALL    drv_c2m_ReadData
00232D 8F35              MOV      vDevice+02H,R7
  480: 
  481:     /* get C2 device derivative version */
  482:     c2m_WriteAR(vFPDAT);
00232F AF14              MOV      R7,vFPDAT
002331 715C              ACALL    _c2m_WriteAR
  483:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
002333 7F01              MOV      R7,#01H
002335 122B74            LCALL    ?L?COM002A
002338         ?C0879?DRV_C2M:
002338 11E0              ACALL    c2m_ReadAR
00233A EF                MOV      A,R7
00233B 20E00B            JB       ACC.0,?C0877?DRV_C2M
00233E 7837              MOV      R0,#LOW _timeout
002340 F1E0              ACALL    ?L?COM000A
002342 6005              JZ       ?C0877?DRV_C2M
002344 121726            LCALL    ?L?COM0008
002347 80EF              SJMP     ?C0879?DRV_C2M
002349         ?C0877?DRV_C2M:
002349 31FA              ACALL    c2m_ReadDR
00234B BF0D05            CJNE     R7,#0DH,_exit?DRV_C2M
00234E         ?C0881?DRV_C2M:
00234E         ?C0874?DRV_C2M:
  484:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  485:     vDevice.U8[3] = drv_c2m_ReadData();
00234E 121FDF            LCALL    drv_c2m_ReadData
002351 8F36              MOV      vDevice+03H,R7
  486: 
  487: _exit:
002353         _exit:
  488:     return vDevice.U32;
002353 AF36              MOV      R7,vDevice+03H
002355 AE35              MOV      R6,vDevice+02H
002357 AD34              MOV      R5,vDevice+01H
002359 AC33              MOV      R4,vDevice
  489: }
00235B 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  184: static void c2m_WriteAR(UINT8 vAddr)
  185: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  186:     BOOL    bIntState;
  187: 
  188:     c2m_SetIns(0x3);    /* instruction: write address */
00235C D243              SETB     bIns0
00235E D244              SETB     bIns1
  189:     c2m_SetAddr(vAddr);
002360 8F26              MOV      vC2Data,R7
  190: 
  191:     /* lock globally interrupt */
  192:     bIntState = DRV_INT_LockGlobalInterrupt();
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 55


002362 30AF05            JNB      EA,?C0007?DRV_C2M
002365 C2AF              CLR      EA
002367 D3                SETB     C
002368 8001              SJMP     ?C0008?DRV_C2M
00236A         ?C0007?DRV_C2M:
00236A C3                CLR      C
00236B         ?C0008?DRV_C2M:
00236B 122A82            LCALL    ?L?COM0012
00236E 00                NOP      
00236F 00                NOP      
002370 00                NOP      
002371 00                NOP      
002372 122ADF            LCALL    ?L?COM001A
002375 00                NOP      
002376 00                NOP      
002377 00                NOP      
002378 00                NOP      
002379 1229F6            LCALL    ?L?COM0022
00237C 00                NOP      
00237D 00                NOP      
00237E 00                NOP      
00237F 00                NOP      
002380 D297              SETB     IO_DUT_C2M_SCL
  193: 
  194:     c2m_TxStart();      /* tx frame start */
  195:     c2m_TxIns();        /* tx instruction */
  196:     c2m_TxByte();       /* tx address */
002382 A230              MOV      C,bC2Bit0
002384 92A0              MOV      IO_DUT_C2M_SDA,C
002386 C297              CLR      IO_DUT_C2M_SCL
002388 00                NOP      
002389 00                NOP      
00238A 00                NOP      
00238B 00                NOP      
00238C D297              SETB     IO_DUT_C2M_SCL
00238E A231              MOV      C,bC2Bit1
002390 92A0              MOV      IO_DUT_C2M_SDA,C
002392 C297              CLR      IO_DUT_C2M_SCL
002394 00                NOP      
002395 00                NOP      
002396 00                NOP      
002397 00                NOP      
002398 D297              SETB     IO_DUT_C2M_SCL
00239A A232              MOV      C,bC2Bit2
00239C 92A0              MOV      IO_DUT_C2M_SDA,C
00239E C297              CLR      IO_DUT_C2M_SCL
0023A0 00                NOP      
0023A1 00                NOP      
0023A2 00                NOP      
0023A3 00                NOP      
0023A4 D297              SETB     IO_DUT_C2M_SCL
0023A6 A233              MOV      C,bC2Bit3
0023A8 92A0              MOV      IO_DUT_C2M_SDA,C
0023AA C297              CLR      IO_DUT_C2M_SCL
0023AC 00                NOP      
0023AD 00                NOP      
0023AE 00                NOP      
0023AF 00                NOP      
0023B0 D297              SETB     IO_DUT_C2M_SCL
0023B2 A234              MOV      C,bC2Bit4
0023B4 92A0              MOV      IO_DUT_C2M_SDA,C
0023B6 C297              CLR      IO_DUT_C2M_SCL
0023B8 00                NOP      
0023B9 00                NOP      
0023BA 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 56


0023BB 00                NOP      
0023BC D297              SETB     IO_DUT_C2M_SCL
0023BE A235              MOV      C,bC2Bit5
0023C0 92A0              MOV      IO_DUT_C2M_SDA,C
0023C2 C297              CLR      IO_DUT_C2M_SCL
0023C4 00                NOP      
0023C5 00                NOP      
0023C6 00                NOP      
0023C7 00                NOP      
0023C8 D297              SETB     IO_DUT_C2M_SCL
0023CA A236              MOV      C,bC2Bit6
0023CC 92A0              MOV      IO_DUT_C2M_SDA,C
0023CE C297              CLR      IO_DUT_C2M_SCL
0023D0 00                NOP      
0023D1 00                NOP      
0023D2 00                NOP      
0023D3 00                NOP      
0023D4 D297              SETB     IO_DUT_C2M_SCL
0023D6 A237              MOV      C,bC2Bit7
0023D8 92A0              MOV      IO_DUT_C2M_SDA,C
0023DA C297              CLR      IO_DUT_C2M_SCL
0023DC 00                NOP      
0023DD 00                NOP      
0023DE 00                NOP      
0023DF 00                NOP      
0023E0 D297              SETB     IO_DUT_C2M_SCL
  197:     c2m_TxStop();       /* tx frame stop */
0023E2 D2A0              SETB     IO_DUT_C2M_SDA
0023E4 53A6FE            ANL      P2MDOUT,#0FEH
0023E7 122A8A            LCALL    ?L?COM0013
0023EA 00                NOP      
0023EB 00                NOP      
0023EC 00                NOP      
0023ED 00                NOP      
0023EE D297              SETB     IO_DUT_C2M_SCL
0023F0 022AD7            LJMP     ?L?COM0019
  198: 
  199:     /* unlock globally interrupt */
  200:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  104: UINT16 PKT_C2M_FlashWrite(void)
  105: {
  106:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  107:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
0023F3 122A56            LCALL    ?L?COM0010
  108:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  109:     UINT16           vLen  = pPayload->vDataLen;
  110: 
  111:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
0023F6 2406              ADD      A,#06H
0023F8 FF                MOV      R7,A
0023F9 E4                CLR      A
0023FA 3537              ADDC     A,vLen
0023FC FE                MOV      R6,A
0023FD 90000A            MOV      DPTR,#vFrame+0AH
002400 E0                MOVX     A,@DPTR
002401 6E                XRL      A,R6
002402 7003              JNZ      ?C0045?PKT_C2M
002404 A3                INC      DPTR
002405 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 57


002406 6F                XRL      A,R7
002407         ?C0045?PKT_C2M:
002407 6005              JZ       ?C0038?PKT_C2M
  112:     {
  113:         return PKT_REPLY_Fail_InvalidLen;
002409 7E03              MOV      R6,#03H
00240B 7F04              MOV      R7,#04H
00240D 22                RET      
  114:     }
00240E         ?C0038?PKT_C2M:
  115: 
  116:     /* split too long write data buffer into pieces to write */
  117:     while (vLen != 0)
00240E E538              MOV      A,vLen+01H
002410 4537              ORL      A,vLen
002412 602D              JZ       ?C0039?PKT_C2M
  118:     {
  119:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002414 C3                CLR      C
002415 E537              MOV      A,vLen
002417 9401              SUBB     A,#01H
002419 5006              JNC      ?C0040?PKT_C2M
00241B AE37              MOV      R6,vLen
00241D AF38              MOV      R7,vLen+01H
00241F 8004              SJMP     ?C0041?PKT_C2M
002421         ?C0040?PKT_C2M:
002421 7E01              MOV      R6,#01H
002423 7F00              MOV      R7,#00H
002425         ?C0041?PKT_C2M:
002425 8E39              MOV      vWriteLen,R6
002427 8F3A              MOV      vWriteLen+01H,R7
  120: 
  121:       #if DRV_WATCHDOG_SUPPORT
  122:         DRV_WATCHDOG_Kick();
  123:       #endif
  124: 
  125:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
002429 AB3A              MOV      R3,vWriteLen+01H
00242B AD34              MOV      R5,pBuf+01H
00242D AC33              MOV      R4,pBuf
00242F AF36              MOV      R7,vAddr+01H
002431 AE35              MOV      R6,vAddr
002433 316A              ACALL    _DRV_C2M_FlashWrite
002435 4005              JC       ?C0042?PKT_C2M
  126:         {
  127:             return PKT_REPLY_Fail_ExecErrorCode0;
002437 7E03              MOV      R6,#03H
002439 7F40              MOV      R7,#040H
00243B 22                RET      
  128:         }
00243C         ?C0042?PKT_C2M:
  129: 
  130:         pBuf  += vWriteLen;
00243C 122A91            LCALL    ?L?COM0014
  131:         vAddr += vWriteLen;
  132:         vLen  -= vWriteLen;
  133:     }
00243F 80CD              SJMP     ?C0038?PKT_C2M
002441         ?C0039?PKT_C2M:
  134: 
  135:     return PKT_REPLY_Done_ExecNoError;
002441 7E01              MOV      R6,#01H
002443 7F40              MOV      R7,#040H
  136: }
002445 22                RET      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 58


----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  507: BOOL DRV_C2M_ChipErase(void)
  508: {
  509:     BOOL    bDone = FALSE;
  510: 
002446 C238              CLR      bDone
  511:     if (!drv_c2m_IsReady())
002448 309754            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
00244B 30A051            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  512:     {
  513:         /* C2 bus is not ready */
  514:         goto _exit;
  515:     }
00244E         ?C0883?DRV_C2M:
  516: 
  517:     c2m_WriteAR(vFPDAT);
00244E AF14              MOV      R7,vFPDAT
002450 715C              ACALL    _c2m_WriteAR
  518:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
002452 7F03              MOV      R7,#03H
002454 122AEB            LCALL    ?L?COM001B
002457         ?C0892?DRV_C2M:
002457 11E0              ACALL    c2m_ReadAR
002459 EF                MOV      A,R7
00245A 20E00B            JB       ACC.0,?C0890?DRV_C2M
00245D 7833              MOV      R0,#LOW _timeout
00245F F1E0              ACALL    ?L?COM000A
002461 6005              JZ       ?C0890?DRV_C2M
002463 121726            LCALL    ?L?COM0008
002466 80EF              SJMP     ?C0892?DRV_C2M
002468         ?C0890?DRV_C2M:
002468 F1EA              ACALL    ?L?COM001D
00246A 7033              JNZ      _exit?DRV_C2M
00246C         ?C0894?DRV_C2M:
00246C         ?C0887?DRV_C2M:
  519:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  520:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
00246C 7FDE              MOV      R7,#0DEH
00246E 1217BD            LCALL    _drv_c2m_WriteData
  521:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
002471 7FAD              MOV      R7,#0ADH
002473 1217BD            LCALL    _drv_c2m_WriteData
  522:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
002476 7FA5              MOV      R7,#0A5H
002478 1217BD            LCALL    _drv_c2m_WriteData
  523:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
00247B 753600            MOV      _timeout+03H,#00H
00247E 75352D            MOV      _timeout+02H,#02DH
002481 753431            MOV      _timeout+01H,#031H
002484 753301            MOV      _timeout,#01H
002487         ?C0901?DRV_C2M:
002487 11E0              ACALL    c2m_ReadAR
002489 EF                MOV      A,R7
00248A 20E00B            JB       ACC.0,?C0899?DRV_C2M
00248D 7833              MOV      R0,#LOW _timeout
00248F F1E0              ACALL    ?L?COM000A
002491 6005              JZ       ?C0899?DRV_C2M
002493 121726            LCALL    ?L?COM0008
002496 80EF              SJMP     ?C0901?DRV_C2M
002498         ?C0899?DRV_C2M:
002498 31FA              ACALL    c2m_ReadDR
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 59


00249A BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
00249D         ?C0903?DRV_C2M:
00249D         ?C0896?DRV_C2M:
  524:     bDone = TRUE;
00249D D238              SETB     bDone
  525: 
  526: _exit:
00249F         _exit:
  527:     return bDone;
00249F A238              MOV      C,bDone
  528: }
0024A1 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  351: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  352: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  353:     c2m_WriteAR(vAddr);
  354:     return c2m_ReadDR();
0024A2 715C              ACALL    _c2m_WriteAR
  355: }
0024A4 21FA              AJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  226: static void c2m_WriteDR(UINT8 vData)
  227: {
;---- Variable 'vData' assigned to Register 'R7' ----
  228:     BOOL    bIntState;
  229: 
  230:     c2m_SetIns(0x1);    /* instruction: write data */
0024A6 D243              SETB     bIns0
0024A8 C244              CLR      bIns1
  231:     c2m_SetLength(0x1); /* length: 1 byte */
0024AA C245              CLR      bLength0
0024AC C246              CLR      bLength1
  232:     c2m_SetData(vData);
0024AE 8F26              MOV      vC2Data,R7
  233: 
  234:     /* lock globally interrupt */
  235:     bIntState = DRV_INT_LockGlobalInterrupt();
0024B0 30AF05            JNB      EA,?C0355?DRV_C2M
0024B3 C2AF              CLR      EA
0024B5 D3                SETB     C
0024B6 8001              SJMP     ?C0356?DRV_C2M
0024B8         ?C0355?DRV_C2M:
0024B8 C3                CLR      C
0024B9         ?C0356?DRV_C2M:
0024B9 122A82            LCALL    ?L?COM0012
0024BC 00                NOP      
0024BD 00                NOP      
0024BE 00                NOP      
0024BF 00                NOP      
0024C0 122ADF            LCALL    ?L?COM001A
0024C3 00                NOP      
0024C4 00                NOP      
0024C5 00                NOP      
0024C6 00                NOP      
0024C7 1229F6            LCALL    ?L?COM0022
0024CA 00                NOP      
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 60


0024CB 00                NOP      
0024CC 00                NOP      
0024CD 00                NOP      
0024CE D297              SETB     IO_DUT_C2M_SCL
  236: 
  237:     c2m_TxStart();      /* tx frame start */
  238:     c2m_TxIns();        /* tx instruction */
  239:     c2m_TxLength();     /* tx length */
0024D0 A245              MOV      C,bLength0
0024D2 92A0              MOV      IO_DUT_C2M_SDA,C
0024D4 C297              CLR      IO_DUT_C2M_SCL
0024D6 00                NOP      
0024D7 00                NOP      
0024D8 00                NOP      
0024D9 00                NOP      
0024DA D297              SETB     IO_DUT_C2M_SCL
0024DC A246              MOV      C,bLength1
0024DE 92A0              MOV      IO_DUT_C2M_SDA,C
0024E0 C297              CLR      IO_DUT_C2M_SCL
0024E2 00                NOP      
0024E3 00                NOP      
0024E4 00                NOP      
0024E5 00                NOP      
0024E6 D297              SETB     IO_DUT_C2M_SCL
  240:     c2m_TxByte();       /* tx address */
0024E8 A230              MOV      C,bC2Bit0
0024EA 92A0              MOV      IO_DUT_C2M_SDA,C
0024EC C297              CLR      IO_DUT_C2M_SCL
0024EE 00                NOP      
0024EF 00                NOP      
0024F0 00                NOP      
0024F1 00                NOP      
0024F2 D297              SETB     IO_DUT_C2M_SCL
0024F4 A231              MOV      C,bC2Bit1
0024F6 92A0              MOV      IO_DUT_C2M_SDA,C
0024F8 C297              CLR      IO_DUT_C2M_SCL
0024FA 00                NOP      
0024FB 00                NOP      
0024FC 00                NOP      
0024FD 00                NOP      
0024FE D297              SETB     IO_DUT_C2M_SCL
002500 A232              MOV      C,bC2Bit2
002502 92A0              MOV      IO_DUT_C2M_SDA,C
002504 C297              CLR      IO_DUT_C2M_SCL
002506 00                NOP      
002507 00                NOP      
002508 00                NOP      
002509 00                NOP      
00250A D297              SETB     IO_DUT_C2M_SCL
00250C A233              MOV      C,bC2Bit3
00250E 92A0              MOV      IO_DUT_C2M_SDA,C
002510 C297              CLR      IO_DUT_C2M_SCL
002512 00                NOP      
002513 00                NOP      
002514 00                NOP      
002515 00                NOP      
002516 D297              SETB     IO_DUT_C2M_SCL
002518 A234              MOV      C,bC2Bit4
00251A 92A0              MOV      IO_DUT_C2M_SDA,C
00251C C297              CLR      IO_DUT_C2M_SCL
00251E 00                NOP      
00251F 00                NOP      
002520 00                NOP      
002521 00                NOP      
002522 D297              SETB     IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 61


002524 A235              MOV      C,bC2Bit5
002526 92A0              MOV      IO_DUT_C2M_SDA,C
002528 C297              CLR      IO_DUT_C2M_SCL
00252A 00                NOP      
00252B 00                NOP      
00252C 00                NOP      
00252D 00                NOP      
00252E D297              SETB     IO_DUT_C2M_SCL
002530 A236              MOV      C,bC2Bit6
002532 92A0              MOV      IO_DUT_C2M_SDA,C
002534 C297              CLR      IO_DUT_C2M_SCL
002536 00                NOP      
002537 00                NOP      
002538 00                NOP      
002539 00                NOP      
00253A D297              SETB     IO_DUT_C2M_SCL
00253C A237              MOV      C,bC2Bit7
00253E 92A0              MOV      IO_DUT_C2M_SDA,C
002540 C297              CLR      IO_DUT_C2M_SCL
002542 00                NOP      
002543 00                NOP      
002544 00                NOP      
002545 00                NOP      
002546 122B6A            LCALL    ?L?COM0029
002549 00                NOP      
00254A D297              SETB     IO_DUT_C2M_SCL
00254C 00                NOP      
00254D 00                NOP      
  241:     c2m_TxTurnAround(); /* tx turn-around */
  242:     c2m_Wait();         /* wait for target device ready */
00254E 754727            MOV      _timeout,#027H
002551 754810            MOV      _timeout+01H,#010H
002554         ?C0557?DRV_C2M:
002554 00                NOP      
002555 00                NOP      
002556 C297              CLR      IO_DUT_C2M_SCL
002558 00                NOP      
002559 00                NOP      
00255A 121720            LCALL    ?L?COM0007
00255D 20300D            JB       bC2Bit0,?C0570?DRV_C2M
002560 E548              MOV      A,_timeout+01H
002562 1548              DEC      _timeout+01H
002564 AE47              MOV      R6,_timeout
002566 7002              JNZ      ?C1013?DRV_C2M
002568 1547              DEC      _timeout
00256A         ?C1013?DRV_C2M:
00256A 4E                ORL      A,R6
00256B 70E7              JNZ      ?C0557?DRV_C2M
  243:     c2m_RxStop();       /* rx frame stop */
00256D         ?C0570?DRV_C2M:
00256D 022AD4            LJMP     ?L?COM0018
  244: 
  245:     /* unlock globally interrupt */
  246:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   67: void DRV_CPU_DelayMs(UINT16 vMsec)
   68: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002570 8F82              MOV      DPL,R7
002572 8E83              MOV      DPH,R6
   69:   #if DRV_TIMER_SUPPORT
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 62


   70:     if (DRV_INT_IsGlobalInterruptEnable())
002574 30AF23            JNB      EA,?C0008?DRV_CPU
   71:     {
   72:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
002577 EF                MOV      A,R7
002578 250F              ADD      A,vTickCount+03H
00257A F53E              MOV      vStopTick+03H,A
00257C EE                MOV      A,R6
00257D 350E              ADDC     A,vTickCount+02H
00257F F53D              MOV      vStopTick+02H,A
002581 E4                CLR      A
002582 350D              ADDC     A,vTickCount+01H
002584 F53C              MOV      vStopTick+01H,A
002586 E4                CLR      A
002587 350C              ADDC     A,vTickCount
002589 F53B              MOV      vStopTick,A
00258B         ?C0005?DRV_CPU:
   73: 
   74:         while (DRV_TIMER_GetTick() < vStopTick)
00258B AF3E              MOV      R7,vStopTick+03H
00258D AE3D              MOV      R6,vStopTick+02H
00258F AD3C              MOV      R5,vStopTick+01H
002591 AC3B              MOV      R4,vStopTick
002593 122AC2            LCALL    ?L?COM0016
002596 5018              JNC      ?C0010?DRV_CPU
   75:         {
   76:           #if DRV_WATCHDOG_SUPPORT
   77:             DRV_WATCHDOG_Kick();
   78:           #endif
   79:         }
002598 80F1              SJMP     ?C0005?DRV_CPU
   80:     }
   81:     else
   82:   #endif
   83:     {
00259A         ?C0008?DRV_CPU:
   84:     	while (vMsec--)
00259A E582              MOV      A,DPL
00259C 1582              DEC      DPL
00259E AE83              MOV      R6,DPH
0025A0 7002              JNZ      ?C0012?DRV_CPU
0025A2 1583              DEC      DPH
0025A4         ?C0012?DRV_CPU:
0025A4 4E                ORL      A,R6
0025A5 6009              JZ       ?C0010?DRV_CPU
   85:     	{
   86:           #if DRV_WATCHDOG_SUPPORT
   87:     		DRV_WATCHDOG_Kick();
   88:           #endif
   89: 
   90:     		DRV_CPU_DelayUs(1000);
0025A7 7FE8              MOV      R7,#0E8H
0025A9 7E03              MOV      R6,#03H
0025AB 12172A            LCALL    _DRV_CPU_DelayUs
   91:     	}
0025AE 80EA              SJMP     ?C0008?DRV_CPU
   92:     }
   93: }
0025B0         ?C0010?DRV_CPU:
0025B0 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 63


   38: OS_HANDLE thread_IDLE_Entry(void)
   39: {
   40:     PT_BEGIN(&vTCB_Idle);
   41: 
0025B1 752B01            MOV      PT_YIELD_FLAG,#01H
0025B4         ?C0001?THREAD_IDLE:
0025B4 E510              MOV      A,vTCB_Idle
0025B6 7033              JNZ      ?C0002?THREAD_IDLE
0025B8 E511              MOV      A,vTCB_Idle+01H
0025BA 24CF              ADD      A,#0CFH
0025BC 601A              JZ       ?C0012?THREAD_IDLE
0025BE 2431              ADD      A,#031H
0025C0 7029              JNZ      ?C0002?THREAD_IDLE
   42:     for (;;)
0025C2         ?C0004?THREAD_IDLE:
   43:     {
   44:     	/* system entry */
   45:         CFG_Entry();
   46:         DRV_Entry();
   47:         APL_Entry();
0025C2 120042            LCALL    APL_Entry
   48: 
   49:         OS_SLEEP_MS(&vTCB_Idle, 50);
0025C5 E50F              MOV      A,vTickCount+03H
0025C7 2432              ADD      A,#032H
0025C9 122B83            LCALL    ?L?COM002B
0025CC 9004BC            MOV      DPTR,#vEndTick
0025CF 1208C2            LCALL    ?C?LSTXDATA
0025D2 751000            MOV      vTCB_Idle,#00H
0025D5 751131            MOV      vTCB_Idle+01H,#031H
0025D8         ?C0012?THREAD_IDLE:
0025D8 00                NOP      
0025D9 9004BC            MOV      DPTR,#vEndTick
0025DC 122AB7            LCALL    ?L?COM0015
0025DF 7F00              MOV      R7,#00H
0025E1 5002              JNC      ?C0014?THREAD_IDLE
0025E3 7F01              MOV      R7,#01H
0025E5         ?C0014?THREAD_IDLE:
0025E5         ?C0015?THREAD_IDLE:
0025E5 EF                MOV      A,R7
0025E6 60DA              JZ       ?C0004?THREAD_IDLE
0025E8 7F00              MOV      R7,#00H
0025EA 22                RET      
   50:     }
   51: 
   52:     PT_END(&vTCB_Idle);
0025EB         ?C0002?THREAD_IDLE:
0025EB E4                CLR      A
0025EC F52B              MOV      PT_YIELD_FLAG,A
0025EE F510              MOV      vTCB_Idle,A
0025F0 F511              MOV      vTCB_Idle+01H,A
0025F2 7F03              MOV      R7,#03H
   53: }
0025F4 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   70: void thread_IDLE_Init(void)
   71: {
   72:     PT_INIT(&vTCB_Idle);
   73: 
0025F5 E4                CLR      A
0025F6 F510              MOV      vTCB_Idle,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 64


0025F8 F511              MOV      vTCB_Idle+01H,A
   74: 	/* system init */
   75:     CFG_Init();
   76:     DRV_Init();
0025FA D143              ACALL    DRV_Init
   77:     APL_Init();
0025FC 0201DD            LJMP     APL_Init
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   37: OS_HANDLE thread_LED_Entry(void)
   38: {
   39:     PT_BEGIN(&vTCB_LED);
   40: 
0025FF 752B01            MOV      PT_YIELD_FLAG,#01H
002602         ?C0001?THREAD_LED:
002602 E512              MOV      A,vTCB_LED
002604 7033              JNZ      ?C0002?THREAD_LED
002606 E513              MOV      A,vTCB_LED+01H
002608 24C8              ADD      A,#0C8H
00260A 601A              JZ       ?C0015?THREAD_LED
00260C 2438              ADD      A,#038H
00260E 7029              JNZ      ?C0002?THREAD_LED
   41:     for (;;)
   42:     {
   43:       #if CFG_SUPPORT
   44:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
   45:         {
   46:             /* system running OK */
   47:             DRV_IO_Write(IO(IO_LED_STATUS_OUT), LOW);
   48:         }
   49:         else
   50:       #endif
   51:         {
002610         ?C0008?THREAD_LED:
   52:             /* system running abnormally */
   53:             DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
002610 63A008            XRL      P2,#08H
   54:         }
   55: 
   56:         OS_SLEEP_MS(&vTCB_LED, 100);
002613 E50F              MOV      A,vTickCount+03H
002615 2464              ADD      A,#064H
002617 122B83            LCALL    ?L?COM002B
00261A 9004C0            MOV      DPTR,#vEndTick
00261D 1208C2            LCALL    ?C?LSTXDATA
002620 751200            MOV      vTCB_LED,#00H
002623 751338            MOV      vTCB_LED+01H,#038H
002626         ?C0015?THREAD_LED:
002626 00                NOP      
002627 9004C0            MOV      DPTR,#vEndTick
00262A 122AB7            LCALL    ?L?COM0015
00262D 7F00              MOV      R7,#00H
00262F 5002              JNC      ?C0017?THREAD_LED
002631 7F01              MOV      R7,#01H
002633         ?C0017?THREAD_LED:
002633         ?C0018?THREAD_LED:
002633 EF                MOV      A,R7
002634 60DA              JZ       ?C0008?THREAD_LED
002636 7F00              MOV      R7,#00H
002638 22                RET      
   57:     }
   58: 
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 65


   59:     PT_END(&vTCB_LED);
002639         ?C0002?THREAD_LED:
002639 E4                CLR      A
00263A F52B              MOV      PT_YIELD_FLAG,A
00263C F512              MOV      vTCB_LED,A
00263E F513              MOV      vTCB_LED+01H,A
002640 7F03              MOV      R7,#03H
   60: }
002642 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   36: void DRV_Init(void)
   37: {
   38: 	DRV_VECTOR_Init();
   39: 
   40:   #if DRV_FLASH_SUPPORT
   41: 	DRV_FLASH_Init();
   42:   #endif
   43: 
   44:   #if DRV_RESET_SUPPORT
   45: 	DRV_RESET_Init();
   46:   #endif
   47: 
   48:   #if DRV_TIMER_SUPPORT
   49: 	DRV_TIMER_Init();
002643 438E10            ORL      CKCON,#010H
002646 E4                CLR      A
002647 F5C8              MOV      TMR2CN,A
002649 75CA40            MOV      TMR2RLL,#040H
00264C 75CC40            MOV      TMR2L,#040H
00264F 75CBA2            MOV      TMR2RLH,#0A2H
002652 75CDA2            MOV      TMR2H,#0A2H
002655 C2CF              CLR      TF2H
002657 D2CA              SETB     TR2
002659 C2BD              CLR      PT2
00265B D2AD              SETB     ET2
00265D F50F              MOV      vTickCount+03H,A
00265F F50E              MOV      vTickCount+02H,A
002661 F50D              MOV      vTickCount+01H,A
002663 F50C              MOV      vTickCount,A
   50:   #endif
   51: 
   52:   #if DRV_USB_SUPPORT
   53: 	DRV_USB_Init();
002665 D172              ACALL    DRV_USB_Init
;----                  JMP      DRV_C2M_Init
   54:   #endif
   55: 
   56:   #if DRV_VREF_SUPPORT
   57: 	DRV_VREF_Init();
   58:   #endif
   59: 
   60:   #if DRV_ADC_SUPPORT
   61: 	DRV_ADC_Init();
   62:   #endif
   63: 
   64:   #if DRV_I2CM_SUPPORT
   65: 	DRV_I2CM_Init();
   66:   #endif
   67: 
   68:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 66




----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  689: void DRV_C2M_Init(void)
  690: {
  691:     c2m_Init();
  692: }
002667 53A57F            ANL      P1MDOUT,#07FH
00266A 53A6FE            ANL      P2MDOUT,#0FEH
00266D D297              SETB     IO_DUT_C2M_SCL
00266F D2A0              SETB     IO_DUT_C2M_SDA
  693: 
002671 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   44: void DRV_USB_Init(void)
   45: {
   46:     static SEG_CODE UINT8 aVN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_VendorName;
   47:     static SEG_CODE UINT8 aPN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_PartNumber;
   48:     static SEG_CODE UINT8 aSN[DRV_USB_STRING_MAX_LEN+1] = DRV_USB_SerialNumber;
   49:     UINT8   vData;
   50:     UINT8   vLoop;
   51: 
   52:     /* init USB manufacture string */
   53:     aManufacturerStr[1] = 0x03;
002672 900445            MOV      DPTR,#aManufacturerStr+01H
002675 7403              MOV      A,#03H
002677 F0                MOVX     @DPTR,A
   54:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002678 7F02              MOV      R7,#02H
00267A         ?C0001?DRV_USB:
00267A EF                MOV      A,R7
00267B C3                CLR      C
00267C 9422              SUBB     A,#022H
00267E 502A              JNC      ?C0002?DRV_USB
   55:     {
   56:         vData = aVN[(vLoop>>1)-1];
002680 EF                MOV      A,R7
002681 C3                CLR      C
002682 13                RRC      A
002683 90153C            MOV      DPTR,#aVN-01H
002686 122BC6            LCALL    ?L?COM0032
002689 401F              JC       ?C0002?DRV_USB
00268B E52B              MOV      A,vData
00268D 947F              SUBB     A,#07FH
00268F 5019              JNC      ?C0002?DRV_USB
   57: 
   58:         if ((vData < 0x20) || (vData >= 0x7F))
   59:         {
   60:             break;
   61:         }
002691         ?C0004?DRV_USB:
   62: 
   63:         aManufacturerStr[vLoop+0] = vData;
002691 7444              MOV      A,#LOW aManufacturerStr
002693 2F                ADD      A,R7
002694 F582              MOV      DPL,A
002696 E4                CLR      A
002697 3404              ADDC     A,#HIGH aManufacturerStr
002699 F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 67


00269B E52B              MOV      A,vData
00269D F0                MOVX     @DPTR,A
   64:         aManufacturerStr[vLoop+1] = 0;
00269E 7445              MOV      A,#LOW aManufacturerStr+01H
0026A0 2F                ADD      A,R7
0026A1 F582              MOV      DPL,A
0026A3 E4                CLR      A
0026A4 3404              ADDC     A,#HIGH aManufacturerStr+01H
0026A6 F1F0              ACALL    ?L?COM0031
0026A8 80D0              SJMP     ?C0001?DRV_USB
0026AA         ?C0002?DRV_USB:
   65:     }
   66:     aManufacturerStr[0] = vLoop;
0026AA 900444            MOV      DPTR,#aManufacturerStr
0026AD EF                MOV      A,R7
0026AE F0                MOVX     @DPTR,A
   67: 
   68:     /* init USB product string */
   69:     aProductStr[1] = 0x03;
0026AF 900467            MOV      DPTR,#aProductStr+01H
0026B2 7403              MOV      A,#03H
0026B4 F0                MOVX     @DPTR,A
   70:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
0026B5 7F02              MOV      R7,#02H
0026B7         ?C0006?DRV_USB:
0026B7 EF                MOV      A,R7
0026B8 C3                CLR      C
0026B9 9422              SUBB     A,#022H
0026BB 502A              JNC      ?C0007?DRV_USB
   71:     {
   72:         vData = aPN[(vLoop>>1)-1];
0026BD EF                MOV      A,R7
0026BE C3                CLR      C
0026BF 13                RRC      A
0026C0 90154D            MOV      DPTR,#aPN-01H
0026C3 122BC6            LCALL    ?L?COM0032
0026C6 401F              JC       ?C0007?DRV_USB
0026C8 E52B              MOV      A,vData
0026CA 947F              SUBB     A,#07FH
0026CC 5019              JNC      ?C0007?DRV_USB
   73: 
   74:         if ((vData < 0x20) || (vData >= 0x7F))
   75:         {
   76:             break;
   77:         }
0026CE         ?C0009?DRV_USB:
   78: 
   79:         aProductStr[vLoop+0] = vData;
0026CE 7466              MOV      A,#LOW aProductStr
0026D0 2F                ADD      A,R7
0026D1 F582              MOV      DPL,A
0026D3 E4                CLR      A
0026D4 3404              ADDC     A,#HIGH aProductStr
0026D6 F583              MOV      DPH,A
0026D8 E52B              MOV      A,vData
0026DA F0                MOVX     @DPTR,A
   80:         aProductStr[vLoop+1] = 0;
0026DB 7467              MOV      A,#LOW aProductStr+01H
0026DD 2F                ADD      A,R7
0026DE F582              MOV      DPL,A
0026E0 E4                CLR      A
0026E1 3404              ADDC     A,#HIGH aProductStr+01H
0026E3 F1F0              ACALL    ?L?COM0031
0026E5 80D0              SJMP     ?C0006?DRV_USB
0026E7         ?C0007?DRV_USB:
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 68


   81:     }
   82:     aProductStr[0] = vLoop;
0026E7 900466            MOV      DPTR,#aProductStr
0026EA EF                MOV      A,R7
0026EB F0                MOVX     @DPTR,A
   83: 
   84:     /* init USB serial number string */
   85:     aSerialNumberStr[1] = 0x03;
0026EC 900489            MOV      DPTR,#aSerialNumberStr+01H
0026EF 7403              MOV      A,#03H
0026F1 F0                MOVX     @DPTR,A
   86:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
0026F2 7F02              MOV      R7,#02H
0026F4         ?C0011?DRV_USB:
0026F4 EF                MOV      A,R7
0026F5 C3                CLR      C
0026F6 9422              SUBB     A,#022H
0026F8 502A              JNC      ?C0012?DRV_USB
   87:     {
   88:         vData = aSN[(vLoop>>1)-1];
0026FA EF                MOV      A,R7
0026FB C3                CLR      C
0026FC 13                RRC      A
0026FD 90155E            MOV      DPTR,#aSN-01H
002700 122BC6            LCALL    ?L?COM0032
002703 401F              JC       ?C0012?DRV_USB
002705 E52B              MOV      A,vData
002707 947F              SUBB     A,#07FH
002709 5019              JNC      ?C0012?DRV_USB
   89: 
   90:         if ((vData < 0x20) || (vData >= 0x7F))
   91:         {
   92:             break;
   93:         }
00270B         ?C0014?DRV_USB:
   94: 
   95:         aSerialNumberStr[vLoop+0] = vData;
00270B 7488              MOV      A,#LOW aSerialNumberStr
00270D 2F                ADD      A,R7
00270E F582              MOV      DPL,A
002710 E4                CLR      A
002711 3404              ADDC     A,#HIGH aSerialNumberStr
002713 F583              MOV      DPH,A
002715 E52B              MOV      A,vData
002717 F0                MOVX     @DPTR,A
   96:         aSerialNumberStr[vLoop+1] = 0;
002718 7489              MOV      A,#LOW aSerialNumberStr+01H
00271A 2F                ADD      A,R7
00271B F582              MOV      DPL,A
00271D E4                CLR      A
00271E 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002720 F1F0              ACALL    ?L?COM0031
002722 80D0              SJMP     ?C0011?DRV_USB
002724         ?C0012?DRV_USB:
   97:     }
   98:     aSerialNumberStr[0] = vLoop;
002724 900488            MOV      DPTR,#aSerialNumberStr
002727 EF                MOV      A,R7
002728 F0                MOVX     @DPTR,A
   99: 
  100:     /* set USB0 to the high priority level interrupt */
  101:     EIP1 |= (1<<1);
002729 43F602            ORL      EIP1,#02H
  102: 
  103:     /* init USB device */
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 69


  104:     USB_Clock_Start();
00272C 120046            LCALL    USB_Clock_Start
  105:     USB_Init(DRV_USB_VID,
00272F 9004B1            MOV      DPTR,#?_USB_Init?BYTE+07H
002732 7401              MOV      A,#01H
002734 F0                MOVX     @DPTR,A
002735 A3                INC      DPTR
002736 7404              MOV      A,#HIGH aProductStr
002738 F0                MOVX     @DPTR,A
002739 A3                INC      DPTR
00273A 7466              MOV      A,#LOW aProductStr
00273C F0                MOVX     @DPTR,A
00273D A3                INC      DPTR
00273E 7401              MOV      A,#01H
002740 F0                MOVX     @DPTR,A
002741 A3                INC      DPTR
002742 7404              MOV      A,#HIGH aSerialNumberStr
002744 F0                MOVX     @DPTR,A
002745 A3                INC      DPTR
002746 7488              MOV      A,#LOW aSerialNumberStr
002748 F0                MOVX     @DPTR,A
002749 A3                INC      DPTR
00274A 74FA              MOV      A,#0FAH
00274C F0                MOVX     @DPTR,A
00274D A3                INC      DPTR
00274E 7480              MOV      A,#080H
002750 F0                MOVX     @DPTR,A
002751 A3                INC      DPTR
002752 7401              MOV      A,#01H
002754 F0                MOVX     @DPTR,A
002755 A3                INC      DPTR
002756 E4                CLR      A
002757 F0                MOVX     @DPTR,A
002758 7B01              MOV      R3,#01H
00275A 7A04              MOV      R2,#HIGH aManufacturerStr
00275C 7944              MOV      R1,#LOW aManufacturerStr
00275E 7D61              MOV      R5,#061H
002760 7CEA              MOV      R4,#0EAH
002762 7FC4              MOV      R7,#0C4H
002764 7E10              MOV      R6,#010H
002766 120DC4            LCALL    _USB_Init
  106:              DRV_USB_PID,
  107:              aManufacturerStr,
  108:              aProductStr,
  109:              aSerialNumberStr,
  110:              0xFA,      /* maximum current: 500mA */
  111:              0x80,      /* bus-powered, remote wakeup is unsupported */
  112:              0x100);    /* device release number 1.00 */
  113: 
  114:     /* the USB_Init() API will auto-enable global interrupt,
  115:      * disable it here, and will be enabled later.
  116:      */
  117:     DRV_INT_GlobalDisableInterrupt();
002769 C2AF              CLR      EA
  118: }
00276B 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   77: void thread_LED_Init(void)
   78: {
   79:     PT_INIT(&vTCB_LED);
   80: }
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 70


00276C E4                CLR      A
00276D F512              MOV      vTCB_LED,A
00276F F513              MOV      vTCB_LED+01H,A
   81: 
002771 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   35: static void _fixupInit(void)
   36: {
   37:     /* Globally enable Interrupt */
   38:     DRV_INT_GlobalEnableInterrupt();
002772 D2AF              SETB     EA
   39: 
   40:   #if DRV_USB_SUPPORT
   41: 	/* enable USB interface */
   42: 	DRV_USB_Enable();
002774 0214FA            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   61: void main(void)
   62: {
   63: 	/* previous init */
   64: 	DRV_PreInit();
002777 122800            LCALL    DRV_PreInit
   65: 
   66:     /* init protothread */
   67:     OS_Init();
00277A F195              ACALL    OS_Init
   68: 
   69:     /* fixup init */
   70:     _fixupInit();
00277C F172              ACALL    _fixupInit
;----                  JMP      OS_Start
   71: 
   72:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   48: void OS_Start(void)
   49: {
   50:     for (;;)
   51:     {
00277E         ?C0001?OS:
   52:         UINT8   i;
   53: 
   54:         for (i = 0; i < COUNT_OF(aThreadList); i++)
00277E E4                CLR      A
00277F F52A              MOV      i,A
002781         ?C0003?OS:
   55:         {
   56:             aThreadList[i].pEntry();
002781 E52A              MOV      A,i
002783 75F006            MOV      B,#06H
002786 A4                MUL      AB
002787 2470              ADD      A,#LOW aThreadList
002789 F582              MOV      DPL,A
00278B E4                CLR      A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 71


00278C 3415              ADDC     A,#HIGH aThreadList
00278E 122B13            LCALL    ?L?COM001E
002791 40EE              JC       ?C0003?OS
002793 80E9              SJMP     ?C0001?OS
   57:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   76: void OS_Init(void)
   77: {
   78:     UINT8   i;
   79: 
   80:     for (i = 0; i < COUNT_OF(aThreadList); i++)
002795 E4                CLR      A
002796 F52A              MOV      i,A
002798         ?C0007?OS:
   81:     {
   82:         aThreadList[i].pInit();
002798 E52A              MOV      A,i
00279A 75F006            MOV      B,#06H
00279D A4                MUL      AB
00279E 2473              ADD      A,#LOW aThreadList+03H
0027A0 F582              MOV      DPL,A
0027A2 E4                CLR      A
0027A3 3415              ADDC     A,#HIGH aThreadList+03H
0027A5 122B13            LCALL    ?L?COM001E
0027A8 40EE              JC       ?C0007?OS
   83:     }
   84: }
0027AA 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   37: void DRV_IO_Init(void)
   38: {
   39:     /* io internal init */
   40:     P0      = _PORT_INIT(P0);
0027AB 7580BF            MOV      P0,#0BFH
   41:     P1      = _PORT_INIT(P1);
0027AE 7590F6            MOV      P1,#0F6H
   42:     P2      = _PORT_INIT(P2);
0027B1 75A0FF            MOV      P2,#0FFH
   43:     P3      = _PORT_INIT(P3);
0027B4 75B0FF            MOV      P3,#0FFH
   44:     P0MDIN  = _PORT_MDIN(P0);
0027B7 75F17F            MOV      P0MDIN,#07FH
   45:     P1MDIN  = _PORT_MDIN(P1);
0027BA 75F2FF            MOV      P1MDIN,#0FFH
   46:     P2MDIN  = _PORT_MDIN(P2);
0027BD 75F3FB            MOV      P2MDIN,#0FBH
   47:     P3MDIN  = _PORT_MDIN(P3);
0027C0 75F4FE            MOV      P3MDIN,#0FEH
   48:     P0MDOUT = _PORT_MDOUT(P0);
0027C3 75A44A            MOV      P0MDOUT,#04AH
   49:     P1MDOUT = _PORT_MDOUT(P1);
0027C6 75A558            MOV      P1MDOUT,#058H
   50:     P2MDOUT = _PORT_MDOUT(P2);
0027C9 75A60A            MOV      P2MDOUT,#0AH
   51:     P3MDOUT = _PORT_MDOUT(P3);
0027CC E4                CLR      A
0027CD F5A7              MOV      P3MDOUT,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 72


   52: 
   53:     /* default, all pins are skipped for cross-bar */
   54:     P0SKIP = 0xFF;
0027CF 75D4FF            MOV      P0SKIP,#0FFH
   55:     P1SKIP = 0xFF;
0027D2 75D5FF            MOV      P1SKIP,#0FFH
   56:     P2SKIP = 0xFF;
0027D5 75D6FF            MOV      P2SKIP,#0FFH
   57: 
   58:     /* enable cross-bar */
   59:     XBR0 = 0x00;
0027D8 F5E1              MOV      XBR0,A
   60:     XBR1 = 0x40;
0027DA 75E240            MOV      XBR1,#040H
   61: }
0027DD 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
0027DE 7841              MOV      R0,#LOW _timeout
0027E0         ?L?COM000A:
0027E0 74FF              MOV      A,#0FFH
0027E2 1208A4            LCALL    ?C?LLDIIDATA8
0027E5 EC                MOV      A,R4
0027E6 4D                ORL      A,R5
0027E7 4E                ORL      A,R6
0027E8 4F                ORL      A,R7
0027E9 22                RET      
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM001D (BEGIN) -----
0027EA 31FA              ACALL    c2m_ReadDR
0027EC EF                MOV      A,R7
0027ED 640D              XRL      A,#0DH
0027EF 22                RET      
----- FUNCTION ?L?COM001D (END) -------


----- FUNCTION ?L?COM0031 (BEGIN) -----
0027F0 F583              MOV      DPH,A
0027F2 E4                CLR      A
0027F3 F0                MOVX     @DPTR,A
0027F4 0F                INC      R7
0027F5 0F                INC      R7
0027F6 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   88: void DRV_PreInit(void)
   89: {
   90:     /* disable all interrupt */
   91:     DRV_INT_DisableAllInterrupt();
002800 E4                CLR      A
002801 F5A8              MOV      IE,A
002803 F5E6              MOV      EIE1,A
   92: 
   93:   #if DRV_CLOCK_SUPPORT
   94:     DRV_CLOCK_Init();
002805 75B283            MOV      OSCICN,#083H
002808         ?C0023?DRV:
002808 E5B2              MOV      A,OSCICN
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 73


00280A C4                SWAP     A
00280B 13                RRC      A
00280C 13                RRC      A
00280D 5403              ANL      A,#03H
00280F 13                RRC      A
002810 50F6              JNC      ?C0023?DRV
002812         ?C0024?DRV:
002812 75B980            MOV      CLKMUL,#080H
002815 7F05              MOV      R7,#05H
002817 7E00              MOV      R6,#00H
002819 12172A            LCALL    _DRV_CPU_DelayUs
00281C 43B9C0            ORL      CLKMUL,#0C0H
00281F         ?C0025?DRV:
00281F E5B9              MOV      A,CLKMUL
002821 C4                SWAP     A
002822 13                RRC      A
002823 5407              ANL      A,#07H
002825 13                RRC      A
002826 50F7              JNC      ?C0025?DRV
002828         ?C0026?DRV:
002828 75A902            MOV      CLKSEL,#02H
00282B 75B680            MOV      FLSCL,#080H
   95:   #endif
   96: 
   97:   #if DRV_IO_SUPPORT
   98: 	DRV_IO_Init();
00282E 1227AB            LCALL    DRV_IO_Init
   99:   #endif
  100: 
  101:   #if DRV_UART_SUPPORT
  102:     DRV_UART_Init();
002831 438E08            ORL      CKCON,#08H
002834 E589              MOV      A,TMOD
002836 540F              ANL      A,#0FH
002838 4420              ORL      A,#020H
00283A F589              MOV      TMOD,A
00283C 758D98            MOV      TH1,#098H
00283F D28E              SETB     TR1
002841 AFD4              MOV      R7,P0SKIP
002843 EF                MOV      A,R7
002844 54EF              ANL      A,#0EFH
002846 FF                MOV      R7,A
002847 8FD4              MOV      P0SKIP,R7
002849 AFD4              MOV      R7,P0SKIP
00284B EF                MOV      A,R7
00284C 54DF              ANL      A,#0DFH
00284E FF                MOV      R7,A
00284F 8FD4              MOV      P0SKIP,R7
002851 43E101            ORL      XBR0,#01H
002854 759802            MOV      SCON0,#02H
  103:   #endif
  104: 
  105:   #if DRV_PCA_SUPPORT
  106:     DRV_PCA_Init();
  107:   #endif
  108: 
  109:   #if DRV_WATCHDOG_SUPPORT
  110: 	DRV_WATCHDOG_Enable();
  111:   #endif
  112: }
002857 22                RET      
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 74


 FILE: '..\drv\drv_vector.c'
   38: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
002858 C0E0              PUSH     ACC
00285A C0D0              PUSH     PSW
00285C 75D000            MOV      PSW,#00H
00285F C004              PUSH     AR4
002861 C005              PUSH     AR5
002863 C006              PUSH     AR6
002865 C007              PUSH     AR7
   39: {
   40:     /* clear timeout flag */
   41:     DRV_TIMER_ClearTimeoutFlag();
002867 C2CF              CLR      TF2H
   42: 
   43:     /* update tick counter */
   44: 	DRV_TIMER_UpdateTick();
002869 AF0F              MOV      R7,vTickCount+03H
00286B AE0E              MOV      R6,vTickCount+02H
00286D AD0D              MOV      R5,vTickCount+01H
00286F AC0C              MOV      R4,vTickCount
002871 EF                MOV      A,R7
002872 2401              ADD      A,#01H
002874 F50F              MOV      vTickCount+03H,A
002876 E4                CLR      A
002877 3E                ADDC     A,R6
002878 F50E              MOV      vTickCount+02H,A
00287A E4                CLR      A
00287B 3D                ADDC     A,R5
00287C F50D              MOV      vTickCount+01H,A
00287E E4                CLR      A
00287F 3C                ADDC     A,R4
002880 F50C              MOV      vTickCount,A
   45: }
002882 D007              POP      AR7
002884 D006              POP      AR6
002886 D005              POP      AR5
002888 D004              POP      AR4
00288A D0D0              POP      PSW
00288C D0E0              POP      ACC
00288E 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
00288F C283              CLR      IO_DUT_MDIOM_SCL_OEn
002891 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
002893 A248              MOV      C,bMdioPreamble
002895 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002897 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002899 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00289B A248              MOV      C,bMdioPreamble
00289D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00289F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028A1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028A3 A248              MOV      C,bMdioPreamble
0028A5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028A7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028A9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028AB A248              MOV      C,bMdioPreamble
0028AD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028AF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028B1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028B3 A248              MOV      C,bMdioPreamble
0028B5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028B7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 75


0028B9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028BB A248              MOV      C,bMdioPreamble
0028BD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028BF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028C1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028C3 A248              MOV      C,bMdioPreamble
0028C5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028C7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028C9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028CB A248              MOV      C,bMdioPreamble
0028CD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028CF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028D1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028D3 A248              MOV      C,bMdioPreamble
0028D5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028D7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028D9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028DB A248              MOV      C,bMdioPreamble
0028DD         ?L?COM0002:
0028DD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028DF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028E1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028E3 A248              MOV      C,bMdioPreamble
0028E5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028E7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028E9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028EB A248              MOV      C,bMdioPreamble
0028ED D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028EF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028F1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028F3 A248              MOV      C,bMdioPreamble
0028F5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028F7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0028F9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0028FB A248              MOV      C,bMdioPreamble
0028FD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0028FF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002901 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002903 A248              MOV      C,bMdioPreamble
002905 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002907 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002909 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00290B A248              MOV      C,bMdioPreamble
00290D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00290F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002911 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002913 A248              MOV      C,bMdioPreamble
002915 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002917 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002919 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00291B A248              MOV      C,bMdioPreamble
00291D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00291F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002921 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002923 A248              MOV      C,bMdioPreamble
002925 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002927 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002929 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00292B A248              MOV      C,bMdioPreamble
00292D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00292F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002931 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002933 A248              MOV      C,bMdioPreamble
002935 22                RET      
----- FUNCTION ?L?COM0001 (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 76




----- FUNCTION ?L?COM0003 (BEGIN) -----
002936 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002938 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00293A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00293C A20F              MOV      C,bMdioStartFrame1
00293E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002940 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002942 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002944 A20E              MOV      C,bMdioStartFrame0
002946 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002948 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00294A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00294C A20D              MOV      C,bMdioOperationCode1
00294E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002950 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002952 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002954 A20C              MOV      C,bMdioOperationCode0
002956 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002958 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00295A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00295C A20B              MOV      C,bMdioPortAddr4
00295E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002960 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002962 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002964 A20A              MOV      C,bMdioPortAddr3
002966 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002968 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00296A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00296C A209              MOV      C,bMdioPortAddr2
00296E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002970 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002972 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002974 A208              MOV      C,bMdioPortAddr1
002976 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002978 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00297A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00297C A207              MOV      C,bMdioPortAddr0
00297E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002980 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002982 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002984 A206              MOV      C,bMdioDeviceAddr4
002986 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002988 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00298A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00298C A205              MOV      C,bMdioDeviceAddr3
00298E D296              SETB     IO_DUT_MDIOM_SCL_OUT
002990 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
002992 C296              CLR      IO_DUT_MDIOM_SCL_OUT
002994 A204              MOV      C,bMdioDeviceAddr2
002996 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002998 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00299A C296              CLR      IO_DUT_MDIOM_SCL_OUT
00299C A203              MOV      C,bMdioDeviceAddr1
00299E D296              SETB     IO_DUT_MDIOM_SCL_OUT
0029A0 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0029A2 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0029A4 A202              MOV      C,bMdioDeviceAddr0
0029A6         ?L?COM0004:
0029A6 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0029A8 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0029AA C296              CLR      IO_DUT_MDIOM_SCL_OUT
0029AC 22                RET      
----- FUNCTION ?L?COM0003 (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 77




----- FUNCTION ?L?COM0005 (BEGIN) -----
0029AD C20C              CLR      bMdioOperationCode0
0029AF         ?L?COM0006:
0029AF EF                MOV      A,R7
0029B0 C4                SWAP     A
0029B1 540F              ANL      A,#0FH
0029B3 13                RRC      A
0029B4 920B              MOV      bMdioPortAddr4,C
0029B6 EF                MOV      A,R7
0029B7 13                RRC      A
0029B8 13                RRC      A
0029B9 13                RRC      A
0029BA 541F              ANL      A,#01FH
0029BC 13                RRC      A
0029BD 920A              MOV      bMdioPortAddr3,C
0029BF EF                MOV      A,R7
0029C0 13                RRC      A
0029C1 13                RRC      A
0029C2 543F              ANL      A,#03FH
0029C4 13                RRC      A
0029C5 9209              MOV      bMdioPortAddr2,C
0029C7 EF                MOV      A,R7
0029C8 C3                CLR      C
0029C9 13                RRC      A
0029CA 13                RRC      A
0029CB 9208              MOV      bMdioPortAddr1,C
0029CD EF                MOV      A,R7
0029CE 13                RRC      A
0029CF 9207              MOV      bMdioPortAddr0,C
0029D1 ED                MOV      A,R5
0029D2 C4                SWAP     A
0029D3 540F              ANL      A,#0FH
0029D5 13                RRC      A
0029D6 9206              MOV      bMdioDeviceAddr4,C
0029D8 ED                MOV      A,R5
0029D9 13                RRC      A
0029DA 13                RRC      A
0029DB 13                RRC      A
0029DC 541F              ANL      A,#01FH
0029DE 13                RRC      A
0029DF 9205              MOV      bMdioDeviceAddr3,C
0029E1 ED                MOV      A,R5
0029E2 13                RRC      A
0029E3 13                RRC      A
0029E4 543F              ANL      A,#03FH
0029E6 13                RRC      A
0029E7 9204              MOV      bMdioDeviceAddr2,C
0029E9 ED                MOV      A,R5
0029EA C3                CLR      C
0029EB 13                RRC      A
0029EC 13                RRC      A
0029ED 9203              MOV      bMdioDeviceAddr1,C
0029EF ED                MOV      A,R5
0029F0 13                RRC      A
0029F1 9202              MOV      bMdioDeviceAddr0,C
0029F3 D201              SETB     bMdioTurnAround1
0029F5 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0022 (BEGIN) -----
0029F6 D297              SETB     IO_DUT_C2M_SCL
0029F8 A244              MOV      C,bIns1
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 78


0029FA 92A0              MOV      IO_DUT_C2M_SDA,C
0029FC C297              CLR      IO_DUT_C2M_SCL
0029FE 22                RET      
----- FUNCTION ?L?COM0022 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
0029FF 753300            MOV      pPayload,#HIGH vFrame+0CH
002A02 75340C            MOV      pPayload+01H,#LOW vFrame+0CH
002A05 853482            MOV      DPL,pPayload+01H
002A08 853383            MOV      DPH,pPayload
002A0B E0                MOVX     A,@DPTR
002A0C FF                MOV      R7,A
002A0D A3                INC      DPTR
002A0E E0                MOVX     A,@DPTR
002A0F FD                MOV      R5,A
002A10 853482            MOV      DPL,pPayload+01H
002A13 853383            MOV      DPH,pPayload
002A16 A3                INC      DPTR
002A17 A3                INC      DPTR
002A18 E0                MOVX     A,@DPTR
002A19 FA                MOV      R2,A
002A1A A3                INC      DPTR
002A1B E0                MOVX     A,@DPTR
002A1C FB                MOV      R3,A
002A1D E534              MOV      A,pPayload+01H
002A1F 2404              ADD      A,#04H
002A21 F582              MOV      DPL,A
002A23 E4                CLR      A
002A24 3533              ADDC     A,pPayload
002A26 F583              MOV      DPH,A
002A28 E0                MOVX     A,@DPTR
002A29 F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
002A2B A3                INC      DPTR
002A2C E0                MOVX     A,@DPTR
002A2D F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
002A2F E534              MOV      A,pPayload+01H
002A31 2406              ADD      A,#06H
002A33 F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
002A35 E4                CLR      A
002A36 3533              ADDC     A,pPayload
002A38 F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
002A3A 22                RET      
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000C (BEGIN) -----
002A3B C296              CLR      IO_DUT_MDIOM_SCL_OUT
002A3D A280              MOV      C,IO_DUT_MDIOM_SDA_IN
002A3F D296              SETB     IO_DUT_MDIOM_SCL_OUT
002A41 22                RET      
----- FUNCTION ?L?COM000C (END) -------


----- FUNCTION ?L?COM000D (BEGIN) -----
002A42 1217BD            LCALL    _drv_c2m_WriteData
002A45 AF03              MOV      R7,AR3
002A47         ?L?COM000E:
002A47 1217BD            LCALL    _drv_c2m_WriteData
002A4A         ?L?COM000F:
002A4A E4                CLR      A
002A4B 754410            MOV      _timeout+03H,#010H
002A4E 754327            MOV      _timeout+02H,#027H
002A51 F542              MOV      _timeout+01H,A
002A53 F541              MOV      _timeout,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 79


002A55 22                RET      
----- FUNCTION ?L?COM000D (END) -------


----- FUNCTION ?L?COM0010 (BEGIN) -----
002A56 7B0C              MOV      R3,#LOW vFrame+0CH
002A58 7A00              MOV      R2,#HIGH vFrame+0CH
002A5A EB                MOV      A,R3
002A5B 2406              ADD      A,#06H
002A5D F534              MOV      pBuf+01H,A
002A5F E4                CLR      A
002A60 3A                ADDC     A,R2
002A61 F533              MOV      pBuf,A
002A63 8B82              MOV      DPL,R3
002A65 8A83              MOV      DPH,R2
002A67 A3                INC      DPTR
002A68 A3                INC      DPTR
002A69 E0                MOVX     A,@DPTR
002A6A FE                MOV      R6,A
002A6B A3                INC      DPTR
002A6C E0                MOVX     A,@DPTR
002A6D 8E35              MOV      vAddr,R6
002A6F F536              MOV      vAddr+01H,A
002A71 EB                MOV      A,R3
002A72 2404              ADD      A,#04H
002A74 F582              MOV      DPL,A
002A76 E4                CLR      A
002A77 3A                ADDC     A,R2
002A78 F583              MOV      DPH,A
002A7A         ?L?COM0011:
002A7A E0                MOVX     A,@DPTR
002A7B F537              MOV      vLen,A
002A7D A3                INC      DPTR
002A7E E0                MOVX     A,@DPTR
002A7F F538              MOV      vLen+01H,A
002A81 22                RET      
----- FUNCTION ?L?COM0010 (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
002A82 9239              MOV      bIntState,C
002A84 53A6FE            ANL      P2MDOUT,#0FEH
002A87 43A580            ORL      P1MDOUT,#080H
002A8A         ?L?COM0013:
002A8A A241              MOV      C,bHigh
002A8C 92A0              MOV      IO_DUT_C2M_SDA,C
002A8E C297              CLR      IO_DUT_C2M_SCL
002A90 22                RET      
----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
002A91 E53A              MOV      A,vWriteLen+01H
002A93 2534              ADD      A,pBuf+01H
002A95 F534              MOV      pBuf+01H,A
002A97 E539              MOV      A,vWriteLen
002A99 3533              ADDC     A,pBuf
002A9B F533              MOV      pBuf,A
002A9D E53A              MOV      A,vWriteLen+01H
002A9F 2536              ADD      A,vAddr+01H
002AA1 F536              MOV      vAddr+01H,A
002AA3 E539              MOV      A,vWriteLen
002AA5 3535              ADDC     A,vAddr
002AA7 F535              MOV      vAddr,A
002AA9 C3                CLR      C
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 80


002AAA E538              MOV      A,vLen+01H
002AAC 953A              SUBB     A,vWriteLen+01H
002AAE F538              MOV      vLen+01H,A
002AB0 E537              MOV      A,vLen
002AB2 9539              SUBB     A,vWriteLen
002AB4 F537              MOV      vLen,A
002AB6 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM0015 (BEGIN) -----
002AB7 E0                MOVX     A,@DPTR
002AB8 FC                MOV      R4,A
002AB9 A3                INC      DPTR
002ABA E0                MOVX     A,@DPTR
002ABB FD                MOV      R5,A
002ABC A3                INC      DPTR
002ABD E0                MOVX     A,@DPTR
002ABE FE                MOV      R6,A
002ABF A3                INC      DPTR
002AC0 E0                MOVX     A,@DPTR
002AC1 FF                MOV      R7,A
002AC2         ?L?COM0016:
002AC2 AB0F              MOV      R3,vTickCount+03H
002AC4 AA0E              MOV      R2,vTickCount+02H
002AC6 A90D              MOV      R1,vTickCount+01H
002AC8 A80C              MOV      R0,vTickCount
002ACA C3                CLR      C
002ACB 020891            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0015 (END) -------


----- FUNCTION ?L?COM0017 (BEGIN) -----
002ACE A2A0              MOV      C,IO_DUT_C2M_SDA
002AD0 D297              SETB     IO_DUT_C2M_SCL
002AD2 9237              MOV      bC2Bit7,C
002AD4         ?L?COM0018:
002AD4 53A6FE            ANL      P2MDOUT,#0FEH
002AD7         ?L?COM0019:
002AD7 53A57F            ANL      P1MDOUT,#07FH
002ADA A239              MOV      C,bIntState
002ADC 92AF              MOV      EA,C
002ADE 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM001A (BEGIN) -----
002ADF D297              SETB     IO_DUT_C2M_SCL
002AE1 43A601            ORL      P2MDOUT,#01H
002AE4 A243              MOV      C,bIns0
002AE6 92A0              MOV      IO_DUT_C2M_SDA,C
002AE8 C297              CLR      IO_DUT_C2M_SCL
002AEA 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001B (BEGIN) -----
002AEB 1217BD            LCALL    _drv_c2m_WriteData
002AEE E4                CLR      A
002AEF 753610            MOV      _timeout+03H,#010H
002AF2 753527            MOV      _timeout+02H,#027H
002AF5 F534              MOV      _timeout+01H,A
002AF7 F533              MOV      _timeout,A
002AF9 22                RET      
----- FUNCTION ?L?COM001B (END) -------
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 81




----- FUNCTION ?L?COM001C (BEGIN) -----
002AFA 43A580            ORL      P1MDOUT,#080H
002AFD C297              CLR      IO_DUT_C2M_SCL
002AFF 7F14              MOV      R7,#014H
002B01 7E00              MOV      R6,#00H
002B03 12172A            LCALL    _DRV_CPU_DelayUs
002B06 D297              SETB     IO_DUT_C2M_SCL
002B08 7F02              MOV      R7,#02H
002B0A 7E00              MOV      R6,#00H
002B0C 12172A            LCALL    _DRV_CPU_DelayUs
002B0F 53A57F            ANL      P1MDOUT,#07FH
002B12 22                RET      
----- FUNCTION ?L?COM001C (END) -------


----- FUNCTION ?L?COM001E (BEGIN) -----
002B13 F583              MOV      DPH,A
002B15 7401              MOV      A,#01H
002B17 93                MOVC     A,@A+DPTR
002B18 FA                MOV      R2,A
002B19 7402              MOV      A,#02H
002B1B 93                MOVC     A,@A+DPTR
002B1C F9                MOV      R1,A
002B1D 1208FB            LCALL    ?C?ICALL
002B20 052A              INC      i
002B22 E52A              MOV      A,i
002B24 C3                CLR      C
002B25 9403              SUBB     A,#03H
002B27 22                RET      
----- FUNCTION ?L?COM001E (END) -------


----- FUNCTION ?L?COM001F (BEGIN) -----
002B28 E4                CLR      A
002B29 90000A            MOV      DPTR,#vFrame+0AH
002B2C F0                MOVX     @DPTR,A
002B2D A3                INC      DPTR
002B2E F0                MOVX     @DPTR,A
002B2F 22                RET      
----- FUNCTION ?L?COM001F (END) -------


----- FUNCTION ?L?COM0020 (BEGIN) -----
002B30 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002B32 D294              SETB     IO_DUT_MDIOM_SDA_OUT
002B34 D283              SETB     IO_DUT_MDIOM_SCL_OEn
002B36 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
002B38 22                RET      
----- FUNCTION ?L?COM0020 (END) -------


----- FUNCTION ?L?COM0021 (BEGIN) -----
002B39 E540              MOV      A,vLen+01H
002B3B 1540              DEC      vLen+01H
002B3D AE3F              MOV      R6,vLen
002B3F 22                RET      
----- FUNCTION ?L?COM0021 (END) -------


----- FUNCTION ?L?COM0023 (BEGIN) -----
002B40 D282              SETB     IO_DUT_I2CM_SCL
002B42 753F01            MOV      _loop,#01H
002B45 7540F4            MOV      _loop+01H,#0F4H
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 82


002B48 22                RET      
----- FUNCTION ?L?COM0023 (END) -------


----- FUNCTION ?L?COM0024 (BEGIN) -----
002B49 7E04              MOV      R6,#04H
002B4B 7F44              MOV      R7,#044H
002B4D 7D00              MOV      R5,#00H
002B4F         ?L?COM0025:
002B4F 7B01              MOV      R3,#01H
002B51 7A00              MOV      R2,#HIGH vFrame
002B53 7900              MOV      R1,#LOW vFrame
002B55 22                RET      
----- FUNCTION ?L?COM0024 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
002B56 92AF              MOV      EA,C
002B58         ?L?COM0027:
002B58 E524              MOV      A,vMdioData
002B5A F0                MOVX     @DPTR,A
002B5B A3                INC      DPTR
002B5C E525              MOV      A,vMdioData+01H
002B5E F0                MOVX     @DPTR,A
002B5F A200              MOV      C,bMdioTurnAround0
002B61 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
002B62 853482            MOV      DPL,pPayload+01H
002B65 853383            MOV      DPH,pPayload
002B68 A3                INC      DPTR
002B69 22                RET      
----- FUNCTION ?L?COM0028 (END) -------


----- FUNCTION ?L?COM0029 (BEGIN) -----
002B6A D297              SETB     IO_DUT_C2M_SCL
002B6C 53A6FE            ANL      P2MDOUT,#0FEH
002B6F D2A0              SETB     IO_DUT_C2M_SDA
002B71 C297              CLR      IO_DUT_C2M_SCL
002B73 22                RET      
----- FUNCTION ?L?COM0029 (END) -------


----- FUNCTION ?L?COM002A (BEGIN) -----
002B74 1217BD            LCALL    _drv_c2m_WriteData
002B77 E4                CLR      A
002B78 753A10            MOV      _timeout+03H,#010H
002B7B 753927            MOV      _timeout+02H,#027H
002B7E F538              MOV      _timeout+01H,A
002B80 F537              MOV      _timeout,A
002B82 22                RET      
----- FUNCTION ?L?COM002A (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
002B83 FF                MOV      R7,A
002B84 E4                CLR      A
002B85 350E              ADDC     A,vTickCount+02H
002B87 FE                MOV      R6,A
002B88 E4                CLR      A
002B89 350D              ADDC     A,vTickCount+01H
002B8B FD                MOV      R5,A
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 83


002B8C E4                CLR      A
002B8D 350C              ADDC     A,vTickCount
002B8F FC                MOV      R4,A
002B90 22                RET      
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
002B91 D282              SETB     IO_DUT_I2CM_SCL
002B93 753D01            MOV      _loop,#01H
002B96 753EF4            MOV      _loop+01H,#0F4H
002B99 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
002B9A E536              MOV      A,pPayload+01H
002B9C 2405              ADD      A,#05H
002B9E F582              MOV      DPL,A
002BA0 E4                CLR      A
002BA1 3535              ADDC     A,pPayload
002BA3 F583              MOV      DPH,A
002BA5 E582              MOV      A,DPL
002BA7 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM002E (BEGIN) -----
002BA8 D282              SETB     IO_DUT_I2CM_SCL
002BAA 754001            MOV      _loop,#01H
002BAD 7541F4            MOV      _loop+01H,#0F4H
002BB0 22                RET      
----- FUNCTION ?L?COM002E (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
002BB1 120262            LCALL    _printf
002BB4 900008            MOV      DPTR,#vFrame+08H
002BB7 7403              MOV      A,#03H
002BB9 F0                MOVX     @DPTR,A
002BBA A3                INC      DPTR
002BBB 22                RET      
----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
002BBC 8E3B              MOV      vAddr,R6
002BBE 8F3C              MOV      vAddr+01H,R7
002BC0 8C3D              MOV      pBuf,R4
002BC2 8D3E              MOV      pBuf+01H,R5
002BC4 EB                MOV      A,R3
002BC5 22                RET      
----- FUNCTION ?L?COM0030 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
002BC6 93                MOVC     A,@A+DPTR
002BC7 F52B              MOV      vData,A
002BC9 C3                CLR      C
002BCA 9420              SUBB     A,#020H
002BCC 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0033 (BEGIN) -----
LX51 LINKER/LOCATER V4.66.41.0                                                        06/14/2016  13:17:41  PAGE 84


002BCD E53E              MOV      A,_loop+01H
002BCF 153E              DEC      _loop+01H
002BD1 AE3D              MOV      R6,_loop
002BD3 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
002BD4 E541              MOV      A,_loop+01H
002BD6 1541              DEC      _loop+01H
002BD8 AE40              MOV      R6,_loop
002BDA 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0035 (BEGIN) -----
002BDB AF14              MOV      R7,vFPDAT
002BDD 12235C            LCALL    _c2m_WriteAR
002BE0 7F02              MOV      R7,#02H
002BE2 22                RET      
----- FUNCTION ?L?COM0035 (END) -------


----- FUNCTION ?L?COM0036 (BEGIN) -----
002BE3 853682            MOV      DPL,pPayload+01H
002BE6 853583            MOV      DPH,pPayload
002BE9 E0                MOVX     A,@DPTR
002BEA 22                RET      
----- FUNCTION ?L?COM0036 (END) -------


----- FUNCTION ?L?COM0037 (BEGIN) -----
002BEB 7D40              MOV      R5,#040H
002BED 121009            LCALL    _Block_Read
002BF0 8F2E              MOV      vBlockLen,R7
002BF2 22                RET      
----- FUNCTION ?L?COM0037 (END) -------


