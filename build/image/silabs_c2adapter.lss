LX51 LINKER/LOCATER V4.66.66.0                                                          10/30/2016  22:31:39  PAGE 1





ASSEMBLER CODE PACKING OF MODULE:  ..\build\obj\silabs_c2adapter (THREAD_PKT)


----- FUNCTION _thread_pkt_Dump (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  100: static void _thread_pkt_Dump(IN BOOL bRx)
  101: {
  102:   #if PKT_DEBUG_SUPPORT
  103: 
  104:     UINT16 vLoop;
  105: 
  106:   #if DRV_WATCHDOG_SUPPORT
  107:     DRV_WATCHDOG_Kick();
  108:   #endif
  109: 
  110:     printf("USB-%s-PKT: (magic=%.4hX,rev=%.4hX,len=%04hX,CRC=%04hX)",
  111:            (bRx?"RX":"TX"),
  112:            vFrame.vMagicNo, vFrame.vVersion, vFrame.vLen, vFrame.vCRC);
  113:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
  114:     {
  115:         if ((vLoop%16) == 0)
  116:         {
  117:             printf("\n");
  118:         }
  119:         else if ((vLoop%8) == 0)
  120:         {
  121:             printf(" -");
  122:         }
  123: 
  124:         printf(" %02bX", vFrame.vContent.buf[vLoop]);
  125:     }
  126:     printf("\n");
  127: 
  128:   #if DRV_WATCHDOG_SUPPORT
  129:     DRV_WATCHDOG_Kick();
  130:   #endif
  131: 
  132:   #else
  133:     NO_WARNING(bRx);
  134:   #endif
  135: }
00002A 22                RET      
----- FUNCTION _thread_pkt_Dump (END) -------


00002B 022E52            LJMP     02E52H
000083 022E89            LJMP     02E89H
----- FUNCTION CFG_Init (BEGIN) -----
 FILE: '..\cfg\cfg.c'
   48: void CFG_Init(void)
   49: {
   50:     CFG_DB_Init();
   51:     CFG_PWD_Init();
0001DD 0225FA            LJMP     CFG_PWD_Init
----- FUNCTION CFG_Init (END) -------


----- FUNCTION _thread_pkt_CalcCRC (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
   50: static UINT16 _thread_pkt_CalcCRC(void)
   51: {
   52:     /* CRC16-CCITT: X16+X15+X2+1 */
   53:     static SEG_CODE UINT16 aCRC16[256] =
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 2


   54:     {
   55:         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
   56:         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
   57:         0x0919, 0x1890, 0x2A0B, 0x3B82, 0x4F3D, 0x5EB4, 0x6C2F, 0x7DA6,
   58:         0x8551, 0x94D8, 0xA643, 0xB7CA, 0xC375, 0xD2FC, 0xE067, 0xF1EE,
   59:         0x1232, 0x03BB, 0x3120, 0x20A9, 0x5416, 0x459F, 0x7704, 0x668D,
   60:         0x9E7A, 0x8FF3, 0xBD68, 0xACE1, 0xD85E, 0xC9D7, 0xFB4C, 0xEAC5,
   61:         0x1B2B, 0x0AA2, 0x3839, 0x29B0, 0x5D0F, 0x4C86, 0x7E1D, 0x6F94,
   62:         0x9763, 0x86EA, 0xB471, 0xA5F8, 0xD147, 0xC0CE, 0xF255, 0xE3DC,
   63:         0x2464, 0x35ED, 0x0776, 0x16FF, 0x6240, 0x73C9, 0x4152, 0x50DB,
   64:         0xA82C, 0xB9A5, 0x8B3E, 0x9AB7, 0xEE08, 0xFF81, 0xCD1A, 0xDC93,
   65:         0x2D7D, 0x3CF4, 0x0E6F, 0x1FE6, 0x6B59, 0x7AD0, 0x484B, 0x59C2,
   66:         0xA135, 0xB0BC, 0x8227, 0x93AE, 0xE711, 0xF698, 0xC403, 0xD58A,
   67:         0x3656, 0x27DF, 0x1544, 0x04CD, 0x7072, 0x61FB, 0x5360, 0x42E9,
   68:         0xBA1E, 0xAB97, 0x990C, 0x8885, 0xFC3A, 0xEDB3, 0xDF28, 0xCEA1,
   69:         0x3F4F, 0x2EC6, 0x1C5D, 0x0DD4, 0x796B, 0x68E2, 0x5A79, 0x4BF0,
   70:         0xB307, 0xA28E, 0x9015, 0x819C, 0xF523, 0xE4AA, 0xD631, 0xC7B8,
   71:         0x48C8, 0x5941, 0x6BDA, 0x7A53, 0x0EEC, 0x1F65, 0x2DFE, 0x3C77,
   72:         0xC480, 0xD509, 0xE792, 0xF61B, 0x82A4, 0x932D, 0xA1B6, 0xB03F,
   73:         0x41D1, 0x5058, 0x62C3, 0x734A, 0x07F5, 0x167C, 0x24E7, 0x356E,
   74:         0xCD99, 0xDC10, 0xEE8B, 0xFF02, 0x8BBD, 0x9A34, 0xA8AF, 0xB926,
   75:         0x5AFA, 0x4B73, 0x79E8, 0x6861, 0x1CDE, 0x0D57, 0x3FCC, 0x2E45,
   76:         0xD6B2, 0xC73B, 0xF5A0, 0xE429, 0x9096, 0x811F, 0xB384, 0xA20D,
   77:         0x53E3, 0x426A, 0x70F1, 0x6178, 0x15C7, 0x044E, 0x36D5, 0x275C,
   78:         0xDFAB, 0xCE22, 0xFCB9, 0xED30, 0x998F, 0x8806, 0xBA9D, 0xAB14,
   79:         0x6CAC, 0x7D25, 0x4FBE, 0x5E37, 0x2A88, 0x3B01, 0x099A, 0x1813,
   80:         0xE0E4, 0xF16D, 0xC3F6, 0xD27F, 0xA6C0, 0xB749, 0x85D2, 0x945B,
   81:         0x65B5, 0x743C, 0x46A7, 0x572E, 0x2391, 0x3218, 0x0083, 0x110A,
   82:         0xE9FD, 0xF874, 0xCAEF, 0xDB66, 0xAFD9, 0xBE50, 0x8CCB, 0x9D42,
   83:         0x7E9E, 0x6F17, 0x5D8C, 0x4C05, 0x38BA, 0x2933, 0x1BA8, 0x0A21,
   84:         0xF2D6, 0xE35F, 0xD1C4, 0xC04D, 0xB4F2, 0xA57B, 0x97E0, 0x8669,
   85:         0x7787, 0x660E, 0x5495, 0x451C, 0x31A3, 0x202A, 0x12B1, 0x0338,
   86:         0xFBCF, 0xEA46, 0xD8DD, 0xC954, 0xBDEB, 0xAC62, 0x9EF9, 0x8F70,
   87:     };
   88: 
   89:     UINT16  vCRC = 0xFFFF;
00163C 74FF              MOV      A,#0FFH
00163E F531              MOV      vCRC,A
001640 F532              MOV      vCRC+01H,A
   90:     UINT16  vLoop;
   91: 
   92:     for (vLoop = 0; vLoop < vFrame.vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R4/R5' ----
001642 E4                CLR      A
001643 FD                MOV      R5,A
001644 FC                MOV      R4,A
001645         ?C0001?THREAD_PKT:
001645 D3                SETB     C
001646 900045            MOV      DPTR,#vFrame+05H
001649 E0                MOVX     A,@DPTR
00164A 9D                SUBB     A,R5
00164B 900044            MOV      DPTR,#vFrame+04H
00164E E0                MOVX     A,@DPTR
00164F 9C                SUBB     A,R4
001650 4031              JC       ?C0002?THREAD_PKT
   93:     {
   94:         vCRC = (vCRC<<8) ^ aCRC16[(UINT8)(vCRC>>8)^(vFrame.vContent.buf[vLoop])];
001652 E531              MOV      A,vCRC
001654 FF                MOV      R7,A
001655 7448              MOV      A,#LOW vFrame+08H
001657 2D                ADD      A,R5
001658 F582              MOV      DPL,A
00165A 7400              MOV      A,#HIGH vFrame+08H
00165C 3C                ADDC     A,R4
00165D F583              MOV      DPH,A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 3


00165F E0                MOVX     A,@DPTR
001660 6F                XRL      A,R7
001661 75F002            MOV      B,#02H
001664 A4                MUL      AB
001665 241C              ADD      A,#LOW aCRC16
001667 F582              MOV      DPL,A
001669 E5F0              MOV      A,B
00166B 3414              ADDC     A,#HIGH aCRC16
00166D F583              MOV      DPH,A
00166F E532              MOV      A,vCRC+01H
001671 FE                MOV      R6,A
001672 E4                CLR      A
001673 93                MOVC     A,@A+DPTR
001674 6E                XRL      A,R6
001675 F531              MOV      vCRC,A
001677 7401              MOV      A,#01H
001679 93                MOVC     A,@A+DPTR
00167A F532              MOV      vCRC+01H,A
   95:     }
00167C 0D                INC      R5
00167D BD0001            CJNE     R5,#00H,?C0066?THREAD_PKT
001680 0C                INC      R4
001681         ?C0066?THREAD_PKT:
001681 80C2              SJMP     ?C0001?THREAD_PKT
001683         ?C0002?THREAD_PKT:
   96: 
   97:     return vCRC;
001683 AE31              MOV      R6,vCRC
001685 AF32              MOV      R7,vCRC+01H
   98: }
001687 22                RET      
----- FUNCTION _thread_pkt_CalcCRC (END) -------


----- FUNCTION _thread_pkt_Transmit (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  248: static void _thread_pkt_Transmit(void)
  249: {
  250:     if (bFlushFIFO)
  251:     {
001688 304709            JNB      bFlushFIFO,?C0042?THREAD_PKT
  252:         /* flush FIFO */
  253:         memset(&vFrame, 0x00, sizeof(vFrame));
00168B 123477            LCALL    ?L?COM0035
00168E 1207F3            LCALL    ?C?MEMSET
  254:         bFlushFIFO = FALSE;
001691 C247              CLR      bFlushFIFO
  255:     }
001693 22                RET      
001694         ?C0042?THREAD_PKT:
  256:     else
  257:     {
  258:         /* update content length, and re-calculate CRC value */
  259:         vFrame.vLen = 4+PKT_GetPayloadSize();
001694 90004B            MOV      DPTR,#vFrame+0BH
001697 E0                MOVX     A,@DPTR
001698 2404              ADD      A,#04H
00169A FE                MOV      R6,A
00169B 90004A            MOV      DPTR,#vFrame+0AH
00169E E0                MOVX     A,@DPTR
00169F 3400              ADDC     A,#00H
0016A1 900044            MOV      DPTR,#vFrame+04H
0016A4 F0                MOVX     @DPTR,A
0016A5 A3                INC      DPTR
0016A6 CE                XCH      A,R6
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 4


0016A7 F0                MOVX     @DPTR,A
  260:         vFrame.vCRC = _thread_pkt_CalcCRC();
0016A8 D13C              ACALL    _thread_pkt_CalcCRC
0016AA 900046            MOV      DPTR,#vFrame+06H
0016AD EE                MOV      A,R6
0016AE F0                MOVX     @DPTR,A
0016AF A3                INC      DPTR
0016B0 EF                MOV      A,R7
0016B1 F0                MOVX     @DPTR,A
  261: 
  262:         /* dump tx frame */
  263:         _thread_pkt_Dump(FALSE);
0016B2 C238              CLR      ?_thread_pkt_Dump?BIT
0016B4 12002A            LCALL    _thread_pkt_Dump
  264: 
  265:         /* emit frame */
  266:     	DRV_USB_WriteBlock((UINT8 *)&vFrame, PKT_HEADER_LEN+vFrame.vLen);
0016B7 12347D            LCALL    ?L?COM0036
0016BA 900045            MOV      DPTR,#vFrame+05H
0016BD E0                MOVX     A,@DPTR
0016BE 2408              ADD      A,#08H
0016C0 FD                MOV      R5,A
0016C1 900044            MOV      DPTR,#vFrame+04H
0016C4 E0                MOVX     A,@DPTR
0016C5 3400              ADDC     A,#00H
0016C7 FC                MOV      R4,A
0016C8 020086            LJMP     _Block_Write
  267:     }
----- FUNCTION _thread_pkt_Transmit (END) -------


----- FUNCTION _thread_pkt_Receive (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  137: static BOOL _thread_pkt_Receive(void)
  138: {
  139:     UINT16  vRxTotalLen;
  140:     UINT8   vBlockLen;
  141:     UINT16  vElaspedTime;
  142: 
  143:   #if 1
  144:     /* receive frame:
  145:      *  -> 1st block: pkt_header + pkt_content
  146:      *  -> 2nd block: pkt_content
  147:      *  -> 3rd block: pkt_content
  148:      *  -> ...
  149:      */
  150: 
  151:     /* receive 1st block */
  152:     memset(&vFrame, 0x00, sizeof(vFrame));
0016CB 123477            LCALL    ?L?COM0035
0016CE 1207F3            LCALL    ?C?MEMSET
  153:     vBlockLen = DRV_USB_ReadBlock((UINT8 *)&vFrame, DRV_USB_BLOCK_MAX_LEN);
0016D1 12347D            LCALL    ?L?COM0036
0016D4 1235AE            LCALL    ?L?COM0063
  154:     if (bFlushFIFO)
0016D7 30470B            JNB      bFlushFIFO,?C0010?THREAD_PKT
  155:     {
  156:         /* flush FIFO */
  157:         printf("flush FIFO!\n");
0016DA 7BFF              MOV      R3,#0FFH
0016DC 7A13              MOV      R2,#HIGH 01001349H
0016DE 7949              MOV      R1,#LOW 01001349H
0016E0 120262            LCALL    _printf
  158:         return FALSE;
0016E3 C3                CLR      C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 5


0016E4 22                RET      
  159:     }
0016E5         ?C0010?THREAD_PKT:
  160:     if ((vBlockLen < PKT_HEADER_LEN) || (vFrame.vMagicNo != vMagicNo))
0016E5 C3                CLR      C
0016E6 E52E              MOV      A,vBlockLen
0016E8 9408              SUBB     A,#08H
0016EA E4                CLR      A
0016EB 9400              SUBB     A,#00H
0016ED 400E              JC       ?C0013?THREAD_PKT
0016EF 900040            MOV      DPTR,#vFrame
0016F2 E0                MOVX     A,@DPTR
0016F3 6508              XRL      A,vMagicNo
0016F5 7004              JNZ      ?C0067?THREAD_PKT
0016F7 A3                INC      DPTR
0016F8 E0                MOVX     A,@DPTR
0016F9 6509              XRL      A,vMagicNo+01H
0016FB         ?C0067?THREAD_PKT:
0016FB 601A              JZ       ?C0012?THREAD_PKT
0016FD         ?C0013?THREAD_PKT:
  161:     {
  162:         /* invalid frame, force flush FIFO, w/o responding */
  163:         printf("invalid frame! (blockLen=%.2bX, magicNo=%.4hX)\n", vBlockLen, vFrame.vMagicNo);
0016FD 7BFF              MOV      R3,#0FFH
0016FF 7A13              MOV      R2,#HIGH 01001356H
001701 7956              MOV      R1,#LOW 01001356H
001703 852E34            MOV      ?_printf?BYTE+03H,vBlockLen
001706 900040            MOV      DPTR,#vFrame
001709 E0                MOVX     A,@DPTR
00170A F535              MOV      ?_printf?BYTE+04H,A
00170C A3                INC      DPTR
00170D E0                MOVX     A,@DPTR
00170E F536              MOV      ?_printf?BYTE+05H,A
001710 120262            LCALL    _printf
  164:         bFlushFIFO = TRUE;
001713 D247              SETB     bFlushFIFO
  165:         return FALSE;
001715 C3                CLR      C
001716 22                RET      
  166:     }
001717         ?C0012?THREAD_PKT:
  167:     if (vFrame.vVersion != PKT_VERSION)
001717 900042            MOV      DPTR,#vFrame+02H
00171A E0                MOVX     A,@DPTR
00171B 7004              JNZ      ?C0068?THREAD_PKT
00171D A3                INC      DPTR
00171E E0                MOVX     A,@DPTR
00171F 6401              XRL      A,#01H
001721         ?C0068?THREAD_PKT:
001721 6013              JZ       ?C0014?THREAD_PKT
  168:     {
  169:         /* invalid frame version, return supported version to host */
  170:         printf("invalid frame version!\n");
001723 7BFF              MOV      R3,#0FFH
001725 7A13              MOV      R2,#HIGH 01001386H
001727 7986              MOV      R1,#LOW 01001386H
001729 120262            LCALL    _printf
  171:         vFrame.vVersion = PKT_VERSION;
00172C 900042            MOV      DPTR,#vFrame+02H
00172F E4                CLR      A
001730 F0                MOVX     @DPTR,A
001731 A3                INC      DPTR
001732 04                INC      A
001733 F0                MOVX     @DPTR,A
  172:         return FALSE;
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 6


001734 C3                CLR      C
001735 22                RET      
  173:     }
001736         ?C0014?THREAD_PKT:
  174:     vRxTotalLen = vBlockLen-PKT_HEADER_LEN;
001736 E52E              MOV      A,vBlockLen
001738 24F8              ADD      A,#0F8H
00173A F52D              MOV      vRxTotalLen+01H,A
00173C E4                CLR      A
00173D 34FF              ADDC     A,#0FFH
00173F F52C              MOV      vRxTotalLen,A
  175: 
  176:     /* receive remaining blocks */
  177:     vElaspedTime = 0;
001741 E4                CLR      A
001742 F52F              MOV      vElaspedTime,A
001744 F530              MOV      vElaspedTime+01H,A
001746         ?C0015?THREAD_PKT:
  178:     while (vRxTotalLen < vFrame.vLen)
001746 D3                SETB     C
001747 900045            MOV      DPTR,#vFrame+05H
00174A E0                MOVX     A,@DPTR
00174B 952D              SUBB     A,vRxTotalLen+01H
00174D 900044            MOV      DPTR,#vFrame+04H
001750 E0                MOVX     A,@DPTR
001751 952C              SUBB     A,vRxTotalLen
001753 4048              JC       ?C0016?THREAD_PKT
  179:     {
  180:         vBlockLen = DRV_USB_ReadBlock(vFrame.vContent.buf+vRxTotalLen,
001755 7448              MOV      A,#LOW vFrame+08H
001757 252D              ADD      A,vRxTotalLen+01H
001759 F9                MOV      R1,A
00175A 7400              MOV      A,#HIGH vFrame+08H
00175C 352C              ADDC     A,vRxTotalLen
00175E FA                MOV      R2,A
00175F 7B01              MOV      R3,#01H
001761 1235AE            LCALL    ?L?COM0063
  181:                                       DRV_USB_BLOCK_MAX_LEN);
  182: 
  183:         if (vBlockLen == 0)
001764 E52E              MOV      A,vBlockLen
001766 7028              JNZ      ?C0017?THREAD_PKT
  184:         {
  185:             /* next block is still not ready */
  186: 
  187:             DRV_CPU_DelayUs(1);
001768 7F01              MOV      R7,#01H
00176A FE                MOV      R6,A
00176B 121C26            LCALL    _DRV_CPU_DelayUs
  188:             if (++vElaspedTime >= 50000)
00176E 0530              INC      vElaspedTime+01H
001770 E530              MOV      A,vElaspedTime+01H
001772 7002              JNZ      ?C0069?THREAD_PKT
001774 052F              INC      vElaspedTime
001776         ?C0069?THREAD_PKT:
001776 FF                MOV      R7,A
001777 AE2F              MOV      R6,vElaspedTime
001779 E4                CLR      A
00177A FC                MOV      R4,A
00177B FD                MOV      R5,A
00177C 7B50              MOV      R3,#050H
00177E 7AC3              MOV      R2,#0C3H
001780 F9                MOV      R1,A
001781 F8                MOV      R0,A
001782 D3                SETB     C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 7


001783 120607            LCALL    ?C?SLCMP
001786 50BE              JNC      ?C0015?THREAD_PKT
  189:             {
  190:                 /* timeout: 50ms */
  191:                 printf("rx packet timeout!\n");
001788 7BFF              MOV      R3,#0FFH
00178A 7A13              MOV      R2,#HIGH 0100139EH
00178C 799E              MOV      R1,#LOW 0100139EH
  192:                 PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  193:                 return FALSE;
00178E 8021              SJMP     ?C0076?THREAD_PKT
  194:             }
  195: 
  196:             continue;
  197:         }
001790         ?C0017?THREAD_PKT:
  198: 
  199:         vRxTotalLen += vBlockLen;
001790 E52E              MOV      A,vBlockLen
001792 252D              ADD      A,vRxTotalLen+01H
001794 F52D              MOV      vRxTotalLen+01H,A
001796 E4                CLR      A
001797 352C              ADDC     A,vRxTotalLen
001799 F52C              MOV      vRxTotalLen,A
  200:     }
00179B 80A9              SJMP     ?C0015?THREAD_PKT
00179D         ?C0016?THREAD_PKT:
  201: 
  202:     if (vRxTotalLen != vFrame.vLen)
00179D 900044            MOV      DPTR,#vFrame+04H
0017A0 E0                MOVX     A,@DPTR
0017A1 652C              XRL      A,vRxTotalLen
0017A3 7004              JNZ      ?C0070?THREAD_PKT
0017A5 A3                INC      DPTR
0017A6 E0                MOVX     A,@DPTR
0017A7 652D              XRL      A,vRxTotalLen+01H
0017A9         ?C0070?THREAD_PKT:
0017A9 600E              JZ       ?C0022?THREAD_PKT
  203:     {
  204:         printf("invalid packet length!\n");
0017AB 7BFF              MOV      R3,#0FFH
0017AD 7A13              MOV      R2,#HIGH 010013B2H
0017AF 79B2              MOV      R1,#LOW 010013B2H
0017B1         
0017B1 12354E            LCALL    ?L?COM004D
0017B4 7401              MOV      A,#01H
0017B6 F0                MOVX     @DPTR,A
  205:         PKT_SetReply(PKT_REPLY_Fail_InvalidContent);
  206:         return FALSE;
0017B7 C3                CLR      C
0017B8 22                RET      
  207:     }
0017B9         ?C0022?THREAD_PKT:
  208:   #endif
  209: 
  210: 	/* dump rx frame */
  211:     _thread_pkt_Dump(TRUE);
0017B9 D238              SETB     ?_thread_pkt_Dump?BIT
0017BB 12002A            LCALL    _thread_pkt_Dump
  212: 
  213:     /* frame verify: CRC */
  214:     if (vFrame.vCRC != _thread_pkt_CalcCRC())
0017BE D13C              ACALL    _thread_pkt_CalcCRC
0017C0 900046            MOV      DPTR,#vFrame+06H
0017C3 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 8


0017C4 6E                XRL      A,R6
0017C5 7003              JNZ      ?C0071?THREAD_PKT
0017C7 A3                INC      DPTR
0017C8 E0                MOVX     A,@DPTR
0017C9 6F                XRL      A,R7
0017CA         ?C0071?THREAD_PKT:
0017CA 600D              JZ       ?C0026?THREAD_PKT
  215:     {
  216:         printf("invalid CRC!\n");
0017CC 7BFF              MOV      R3,#0FFH
0017CE 7A13              MOV      R2,#HIGH 010013CAH
0017D0 79CA              MOV      R1,#LOW 010013CAH
0017D2 12354E            LCALL    ?L?COM004D
0017D5 14                DEC      A
0017D6 F0                MOVX     @DPTR,A
  217:         PKT_SetReply(PKT_REPLY_Fail_InvalidCRC);
  218:         return FALSE;
0017D7 C3                CLR      C
0017D8 22                RET      
  219:     }
0017D9         ?C0026?THREAD_PKT:
  220: 
  221:     return TRUE;
0017D9 D3                SETB     C
  222: }
0017DA 22                RET      
----- FUNCTION _thread_pkt_Receive (END) -------


----- FUNCTION _thread_Pkt_Notify (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  291: void thread_Pkt_Notify(IN UINT8 vEvent)
  292: {
;---- Variable 'vEvent' assigned to Register 'R7' ----
  293: 	if (vEvent & RX_COMPLETE)
  294: 	{
0017DB EF                MOV      A,R7
0017DC 30E208            JNB      ACC.2,?C0045?THREAD_PKT
  295: 		/* notify packet has been received */
  296: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017DF 050B              INC      vSCB_RxPkt+01H
0017E1 E50B              MOV      A,vSCB_RxPkt+01H
0017E3 7002              JNZ      ?C0073?THREAD_PKT
0017E5 050A              INC      vSCB_RxPkt
0017E7         ?C0073?THREAD_PKT:
  297: 	}
0017E7         ?C0045?THREAD_PKT:
  298: 
  299: 	if (vEvent & FIFO_PURGE)
0017E7 EF                MOV      A,R7
0017E8 30E30A            JNB      ACC.3,?C0047?THREAD_PKT
  300: 	{
  301:         /* notify the FIFO needs to be flushed */
  302: 		PT_SEM_SIGNAL(NULL, &vSCB_RxPkt);
0017EB 050B              INC      vSCB_RxPkt+01H
0017ED E50B              MOV      A,vSCB_RxPkt+01H
0017EF 7002              JNZ      ?C0074?THREAD_PKT
0017F1 050A              INC      vSCB_RxPkt
0017F3         ?C0074?THREAD_PKT:
  303:         bFlushFIFO = TRUE;
0017F3 D247              SETB     bFlushFIFO
  304: 	}
  305: }
0017F5         ?C0047?THREAD_PKT:
0017F5 22                RET      
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 9


----- FUNCTION _thread_Pkt_Notify (END) -------


----- FUNCTION _CFG_RAM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   84:                 break;
   85:         }
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0017F6 A807              MOV      R0,AR7
0017F8 E2                MOVX     A,@R0
0017F9 FE                MOV      R6,A
0017FA 08                INC      R0
0017FB E2                MOVX     A,@R0
0017FC FF                MOV      R7,A
0017FD 22                RET      
----- FUNCTION _CFG_RAM_GET16 (END) -------


----- FUNCTION _thread_pkt_Handle (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  224: static void _thread_pkt_Handle(void)
  225: {
  226: 	UINT16  vCmd;
  227: 	UINT16  vReply;
  228: 	UINT8   vLoop;
  229: 
  230:     vCmd = PKT_GetCmd();
001800 900048            MOV      DPTR,#vFrame+08H
001803 E0                MOVX     A,@DPTR
001804 F52C              MOV      vCmd,A
001806 A3                INC      DPTR
001807 E0                MOVX     A,@DPTR
001808 F52D              MOV      vCmd+01H,A
  231: 	vReply = PKT_REPLY_Fail_InvalidCmd;
;---- Variable 'vReply' assigned to Register 'R6/R7' ----
00180A 7403              MOV      A,#03H
00180C FF                MOV      R7,A
00180D FE                MOV      R6,A
  232: 	for (vLoop = 0; vLoop < COUNT_OF(aCmdTable); vLoop++)
00180E E4                CLR      A
00180F F52E              MOV      vLoop,A
001811         ?C0030?THREAD_PKT:
  233: 	{
  234: 		if (aCmdTable[vLoop].vCmd == vCmd)
001811 E52E              MOV      A,vLoop
001813 25E0              ADD      A,ACC
001815 25E0              ADD      A,ACC
001817 24D8              ADD      A,#LOW aCmdTable
001819 F582              MOV      DPL,A
00181B E4                CLR      A
00181C 3413              ADDC     A,#HIGH aCmdTable
00181E F583              MOV      DPH,A
001820 7401              MOV      A,#01H
001822 93                MOVC     A,@A+DPTR
001823 B52D22            CJNE     A,vCmd+01H,?C0032?THREAD_PKT
001826 E4                CLR      A
001827 93                MOVC     A,@A+DPTR
001828 B52C1D            CJNE     A,vCmd,?C0032?THREAD_PKT
  235: 		{
  236: 			vReply = aCmdTable[vLoop].pExec();
00182B E52E              MOV      A,vLoop
00182D 25E0              ADD      A,ACC
00182F 25E0              ADD      A,ACC
001831 24DA              ADD      A,#LOW aCmdTable+02H
001833 F582              MOV      DPL,A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 10


001835 E4                CLR      A
001836 3413              ADDC     A,#HIGH aCmdTable+02H
001838 F583              MOV      DPH,A
00183A E4                CLR      A
00183B 93                MOVC     A,@A+DPTR
00183C FE                MOV      R6,A
00183D 7401              MOV      A,#01H
00183F 93                MOVC     A,@A+DPTR
001840 AA06              MOV      R2,AR6
001842 F9                MOV      R1,A
001843 120704            LCALL    ?C?ICALL
  237: 			break;
001846 8009              SJMP     ?C0036?THREAD_PKT
  238: 		}
  239: 	}
001848         ?C0032?THREAD_PKT:
001848 052E              INC      vLoop
00184A E52E              MOV      A,vLoop
00184C C3                CLR      C
00184D 9411              SUBB     A,#011H
00184F 40C0              JC       ?C0030?THREAD_PKT
001851         ?C0036?THREAD_PKT:
  240: 
  241: 	PKT_SetReply(vReply);
001851 900048            MOV      DPTR,#vFrame+08H
001854 EE                MOV      A,R6
001855 F0                MOVX     @DPTR,A
001856 A3                INC      DPTR
001857 EF                MOV      A,R7
001858 F0                MOVX     @DPTR,A
  242:     if (PKT_GetReplyState(vReply) == PKT_ReplyState_Fail)
001859 EE                MOV      A,R6
00185A 6403              XRL      A,#03H
00185C 7004              JNZ      ?C0041?THREAD_PKT
  243:     {
  244:         PKT_SetPayloadSize(0x00);
00185E A3                INC      DPTR
00185F F0                MOVX     @DPTR,A
001860 A3                INC      DPTR
001861 F0                MOVX     @DPTR,A
  245:     }
  246: }
001862         ?C0041?THREAD_PKT:
001862 22                RET      
----- FUNCTION _thread_pkt_Handle (END) -------


----- FUNCTION thread_PKT_Entry (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  322: OS_HANDLE thread_PKT_Entry(void)
  323: {
  324:     PT_BEGIN(&vTCB_Pkt);
  325: 
001863 752B01            MOV      PT_YIELD_FLAG,#01H
001866         ?C0048?THREAD_PKT:
001866 E50D              MOV      A,vTCB_Pkt+01H
001868 850CF0            MOV      B,vTCB_Pkt
00186B 12069D            LCALL    ?C?ICASE
00186E 187A              DW       ?C0058?THREAD_PKT
001870 0000              DW       00H
001872 1880              DW       ?C0059?THREAD_PKT
001874 0149              DW       0149H
001876 0000              DW       00H
001878 18AF              DW       ?C0049?THREAD_PKT
  326:     for (;;)
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 11


  327:     {
  328:         /* wait for packet */
  329:         PT_SEM_WAIT(&vTCB_Pkt, &vSCB_RxPkt);
00187A         ?C0058?THREAD_PKT:
00187A 750C01            MOV      vTCB_Pkt,#01H
00187D 750D49            MOV      vTCB_Pkt+01H,#049H
001880         ?C0059?THREAD_PKT:
001880 AE0A              MOV      R6,vSCB_RxPkt
001882 AF0B              MOV      R7,vSCB_RxPkt+01H
001884 D3                SETB     C
001885 EF                MOV      A,R7
001886 9400              SUBB     A,#00H
001888 EE                MOV      A,R6
001889 9400              SUBB     A,#00H
00188B 4003              JC       ?C0061?THREAD_PKT
00188D D3                SETB     C
00188E 8001              SJMP     ?C0062?THREAD_PKT
001890         ?C0061?THREAD_PKT:
001890 C3                CLR      C
001891         ?C0062?THREAD_PKT:
001891 4003              JC       ?C0057?THREAD_PKT
001893 7F00              MOV      R7,#00H
001895 22                RET      
001896         ?C0057?THREAD_PKT:
001896 E50B              MOV      A,vSCB_RxPkt+01H
001898 150B              DEC      vSCB_RxPkt+01H
00189A 7002              JNZ      ?C0075?THREAD_PKT
00189C 150A              DEC      vSCB_RxPkt
00189E         ?C0075?THREAD_PKT:
  330: 
  331:         if (_thread_pkt_Receive())
00189E 1216CB            LCALL    _thread_pkt_Receive
0018A1 5002              JNC      ?C0064?THREAD_PKT
  332:         {
  333:             _thread_pkt_Handle();
0018A3 1100              ACALL    _thread_pkt_Handle
  334:         }
0018A5         ?C0064?THREAD_PKT:
  335:         _thread_pkt_Transmit();
0018A5 121688            LCALL    _thread_pkt_Transmit
  336: 
  337:         /* reset packet counter */
  338:         PT_SEM_INIT(&vSCB_RxPkt, 0);
0018A8 E4                CLR      A
0018A9 F50A              MOV      vSCB_RxPkt,A
0018AB F50B              MOV      vSCB_RxPkt+01H,A
  339:     }
0018AD 80CB              SJMP     ?C0058?THREAD_PKT
  340: 
  341:     PT_END(&vTCB_Pkt);
0018AF         ?C0049?THREAD_PKT:
0018AF E4                CLR      A
0018B0 F52B              MOV      PT_YIELD_FLAG,A
0018B2 F50C              MOV      vTCB_Pkt,A
0018B4 F50D              MOV      vTCB_Pkt+01H,A
0018B6 7F03              MOV      R7,#03H
  342: }
0018B8 22                RET      
----- FUNCTION thread_PKT_Entry (END) -------


----- FUNCTION thread_PKT_Init (BEGIN) -----
 FILE: '..\pkt\thread_pkt.c'
  359: void thread_PKT_Init(void)
  360: {
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 12


  361:     PT_INIT(&vTCB_Pkt);
  362:     PT_SEM_INIT(&vSCB_RxPkt, 0);
0018B9 E4                CLR      A
0018BA F50C              MOV      vTCB_Pkt,A
0018BC F50D              MOV      vTCB_Pkt+01H,A
  363: 
0018BE F50A              MOV      vSCB_RxPkt,A
0018C0 F50B              MOV      vSCB_RxPkt+01H,A
  364:     vMagicNo = CFG_GET(Vendor_PKT_MagicNo);
0018C2 7F76              MOV      R7,#076H
0018C4 7E38              MOV      R6,#038H
0018C6 11CD              ACALL    _CFG_ROM_GET16
0018C8 8E08              MOV      vMagicNo,R6
0018CA 8F09              MOV      vMagicNo+01H,R7
  365: }
0018CC 22                RET      
----- FUNCTION thread_PKT_Init (END) -------


----- FUNCTION _CFG_ROM_GET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   85:         }
   86:     }
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
0018CD 8F82              MOV      DPL,R7
0018CF 8E83              MOV      DPH,R6
0018D1 E4                CLR      A
0018D2 93                MOVC     A,@A+DPTR
0018D3 FE                MOV      R6,A
0018D4 7401              MOV      A,#01H
0018D6 93                MOVC     A,@A+DPTR
0018D7 FF                MOV      R7,A
0018D8 22                RET      
----- FUNCTION _CFG_ROM_GET16 (END) -------


----- FUNCTION APL_Entry (BEGIN) -----
 FILE: '..\apl\apl.c'
  120: void APL_Entry(void)
  121: {
  122:     /* PWM_VBUF */
  123:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
0018D9 7818              MOV      R0,#018H
0018DB E2                MOVX     A,@R0
0018DC FF                MOV      R7,A
0018DD 8FFC              MOV      PCA0CPH0,R7
0018DF         ?C0163?APL:
  124: 
  125: 	/* DDM */
  126: 	CFG_SET_DDM(DDM_EVB_TEMP, apl_ddm_GetEVBTemp());
0018DF 122F16            LCALL    apl_ddm_GetEVBTemp
0018E2 AC06              MOV      R4,AR6
0018E4 AD07              MOV      R5,AR7
0018E6 E4                CLR      A
0018E7 FF                MOV      R7,A
0018E8 FE                MOV      R6,A
0018E9 F1EF              ACALL    _CFG_RAM_SET16
0018EB         ?C0170?APL:
  127: 	CFG_SET_DDM(DDM_EVB_VCC,  apl_ddm_GetEVBVCC());
0018EB 122FDB            LCALL    apl_ddm_GetEVBVCC
0018EE AC06              MOV      R4,AR6
0018F0 AD07              MOV      R5,AR7
0018F2 7F02              MOV      R7,#02H
0018F4 7E00              MOV      R6,#00H
0018F6 F1EF              ACALL    _CFG_RAM_SET16
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 13


0018F8         ?C0177?APL:
  128: 	CFG_SET_DDM(DDM_EVB_VBUF, apl_ddm_GetEVBVBUF());
0018F8 123089            LCALL    apl_ddm_GetEVBVBUF
0018FB AC06              MOV      R4,AR6
0018FD AD07              MOV      R5,AR7
0018FF 7F04              MOV      R7,#04H
001901 7E00              MOV      R6,#00H
001903 F1EF              ACALL    _CFG_RAM_SET16
001905         ?C0176?APL:
  129: 
  130:     /* RT_EVB_STAT */
  131:   #if 1
  132:     /* EVB Temperature */
  133:     if (((SINT16)CFG_GET(DDM_EVB_TEMP) > (SINT16)CFG_GET(DDM_EVB_TEMP_Max)) ||
  134:         ((SINT16)CFG_GET(DDM_EVB_TEMP) < (SINT16)CFG_GET(DDM_EVB_TEMP_Min)))
001905 7F40              MOV      R7,#040H
001907 123467            LCALL    ?L?COM0032
00190A C006              PUSH     AR6
00190C C007              PUSH     AR7
00190E FF                MOV      R7,A
00190F 1233E2            LCALL    ?L?COM0021
001912 D007              POP      AR7
001914 D006              POP      AR6
001916 D3                SETB     C
001917 123530            LCALL    ?L?COM0049
00191A 5017              JNC      ?C0219?APL
00191C 7F42              MOV      R7,#042H
00191E 123467            LCALL    ?L?COM0032
001921 C006              PUSH     AR6
001923 C007              PUSH     AR7
001925 FF                MOV      R7,A
001926 1233E2            LCALL    ?L?COM0021
001929 D007              POP      AR7
00192B D006              POP      AR6
00192D C3                CLR      C
00192E 123530            LCALL    ?L?COM0049
001931 500D              JNC      ?C0267?APL
  135:     {
  136:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, LOW);
001933         ?C0219?APL:
001933 E4                CLR      A
001934 F52C              MOV      _v,A
001936 7819              MOV      R0,#019H
001938 E2                MOVX     A,@R0
001939 1232B4            LCALL    ?L?COM000A
00193C 6020              JZ       ?C0231?APL
00193E 800B              SJMP     ?C0626?APL
  137:     }
  138:     else
  139:     {
  140:         CFG_SET(RT_EVB_STAT_EVB_TEMP_Ready, HIGH);
001940         ?C0267?APL:
001940 752C01            MOV      _v,#01H
001943 7819              MOV      R0,#019H
001945 E2                MOVX     A,@R0
001946 1232B4            LCALL    ?L?COM000A
001949 6013              JZ       ?C0231?APL
00194B         
00194B 7819              MOV      R0,#019H
00194D E2                MOVX     A,@R0
00194E FF                MOV      R7,A
00194F EF                MOV      A,R7
001950 54FE              ANL      A,#0FEH
001952 FB                MOV      R3,A
001953 E52C              MOV      A,_v
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 14


001955 5401              ANL      A,#01H
001957 FF                MOV      R7,A
001958 EF                MOV      A,R7
001959 4B                ORL      A,R3
00195A FF                MOV      R7,A
00195B E4                CLR      A
00195C EF                MOV      A,R7
00195D F2                MOVX     @R0,A
  141:     }
00195E         ?C0231?APL:
  142: 
  143:     /* EVB VCC */
  144:     if (((UINT16)CFG_GET(DDM_EVB_VCC) > (UINT16)CFG_GET(DDM_EVB_VCC_Max)) ||
  145:         ((UINT16)CFG_GET(DDM_EVB_VCC) < (UINT16)CFG_GET(DDM_EVB_VCC_Min)))
00195E 7F44              MOV      R7,#044H
001960 123467            LCALL    ?L?COM0032
001963 C006              PUSH     AR6
001965 C007              PUSH     AR7
001967 7F02              MOV      R7,#02H
001969 1233E2            LCALL    ?L?COM0021
00196C D007              POP      AR7
00196E D006              POP      AR6
001970 D3                SETB     C
001971 ED                MOV      A,R5
001972 9F                SUBB     A,R7
001973 EC                MOV      A,R4
001974 9E                SUBB     A,R6
001975 5019              JNC      ?C0316?APL
001977 7F46              MOV      R7,#046H
001979 123467            LCALL    ?L?COM0032
00197C C006              PUSH     AR6
00197E C007              PUSH     AR7
001980 7F02              MOV      R7,#02H
001982 1233E2            LCALL    ?L?COM0021
001985 D007              POP      AR7
001987 D006              POP      AR6
001989 C3                CLR      C
00198A ED                MOV      A,R5
00198B 9F                SUBB     A,R7
00198C EC                MOV      A,R4
00198D 9E                SUBB     A,R6
00198E 500F              JNC      ?C0364?APL
  146:     {
  147:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, LOW);
001990         ?C0316?APL:
001990 E4                CLR      A
001991 F52C              MOV      _v,A
001993 7819              MOV      R0,#019H
001995 E2                MOVX     A,@R0
001996 C3                CLR      C
001997 13                RRC      A
001998 1232B4            LCALL    ?L?COM000A
00199B 6033              JZ       ?C0328?APL
00199D 800D              SJMP     ?C0627?APL
  148:     }
  149:     else
  150:     {
  151:         CFG_SET(RT_EVB_STAT_EVB_VCC_Ready, HIGH);
00199F         ?C0364?APL:
00199F 752C01            MOV      _v,#01H
0019A2 7819              MOV      R0,#019H
0019A4 E2                MOVX     A,@R0
0019A5 C3                CLR      C
0019A6 13                RRC      A
0019A7 1232B4            LCALL    ?L?COM000A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 15


0019AA 6024              JZ       ?C0328?APL
0019AC         
0019AC 1233D6            LCALL    ?L?COM001E
0019AF 54FD              ANL      A,#0FDH
0019B1 FF                MOV      R7,A
0019B2 C004              PUSH     AR4
0019B4 C005              PUSH     AR5
0019B6 C006              PUSH     AR6
0019B8 C007              PUSH     AR7
0019BA E52C              MOV      A,_v
0019BC 5401              ANL      A,#01H
0019BE FF                MOV      R7,A
0019BF E4                CLR      A
0019C0 7801              MOV      R0,#01H
0019C2 120642            LCALL    ?C?LSHL
0019C5 D003              POP      AR3
0019C7 D002              POP      AR2
0019C9 D001              POP      AR1
0019CB D000              POP      AR0
0019CD 1233FB            LCALL    ?L?COM0027
  152:     }
0019D0         ?C0328?APL:
  153: 
  154:     /* EVB VBUF */
  155:     if (((UINT16)CFG_GET(DDM_EVB_VBUF) > (UINT16)CFG_GET(DDM_EVB_VBUF_Max)) ||
  156:         ((UINT16)CFG_GET(DDM_EVB_VBUF) < (UINT16)CFG_GET(DDM_EVB_VBUF_Min)))
0019D0 7F48              MOV      R7,#048H
0019D2 123467            LCALL    ?L?COM0032
0019D5 C006              PUSH     AR6
0019D7 C007              PUSH     AR7
0019D9 1233E0            LCALL    ?L?COM0020
0019DC D007              POP      AR7
0019DE D006              POP      AR6
0019E0 D3                SETB     C
0019E1 ED                MOV      A,R5
0019E2 9F                SUBB     A,R7
0019E3 EC                MOV      A,R4
0019E4 9E                SUBB     A,R6
0019E5 5017              JNC      ?C0413?APL
0019E7 7F4A              MOV      R7,#04AH
0019E9 123467            LCALL    ?L?COM0032
0019EC C006              PUSH     AR6
0019EE C007              PUSH     AR7
0019F0 1233E0            LCALL    ?L?COM0020
0019F3 D007              POP      AR7
0019F5 D006              POP      AR6
0019F7 C3                CLR      C
0019F8 ED                MOV      A,R5
0019F9 9F                SUBB     A,R7
0019FA EC                MOV      A,R4
0019FB 9E                SUBB     A,R6
0019FC 500D              JNC      ?C0461?APL
  157:     {
  158:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, LOW);
0019FE         ?C0413?APL:
0019FE E4                CLR      A
0019FF F52C              MOV      _v,A
001A01 123520            LCALL    ?L?COM0045
001A04 1232B4            LCALL    ?L?COM000A
001A07 6031              JZ       ?C0425?APL
001A09 800B              SJMP     ?C0628?APL
  159:     }
  160:     else
  161:     {
  162:         CFG_SET(RT_EVB_STAT_EVB_VBUF_Ready, HIGH);
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 16


001A0B         ?C0461?APL:
001A0B 752C01            MOV      _v,#01H
001A0E 123520            LCALL    ?L?COM0045
001A11 1232B4            LCALL    ?L?COM000A
001A14 6024              JZ       ?C0425?APL
001A16         
001A16 1233D6            LCALL    ?L?COM001E
001A19 54FB              ANL      A,#0FBH
001A1B FF                MOV      R7,A
001A1C C004              PUSH     AR4
001A1E C005              PUSH     AR5
001A20 C006              PUSH     AR6
001A22 C007              PUSH     AR7
001A24 E52C              MOV      A,_v
001A26 5401              ANL      A,#01H
001A28 FF                MOV      R7,A
001A29 E4                CLR      A
001A2A 7802              MOV      R0,#02H
001A2C 120642            LCALL    ?C?LSHL
001A2F D003              POP      AR3
001A31 D002              POP      AR2
001A33 D001              POP      AR1
001A35 D000              POP      AR0
001A37 1233FB            LCALL    ?L?COM0027
  163:     }
001A3A         ?C0425?APL:
  164: 
  165:     /* EVB Global Ready */
  166:     if ((CFG_GET(RT_EVB_STAT_EVB_TEMP_Ready) == HIGH) &&
  167:         (CFG_GET(RT_EVB_STAT_EVB_VCC_Ready)  == HIGH) &&
  168:         (CFG_GET(RT_EVB_STAT_EVB_VBUF_Ready) == HIGH))
001A3A 1233D6            LCALL    ?L?COM001E
001A3D 1234E0            LCALL    ?L?COM003F
001A40 702E              JNZ      ?C0557?APL
001A42 7819              MOV      R0,#019H
001A44 E2                MOVX     A,@R0
001A45 C3                CLR      C
001A46 13                RRC      A
001A47 1233D9            LCALL    ?L?COM001F
001A4A 5401              ANL      A,#01H
001A4C FF                MOV      R7,A
001A4D E4                CLR      A
001A4E F8                MOV      R0,A
001A4F C3                CLR      C
001A50 12061D            LCALL    ?C?ULCMP
001A53 701B              JNZ      ?C0557?APL
001A55 123520            LCALL    ?L?COM0045
001A58 1233D9            LCALL    ?L?COM001F
001A5B 5401              ANL      A,#01H
001A5D FF                MOV      R7,A
001A5E E4                CLR      A
001A5F F8                MOV      R0,A
001A60 C3                CLR      C
001A61 12061D            LCALL    ?C?ULCMP
001A64 700A              JNZ      ?C0557?APL
  169:     {
  170:         CFG_SET(RT_EVB_STAT_Global_Ready, HIGH);
001A66         ?C0509?APL:
001A66 752C01            MOV      _v,#01H
001A69 1232AB            LCALL    ?L?COM0009
001A6C 602E              JZ       ?C0569?APL
001A6E 8008              SJMP     ?C0629?APL
  171:     }
  172:     else
  173:     {
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 17


  174:         CFG_SET(RT_EVB_STAT_Global_Ready, LOW);
001A70         ?C0557?APL:
001A70 E4                CLR      A
001A71 F52C              MOV      _v,A
001A73 1232AB            LCALL    ?L?COM0009
001A76 6024              JZ       ?C0569?APL
001A78         
001A78 1233D6            LCALL    ?L?COM001E
001A7B 547F              ANL      A,#07FH
001A7D FF                MOV      R7,A
001A7E C004              PUSH     AR4
001A80 C005              PUSH     AR5
001A82 C006              PUSH     AR6
001A84 C007              PUSH     AR7
001A86 E52C              MOV      A,_v
001A88 5401              ANL      A,#01H
001A8A FF                MOV      R7,A
001A8B E4                CLR      A
001A8C 7807              MOV      R0,#07H
001A8E 120642            LCALL    ?C?LSHL
001A91 D003              POP      AR3
001A93 D002              POP      AR2
001A95 D001              POP      AR1
001A97 D000              POP      AR0
001A99 1233FB            LCALL    ?L?COM0027
  175:     }
  176:   #endif
  177: }
001A9C         ?C0569?APL:
001A9C 22                RET      
----- FUNCTION APL_Entry (END) -------


----- FUNCTION __pkt_i2cm_TxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  126: static BOOL _pkt_i2cm_TxByte(UINT8 vData)
  127: {
001A9D 8F3F              MOV      vData,R7
  128:     UINT8   vLoop;
  129:     BOOL    vAck;
  130: 
  131:     for (vLoop = 8; vLoop != 0; vLoop--)
001A9F 754008            MOV      vLoop,#08H
001AA2         ?C0001?PKT_I2CM:
  132:     {
  133:         /* transmitting data, MSB first, LSB last */
  134:         CROL(vData, 1);
001AA2 AF3F              MOV      R7,vData
001AA4 7801              MOV      R0,#01H
001AA6 EF                MOV      A,R7
001AA7 08                INC      R0
001AA8 8001              SJMP     ?C0371?PKT_I2CM
001AAA         ?C0370?PKT_I2CM:
001AAA 23                RL       A
001AAB         ?C0371?PKT_I2CM:
001AAB D8FD              DJNZ     R0,?C0370?PKT_I2CM
001AAD F53F              MOV      vData,A
  135:         PKT_I2CM_SET_SDA(vData & 0x1);
001AAF 13                RRC      A
001AB0 9292              MOV      IO_DUT_I2CM_SDA,C
  136: 
  137:         PKT_I2CM_SET_SCL(HIGH);
001AB2 1232CF            LCALL    ?L?COM000D
001AB5 12345E            LCALL    ?L?COM0031
001AB8         ?C0020?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 18


001AB8 20820E            JB       IO_DUT_I2CM_SCL,?C0027?PKT_I2CM
001ABB 123519            LCALL    ?L?COM0044
001ABE 7002              JNZ      ?C0372?PKT_I2CM
001AC0 1541              DEC      _loop
001AC2         ?C0372?PKT_I2CM:
001AC2 4E                ORL      A,R6
001AC3 6004              JZ       ?C0027?PKT_I2CM
001AC5 9122              ACALL    ?L?COM0008
001AC7 80EF              SJMP     ?C0020?PKT_I2CM
  138:         PKT_I2CM_SET_SCL(LOW);
001AC9         ?C0027?PKT_I2CM:
001AC9 1232CF            LCALL    ?L?COM000D
001ACC C282              CLR      IO_DUT_I2CM_SCL
001ACE 8000              SJMP     ?C0003?PKT_I2CM
  139:     }
001AD0         ?C0003?PKT_I2CM:
001AD0 D540CF            DJNZ     vLoop,?C0001?PKT_I2CM
001AD3         ?C0036?PKT_I2CM:
  140: 
  141:     /* release SDA */
  142:     PKT_I2CM_SET_SDA(HIGH);
001AD3 D292              SETB     IO_DUT_I2CM_SDA
  143: 
  144:     /* check ACK */
  145:     PKT_I2CM_SET_SCL(HIGH);
001AD5 1232CF            LCALL    ?L?COM000D
001AD8 12345E            LCALL    ?L?COM0031
001ADB         ?C0047?PKT_I2CM:
001ADB 20820E            JB       IO_DUT_I2CM_SCL,?C0038?PKT_I2CM
001ADE 123519            LCALL    ?L?COM0044
001AE1 7002              JNZ      ?C0374?PKT_I2CM
001AE3 1541              DEC      _loop
001AE5         ?C0374?PKT_I2CM:
001AE5 4E                ORL      A,R6
001AE6 6004              JZ       ?C0038?PKT_I2CM
001AE8 9122              ACALL    ?L?COM0008
001AEA 80EF              SJMP     ?C0047?PKT_I2CM
001AEC         ?C0038?PKT_I2CM:
  146:     vAck = PKT_I2CM_GET_SDA();
001AEC A292              MOV      C,IO_DUT_I2CM_SDA
001AEE 923A              MOV      vAck,C
  147:     PKT_I2CM_SET_SCL(LOW);
001AF0 1232CF            LCALL    ?L?COM000D
001AF3 C282              CLR      IO_DUT_I2CM_SCL
001AF5 8000              SJMP     ?C0050?PKT_I2CM
001AF7         ?C0050?PKT_I2CM:
  148: 
  149:     return !vAck;
001AF7 A23A              MOV      C,vAck
001AF9 B3                CPL      C
  150: }
001AFA 22                RET      
----- FUNCTION __pkt_i2cm_TxByte (END) -------


----- FUNCTION _pkt_i2cm_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  221: static BOOL pkt_i2cm_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  222: {
001AFB 12357D            LCALL    ?L?COM005D
001AFE A3                INC      DPTR
001AFF 123349            LCALL    ?L?COM0013
  223:     UINT16  vWriteLen = pPayload->vWriteLen;
  224:     UINT16  vReadLen  = pPayload->vReadLen;
001B02 1234A4            LCALL    ?L?COM003B
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 19


  225:     BOOL    bIntState;
  226:     BOOL    bDone = FALSE;
001B05 C239              CLR      bDone
  227:     UINT16  vLoop;
  228: 
  229:     /* make sure the I2C is ready */
  230:     if (!_pkt_i2cm_CheckReady())
001B07 9146              ACALL    _pkt_i2cm_CheckReady
001B09 4003              JC       ?C0213?PKT_I2CM
  231:     {
  232:         return bDone;
001B0B A239              MOV      C,bDone
001B0D 22                RET      
  233:     }
001B0E         ?C0213?PKT_I2CM:
  234: 
  235:     /* lock globally interrupt */
  236:     bIntState = DRV_INT_LockGlobalInterrupt();
001B0E 30AF05            JNB      EA,?C0215?PKT_I2CM
001B11 C2AF              CLR      EA
001B13 D3                SETB     C
001B14 8001              SJMP     ?C0216?PKT_I2CM
001B16         ?C0215?PKT_I2CM:
001B16 C3                CLR      C
001B17         ?C0216?PKT_I2CM:
001B17 9238              MOV      bIntState,C
  237: 
  238:     /* send write stream */
  239:     if ((vWriteLen != 0)
001B19 E538              MOV      A,vWriteLen+01H
001B1B 4537              ORL      A,vWriteLen
001B1D 700C              JNZ      ?C0224?PKT_I2CM
001B1F E538              MOV      A,vWriteLen+01H
001B21 4537              ORL      A,vWriteLen
001B23 706C              JNZ      ?C0217?PKT_I2CM
001B25 E53A              MOV      A,vReadLen+01H
001B27 4539              ORL      A,vReadLen
001B29 7066              JNZ      ?C0217?PKT_I2CM
  240:         || ((vWriteLen == 0) && (vReadLen == 0)))
  241:     {
  242:         /* send I2C start */
  243:         _pkt_i2cm_Start();
001B2B         ?C0224?PKT_I2CM:
001B2B D292              SETB     IO_DUT_I2CM_SDA
001B2D 1232CF            LCALL    ?L?COM000D
001B30 1234F6            LCALL    ?L?COM0041
001B33         ?C0235?PKT_I2CM:
001B33 208211            JB       IO_DUT_I2CM_SCL,?C0239?PKT_I2CM
001B36 E53E              MOV      A,_loop+01H
001B38 153E              DEC      _loop+01H
001B3A AE3D              MOV      R6,_loop
001B3C 7002              JNZ      ?C0385?PKT_I2CM
001B3E 153D              DEC      _loop
001B40         ?C0385?PKT_I2CM:
001B40 4E                ORL      A,R6
001B41 6004              JZ       ?C0239?PKT_I2CM
001B43 9122              ACALL    ?L?COM0008
001B45 80EC              SJMP     ?C0235?PKT_I2CM
001B47         ?C0239?PKT_I2CM:
001B47 1232C6            LCALL    ?L?COM000B
001B4A C282              CLR      IO_DUT_I2CM_SCL
001B4C 8000              SJMP     ?C0220?PKT_I2CM
001B4E         ?C0220?PKT_I2CM:
  244: 
  245:         /* send I2C slave address + write */
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 20


  246:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr&0xFE))
001B4E 1235A6            LCALL    ?L?COM0062
001B51 54FE              ANL      A,#0FEH
001B53 FF                MOV      R7,A
001B54 519D              ACALL    __pkt_i2cm_TxByte
001B56 4002              JC       $ + 4H
001B58 61F6              AJMP     ?C0309?PKT_I2CM
  247:         {
  248:             goto _exit;
  249:         }
001B5A         ?C0255?PKT_I2CM:
  250: 
  251:         /* send write buffer */
  252:         for (vLoop = 0; vLoop < vWriteLen; vLoop++)
001B5A E4                CLR      A
001B5B F53B              MOV      vLoop,A
001B5D F53C              MOV      vLoop+01H,A
001B5F         ?C0257?PKT_I2CM:
001B5F C3                CLR      C
001B60 E53C              MOV      A,vLoop+01H
001B62 9538              SUBB     A,vWriteLen+01H
001B64 E53B              MOV      A,vLoop
001B66 9537              SUBB     A,vWriteLen
001B68 5027              JNC      ?C0217?PKT_I2CM
  253:         {
  254:             if (!_pkt_i2cm_TxByte(pPayload->aBuf[vLoop]))
001B6A E536              MOV      A,pPayload+01H
001B6C 2405              ADD      A,#05H
001B6E F582              MOV      DPL,A
001B70 E4                CLR      A
001B71 3535              ADDC     A,pPayload
001B73 F583              MOV      DPH,A
001B75 E582              MOV      A,DPL
001B77 253C              ADD      A,vLoop+01H
001B79 F582              MOV      DPL,A
001B7B E583              MOV      A,DPH
001B7D 353B              ADDC     A,vLoop
001B7F F583              MOV      DPH,A
001B81 E0                MOVX     A,@DPTR
001B82 FF                MOV      R7,A
001B83 519D              ACALL    __pkt_i2cm_TxByte
001B85 506F              JNC      ?C0309?PKT_I2CM
  255:             {
  256:                 goto _exit;
  257:             }
001B87         ?C0260?PKT_I2CM:
  258:         }
001B87         ?C0259?PKT_I2CM:
001B87 053C              INC      vLoop+01H
001B89 E53C              MOV      A,vLoop+01H
001B8B 7002              JNZ      ?C0387?PKT_I2CM
001B8D 053B              INC      vLoop
001B8F         ?C0387?PKT_I2CM:
001B8F 80CE              SJMP     ?C0257?PKT_I2CM
  259:     }
001B91         ?C0217?PKT_I2CM:
  260: 
  261:     /* send read stream */
  262:     if (vReadLen != 0)
001B91 E53A              MOV      A,vReadLen+01H
001B93 4539              ORL      A,vReadLen
001B95 605D              JZ       ?C0261?PKT_I2CM
  263:     {
  264:         /* send I2C start/restart */
  265:         _pkt_i2cm_Start();
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 21


001B97 D292              SETB     IO_DUT_I2CM_SDA
001B99 1232CF            LCALL    ?L?COM000D
001B9C 1234F6            LCALL    ?L?COM0041
001B9F         ?C0278?PKT_I2CM:
001B9F 208211            JB       IO_DUT_I2CM_SCL,?C0282?PKT_I2CM
001BA2 E53E              MOV      A,_loop+01H
001BA4 153E              DEC      _loop+01H
001BA6 AE3D              MOV      R6,_loop
001BA8 7002              JNZ      ?C0388?PKT_I2CM
001BAA 153D              DEC      _loop
001BAC         ?C0388?PKT_I2CM:
001BAC 4E                ORL      A,R6
001BAD 6004              JZ       ?C0282?PKT_I2CM
001BAF 9122              ACALL    ?L?COM0008
001BB1 80EC              SJMP     ?C0278?PKT_I2CM
001BB3         ?C0282?PKT_I2CM:
001BB3 1232C6            LCALL    ?L?COM000B
001BB6 C282              CLR      IO_DUT_I2CM_SCL
001BB8 8000              SJMP     ?C0263?PKT_I2CM
001BBA         ?C0263?PKT_I2CM:
  266: 
  267:         /* send I2C slave address + read */
  268:         if (!_pkt_i2cm_TxByte(pPayload->vI2cAddr|0x01))
001BBA 1235A6            LCALL    ?L?COM0062
001BBD 4401              ORL      A,#01H
001BBF FF                MOV      R7,A
001BC0 519D              ACALL    __pkt_i2cm_TxByte
001BC2 5032              JNC      ?C0309?PKT_I2CM
  269:         {
  270:             goto _exit;
  271:         }
001BC4         ?C0298?PKT_I2CM:
  272: 
  273:         /* read data */
  274:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
001BC4 E4                CLR      A
001BC5 F53B              MOV      vLoop,A
001BC7 F53C              MOV      vLoop+01H,A
001BC9         ?C0299?PKT_I2CM:
001BC9 12359E            LCALL    ?L?COM0061
001BCC 9539              SUBB     A,vReadLen
001BCE 5024              JNC      ?C0261?PKT_I2CM
  275:         {
  276:             pPayload->aBuf[vWriteLen+vLoop] =
001BD0 E53A              MOV      A,vReadLen+01H
001BD2 24FF              ADD      A,#0FFH
001BD4 FF                MOV      R7,A
001BD5 E539              MOV      A,vReadLen
001BD7 34FF              ADDC     A,#0FFH
001BD9 FE                MOV      R6,A
001BDA EF                MOV      A,R7
001BDB B53C07            CJNE     A,vLoop+01H,?C0302?PKT_I2CM
001BDE EE                MOV      A,R6
001BDF B53B03            CJNE     A,vLoop,?C0302?PKT_I2CM
001BE2 D3                SETB     C
001BE3 8001              SJMP     ?C0303?PKT_I2CM
001BE5         ?C0302?PKT_I2CM:
001BE5 C3                CLR      C
001BE6         ?C0303?PKT_I2CM:
001BE6 923A              MOV      ?_pkt_i2cm_RxByte?BIT,C
001BE8 1221C0            LCALL    _pkt_i2cm_RxByte
001BEB 12338B            LCALL    ?L?COM001A
001BEE 7002              JNZ      ?C0391?PKT_I2CM
001BF0 053B              INC      vLoop
001BF2         ?C0391?PKT_I2CM:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 22


001BF2 80D5              SJMP     ?C0299?PKT_I2CM
  277:                 _pkt_i2cm_RxByte(vLoop==(vReadLen-1));
  278:         }
  279:     }
001BF4         ?C0261?PKT_I2CM:
  280: 
  281:     /* I2C stream done */
  282:     bDone = TRUE;
001BF4 D239              SETB     bDone
  283: 
  284: _exit:
001BF6         _exit:
  285:     /* send I2C stop */
  286:     _pkt_i2cm_Stop();
001BF6         ?C0309?PKT_I2CM:
001BF6 1232CD            LCALL    ?L?COM000C
001BF9 1234F6            LCALL    ?L?COM0041
001BFC         ?C0320?PKT_I2CM:
001BFC 208211            JB       IO_DUT_I2CM_SCL,?C0324?PKT_I2CM
001BFF E53E              MOV      A,_loop+01H
001C01 153E              DEC      _loop+01H
001C03 AE3D              MOV      R6,_loop
001C05 7002              JNZ      ?C0392?PKT_I2CM
001C07 153D              DEC      _loop
001C09         ?C0392?PKT_I2CM:
001C09 4E                ORL      A,R6
001C0A 6004              JZ       ?C0324?PKT_I2CM
001C0C 9122              ACALL    ?L?COM0008
001C0E 80EC              SJMP     ?C0320?PKT_I2CM
001C10         ?C0324?PKT_I2CM:
001C10 1232CF            LCALL    ?L?COM000D
001C13 D292              SETB     IO_DUT_I2CM_SDA
  287: 
  288:     /* unlock globally interrupt */
  289:     DRV_INT_UnlockGlobalInterrupt(bIntState);
001C15 A238              MOV      C,bIntState
001C17 92AF              MOV      EA,C
  290: 
  291:     return bDone;
001C19 A239              MOV      C,bDone
  292: }
001C1B 22                RET      
----- FUNCTION _pkt_i2cm_Stream (END) -------


----- FUNCTION ?L?COM0007 (BEGIN) -----
001C1C A2A0              MOV      C,IO_DUT_C2M_SDA
001C1E D297              SETB     IO_DUT_C2M_SCL
001C20 9230              MOV      bC2Bit0,C
001C22         ?L?COM0008:
001C22 7F01              MOV      R7,#01H
001C24 7E00              MOV      R6,#00H
----- FUNCTION _DRV_CPU_DelayUs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   46: void DRV_CPU_DelayUs(UINT16 vUsec)
   47: {
;---- Variable 'vUsec' assigned to Register 'R6/R7' ----
   48:     NOP(); NOP(); NOP();
   49: 
001C26 8018              SJMP     ?C0013?DRV_CPU
001C28         ?C0001?DRV_CPU:
   50:     while (--vUsec)
001C28 EF                MOV      A,R7
001C29 1F                DEC      R7
001C2A 7001              JNZ      ?C0011?DRV_CPU
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 23


001C2C 1E                DEC      R6
001C2D         ?C0011?DRV_CPU:
001C2D 14                DEC      A
001C2E 4E                ORL      A,R6
001C2F 6014              JZ       ?C0003?DRV_CPU
   51:     {
   52:       #if (CORE_CLOCK == 24000000UL)
   53: 		NOP(); NOP(); NOP(); NOP(); NOP();
001C31 00                NOP      
001C32 00                NOP      
001C33 00                NOP      
001C34 00                NOP      
001C35 00                NOP      
   54: 		NOP(); NOP(); NOP(); NOP(); NOP();
001C36 00                NOP      
001C37 00                NOP      
001C38 00                NOP      
001C39 00                NOP      
001C3A 00                NOP      
   55: 		NOP(); NOP(); NOP(); NOP(); NOP();
001C3B 00                NOP      
001C3C 00                NOP      
001C3D 00                NOP      
001C3E 00                NOP      
001C3F 00                NOP      
   56: 		NOP(); NOP(); NOP();
001C40         
001C40 00                NOP      
001C41 00                NOP      
001C42 00                NOP      
   57:       #else
   58:         #error "Unsupported Core Clock!"
   59:       #endif
   60:     }
001C43 80E3              SJMP     ?C0001?DRV_CPU
   61: }
001C45         ?C0003?DRV_CPU:
001C45 22                RET      
----- FUNCTION _DRV_CPU_DelayUs (END) -------


----- FUNCTION _pkt_i2cm_CheckReady (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  175: static BOOL _pkt_i2cm_CheckReady(void)
  176: {
  177:     if ((PKT_I2CM_GET_SCL() == HIGH)
  178:         && (PKT_I2CM_GET_SDA() == HIGH))
001C46 308205            JNB      IO_DUT_I2CM_SCL,?C0120?PKT_I2CM
001C49 309202            JNB      IO_DUT_I2CM_SDA,?C0120?PKT_I2CM
  179:     {
  180:         /* the I2C only can be started, while SCL/SDA is at high level */
  181:         return TRUE;
001C4C D3                SETB     C
001C4D 22                RET      
  182:     }
001C4E         ?C0120?PKT_I2CM:
  183:     else if ((PKT_I2CM_GET_SCL() == HIGH)
001C4E 308268            JNB      IO_DUT_I2CM_SCL,?C0122?PKT_I2CM
001C51 209265            JB       IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  184:              && (PKT_I2CM_GET_SDA() == LOW))
  185:     {
  186:         /* SCL line is OK, but SDA line has been stretched by I2C slave,
  187:          *  we should attempt to reset the I2C bus,
  188:          *  to recover the SDA to idle state.
  189:          *
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 24


  190:          * Memory (Management Interface) Reset:
  191:          *  1) Clock up to 9 cycles.
  192:          *  2) Look for SDA high in each cycle while SCL is high.
  193:          *  3) Create a START condition as SDA is high.
  194:          */
  195: 
  196:         UINT8   vLoop;
  197: 
  198:         for (vLoop = 9; vLoop != 0; vLoop--)
001C54 753F09            MOV      vLoop,#09H
001C57         ?C0124?PKT_I2CM:
  199:         {
  200:             PKT_I2CM_SET_SCL(LOW);
001C57 1232CF            LCALL    ?L?COM000D
001C5A C282              CLR      IO_DUT_I2CM_SCL
001C5C 8000              SJMP     ?C0144?PKT_I2CM
  201:             PKT_I2CM_SET_SCL(HIGH);
001C5E         ?C0144?PKT_I2CM:
001C5E 1232CF            LCALL    ?L?COM000D
001C61 1234ED            LCALL    ?L?COM0040
001C64         ?C0149?PKT_I2CM:
001C64 20820E            JB       IO_DUT_I2CM_SCL,?C0126?PKT_I2CM
001C67 12349D            LCALL    ?L?COM0039
001C6A 7002              JNZ      ?C0381?PKT_I2CM
001C6C 1540              DEC      _loop
001C6E         ?C0381?PKT_I2CM:
001C6E 4E                ORL      A,R6
001C6F 6004              JZ       ?C0126?PKT_I2CM
001C71 9122              ACALL    ?L?COM0008
001C73 80EF              SJMP     ?C0149?PKT_I2CM
  202:         }
001C75         ?C0126?PKT_I2CM:
001C75 D53FDF            DJNZ     vLoop,?C0124?PKT_I2CM
001C78         ?C0125?PKT_I2CM:
  203: 
  204:         if (PKT_I2CM_GET_SDA() == HIGH)
001C78 30923E            JNB      IO_DUT_I2CM_SDA,?C0122?PKT_I2CM
  205:         {
  206:             _pkt_i2cm_Start();
001C7B D292              SETB     IO_DUT_I2CM_SDA
001C7D 1232CF            LCALL    ?L?COM000D
001C80 1234ED            LCALL    ?L?COM0040
001C83         ?C0168?PKT_I2CM:
001C83 20820E            JB       IO_DUT_I2CM_SCL,?C0172?PKT_I2CM
001C86 12349D            LCALL    ?L?COM0039
001C89 7002              JNZ      ?C0382?PKT_I2CM
001C8B 1540              DEC      _loop
001C8D         ?C0382?PKT_I2CM:
001C8D 4E                ORL      A,R6
001C8E 6004              JZ       ?C0172?PKT_I2CM
001C90 9122              ACALL    ?L?COM0008
001C92 80EF              SJMP     ?C0168?PKT_I2CM
001C94         ?C0172?PKT_I2CM:
001C94 1232C6            LCALL    ?L?COM000B
001C97 C282              CLR      IO_DUT_I2CM_SCL
001C99 8000              SJMP     ?C0193?PKT_I2CM
  207:             _pkt_i2cm_Stop();
001C9B         ?C0193?PKT_I2CM:
001C9B 1232CD            LCALL    ?L?COM000C
001C9E 1234ED            LCALL    ?L?COM0040
001CA1         ?C0204?PKT_I2CM:
001CA1 20820E            JB       IO_DUT_I2CM_SCL,?C0208?PKT_I2CM
001CA4 12349D            LCALL    ?L?COM0039
001CA7 7002              JNZ      ?C0384?PKT_I2CM
001CA9 1540              DEC      _loop
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 25


001CAB         ?C0384?PKT_I2CM:
001CAB 4E                ORL      A,R6
001CAC 6004              JZ       ?C0208?PKT_I2CM
001CAE 9122              ACALL    ?L?COM0008
001CB0 80EF              SJMP     ?C0204?PKT_I2CM
001CB2         ?C0208?PKT_I2CM:
001CB2 1232CF            LCALL    ?L?COM000D
001CB5 D292              SETB     IO_DUT_I2CM_SDA
  208: 
  209:             /* we have successfully recovered the SDA line to idle state */
  210:             return TRUE;
001CB7 D3                SETB     C
001CB8 22                RET      
  211:         }
  212:     }
  213:     else
  214:     {
  215:         /* unsupported stretching on SCL/SDA line, operation fail */
  216:     }
001CB9         ?C0122?PKT_I2CM:
  217: 
  218:     return FALSE;
001CB9 C3                CLR      C
  219: }
001CBA 22                RET      
----- FUNCTION _pkt_i2cm_CheckReady (END) -------


----- FUNCTION _DRV_C2M_FlashWrite (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  650: BOOL DRV_C2M_FlashWrite
  651: (
001CBB 1234FF            LCALL    ?L?COM0042
001CBE 7005              JNZ      ?C0962?DRV_C2M
001CC0 7E01              MOV      R6,#01H
001CC2 FF                MOV      R7,A
001CC3 8004              SJMP     ?C0963?DRV_C2M
001CC5         ?C0962?DRV_C2M:
001CC5 AF3F              MOV      R7,vCount
001CC7 7E00              MOV      R6,#00H
001CC9         ?C0963?DRV_C2M:
001CC9 8E40              MOV      vLen,R6
001CCB 8F41              MOV      vLen+01H,R7
  652:     IN       UINT16           vAddr,
  653:     IN const UINT8 SEG_XDATA *pBuf,
  654:     IN       UINT8            vCount
  655: )
  656: {
  657:     UINT16  vLen = ((vCount==0)?256:vCount);
  658:     BOOL    bDone = FALSE;
001CCD C238              CLR      bDone
  659: 
  660:     if (!drv_c2m_IsReady())
001CCF 309777            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001CD2 30A074            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  661:     {
  662:         /* C2 bus is not ready */
  663:         goto _exit;
  664:     }
001CD5         ?C0964?DRV_C2M:
  665: 
  666:     c2m_WriteAR(vFPDAT);
001CD5 AF18              MOV      R7,vFPDAT
001CD7 F10B              ACALL    _c2m_WriteAR
  667:     drv_c2m_WriteData(C2_FPDAT_BLOCK_WRITE);
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 26


001CD9 7F07              MOV      R7,#07H
001CDB 123356            LCALL    ?L?COM0015
001CDE         ?C0973?DRV_C2M:
001CDE B1DC              ACALL    c2m_ReadAR
001CE0 EF                MOV      A,R7
001CE1 20E009            JB       ACC.0,?C0971?DRV_C2M
001CE4 1232D6            LCALL    ?L?COM000E
001CE7 6004              JZ       ?C0971?DRV_C2M
001CE9 9122              ACALL    ?L?COM0008
001CEB 80F1              SJMP     ?C0973?DRV_C2M
001CED         ?C0971?DRV_C2M:
001CED 123414            LCALL    ?L?COM002A
001CF0 7057              JNZ      _exit?DRV_C2M
001CF2         ?C0975?DRV_C2M:
001CF2         ?C0968?DRV_C2M:
  668:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  669:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
001CF2 E53B              MOV      A,vAddr
001CF4 FF                MOV      R7,A
001CF5 B14C              ACALL    _drv_c2m_WriteData
  670:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
001CF7 AF3C              MOV      R7,vAddr+01H
001CF9 123351            LCALL    ?L?COM0014
001CFC         ?C0982?DRV_C2M:
001CFC B1DC              ACALL    c2m_ReadAR
001CFE EF                MOV      A,R7
001CFF 20E009            JB       ACC.0,?C0980?DRV_C2M
001D02 1232D6            LCALL    ?L?COM000E
001D05 6004              JZ       ?C0980?DRV_C2M
001D07 9122              ACALL    ?L?COM0008
001D09 80F1              SJMP     ?C0982?DRV_C2M
001D0B         ?C0980?DRV_C2M:
001D0B 123414            LCALL    ?L?COM002A
001D0E 7039              JNZ      _exit?DRV_C2M
001D10         ?C0984?DRV_C2M:
001D10         ?C0985?DRV_C2M:
  671:     drv_c2m_WriteData(vCount);      /* write length   */
  672:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  673:     while (vLen--)
001D10 12349D            LCALL    ?L?COM0039
001D13 7002              JNZ      ?C1018?DRV_C2M
001D15 1540              DEC      vLen
001D17         ?C1018?DRV_C2M:
001D17 4E                ORL      A,R6
001D18 6015              JZ       ?C0992?DRV_C2M
  674:     {
  675:         /* write data into flash */
  676:         drv_c2m_WriteData(*pBuf++);
001D1A 053E              INC      pBuf+01H
001D1C E53E              MOV      A,pBuf+01H
001D1E AE3D              MOV      R6,pBuf
001D20 7002              JNZ      ?C1019?DRV_C2M
001D22 053D              INC      pBuf
001D24         ?C1019?DRV_C2M:
001D24 14                DEC      A
001D25 F582              MOV      DPL,A
001D27 8E83              MOV      DPH,R6
001D29 E0                MOVX     A,@DPTR
001D2A FF                MOV      R7,A
001D2B B14C              ACALL    _drv_c2m_WriteData
  677:     }
001D2D 80E1              SJMP     ?C0985?DRV_C2M
  678:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
001D2F         ?C0992?DRV_C2M:
001D2F 123359            LCALL    ?L?COM0016
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 27


001D32         ?C0993?DRV_C2M:
001D32 B1DC              ACALL    c2m_ReadAR
001D34 EF                MOV      A,R7
001D35 20E009            JB       ACC.0,?C0991?DRV_C2M
001D38 1232D6            LCALL    ?L?COM000E
001D3B 6004              JZ       ?C0991?DRV_C2M
001D3D 9122              ACALL    ?L?COM0008
001D3F 80F1              SJMP     ?C0993?DRV_C2M
001D41         ?C0991?DRV_C2M:
001D41 122000            LCALL    c2m_ReadDR
001D44 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001D47         ?C0995?DRV_C2M:
001D47         ?C0988?DRV_C2M:
  679:     bDone = TRUE;
001D47 D238              SETB     bDone
  680: 
  681: _exit:
001D49         _exit:
  682:     return bDone;
001D49 A238              MOV      C,bDone
  683: }
001D4B 22                RET      
----- FUNCTION _DRV_C2M_FlashWrite (END) -------


----- FUNCTION _drv_c2m_WriteData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  368: static void drv_c2m_WriteData(UINT8 vCmd)
  369: {
;---- Variable 'vCmd' assigned to Register 'R7' ----
  370:     c2m_WriteDR(vCmd);
  371:     drv_c2m_PollInBusy(C2_TIMEOUT_VAL);
001D4C 123000            LCALL    _c2m_WriteDR
  372: }
001D4F 754627            MOV      _timeout,#027H
001D52 754710            MOV      _timeout+01H,#010H
001D55         ?C0788?DRV_C2M:
001D55 B1DC              ACALL    c2m_ReadAR
001D57 EF                MOV      A,R7
001D58 30E111            JNB      ACC.1,?C0790?DRV_C2M
001D5B E547              MOV      A,_timeout+01H
001D5D 1547              DEC      _timeout+01H
001D5F AE46              MOV      R6,_timeout
001D61 7002              JNZ      ?C1015?DRV_C2M
001D63 1546              DEC      _timeout
001D65         ?C1015?DRV_C2M:
001D65 4E                ORL      A,R6
001D66 6004              JZ       ?C0790?DRV_C2M
001D68 9122              ACALL    ?L?COM0008
001D6A 80E9              SJMP     ?C0788?DRV_C2M
  373: 
001D6C         ?C0790?DRV_C2M:
001D6C 22                RET      
----- FUNCTION _drv_c2m_WriteData (END) -------


----- FUNCTION _DRV_C2M_PageErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  557: BOOL DRV_C2M_PageErase(UINT8 vPageNo)
  558: {
001D6D 8F33              MOV      vPageNo,R7
  559:     BOOL    bDone = FALSE;
  560: 
001D6F C238              CLR      bDone
  561:     if (!drv_c2m_IsReady())
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 28


001D71 309765            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001D74 30A062            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  562:     {
  563:         /* C2 bus is not ready */
  564:         goto _exit;
  565:     }
001D77         ?C0905?DRV_C2M:
  566: 
  567:     c2m_WriteAR(vFPDAT);
001D77 AF18              MOV      R7,vFPDAT
001D79 F10B              ACALL    _c2m_WriteAR
  568:     drv_c2m_WriteData(C2_FPDAT_PAGE_ERASE);
001D7B 7F08              MOV      R7,#08H
001D7D 1234B3            LCALL    ?L?COM003C
001D80         ?C0914?DRV_C2M:
001D80 B1DC              ACALL    c2m_ReadAR
001D82 EF                MOV      A,R7
001D83 20E00B            JB       ACC.0,?C0912?DRV_C2M
001D86 7834              MOV      R0,#LOW _timeout
001D88 1232D8            LCALL    ?L?COM000F
001D8B 6004              JZ       ?C0912?DRV_C2M
001D8D 9122              ACALL    ?L?COM0008
001D8F 80EF              SJMP     ?C0914?DRV_C2M
001D91         ?C0912?DRV_C2M:
001D91 123414            LCALL    ?L?COM002A
001D94 7043              JNZ      _exit?DRV_C2M
001D96         ?C0916?DRV_C2M:
001D96         ?C0909?DRV_C2M:
  569:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  570:     drv_c2m_WriteData(vPageNo); /* send page number */
001D96 AF33              MOV      R7,vPageNo
001D98 1234B3            LCALL    ?L?COM003C
001D9B         ?C0923?DRV_C2M:
001D9B B1DC              ACALL    c2m_ReadAR
001D9D EF                MOV      A,R7
001D9E 20E00B            JB       ACC.0,?C0921?DRV_C2M
001DA1 7834              MOV      R0,#LOW _timeout
001DA3 1232D8            LCALL    ?L?COM000F
001DA6 6004              JZ       ?C0921?DRV_C2M
001DA8 9122              ACALL    ?L?COM0008
001DAA 80EF              SJMP     ?C0923?DRV_C2M
001DAC         ?C0921?DRV_C2M:
001DAC 123414            LCALL    ?L?COM002A
001DAF 7028              JNZ      _exit?DRV_C2M
001DB1         ?C0925?DRV_C2M:
001DB1         ?C0918?DRV_C2M:
  571:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  572:     drv_c2m_WriteData(0x00);    /* initiate erase   */
001DB1 E4                CLR      A
001DB2 FF                MOV      R7,A
001DB3 B14C              ACALL    _drv_c2m_WriteData
  573:     drv_c2m_CheckResponse(C2_PAGE_ERASE_TIMEOUT_VAL);
001DB5 E4                CLR      A
001DB6 753740            MOV      _timeout+03H,#040H
001DB9 75369C            MOV      _timeout+02H,#09CH
001DBC F535              MOV      _timeout+01H,A
001DBE F534              MOV      _timeout,A
001DC0         ?C0932?DRV_C2M:
001DC0 B1DC              ACALL    c2m_ReadAR
001DC2 EF                MOV      A,R7
001DC3 20E00B            JB       ACC.0,?C0930?DRV_C2M
001DC6 7834              MOV      R0,#LOW _timeout
001DC8 1232D8            LCALL    ?L?COM000F
001DCB 6004              JZ       ?C0930?DRV_C2M
001DCD 9122              ACALL    ?L?COM0008
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 29


001DCF 80EF              SJMP     ?C0932?DRV_C2M
001DD1         ?C0930?DRV_C2M:
001DD1 122000            LCALL    c2m_ReadDR
001DD4 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001DD7         ?C0934?DRV_C2M:
001DD7         ?C0927?DRV_C2M:
  574:     bDone = TRUE;
001DD7 D238              SETB     bDone
  575: 
  576: _exit:
001DD9         _exit:
  577:     return bDone;
001DD9 A238              MOV      C,bDone
  578: }
001DDB 22                RET      
----- FUNCTION _DRV_C2M_PageErase (END) -------


----- FUNCTION c2m_ReadAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  215: static UINT8 c2m_ReadAR(void)
  216: {
  217:     BOOL    bIntState;
  218: 
  219:     c2m_SetIns(0x2);    /* instruction: read address */
001DDC C243              CLR      bIns0
001DDE D244              SETB     bIns1
  220: 
  221:     /* lock globally interrupt */
  222:     bIntState = DRV_INT_LockGlobalInterrupt();
001DE0 30AF05            JNB      EA,?C0190?DRV_C2M
001DE3 C2AF              CLR      EA
001DE5 D3                SETB     C
001DE6 8001              SJMP     ?C0191?DRV_C2M
001DE8         ?C0190?DRV_C2M:
001DE8 C3                CLR      C
001DE9         ?C0191?DRV_C2M:
001DE9 123146            LCALL    ?L?COM0017
001DEC 00                NOP      
001DED 00                NOP      
001DEE 00                NOP      
001DEF 00                NOP      
001DF0 1231C2            LCALL    ?L?COM0025
001DF3 00                NOP      
001DF4 00                NOP      
001DF5 00                NOP      
001DF6 00                NOP      
001DF7 123155            LCALL    ?L?COM0034
001DFA 00                NOP      
001DFB 00                NOP      
001DFC 00                NOP      
001DFD 00                NOP      
001DFE 1231B8            LCALL    ?L?COM003A
001E01 00                NOP      
001E02 D297              SETB     IO_DUT_C2M_SCL
001E04 00                NOP      
001E05 00                NOP      
  223: 
  224:     c2m_TxStart();      /* tx frame start */
  225:     c2m_TxIns();        /* tx instruction */
  226:     c2m_TxTurnAround(); /* tx turn-around */
  227:     c2m_RxByte();       /* rx address */
001E06 00                NOP      
001E07 00                NOP      
001E08 C297              CLR      IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 30


001E0A 00                NOP      
001E0B 00                NOP      
001E0C A2A0              MOV      C,IO_DUT_C2M_SDA
001E0E D297              SETB     IO_DUT_C2M_SCL
001E10 9230              MOV      bC2Bit0,C
001E12 00                NOP      
001E13 00                NOP      
001E14 C297              CLR      IO_DUT_C2M_SCL
001E16 00                NOP      
001E17 00                NOP      
001E18 A2A0              MOV      C,IO_DUT_C2M_SDA
001E1A D297              SETB     IO_DUT_C2M_SCL
001E1C 9231              MOV      bC2Bit1,C
001E1E 00                NOP      
001E1F 00                NOP      
001E20 C297              CLR      IO_DUT_C2M_SCL
001E22 00                NOP      
001E23 00                NOP      
001E24 A2A0              MOV      C,IO_DUT_C2M_SDA
001E26 D297              SETB     IO_DUT_C2M_SCL
001E28 9232              MOV      bC2Bit2,C
001E2A 00                NOP      
001E2B 00                NOP      
001E2C C297              CLR      IO_DUT_C2M_SCL
001E2E 00                NOP      
001E2F 00                NOP      
001E30 A2A0              MOV      C,IO_DUT_C2M_SDA
001E32 D297              SETB     IO_DUT_C2M_SCL
001E34 9233              MOV      bC2Bit3,C
001E36 00                NOP      
001E37 00                NOP      
001E38 C297              CLR      IO_DUT_C2M_SCL
001E3A 00                NOP      
001E3B 00                NOP      
001E3C A2A0              MOV      C,IO_DUT_C2M_SDA
001E3E D297              SETB     IO_DUT_C2M_SCL
001E40 9234              MOV      bC2Bit4,C
001E42 00                NOP      
001E43 00                NOP      
001E44 C297              CLR      IO_DUT_C2M_SCL
001E46 00                NOP      
001E47 00                NOP      
001E48 A2A0              MOV      C,IO_DUT_C2M_SDA
001E4A D297              SETB     IO_DUT_C2M_SCL
001E4C 9235              MOV      bC2Bit5,C
001E4E 00                NOP      
001E4F 00                NOP      
001E50 C297              CLR      IO_DUT_C2M_SCL
001E52 00                NOP      
001E53 00                NOP      
001E54 A2A0              MOV      C,IO_DUT_C2M_SDA
001E56 D297              SETB     IO_DUT_C2M_SCL
001E58 9236              MOV      bC2Bit6,C
001E5A 00                NOP      
001E5B 00                NOP      
001E5C C297              CLR      IO_DUT_C2M_SCL
001E5E 00                NOP      
001E5F 00                NOP      
001E60 1231DA            LCALL    ?L?COM0022
  228:     c2m_RxStop();       /* rx frame stop */
  229: 
  230:     /* unlock globally interrupt */
  231:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  232: 
  233:     return c2m_GetAddr();
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 31


001E63 AF26              MOV      R7,vC2Data
  234: }
001E65 22                RET      
----- FUNCTION c2m_ReadAR (END) -------


----- FUNCTION DRV_C2M_Probe (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  454: UINT32 DRV_C2M_Probe(void)
  455: {
  456:     UU32    vDevice;
  457: 
  458:     vDevice.U32 = 0xFFFFFFFFUL;
001E66 74FF              MOV      A,#0FFH
001E68 F536              MOV      vDevice+03H,A
001E6A F535              MOV      vDevice+02H,A
001E6C F534              MOV      vDevice+01H,A
001E6E F533              MOV      vDevice,A
  459: 
  460:     if (!drv_c2m_IsReady())
001E70 209702            JB       IO_DUT_C2M_SCL,$ + 5H
001E73 E102              AJMP     _exit?DRV_C2M
001E75 20A002            JB       IO_DUT_C2M_SDA,$ + 5H
001E78 E102              AJMP     _exit?DRV_C2M
  461:     {
  462:         /* C2 bus is not ready */
  463:         goto _exit;
  464:     }
  465: 
  466:     drv_c2m_Init();
001E7A         ?C0852?DRV_C2M:
001E7A 12341B            LCALL    ?L?COM002B
001E7D 53A57F            ANL      P1MDOUT,#07FH
001E80 7F02              MOV      R7,#02H
001E82 F10B              ACALL    _c2m_WriteAR
001E84 123000            LCALL    _c2m_WriteDR
001E87 7F04              MOV      R7,#04H
001E89 123000            LCALL    _c2m_WriteDR
001E8C 7F01              MOV      R7,#01H
001E8E 123000            LCALL    _c2m_WriteDR
001E91 7F14              MOV      R7,#014H
001E93 7E00              MOV      R6,#00H
001E95 122C9D            LCALL    _DRV_CPU_DelayMs
  467: 
  468:     /* get C2 device id & revision id */
  469:     vDevice.U8[0] = drv_c2m_ReadSFR(C2_DEVICEID);
001E98 E4                CLR      A
001E99 FF                MOV      R7,A
001E9A F1DF              ACALL    _drv_c2m_ReadSFR
001E9C 8F33              MOV      vDevice,R7
  470:     vDevice.U8[1] = drv_c2m_ReadSFR(C2_REVID);
001E9E 7F01              MOV      R7,#01H
001EA0 F1DF              ACALL    _drv_c2m_ReadSFR
001EA2 8F34              MOV      vDevice+01H,R7
  471: 
  472:     if (vDevice.U8[0] == 0xFF)
001EA4 E533              MOV      A,vDevice
001EA6 F4                CPL      A
001EA7 6059              JZ       _exit?DRV_C2M
  473:     {
  474:         /* no device probed */
  475:         goto _exit;
  476:     }
001EA9         ?C0862?DRV_C2M:
  477: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 32


  478:     /* get C2 device derivative id */
  479:     vFPDAT = C2_FPDAT;
001EA9 7518B4            MOV      vFPDAT,#0B4H
  480:     c2m_WriteAR(vFPDAT);
001EAC 123596            LCALL    ?L?COM0060
001EAF B14C              ACALL    _drv_c2m_WriteData
  481:     drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  482:     if (drv_c2m_ReadData() != C2_COMMAND_OK)
001EB1 1220BB            LCALL    drv_c2m_ReadData
001EB4 EF                MOV      A,R7
001EB5 640D              XRL      A,#0DH
001EB7 601F              JZ       ?C0863?DRV_C2M
  483:     {
  484:         /* the FPDAT address may be incorrect, try another FPDAT address */
  485:         vFPDAT = C2_FPDAT2;
001EB9 7518AD            MOV      vFPDAT,#0ADH
  486:         c2m_WriteAR(vFPDAT);
001EBC 123596            LCALL    ?L?COM0060
001EBF 1234C2            LCALL    ?L?COM003D
001EC2         ?C0870?DRV_C2M:
001EC2 B1DC              ACALL    c2m_ReadAR
001EC4 EF                MOV      A,R7
001EC5 20E00B            JB       ACC.0,?C0868?DRV_C2M
001EC8 7837              MOV      R0,#LOW _timeout
001ECA 1232D8            LCALL    ?L?COM000F
001ECD 6004              JZ       ?C0868?DRV_C2M
001ECF 9122              ACALL    ?L?COM0008
001ED1 80EF              SJMP     ?C0870?DRV_C2M
001ED3         ?C0868?DRV_C2M:
001ED3 123414            LCALL    ?L?COM002A
001ED6 702A              JNZ      _exit?DRV_C2M
001ED8         ?C0872?DRV_C2M:
  487:         drv_c2m_WriteData(C2_FPDAT_GET_DERIVATIVE);
  488:         drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  489:     }
001ED8         ?C0863?DRV_C2M:
  490:     vDevice.U8[2] = drv_c2m_ReadData();
001ED8 1220BB            LCALL    drv_c2m_ReadData
001EDB 8F35              MOV      vDevice+02H,R7
  491: 
  492:     /* get C2 device derivative version */
  493:     c2m_WriteAR(vFPDAT);
001EDD AF18              MOV      R7,vFPDAT
001EDF F10B              ACALL    _c2m_WriteAR
  494:     drv_c2m_WriteData(C2_FPDAT_GET_VERSION);
001EE1 7F01              MOV      R7,#01H
001EE3 1234C2            LCALL    ?L?COM003D
001EE6         ?C0879?DRV_C2M:
001EE6 B1DC              ACALL    c2m_ReadAR
001EE8 EF                MOV      A,R7
001EE9 20E00B            JB       ACC.0,?C0877?DRV_C2M
001EEC 7837              MOV      R0,#LOW _timeout
001EEE 1232D8            LCALL    ?L?COM000F
001EF1 6004              JZ       ?C0877?DRV_C2M
001EF3 9122              ACALL    ?L?COM0008
001EF5 80EF              SJMP     ?C0879?DRV_C2M
001EF7         ?C0877?DRV_C2M:
001EF7 122000            LCALL    c2m_ReadDR
001EFA BF0D05            CJNE     R7,#0DH,_exit?DRV_C2M
001EFD         ?C0881?DRV_C2M:
001EFD         ?C0874?DRV_C2M:
  495:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  496:     vDevice.U8[3] = drv_c2m_ReadData();
001EFD 1220BB            LCALL    drv_c2m_ReadData
001F00 8F36              MOV      vDevice+03H,R7
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 33


  497: 
  498: _exit:
001F02         _exit:
  499:     return vDevice.U32;
001F02 AF36              MOV      R7,vDevice+03H
001F04 AE35              MOV      R6,vDevice+02H
001F06 AD34              MOV      R5,vDevice+01H
001F08 AC33              MOV      R4,vDevice
  500: }
001F0A 22                RET      
----- FUNCTION DRV_C2M_Probe (END) -------


----- FUNCTION _c2m_WriteAR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  195: static void c2m_WriteAR(UINT8 vAddr)
  196: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  197:     BOOL    bIntState;
  198: 
  199:     c2m_SetIns(0x3);    /* instruction: write address */
001F0B D243              SETB     bIns0
001F0D D244              SETB     bIns1
  200:     c2m_SetAddr(vAddr);
001F0F 8F26              MOV      vC2Data,R7
  201: 
  202:     /* lock globally interrupt */
  203:     bIntState = DRV_INT_LockGlobalInterrupt();
001F11 30AF05            JNB      EA,?C0007?DRV_C2M
001F14 C2AF              CLR      EA
001F16 D3                SETB     C
001F17 8001              SJMP     ?C0008?DRV_C2M
001F19         ?C0007?DRV_C2M:
001F19 C3                CLR      C
001F1A         ?C0008?DRV_C2M:
001F1A 123146            LCALL    ?L?COM0017
001F1D 00                NOP      
001F1E 00                NOP      
001F1F 00                NOP      
001F20 00                NOP      
001F21 1231C2            LCALL    ?L?COM0025
001F24 00                NOP      
001F25 00                NOP      
001F26 00                NOP      
001F27 00                NOP      
001F28 123155            LCALL    ?L?COM0034
001F2B 00                NOP      
001F2C 00                NOP      
001F2D 00                NOP      
001F2E 00                NOP      
001F2F 1231AF            LCALL    ?L?COM0059
001F32 00                NOP      
001F33 00                NOP      
001F34 00                NOP      
001F35 00                NOP      
001F36 1231A6            LCALL    ?L?COM0058
001F39 00                NOP      
001F3A 00                NOP      
001F3B 00                NOP      
001F3C 00                NOP      
001F3D 12319D            LCALL    ?L?COM0057
001F40 00                NOP      
001F41 00                NOP      
001F42 00                NOP      
001F43 00                NOP      
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 34


001F44 123194            LCALL    ?L?COM0056
001F47 00                NOP      
001F48 00                NOP      
001F49 00                NOP      
001F4A 00                NOP      
001F4B 12318B            LCALL    ?L?COM0055
001F4E 00                NOP      
001F4F 00                NOP      
001F50 00                NOP      
001F51 00                NOP      
001F52 123182            LCALL    ?L?COM0054
001F55 00                NOP      
001F56 00                NOP      
001F57 00                NOP      
001F58 00                NOP      
001F59 123179            LCALL    ?L?COM0053
001F5C 00                NOP      
001F5D 00                NOP      
001F5E 00                NOP      
001F5F 00                NOP      
001F60 123170            LCALL    ?L?COM0052
001F63 00                NOP      
001F64 00                NOP      
001F65 00                NOP      
001F66 00                NOP      
001F67 D297              SETB     IO_DUT_C2M_SCL
  204: 
  205:     c2m_TxStart();      /* tx frame start */
  206:     c2m_TxIns();        /* tx instruction */
  207:     c2m_TxByte();       /* tx address */
  208:     c2m_TxStop();       /* tx frame stop */
001F69 D2A0              SETB     IO_DUT_C2M_SDA
001F6B 53A6FE            ANL      P2MDOUT,#0FEH
001F6E 12314E            LCALL    ?L?COM0018
001F71 00                NOP      
001F72 00                NOP      
001F73 00                NOP      
001F74 00                NOP      
001F75 D297              SETB     IO_DUT_C2M_SCL
001F77 0231E3            LJMP     ?L?COM0024
  209: 
  210:     /* unlock globally interrupt */
  211:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteAR (END) -------


----- FUNCTION DRV_C2M_ChipErase (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  518: BOOL DRV_C2M_ChipErase(void)
  519: {
  520:     BOOL    bDone = FALSE;
  521: 
001F7A C238              CLR      bDone
  522:     if (!drv_c2m_IsReady())
001F7C 30975D            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
001F7F 30A05A            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  523:     {
  524:         /* C2 bus is not ready */
  525:         goto _exit;
  526:     }
001F82         ?C0883?DRV_C2M:
  527: 
  528:     c2m_WriteAR(vFPDAT);
001F82 AF18              MOV      R7,vFPDAT
001F84 F10B              ACALL    _c2m_WriteAR
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 35


  529:     drv_c2m_WriteData(C2_FPDAT_DEVICE_ERASE);
001F86 7F03              MOV      R7,#03H
001F88 B14C              ACALL    _drv_c2m_WriteData
  530:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
001F8A E4                CLR      A
001F8B 753610            MOV      _timeout+03H,#010H
001F8E 753527            MOV      _timeout+02H,#027H
001F91 F534              MOV      _timeout+01H,A
001F93 F533              MOV      _timeout,A
001F95         ?C0892?DRV_C2M:
001F95 B1DC              ACALL    c2m_ReadAR
001F97 EF                MOV      A,R7
001F98 20E00B            JB       ACC.0,?C0890?DRV_C2M
001F9B 7833              MOV      R0,#LOW _timeout
001F9D 1232D8            LCALL    ?L?COM000F
001FA0 6004              JZ       ?C0890?DRV_C2M
001FA2 9122              ACALL    ?L?COM0008
001FA4 80EF              SJMP     ?C0892?DRV_C2M
001FA6         ?C0890?DRV_C2M:
001FA6 123414            LCALL    ?L?COM002A
001FA9 7031              JNZ      _exit?DRV_C2M
001FAB         ?C0894?DRV_C2M:
001FAB         ?C0887?DRV_C2M:
  531:     drv_c2m_WriteData(0xDE);     /* send sequence #1 */
001FAB 7FDE              MOV      R7,#0DEH
001FAD B14C              ACALL    _drv_c2m_WriteData
  532:     drv_c2m_WriteData(0xAD);     /* send sequence #2 */
001FAF 7FAD              MOV      R7,#0ADH
001FB1 B14C              ACALL    _drv_c2m_WriteData
  533:     drv_c2m_WriteData(0xA5);     /* send sequence #3 */
001FB3 7FA5              MOV      R7,#0A5H
001FB5 B14C              ACALL    _drv_c2m_WriteData
  534:     drv_c2m_CheckResponse(C2_CHIP_ERASE_TIMEOUT_VAL);
001FB7 753600            MOV      _timeout+03H,#00H
001FBA 75352D            MOV      _timeout+02H,#02DH
001FBD 753431            MOV      _timeout+01H,#031H
001FC0 753301            MOV      _timeout,#01H
001FC3         ?C0901?DRV_C2M:
001FC3 B1DC              ACALL    c2m_ReadAR
001FC5 EF                MOV      A,R7
001FC6 20E00B            JB       ACC.0,?C0899?DRV_C2M
001FC9 7833              MOV      R0,#LOW _timeout
001FCB 1232D8            LCALL    ?L?COM000F
001FCE 6004              JZ       ?C0899?DRV_C2M
001FD0 9122              ACALL    ?L?COM0008
001FD2 80EF              SJMP     ?C0901?DRV_C2M
001FD4         ?C0899?DRV_C2M:
001FD4 122000            LCALL    c2m_ReadDR
001FD7 BF0D02            CJNE     R7,#0DH,_exit?DRV_C2M
001FDA         ?C0903?DRV_C2M:
001FDA         ?C0896?DRV_C2M:
  535:     bDone = TRUE;
001FDA D238              SETB     bDone
  536: 
  537: _exit:
001FDC         _exit:
  538:     return bDone;
001FDC A238              MOV      C,bDone
  539: }
001FDE 22                RET      
----- FUNCTION DRV_C2M_ChipErase (END) -------


----- FUNCTION _drv_c2m_ReadSFR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 36


  362: static UINT8 drv_c2m_ReadSFR(UINT8 vAddr)
  363: {
;---- Variable 'vAddr' assigned to Register 'R7' ----
  364:     c2m_WriteAR(vAddr);
  365:     return c2m_ReadDR();
001FDF F10B              ACALL    _c2m_WriteAR
  366: }
001FE1 801D              SJMP     c2m_ReadDR
----- FUNCTION _drv_c2m_ReadSFR (END) -------


----- FUNCTION ?L?COM004F (BEGIN) -----
001FE3 FF                MOV      R7,A
001FE4 E4                CLR      A
001FE5 3438              ADDC     A,#038H
001FE7 FE                MOV      R6,A
----- FUNCTION _CFG_ROM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   88:     return MEMPAGE_PID_INVALID;
   89: }
;---- Variable 'vAddr' assigned to Register 'DPTR' ----
001FE8 8F82              MOV      DPL,R7
001FEA 8E83              MOV      DPH,R6
001FEC 020655            LJMP     ?C?LLDCODE
----- FUNCTION _CFG_ROM_GET32 (END) -------


----- FUNCTION _CFG_RAM_SET16 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   86:     }
   87: 
;---- Variable 'vData' assigned to Register 'R4/R5' ----
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
001FEF A807              MOV      R0,AR7
001FF1 EC                MOV      A,R4
001FF2 F2                MOVX     @R0,A
001FF3 08                INC      R0
001FF4 ED                MOV      A,R5
001FF5 F2                MOVX     @R0,A
001FF6 22                RET      
----- FUNCTION _CFG_RAM_SET16 (END) -------


----- FUNCTION PKT_MDIOM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   38: UINT16 PKT_MDIOM_Inspect(void)
   39: {
   40:     PKT_SetPayloadSize(0x00);
   41:     return PKT_REPLY_Done_ExecNoError;
001FF7 123456            LCALL    ?L?COM0030
   42: }
001FFA 7E01              MOV      R6,#01H
001FFC 7F40              MOV      R7,#040H
   43: 
001FFE 22                RET      
----- FUNCTION PKT_MDIOM_Inspect (END) -------


----- FUNCTION c2m_ReadDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  261: static UINT8 c2m_ReadDR(void)
  262: {
  263:     BOOL    bIntState;
  264: 
  265:     c2m_SetIns(0x0);    /* instruction: read data */
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 37


002000 C243              CLR      bIns0
002002 C244              CLR      bIns1
  266:     c2m_SetLength(0x1); /* length: 1 byte */
002004 C245              CLR      bLength0
002006 C246              CLR      bLength1
  267: 
  268:     /* lock globally interrupt */
  269:     bIntState = DRV_INT_LockGlobalInterrupt();
002008 30AF05            JNB      EA,?C0584?DRV_C2M
00200B C2AF              CLR      EA
00200D D3                SETB     C
00200E 8001              SJMP     ?C0585?DRV_C2M
002010         ?C0584?DRV_C2M:
002010 C3                CLR      C
002011         ?C0585?DRV_C2M:
002011 123146            LCALL    ?L?COM0017
002014 00                NOP      
002015 00                NOP      
002016 00                NOP      
002017 00                NOP      
002018 1231C2            LCALL    ?L?COM0025
00201B 00                NOP      
00201C 00                NOP      
00201D 00                NOP      
00201E 00                NOP      
00201F 123155            LCALL    ?L?COM0034
002022 00                NOP      
002023 00                NOP      
002024 00                NOP      
002025 00                NOP      
002026 123167            LCALL    ?L?COM0051
002029 00                NOP      
00202A 00                NOP      
00202B 00                NOP      
00202C 00                NOP      
00202D 12315E            LCALL    ?L?COM0050
002030 00                NOP      
002031 00                NOP      
002032 00                NOP      
002033 00                NOP      
002034 1231B8            LCALL    ?L?COM003A
002037 00                NOP      
002038 D297              SETB     IO_DUT_C2M_SCL
00203A 00                NOP      
00203B 00                NOP      
  270: 
  271:     c2m_TxStart();      /* tx frame start */
  272:     c2m_TxIns();        /* tx instruction */
  273:     c2m_TxLength();     /* tx length */
  274:     c2m_TxTurnAround(); /* tx turn-around */
  275:     c2m_Wait();         /* wait for target device ready */
00203C 754A27            MOV      _timeout,#027H
00203F 754B10            MOV      _timeout+01H,#010H
002042         ?C0687?DRV_C2M:
002042 00                NOP      
002043 00                NOP      
002044 C297              CLR      IO_DUT_C2M_SCL
002046 00                NOP      
002047 00                NOP      
002048 121C1C            LCALL    ?L?COM0007
00204B 20300D            JB       bC2Bit0,?C0700?DRV_C2M
00204E E54B              MOV      A,_timeout+01H
002050 154B              DEC      _timeout+01H
002052 AE4A              MOV      R6,_timeout
002054 7002              JNZ      ?C1014?DRV_C2M
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 38


002056 154A              DEC      _timeout
002058         ?C1014?DRV_C2M:
002058 4E                ORL      A,R6
002059 70E7              JNZ      ?C0687?DRV_C2M
  276:     c2m_RxByte();       /* rx data */
00205B         ?C0700?DRV_C2M:
00205B 00                NOP      
00205C 00                NOP      
00205D C297              CLR      IO_DUT_C2M_SCL
00205F 00                NOP      
002060 00                NOP      
002061 A2A0              MOV      C,IO_DUT_C2M_SDA
002063 D297              SETB     IO_DUT_C2M_SCL
002065 9230              MOV      bC2Bit0,C
002067 00                NOP      
002068 00                NOP      
002069 C297              CLR      IO_DUT_C2M_SCL
00206B 00                NOP      
00206C 00                NOP      
00206D A2A0              MOV      C,IO_DUT_C2M_SDA
00206F D297              SETB     IO_DUT_C2M_SCL
002071 9231              MOV      bC2Bit1,C
002073 00                NOP      
002074 00                NOP      
002075 C297              CLR      IO_DUT_C2M_SCL
002077 00                NOP      
002078 00                NOP      
002079 A2A0              MOV      C,IO_DUT_C2M_SDA
00207B D297              SETB     IO_DUT_C2M_SCL
00207D 9232              MOV      bC2Bit2,C
00207F 00                NOP      
002080 00                NOP      
002081 C297              CLR      IO_DUT_C2M_SCL
002083 00                NOP      
002084 00                NOP      
002085 A2A0              MOV      C,IO_DUT_C2M_SDA
002087 D297              SETB     IO_DUT_C2M_SCL
002089 9233              MOV      bC2Bit3,C
00208B 00                NOP      
00208C 00                NOP      
00208D C297              CLR      IO_DUT_C2M_SCL
00208F 00                NOP      
002090 00                NOP      
002091 A2A0              MOV      C,IO_DUT_C2M_SDA
002093 D297              SETB     IO_DUT_C2M_SCL
002095 9234              MOV      bC2Bit4,C
002097 00                NOP      
002098 00                NOP      
002099 C297              CLR      IO_DUT_C2M_SCL
00209B 00                NOP      
00209C 00                NOP      
00209D A2A0              MOV      C,IO_DUT_C2M_SDA
00209F D297              SETB     IO_DUT_C2M_SCL
0020A1 9235              MOV      bC2Bit5,C
0020A3 00                NOP      
0020A4 00                NOP      
0020A5 C297              CLR      IO_DUT_C2M_SCL
0020A7 00                NOP      
0020A8 00                NOP      
0020A9 A2A0              MOV      C,IO_DUT_C2M_SDA
0020AB D297              SETB     IO_DUT_C2M_SCL
0020AD 9236              MOV      bC2Bit6,C
0020AF 00                NOP      
0020B0 00                NOP      
0020B1 C297              CLR      IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 39


0020B3 00                NOP      
0020B4 00                NOP      
0020B5 1231DA            LCALL    ?L?COM0022
  277:     c2m_RxStop();       /* rx frame stop */
  278: 
  279:     /* unlock globally interrupt */
  280:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  281: 
  282:     return c2m_GetData();
0020B8 AF26              MOV      R7,vC2Data
  283: }
0020BA 22                RET      
----- FUNCTION c2m_ReadDR (END) -------


----- FUNCTION drv_c2m_ReadData (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  374: static UINT8 drv_c2m_ReadData(void)
  375: {
  376:     drv_c2m_PollOutBusy(C2_TIMEOUT_VAL);
  377:     return c2m_ReadDR();
0020BB E4                CLR      A
0020BC 754910            MOV      _timeout+03H,#010H
0020BF 754827            MOV      _timeout+02H,#027H
0020C2 F547              MOV      _timeout+01H,A
0020C4 F546              MOV      _timeout,A
0020C6         ?C0794?DRV_C2M:
0020C6 121DDC            LCALL    c2m_ReadAR
0020C9 EF                MOV      A,R7
0020CA 20E00C            JB       ACC.0,?C0792?DRV_C2M
0020CD 7846              MOV      R0,#LOW _timeout
0020CF 1232D8            LCALL    ?L?COM000F
0020D2 6005              JZ       ?C0792?DRV_C2M
0020D4 121C22            LCALL    ?L?COM0008
0020D7 80ED              SJMP     ?C0794?DRV_C2M
0020D9         ?C0792?DRV_C2M:
  378: }
0020D9 0100              AJMP     c2m_ReadDR
----- FUNCTION drv_c2m_ReadData (END) -------


----- FUNCTION _DRV_C2M_FlashRead (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  598: BOOL DRV_C2M_FlashRead
  599: (
0020DB 1234FF            LCALL    ?L?COM0042
0020DE 7005              JNZ      ?C0936?DRV_C2M
0020E0 7E01              MOV      R6,#01H
0020E2 FF                MOV      R7,A
0020E3 8004              SJMP     ?C0937?DRV_C2M
0020E5         ?C0936?DRV_C2M:
0020E5 AF3F              MOV      R7,vCount
0020E7 7E00              MOV      R6,#00H
0020E9         ?C0937?DRV_C2M:
0020E9 8E40              MOV      vLen,R6
0020EB 8F41              MOV      vLen+01H,R7
  600:     OUT UINT8 SEG_XDATA *pBuf,
  601:     IN  UINT16           vAddr,
  602:     IN  UINT8            vCount
  603: )
  604: {
  605:     UINT16  vLen = ((vCount==0)?256:vCount);
  606:     BOOL    bDone = FALSE;
0020ED C238              CLR      bDone
  607: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 40


  608:     if (!drv_c2m_IsReady())
0020EF 309765            JNB      IO_DUT_C2M_SCL,_exit?DRV_C2M
0020F2 30A062            JNB      IO_DUT_C2M_SDA,_exit?DRV_C2M
  609:     {
  610:         /* C2 bus is not ready */
  611:         goto _exit;
  612:     }
0020F5         ?C0938?DRV_C2M:
  613: 
  614:     c2m_WriteAR(vFPDAT);
0020F5 AF18              MOV      R7,vFPDAT
0020F7 121F0B            LCALL    _c2m_WriteAR
  615:     drv_c2m_WriteData(C2_FPDAT_BLOCK_READ);
0020FA 7F06              MOV      R7,#06H
0020FC 123356            LCALL    ?L?COM0015
0020FF         ?C0947?DRV_C2M:
0020FF 121DDC            LCALL    c2m_ReadAR
002102 EF                MOV      A,R7
002103 20E00A            JB       ACC.0,?C0945?DRV_C2M
002106 1232D6            LCALL    ?L?COM000E
002109 6005              JZ       ?C0945?DRV_C2M
00210B 121C22            LCALL    ?L?COM0008
00210E 80EF              SJMP     ?C0947?DRV_C2M
002110         ?C0945?DRV_C2M:
002110 123414            LCALL    ?L?COM002A
002113 7042              JNZ      _exit?DRV_C2M
002115         ?C0949?DRV_C2M:
002115         ?C0942?DRV_C2M:
  616:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  617:     drv_c2m_WriteData(vAddr>>8);    /* MSB of address */
002115 E53D              MOV      A,vAddr
002117 FF                MOV      R7,A
002118 121D4C            LCALL    _drv_c2m_WriteData
  618:     drv_c2m_WriteData(vAddr&0xFF);  /* LSB of address */
00211B AF3E              MOV      R7,vAddr+01H
00211D 123351            LCALL    ?L?COM0014
002120         ?C0956?DRV_C2M:
002120 121DDC            LCALL    c2m_ReadAR
002123 EF                MOV      A,R7
002124 20E00A            JB       ACC.0,?C0954?DRV_C2M
002127 1232D6            LCALL    ?L?COM000E
00212A 6005              JZ       ?C0954?DRV_C2M
00212C 121C22            LCALL    ?L?COM0008
00212F 80EF              SJMP     ?C0956?DRV_C2M
002131         ?C0954?DRV_C2M:
002131 1100              ACALL    c2m_ReadDR
002133 BF0D21            CJNE     R7,#0DH,_exit?DRV_C2M
002136         ?C0958?DRV_C2M:
002136         ?C0959?DRV_C2M:
  619:     drv_c2m_WriteData(vCount);      /* read length    */
  620:     drv_c2m_CheckResponse(C2_TIMEOUT_VAL);
  621:     while (vLen--)
002136 12349D            LCALL    ?L?COM0039
002139 7002              JNZ      ?C1016?DRV_C2M
00213B 1540              DEC      vLen
00213D         ?C1016?DRV_C2M:
00213D 4E                ORL      A,R6
00213E 6015              JZ       ?C0960?DRV_C2M
  622:     {
  623:         /* read flash data into buffer */
  624:         *pBuf++ = drv_c2m_ReadData();
002140 11BB              ACALL    drv_c2m_ReadData
002142 053C              INC      pBuf+01H
002144 E53C              MOV      A,pBuf+01H
002146 AC3B              MOV      R4,pBuf
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 41


002148 7002              JNZ      ?C1017?DRV_C2M
00214A 053B              INC      pBuf
00214C         ?C1017?DRV_C2M:
00214C 14                DEC      A
00214D F582              MOV      DPL,A
00214F 8C83              MOV      DPH,R4
002151 EF                MOV      A,R7
002152 F0                MOVX     @DPTR,A
  625:     }
002153 80E1              SJMP     ?C0959?DRV_C2M
002155         ?C0960?DRV_C2M:
  626:     bDone = TRUE;
002155 D238              SETB     bDone
  627: 
  628: _exit:
002157         _exit:
  629:     return bDone;
002157 A238              MOV      C,bDone
  630: }
002159 22                RET      
----- FUNCTION _DRV_C2M_FlashRead (END) -------


----- FUNCTION PKT_C2M_FlashRead (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   79: UINT16 PKT_C2M_FlashRead(void)
   80: {
   81:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
   82:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
00215A 123325            LCALL    ?L?COM0012
   83:     UINT16           vAddr = (UINT16)pPayload->vAddr;
   84:     UINT16           vLen  = pPayload->vDataLen;
   85: 
   86:     if ((PKT_GetPayloadSize() != PKT_C2M_RW_HEADER_LEN)
00215D 90004A            MOV      DPTR,#vFrame+0AH
002160 E0                MOVX     A,@DPTR
002161 7004              JNZ      ?C0044?PKT_C2M
002163 A3                INC      DPTR
002164 E0                MOVX     A,@DPTR
002165 6406              XRL      A,#06H
002167         ?C0044?PKT_C2M:
002167 700B              JNZ      ?C0026?PKT_C2M
002169 D3                SETB     C
00216A E538              MOV      A,vLen+01H
00216C 9432              SUBB     A,#032H
00216E E537              MOV      A,vLen
002170 9404              SUBB     A,#04H
002172 4005              JC       ?C0030?PKT_C2M
002174         ?C0026?PKT_C2M:
   87:         || (vLen > sizeof(pPayload->aBuf)))
   88:     {
   89:         return PKT_REPLY_Fail_InvalidLen;
002174 7E03              MOV      R6,#03H
002176 7F04              MOV      R7,#04H
002178 22                RET      
   90:     }
002179         ?C0030?PKT_C2M:
   91: 
   92:     /* split too long read data buffer into pieces to read */
   93:     PKT_SetPayloadSize(PKT_C2M_RW_HEADER_LEN+vLen);
002179 E538              MOV      A,vLen+01H
00217B 2406              ADD      A,#06H
00217D 90004B            MOV      DPTR,#vFrame+0BH
002180 F0                MOVX     @DPTR,A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 42


002181 E4                CLR      A
002182 3537              ADDC     A,vLen
002184 90004A            MOV      DPTR,#vFrame+0AH
002187 F0                MOVX     @DPTR,A
002188         ?C0031?PKT_C2M:
   94:     while (vLen != 0)
002188 E538              MOV      A,vLen+01H
00218A 4537              ORL      A,vLen
00218C 602D              JZ       ?C0032?PKT_C2M
   95:     {
   96:         UINT16 vReadLen = ((vLen<0x100)?vLen:0x100);
00218E C3                CLR      C
00218F E537              MOV      A,vLen
002191 9401              SUBB     A,#01H
002193 5006              JNC      ?C0033?PKT_C2M
002195 AE37              MOV      R6,vLen
002197 AF38              MOV      R7,vLen+01H
002199 8004              SJMP     ?C0034?PKT_C2M
00219B         ?C0033?PKT_C2M:
00219B 7E01              MOV      R6,#01H
00219D 7F00              MOV      R7,#00H
00219F         ?C0034?PKT_C2M:
00219F 8E39              MOV      vReadLen,R6
0021A1 8F3A              MOV      vReadLen+01H,R7
   97: 
   98:       #if DRV_WATCHDOG_SUPPORT
   99:         DRV_WATCHDOG_Kick();
  100:       #endif
  101: 
  102:         if (!DRV_C2M_FlashRead(pBuf, vAddr, (UINT8)vReadLen))
0021A3 AB3A              MOV      R3,vReadLen+01H
0021A5 AD36              MOV      R5,vAddr+01H
0021A7 AC35              MOV      R4,vAddr
0021A9 AF34              MOV      R7,pBuf+01H
0021AB AE33              MOV      R6,pBuf
0021AD 11DB              ACALL    _DRV_C2M_FlashRead
0021AF 4005              JC       ?C0035?PKT_C2M
  103:         {
  104:             return PKT_REPLY_Fail_ExecErrorCode0;
0021B1 7E03              MOV      R6,#03H
0021B3 7F40              MOV      R7,#040H
0021B5 22                RET      
  105:         }
0021B6         ?C0035?PKT_C2M:
  106: 
  107:         pBuf  += vReadLen;
0021B6 123365            LCALL    ?L?COM0019
  108:         vAddr += vReadLen;
  109:         vLen  -= vReadLen;
  110:     }
0021B9 80CD              SJMP     ?C0031?PKT_C2M
0021BB         ?C0032?PKT_C2M:
  111: 
  112:     return PKT_REPLY_Done_ExecNoError;
0021BB 7E01              MOV      R6,#01H
0021BD 7F40              MOV      R7,#040H
  113: }
0021BF 22                RET      
----- FUNCTION PKT_C2M_FlashRead (END) -------


----- FUNCTION _pkt_i2cm_RxByte (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  152: static UINT8 _pkt_i2cm_RxByte(BOOL bSendNAK)
  153: {
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 43


  154:     UINT8   vLoop;
  155:     UINT8   vData = 0;
0021C0 E4                CLR      A
0021C1 F540              MOV      vData,A
  156: 
  157:     for (vLoop = 8; vLoop != 0; vLoop--)
0021C3 753F08            MOV      vLoop,#08H
0021C6         ?C0062?PKT_I2CM:
  158:     {
  159:         PKT_I2CM_SET_SCL(HIGH);
0021C6 1232CF            LCALL    ?L?COM000D
0021C9 12345E            LCALL    ?L?COM0031
0021CC         ?C0075?PKT_I2CM:
0021CC 20820F            JB       IO_DUT_I2CM_SCL,?C0066?PKT_I2CM
0021CF 123519            LCALL    ?L?COM0044
0021D2 7002              JNZ      ?C0376?PKT_I2CM
0021D4 1541              DEC      _loop
0021D6         ?C0376?PKT_I2CM:
0021D6 4E                ORL      A,R6
0021D7 6005              JZ       ?C0066?PKT_I2CM
0021D9 121C22            LCALL    ?L?COM0008
0021DC 80EE              SJMP     ?C0075?PKT_I2CM
0021DE         ?C0066?PKT_I2CM:
  160:         vData <<= 1;
0021DE E540              MOV      A,vData
0021E0 25E0              ADD      A,ACC
0021E2 F540              MOV      vData,A
  161:         vData |= PKT_I2CM_GET_SDA();
0021E4 A292              MOV      C,IO_DUT_I2CM_SDA
0021E6 E4                CLR      A
0021E7 33                RLC      A
0021E8 4240              ORL      vData,A
  162:         PKT_I2CM_SET_SCL(LOW);
0021EA 1232CF            LCALL    ?L?COM000D
0021ED C282              CLR      IO_DUT_I2CM_SCL
0021EF 8000              SJMP     ?C0064?PKT_I2CM
  163:     }
0021F1         ?C0064?PKT_I2CM:
0021F1 D53FD2            DJNZ     vLoop,?C0062?PKT_I2CM
0021F4         ?C0091?PKT_I2CM:
  164: 
  165:     /* send ACK/NAK */
  166:     PKT_I2CM_SET_SDA(bSendNAK);
0021F4 A23A              MOV      C,bSendNAK
0021F6 9292              MOV      IO_DUT_I2CM_SDA,C
  167:     PKT_I2CM_SET_SCL(HIGH);
0021F8 1232CF            LCALL    ?L?COM000D
0021FB 12345E            LCALL    ?L?COM0031
0021FE         ?C0102?PKT_I2CM:
0021FE 20820F            JB       IO_DUT_I2CM_SCL,?C0109?PKT_I2CM
002201 123519            LCALL    ?L?COM0044
002204 7002              JNZ      ?C0378?PKT_I2CM
002206 1541              DEC      _loop
002208         ?C0378?PKT_I2CM:
002208 4E                ORL      A,R6
002209 6005              JZ       ?C0109?PKT_I2CM
00220B 121C22            LCALL    ?L?COM0008
00220E 80EE              SJMP     ?C0102?PKT_I2CM
  168:     PKT_I2CM_SET_SCL(LOW);
002210         ?C0109?PKT_I2CM:
002210 1232CF            LCALL    ?L?COM000D
002213 C282              CLR      IO_DUT_I2CM_SCL
002215 8000              SJMP     ?C0118?PKT_I2CM
002217         ?C0118?PKT_I2CM:
  169:     PKT_I2CM_SET_SDA(HIGH);
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 44


002217 D292              SETB     IO_DUT_I2CM_SDA
  170: 
  171:     return vData;
002219 AF40              MOV      R7,vData
  172: }
00221B 22                RET      
----- FUNCTION _pkt_i2cm_RxByte (END) -------


----- FUNCTION _pkt_i2cm_vs_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  298: static BOOL pkt_i2cm_vs_Stream(IN OUT PKT_I2CM_STREAM_T SEG_XDATA *pPayload)
  299: {
00221C 12357D            LCALL    ?L?COM005D
00221F A3                INC      DPTR
002220 123349            LCALL    ?L?COM0013
  300:     static UINT8 vRegOffset = 0x00;
  301:     UINT16  vWriteLen = pPayload->vWriteLen;
  302:     UINT16  vReadLen  = pPayload->vReadLen;
002223 1234A4            LCALL    ?L?COM003B
  303: 
  304:     /* send write stream */
  305:     if (vWriteLen != 0)
002226 E538              MOV      A,vWriteLen+01H
002228 4537              ORL      A,vWriteLen
00222A 6036              JZ       ?C0331?PKT_I2CM
  306:     {
  307:         /* 1st byte is always register offset */
  308:         vRegOffset = pPayload->aBuf[0];
00222C 8F82              MOV      DPL,R7
00222E 8E83              MOV      DPH,R6
002230 E582              MOV      A,DPL
002232 2405              ADD      A,#05H
002234 F582              MOV      DPL,A
002236 E4                CLR      A
002237 3583              ADDC     A,DPH
002239 F583              MOV      DPH,A
00223B E0                MOVX     A,@DPTR
00223C F516              MOV      vRegOffset,A
  309:         if (vWriteLen > 0x100)
00223E D3                SETB     C
00223F E538              MOV      A,vWriteLen+01H
002241 9400              SUBB     A,#00H
002243 E537              MOV      A,vWriteLen
002245 9401              SUBB     A,#01H
002247 4001              JC       ?C0332?PKT_I2CM
  310:         {
  311:             /* write length overflow */
  312:             return FALSE;
002249 22                RET      
  313:         }
00224A         ?C0332?PKT_I2CM:
  314: 
  315:         /* send write buffer */
  316:         CFG_DB_WriteFlush(vRegOffset, (UINT8)(vWriteLen-1), &(pPayload->aBuf[1]));
00224A E538              MOV      A,vWriteLen+01H
00224C 14                DEC      A
00224D FD                MOV      R5,A
00224E E536              MOV      A,pPayload+01H
002250 2406              ADD      A,#06H
002252 FB                MOV      R3,A
002253 E4                CLR      A
002254 3535              ADDC     A,pPayload
002256 FA                MOV      R2,A
002257 AF16              MOV      R7,vRegOffset
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 45


002259 710B              ACALL    _CFG_DB_WriteFlush
  317:         vRegOffset = (UINT8)(vRegOffset+vWriteLen-1);
00225B E516              MOV      A,vRegOffset
00225D 2538              ADD      A,vWriteLen+01H
00225F 14                DEC      A
002260 F516              MOV      vRegOffset,A
  318:     }
002262         ?C0331?PKT_I2CM:
  319: 
  320:     /* send read stream */
  321:     if (vReadLen != 0)
002262 E53A              MOV      A,vReadLen+01H
002264 4539              ORL      A,vReadLen
002266 601B              JZ       ?C0334?PKT_I2CM
  322:     {
  323:         UINT16  vLoop;
  324: 
  325:         /* read data */
  326:         for (vLoop = 0; vLoop < vReadLen; vLoop++)
002268 E4                CLR      A
002269 F53B              MOV      vLoop,A
00226B F53C              MOV      vLoop+01H,A
00226D         ?C0335?PKT_I2CM:
00226D 12359E            LCALL    ?L?COM0061
002270 9539              SUBB     A,vReadLen
002272 500F              JNC      ?C0334?PKT_I2CM
  327:         {
  328:             pPayload->aBuf[vWriteLen+vLoop] = CFG_DB_ReadByte(vRegOffset++);
002274 AF16              MOV      R7,vRegOffset
002276 0516              INC      vRegOffset
002278 D10A              ACALL    _CFG_DB_ReadByte
00227A 12338B            LCALL    ?L?COM001A
00227D 7002              JNZ      ?C0393?PKT_I2CM
00227F 053B              INC      vLoop
002281         ?C0393?PKT_I2CM:
002281 80EA              SJMP     ?C0335?PKT_I2CM
  329:         }
  330:     }
002283         ?C0334?PKT_I2CM:
  331: 
  332:     return TRUE;
002283 D3                SETB     C
  333: }
002284 22                RET      
----- FUNCTION _pkt_i2cm_vs_Stream (END) -------


----- FUNCTION PKT_I2CM_Stream (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  347: UINT16 PKT_I2CM_Stream(void)
  348: {
  349:     PKT_I2CM_STREAM_T SEG_XDATA *pPayload =
  350:             (PKT_I2CM_STREAM_T SEG_XDATA *)PKT_GetPayload();
002285 753300            MOV      pPayload,#HIGH vFrame+0CH
002288 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
  351: 
  352:     if ((PKT_GetPayloadSize() != (PKT_I2CM_STREAM_HEADER_LEN+pPayload->vWriteLen))
  353:         || (pPayload->vWriteLen+pPayload->vReadLen > COUNT_OF(pPayload->aBuf)))
00228B 123495            LCALL    ?L?COM0038
00228E E0                MOVX     A,@DPTR
00228F FE                MOV      R6,A
002290 A3                INC      DPTR
002291 E0                MOVX     A,@DPTR
002292 FF                MOV      R7,A
002293 2405              ADD      A,#05H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 46


002295 FD                MOV      R5,A
002296 E4                CLR      A
002297 3E                ADDC     A,R6
002298 FC                MOV      R4,A
002299 90004A            MOV      DPTR,#vFrame+0AH
00229C E0                MOVX     A,@DPTR
00229D B50424            CJNE     A,AR4,?C0361?PKT_I2CM
0022A0 A3                INC      DPTR
0022A1 E0                MOVX     A,@DPTR
0022A2 B5051F            CJNE     A,AR5,?C0361?PKT_I2CM
0022A5 123495            LCALL    ?L?COM0038
0022A8 A3                INC      DPTR
0022A9 A3                INC      DPTR
0022AA E0                MOVX     A,@DPTR
0022AB FC                MOV      R4,A
0022AC A3                INC      DPTR
0022AD E0                MOVX     A,@DPTR
0022AE FD                MOV      R5,A
0022AF EF                MOV      A,R7
0022B0 2D                ADD      A,R5
0022B1 FF                MOV      R7,A
0022B2 EE                MOV      A,R6
0022B3 3C                ADDC     A,R4
0022B4 FE                MOV      R6,A
0022B5 E4                CLR      A
0022B6 FC                MOV      R4,A
0022B7 FD                MOV      R5,A
0022B8 7B33              MOV      R3,#033H
0022BA 7A04              MOV      R2,#04H
0022BC F9                MOV      R1,A
0022BD F8                MOV      R0,A
0022BE C3                CLR      C
0022BF 120607            LCALL    ?C?SLCMP
0022C2 5005              JNC      ?C0360?PKT_I2CM
0022C4         ?C0361?PKT_I2CM:
  354:     {
  355:         return PKT_REPLY_Fail_InvalidLen;
0022C4 7E03              MOV      R6,#03H
0022C6 7F04              MOV      R7,#04H
0022C8 22                RET      
  356:     }
0022C9         ?C0360?PKT_I2CM:
  357: 
  358:   #if PKT_I2CM_VS_SUPPORT
  359:     if ((pPayload->vI2cAddr == PKT_I2CM_VS_ADDR) ?
0022C9 853482            MOV      DPL,pPayload+01H
0022CC 853383            MOV      DPH,pPayload
0022CF E0                MOVX     A,@DPTR
0022D0 AF34              MOV      R7,pPayload+01H
0022D2 AE33              MOV      R6,pPayload
0022D4 B4FE04            CJNE     A,#0FEH,?C0364?PKT_I2CM
0022D7 511C              ACALL    _pkt_i2cm_vs_Stream
0022D9 8003              SJMP     ?C0365?PKT_I2CM
0022DB         ?C0364?PKT_I2CM:
0022DB 121AFB            LCALL    _pkt_i2cm_Stream
0022DE         ?C0365?PKT_I2CM:
0022DE 5026              JNC      ?C0363?PKT_I2CM
  360:         pkt_i2cm_vs_Stream(pPayload) :
  361:         pkt_i2cm_Stream(pPayload))
  362:   #else
  363:     if (pkt_i2cm_Stream(pPayload))
  364:   #endif
  365:     {
  366:         PKT_SetPayloadSize(PKT_I2CM_STREAM_HEADER_LEN
  367:                            + pPayload->vWriteLen
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 47


  368:                            + pPayload->vReadLen);
0022E0 123495            LCALL    ?L?COM0038
0022E3 E0                MOVX     A,@DPTR
0022E4 FE                MOV      R6,A
0022E5 A3                INC      DPTR
0022E6 E0                MOVX     A,@DPTR
0022E7 2405              ADD      A,#05H
0022E9 FF                MOV      R7,A
0022EA E4                CLR      A
0022EB 3E                ADDC     A,R6
0022EC FE                MOV      R6,A
0022ED 123495            LCALL    ?L?COM0038
0022F0 A3                INC      DPTR
0022F1 A3                INC      DPTR
0022F2 E0                MOVX     A,@DPTR
0022F3 FC                MOV      R4,A
0022F4 A3                INC      DPTR
0022F5 E0                MOVX     A,@DPTR
0022F6 2F                ADD      A,R7
0022F7 FF                MOV      R7,A
0022F8 EC                MOV      A,R4
0022F9 3E                ADDC     A,R6
0022FA 90004A            MOV      DPTR,#vFrame+0AH
0022FD F0                MOVX     @DPTR,A
0022FE A3                INC      DPTR
0022FF EF                MOV      A,R7
002300 F0                MOVX     @DPTR,A
  369:         return PKT_REPLY_Done_ExecNoError;
002301 7E01              MOV      R6,#01H
002303 7F40              MOV      R7,#040H
002305 22                RET      
  370:     }
002306         ?C0363?PKT_I2CM:
  371:     else
  372:     {
  373:         return PKT_REPLY_Fail_I2cNoAck;
002306 7E03              MOV      R6,#03H
002308 7F40              MOV      R7,#040H
  374:     }
  375: }
00230A 22                RET      
----- FUNCTION PKT_I2CM_Stream (END) -------


----- FUNCTION _CFG_DB_WriteFlush (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  178: void CFG_DB_WriteFlush
  179: (
00230B 8F3D              MOV      vOffset,R7
00230D 8D3E              MOV      vCount,R5
00230F 8A3F              MOV      pBuf,R2
002311 8B40              MOV      pBuf+01H,R3
  180:     IN       UINT8            vOffset,
  181:     IN       UINT8            vCount,
  182:     IN const UINT8 SEG_XDATA *pBuf
  183: )
  184: {
  185:     SINT8   vPID = cfg_db_GetPID(vOffset);
002313 D1BF              ACALL    _cfg_db_GetPID
002315 8F41              MOV      vPID,R7
  186:     UINT8   vPageSize;
  187: 
  188:     if ((vPID == MEMPAGE_PID_INVALID) || (vCount == 0))
002317 E541              MOV      A,vPID
002319 F4                CPL      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 48


00231A 7002              JNZ      $ + 4H
00231C 811D              AJMP     ?C0044?CFG_DB
00231E E53E              MOV      A,vCount
002320 7002              JNZ      $ + 4H
002322 811D              AJMP     ?C0044?CFG_DB
  189:     {
  190:         /* invalid page, or zero flush length */
  191:         return;
  192:     }
002324         ?C0042?CFG_DB:
  193: 
  194:     /* limit Rx FIFO length to page boundary */
  195:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
002324 123546            LCALL    ?L?COM004B
002327 4009              JC       ?C0045?CFG_DB
002329 123528            LCALL    ?L?COM0048
00232C 5004              JNC      ?C0045?CFG_DB
00232E 7F20              MOV      R7,#020H
002330 8002              SJMP     ?C0046?CFG_DB
002332         ?C0045?CFG_DB:
002332 7F80              MOV      R7,#080H
002334         ?C0046?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  196:     vOffset  &= (vPageSize - 1);
002334 EF                MOV      A,R7
002335 14                DEC      A
002336 523D              ANL      vOffset,A
  197:     if (vOffset+vCount > vPageSize)
002338 E53E              MOV      A,vCount
00233A FD                MOV      R5,A
00233B E53D              MOV      A,vOffset
00233D 2D                ADD      A,R5
00233E FD                MOV      R5,A
00233F E4                CLR      A
002340 33                RLC      A
002341 FC                MOV      R4,A
002342 EF                MOV      A,R7
002343 FB                MOV      R3,A
002344 D3                SETB     C
002345 ED                MOV      A,R5
002346 9B                SUBB     A,R3
002347 7480              MOV      A,#080H
002349 F8                MOV      R0,A
00234A 6C                XRL      A,R4
00234B 98                SUBB     A,R0
00234C 4008              JC       ?C0047?CFG_DB
  198:     {
  199:         vCount = (vOffset+vCount) - vPageSize;
00234E E53D              MOV      A,vOffset
002350 253E              ADD      A,vCount
002352 C3                CLR      C
002353 9F                SUBB     A,R7
002354 F53E              MOV      vCount,A
  200:     }
002356         ?C0047?CFG_DB:
  201: 
  202:     if (vPID == MEMPAGE_PID_DIRECT_FE_60)
002356 E541              MOV      A,vPID
002358 6401              XRL      A,#01H
00235A 7027              JNZ      ?C0048?CFG_DB
  203:     {
  204:         /* FE.60-7F page */
  205: 
  206:         UINT8   vLoop;
  207:         for (vLoop=0; vLoop<vCount; vLoop++,vOffset++)
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 49


00235C F542              MOV      vLoop,A
00235E         ?C0049?CFG_DB:
00235E E542              MOV      A,vLoop
002360 C3                CLR      C
002361 953E              SUBB     A,vCount
002363 501C              JNC      ?C0050?CFG_DB
  208:         {
  209:             UINT8   vData = pBuf[vLoop];
002365 12350C            LCALL    ?L?COM0043
002368 F543              MOV      vData,A
  210: 
  211:             switch (vOffset)
00236A E53D              MOV      A,vOffset
00236C 24E5              ADD      A,#0E5H
00236E 24FB              ADD      A,#0FBH
002370 5004              JNC      ?C0065?CFG_DB
002372 2408              ADD      A,#08H
002374 7005              JNZ      ?C0051?CFG_DB
  212:             {
  213:                 case CFG(RT_EVB_CTRL):
  214:                     /* EVB/DUT related */
  215:                 case CFG(Vendor_PWD_Entry)+0:
  216:                 case CFG(Vendor_PWD_Entry)+1:
  217:                 case CFG(Vendor_PWD_Entry)+2:
  218:                 case CFG(Vendor_PWD_Entry)+3:
  219:                 case CFG(Vendor_Page_Select):
  220:                     CFG_SETV8(MEMPAGE_PID_DIRECT_FE_60, vOffset, vData);
002376         ?C0065?CFG_DB:
002376 A83D              MOV      R0,vOffset
002378 E543              MOV      A,vData
00237A F2                MOVX     @R0,A
  221:                     break;
  222: 
  223:                 default:    /* read-only field */
  224:                     /* do nothing */
  225:                     break;
  226:             }
  227:         }
00237B         ?C0051?CFG_DB:
00237B 0542              INC      vLoop
00237D 053D              INC      vOffset
00237F 80DD              SJMP     ?C0049?CFG_DB
002381         ?C0050?CFG_DB:
  228: 
  229:         /* refresh password level */
  230:         CFG_PWD_RefreshLevel();
002381 A183              AJMP     CFG_PWD_RefreshLevel
  231:     }
002383         ?C0048?CFG_DB:
  232:     else    /* other pages */
  233:     {
  234:         if (vPID == MEMPAGE_PID_DIRECT_FE_00)
002383 E541              MOV      A,vPID
002385 B4061B            CJNE     A,#06H,?C0071?CFG_DB
  235:         {
  236:             if (vOffset+vCount > MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
002388 E53D              MOV      A,vOffset
00238A 253E              ADD      A,vCount
00238C FF                MOV      R7,A
00238D E4                CLR      A
00238E 33                RLC      A
00238F FE                MOV      R6,A
002390 D3                SETB     C
002391 EF                MOV      A,R7
002392 9460              SUBB     A,#060H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 50


002394 EE                MOV      A,R6
002395 6480              XRL      A,#080H
002397 9480              SUBB     A,#080H
002399 4008              JC       ?C0071?CFG_DB
  237:             {
  238:                 /* cross-write from FE.00-5F to FE.60-7F field,
  239:                  * only accept FE.00-5F field data.
  240:                  */
  241:                 vCount = (vOffset+vCount) - MEMMAP_REAL_OFFSET(DDM_EVB_TEMP);
00239B E53D              MOV      A,vOffset
00239D 253E              ADD      A,vCount
00239F 24A0              ADD      A,#0A0H
0023A1 F53E              MOV      vCount,A
  242:             }
  243:         }
0023A3         ?C0071?CFG_DB:
  244: 
  245:         /* check password level, to make sure it's writable */
  246:         if (CFG_PWD_GetLevel() >= aPagePwdWriteTable[vPID])
0023A3 AF41              MOV      R7,vPID
0023A5 EF                MOV      A,R7
0023A6 33                RLC      A
0023A7 95E0              SUBB     A,ACC
0023A9 FE                MOV      R6,A
0023AA 7435              MOV      A,#LOW aPagePwdWriteTable
0023AC 2F                ADD      A,R7
0023AD F582              MOV      DPL,A
0023AF 7416              MOV      A,#HIGH aPagePwdWriteTable
0023B1 3E                ADDC     A,R6
0023B2 12356B            LCALL    ?L?COM005B
0023B5 9F                SUBB     A,R7
0023B6 4065              JC       ?C0044?CFG_DB
  247:         {
  248:             if (MEMPAGE_IsRAM(vPID))
0023B8 123547            LCALL    ?L?COM004C
0023BB 4031              JC       ?C0074?CFG_DB
0023BD 123528            LCALL    ?L?COM0048
0023C0 502C              JNC      ?C0074?CFG_DB
  249:             {
  250:                 /* RAM page */
  251: 
  252:                 UINT8   vLoop;
  253:                 for (vLoop=0; vLoop<vCount; vLoop++)
0023C2 E4                CLR      A
0023C3 F542              MOV      vLoop,A
0023C5         ?C0075?CFG_DB:
0023C5 E542              MOV      A,vLoop
0023C7 C3                CLR      C
0023C8 953E              SUBB     A,vCount
0023CA 5051              JNC      ?C0044?CFG_DB
  254:                 {
  255:                     CFG_SETV8(vPID, vOffset+vLoop, pBuf[vLoop]);
0023CC 123546            LCALL    ?L?COM004B
0023CF 4019              JC       ?C0081?CFG_DB
0023D1 123528            LCALL    ?L?COM0048
0023D4 5014              JNC      ?C0081?CFG_DB
0023D6 12350C            LCALL    ?L?COM0043
0023D9 FF                MOV      R7,A
0023DA E53D              MOV      A,vOffset
0023DC 2542              ADD      A,vLoop
0023DE FE                MOV      R6,A
0023DF E541              MOV      A,vPID
0023E1 14                DEC      A
0023E2 C4                SWAP     A
0023E3 33                RLC      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 51


0023E4 54E0              ANL      A,#0E0H
0023E6 2E                ADD      A,R6
0023E7 F8                MOV      R0,A
0023E8 EF                MOV      A,R7
0023E9 F2                MOVX     @R0,A
0023EA         ?C0081?CFG_DB:
0023EA         ?C0086?CFG_DB:
  256:                 }
0023EA         ?C0077?CFG_DB:
0023EA 0542              INC      vLoop
0023EC 80D7              SJMP     ?C0075?CFG_DB
  257:             }
0023EE         ?C0074?CFG_DB:
  258:             else if (MEMPAGE_IsROM(vPID))
0023EE C3                CLR      C
0023EF E541              MOV      A,vPID
0023F1 6480              XRL      A,#080H
0023F3 9483              SUBB     A,#083H
0023F5 4026              JC       ?C0044?CFG_DB
0023F7 D3                SETB     C
0023F8 E541              MOV      A,vPID
0023FA 6480              XRL      A,#080H
0023FC 9486              SUBB     A,#086H
0023FE 501D              JNC      ?C0044?CFG_DB
  259:             {
  260:                 /* ROM page */
  261:                 EEPROM_MEMCPY(MEMPAGE_ROM_LMA(vPID)+vOffset, pBuf, vCount);
002400 AF41              MOV      R7,vPID
002402 123562            LCALL    ?L?COM005A
002405         ?C0092?CFG_DB:
002405 C3                CLR      C
002406 33                RLC      A
002407 CE                XCH      A,R6
002408 33                RLC      A
002409 CE                XCH      A,R6
00240A D8F9              DJNZ     R0,?C0092?CFG_DB
00240C 12353B            LCALL    ?L?COM004A
00240F 253D              ADD      A,vOffset
002411 FF                MOV      R7,A
002412 EC                MOV      A,R4
002413 3E                ADDC     A,R6
002414 FE                MOV      R6,A
002415 AB3E              MOV      R3,vCount
002417 AD40              MOV      R5,pBuf+01H
002419 AC3F              MOV      R4,pBuf
00241B 911E              ACALL    _DRV_FLASH_Update
  262:             }
  263:             else
  264:             {
  265:                 /* VIRTUAL page */
  266:                 /* do nothing */
  267:             }
  268:         }
  269:     }
  270: }
00241D         ?C0044?CFG_DB:
00241D 22                RET      
----- FUNCTION _CFG_DB_WriteFlush (END) -------


----- FUNCTION _DRV_FLASH_Update (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  189: void DRV_FLASH_Update
  190: (
00241E 8E44              MOV      vDstAddr,R6
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 52


002420 8F45              MOV      vDstAddr+01H,R7
002422 8C46              MOV      pSrcAddr,R4
002424 8D47              MOV      pSrcAddr+01H,R5
;---- Variable 'vLen' assigned to Register 'R1' ----
002426 A903              MOV      R1,AR3
  191:     IN       UINT16           vDstAddr,
  192:     IN const UINT8 SEG_XDATA *pSrcAddr,
  193:     IN       UINT8            vLen
  194: )
  195: {
  196:     BOOL   bIntStatus;
  197:     UINT16 vPageBase;
  198:     UINT16 vPageOffset;
  199:     BOOL   bErase;
  200:     UINT8  vLoop;
  201: 
  202:     /* globally lock interrupt */
  203:     bIntStatus = DRV_INT_LockGlobalInterrupt();
002428 30AF05            JNB      EA,?C0012?DRV_FLASH
00242B C2AF              CLR      EA
00242D D3                SETB     C
00242E 8001              SJMP     ?C0013?DRV_FLASH
002430         ?C0012?DRV_FLASH:
002430 C3                CLR      C
002431         ?C0013?DRV_FLASH:
002431 9238              MOV      bIntStatus,C
  204: 
  205:     /* calculate flash page base address & offset of this page */
  206:     vPageBase   = vDstAddr & FLASH_PAGE_MASK;
002433 E544              MOV      A,vDstAddr
002435 54FE              ANL      A,#0FEH
002437 F548              MOV      vPageBase,A
002439 754900            MOV      vPageBase+01H,#00H
  207:     vPageOffset = vDstAddr & ~FLASH_PAGE_MASK;
00243C E544              MOV      A,vDstAddr
00243E 5401              ANL      A,#01H
002440 F54A              MOV      vPageOffset,A
002442 85454B            MOV      vPageOffset+01H,vDstAddr+01H
  208: 
  209:     /* check whether need to erase flash page */
  210:     bErase = FALSE;
002445 C239              CLR      bErase
  211:     for (vLoop = 0; vLoop < vLen; vLoop++)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002447 E4                CLR      A
002448 FF                MOV      R7,A
002449         ?C0014?DRV_FLASH:
002449 EF                MOV      A,R7
00244A C3                CLR      C
00244B 99                SUBB     A,R1
00244C 5033              JNC      ?C0015?DRV_FLASH
  212:     {
  213:         UINT8   vDstData = CODE_U8(vPageBase+vPageOffset+vLoop);
00244E E549              MOV      A,vPageBase+01H
002450 254B              ADD      A,vPageOffset+01H
002452 FD                MOV      R5,A
002453 E548              MOV      A,vPageBase
002455 354A              ADDC     A,vPageOffset
002457 FC                MOV      R4,A
002458 EF                MOV      A,R7
002459 7A00              MOV      R2,#00H
00245B 2D                ADD      A,R5
00245C FD                MOV      R5,A
00245D EA                MOV      A,R2
00245E 3C                ADDC     A,R4
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 53


00245F 8D82              MOV      DPL,R5
002461 F583              MOV      DPH,A
002463 E4                CLR      A
002464 93                MOVC     A,@A+DPTR
002465 F54C              MOV      vDstData,A
  214:         UINT8   vSrcData = pSrcAddr[vLoop];
002467 E547              MOV      A,pSrcAddr+01H
002469 2F                ADD      A,R7
00246A F582              MOV      DPL,A
00246C E4                CLR      A
00246D 3546              ADDC     A,pSrcAddr
00246F F583              MOV      DPH,A
002471 E0                MOVX     A,@DPTR
002472 F54D              MOV      vSrcData,A
  215: 
  216:         if ((vDstData&vSrcData) != vSrcData)
002474 554C              ANL      A,vDstData
002476 654D              XRL      A,vSrcData
002478 6004              JZ       ?C0016?DRV_FLASH
  217:         {
  218:             bErase = TRUE;
00247A D239              SETB     bErase
  219:             break;
00247C 8003              SJMP     ?C0015?DRV_FLASH
  220:         }
  221:     }
00247E         ?C0016?DRV_FLASH:
00247E 0F                INC      R7
00247F 80C8              SJMP     ?C0014?DRV_FLASH
002481         ?C0015?DRV_FLASH:
  222: 
  223:     if (!bErase)
002481 20390B            JB       bErase,?C0018?DRV_FLASH
  224:     {
  225:         /* no need to erase,
  226:           * just write the new data into flash is OK.
  227:           */
  228:         drv_flash_WriteBytes(vDstAddr, (UINT16)pSrcAddr, vLen, FALSE);
002484 1234D1            LCALL    ?L?COM003E
002487 AF45              MOV      R7,vDstAddr+01H
002489 AE44              MOV      R6,vDstAddr
00248B B106              ACALL    _drv_flash_WriteBytes
  229:     }
00248D 806E              SJMP     ?C0022?DRV_FLASH
00248F         ?C0018?DRV_FLASH:
  230:     else
  231:     {
  232:         UINT16 vCacheAddr;
  233: 
  234:         /* prepare cache page content, to be the final flash page content:
  235:          *  1) copy other content into cache page;
  236:          *  2) update cache page with new data;
  237:          */
  238:         vCacheAddr  = FLASH_CACHE_PAGE;
00248F 754C3A            MOV      vCacheAddr,#03AH
002492 754D00            MOV      vCacheAddr+01H,#00H
  239:         drv_flash_WriteBytes(vCacheAddr, vPageBase, vPageOffset, TRUE);
002495 D23A              SETB     ?_drv_flash_WriteBytes?BIT
002497 AB4B              MOV      R3,vPageOffset+01H
002499 AA4A              MOV      R2,vPageOffset
00249B AD49              MOV      R5,vPageBase+01H
00249D AC48              MOV      R4,vPageBase
00249F B102              ACALL    ?L?COM0047
  240:         vCacheAddr += vPageOffset;
0024A1 E54B              MOV      A,vPageOffset+01H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 54


0024A3 254D              ADD      A,vCacheAddr+01H
0024A5 F54D              MOV      vCacheAddr+01H,A
0024A7 E54A              MOV      A,vPageOffset
0024A9 354C              ADDC     A,vCacheAddr
0024AB F54C              MOV      vCacheAddr,A
  241:         drv_flash_WriteBytes(vCacheAddr, (UINT16)pSrcAddr, vLen, FALSE);
0024AD 1234D1            LCALL    ?L?COM003E
0024B0 B102              ACALL    ?L?COM0047
  242:         vCacheAddr += vLen;
0024B2 E9                MOV      A,R1
0024B3 FF                MOV      R7,A
0024B4 7E00              MOV      R6,#00H
0024B6 254D              ADD      A,vCacheAddr+01H
0024B8 F54D              MOV      vCacheAddr+01H,A
0024BA EE                MOV      A,R6
0024BB 354C              ADDC     A,vCacheAddr
0024BD F54C              MOV      vCacheAddr,A
  243:         drv_flash_WriteBytes(vCacheAddr,
  244:                              vDstAddr + vLen,
  245:                              (FLASH_PAGE_SIZE-1) - (vPageOffset+vLen),
  246:                              TRUE);
0024BF E545              MOV      A,vDstAddr+01H
0024C1 2F                ADD      A,R7
0024C2 FD                MOV      R5,A
0024C3 EE                MOV      A,R6
0024C4 3544              ADDC     A,vDstAddr
0024C6 FC                MOV      R4,A
0024C7 E54B              MOV      A,vPageOffset+01H
0024C9 2F                ADD      A,R7
0024CA FF                MOV      R7,A
0024CB EE                MOV      A,R6
0024CC 354A              ADDC     A,vPageOffset
0024CE FE                MOV      R6,A
0024CF C3                CLR      C
0024D0 74FF              MOV      A,#0FFH
0024D2 9F                SUBB     A,R7
0024D3 FB                MOV      R3,A
0024D4 7401              MOV      A,#01H
0024D6 9E                SUBB     A,R6
0024D7 FA                MOV      R2,A
0024D8 D23A              SETB     ?_drv_flash_WriteBytes?BIT
0024DA B102              ACALL    ?L?COM0047
  247: 
  248:         /* erase target flash page */
  249:         drv_flash_ErasePage(vPageBase);
0024DC E4                CLR      A
0024DD FB                MOV      R3,A
0024DE 7D03              MOV      R5,#03H
0024E0 AF49              MOV      R7,vPageBase+01H
0024E2 AE48              MOV      R6,vPageBase
0024E4 B160              ACALL    _drv_flash_Control
  250: 
  251:         /* copy cache page content into target flash page */
  252:         drv_flash_WriteBytes(vPageBase,
  253:                              FLASH_CACHE_PAGE,
  254:                              FLASH_PAGE_SIZE,
  255:                              TRUE);
0024E6 D23A              SETB     ?_drv_flash_WriteBytes?BIT
0024E8 7A02              MOV      R2,#02H
0024EA 7D00              MOV      R5,#00H
0024EC 7C3A              MOV      R4,#03AH
0024EE AF49              MOV      R7,vPageBase+01H
0024F0 AE48              MOV      R6,vPageBase
0024F2 B106              ACALL    _drv_flash_WriteBytes
  256: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 55


  257:         /* erase flash cache page */
  258:         drv_flash_ErasePage(FLASH_CACHE_PAGE);
0024F4 E4                CLR      A
0024F5 FB                MOV      R3,A
0024F6 7D03              MOV      R5,#03H
0024F8 FF                MOV      R7,A
0024F9 7E3A              MOV      R6,#03AH
0024FB B160              ACALL    _drv_flash_Control
  259:     }
0024FD         ?C0022?DRV_FLASH:
  260: 
  261:     /* restore interrupt status */
  262:     DRV_INT_UnlockGlobalInterrupt(bIntStatus);
0024FD A238              MOV      C,bIntStatus
0024FF 92AF              MOV      EA,C
  263: }
002501 22                RET      
----- FUNCTION _DRV_FLASH_Update (END) -------


----- FUNCTION ?L?COM0047 (BEGIN) -----
002502 AF4D              MOV      R7,vCacheAddr+01H
002504 AE4C              MOV      R6,vCacheAddr
----- FUNCTION _drv_flash_WriteBytes (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
  151: static void drv_flash_WriteBytes
  152: (
002506 8E4E              MOV      vDstAddr,R6
002508 8F4F              MOV      vDstAddr+01H,R7
00250A 8C50              MOV      vSrcAddr,R4
00250C 8D51              MOV      vSrcAddr+01H,R5
00250E 8A52              MOV      vLen,R2
002510 8B53              MOV      vLen+01H,R3
  153:     IN UINT16     vDstAddr,
  154:     IN UINT16     vSrcAddr,
  155:     IN UINT16     vLen,
  156:     IN BOOL       bSrcFlash
  157: )
  158: {
  159:     for (; vLen-- != 0; vDstAddr++,vSrcAddr++)
002512         ?C0005?DRV_FLASH:
002512 E553              MOV      A,vLen+01H
002514 1553              DEC      vLen+01H
002516 AE52              MOV      R6,vLen
002518 7002              JNZ      ?C0024?DRV_FLASH
00251A 1552              DEC      vLen
00251C         ?C0024?DRV_FLASH:
00251C 4E                ORL      A,R6
00251D 6040              JZ       ?C0011?DRV_FLASH
  160:     {
  161:         UINT8 vData = (bSrcFlash? CODE_U8(vSrcAddr) : XDATA_U8(vSrcAddr));
00251F 303A0B            JNB      bSrcFlash,?C0008?DRV_FLASH
002522 855182            MOV      DPL,vSrcAddr+01H
002525 855083            MOV      DPH,vSrcAddr
002528 E4                CLR      A
002529 93                MOVC     A,@A+DPTR
00252A FF                MOV      R7,A
00252B 8008              SJMP     ?C0009?DRV_FLASH
00252D         ?C0008?DRV_FLASH:
00252D 855182            MOV      DPL,vSrcAddr+01H
002530 855083            MOV      DPH,vSrcAddr
002533 E0                MOVX     A,@DPTR
002534 FF                MOV      R7,A
002535         ?C0009?DRV_FLASH:
002535 8F54              MOV      vData,R7
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 56


  162:         if (CODE_U8(vDstAddr) != vData)
002537 854F82            MOV      DPL,vDstAddr+01H
00253A 854E83            MOV      DPH,vDstAddr
00253D E4                CLR      A
00253E 93                MOVC     A,@A+DPTR
00253F 6554              XRL      A,vData
002541 600A              JZ       ?C0007?DRV_FLASH
  163:         {
  164:             drv_flash_WriteByte(vDstAddr, vData);
002543 AB54              MOV      R3,vData
002545 7D01              MOV      R5,#01H
002547 AF4F              MOV      R7,vDstAddr+01H
002549 AE4E              MOV      R6,vDstAddr
00254B B160              ACALL    _drv_flash_Control
  165:         }
  166:     }
00254D         ?C0007?DRV_FLASH:
00254D 054F              INC      vDstAddr+01H
00254F E54F              MOV      A,vDstAddr+01H
002551 7002              JNZ      ?C0025?DRV_FLASH
002553 054E              INC      vDstAddr
002555         ?C0025?DRV_FLASH:
002555 0551              INC      vSrcAddr+01H
002557 E551              MOV      A,vSrcAddr+01H
002559 7002              JNZ      ?C0026?DRV_FLASH
00255B 0550              INC      vSrcAddr
00255D         ?C0026?DRV_FLASH:
00255D 80B3              SJMP     ?C0005?DRV_FLASH
  167: }
00255F         ?C0011?DRV_FLASH:
00255F 22                RET      
----- FUNCTION _drv_flash_WriteBytes (END) -------


----- FUNCTION _drv_flash_Control (BEGIN) -----
 FILE: '..\drv\drv_flash.c'
   71: static void drv_flash_Control(UINT16 vFlashAddr, UINT8 vPSCTL, UINT8 vData)
   72: {
002560 8E55              MOV      vFlashAddr,R6
002562 8F56              MOV      vFlashAddr+01H,R7
;---- Variable 'vData' assigned to Register 'R3' ----
;---- Variable 'vPSCTL' assigned to Register 'R5' ----
   73:   #if DRV_WATCHDOG_SUPPORT
   74:     /* kick watchdog, to prevent watchdog reset MCU */
   75:     DRV_WATCHDOG_Kick();
   76:   #endif
   77: 
   78:     /* Force Enable VDD Monitor as a reset source */
   79:     DRV_RESET_EnableVDDMonitor();
002564 75FF80            MOV      VDM0CN,#080H
002567 75EF06            MOV      RSTSRC,#06H
   80: 
   81:     /* enable flash erase/write */
   82:     PSCTL = vPSCTL;
00256A 8D8F              MOV      PSCTL,R5
   83: 
   84:     /* write KEYs to unlock flash */
   85:     FLKEY = FLASH_KEY_1;
00256C A2AF              MOV      C,EA
00256E E4                CLR      A
00256F 33                RLC      A
002570 24A5              ADD      A,#0A5H
002572 F5B7              MOV      FLKEY,A
   86:     FLKEY = FLASH_KEY_2;
002574 75B7F1            MOV      FLKEY,#0F1H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 57


   87: 
   88:     /* write data into flash */
   89:     XDATA_U8(vFlashAddr) = vData;
002577 855682            MOV      DPL,vFlashAddr+01H
00257A 855583            MOV      DPH,vFlashAddr
00257D EB                MOV      A,R3
00257E F0                MOVX     @DPTR,A
   90: 
   91:     /* disable flash erase/write */
   92:     PSCTL = 0x00;
00257F E4                CLR      A
002580 F58F              MOV      PSCTL,A
   93: }
002582 22                RET      
----- FUNCTION _drv_flash_Control (END) -------


----- FUNCTION CFG_PWD_RefreshLevel (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
   49: void CFG_PWD_RefreshLevel(void)
   50: {
   51:     UINT32  vPasswd = CFG_GET(Vendor_PWD_Entry);
   52: 
002583 7F1B              MOV      R7,#01BH
002585 7E00              MOV      R6,#00H
002587 F1D4              ACALL    _CFG_RAM_GET32
002589 8F47              MOV      vPasswd+03H,R7
00258B 8E46              MOV      vPasswd+02H,R6
00258D 8D45              MOV      vPasswd+01H,R5
00258F 8C44              MOV      vPasswd,R4
   53:     switch (vPasswd)
002591 1206CA            LCALL    ?C?LCASE
002594 25AE              DW       ?C0009?CFG_PWD
002596 D1E9              DW       0D1E9H
002598 5B93              DW       05B93H
00259A 25B2              DW       ?C0013?CFG_PWD
00259C DA17              DW       0DA17H
00259E B67C              DW       0B67CH
0025A0 25AA              DW       ?C0005?CFG_PWD
0025A2 E37A              DW       0E37AH
0025A4 97A1              DW       097A1H
0025A6 0000              DW       00H
0025A8 25B6              DW       ?C0014?CFG_PWD
   54:     {
   55:         case CFG_PWD_REBOOT:    /* reboot password */
0025AA         ?C0005?CFG_PWD:
   56:             DRV_RESET_SoftwareReset();
0025AA 75EF12            MOV      RSTSRC,#012H
   57:             break;
0025AD 22                RET      
   58: 
   59:         case CFG_PWD_FACTORY:   /* factory password */
0025AE         ?C0009?CFG_PWD:
   60:             PWD_LEVEL_SET(CFG_PWD_LEVEL_FACTORY);
0025AE 751708            MOV      vCfgPwdLevel,#08H
   61:             break;
0025B1 22                RET      
   62: 
   63:         case CFG_PWD_OEM:       /* OEM password */
0025B2         ?C0013?CFG_PWD:
   64:             PWD_LEVEL_SET(CFG_PWD_LEVEL_OEM);
0025B2 751704            MOV      vCfgPwdLevel,#04H
   65:             break;
0025B5 22                RET      
   66: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 58


   67:         default:
0025B6         ?C0014?CFG_PWD:
   68:             if (vPasswd == CFG_GET(Vendor_PWD_UserRW))
0025B6 7F7C              MOV      R7,#07CH
0025B8 123484            LCALL    ?L?COM0037
0025BB 7004              JNZ      ?C0015?CFG_PWD
   69:             {
   70:                 /* UserRW password */
   71:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRW);
0025BD 751702            MOV      vCfgPwdLevel,#02H
   72:             }
0025C0 22                RET      
0025C1         ?C0015?CFG_PWD:
   73:             else if (vPasswd == CFG_GET(Vendor_PWD_UserRO))
0025C1 7F78              MOV      R7,#078H
0025C3 123484            LCALL    ?L?COM0037
0025C6 7004              JNZ      ?C0027?CFG_PWD
   74:             {
   75:                 /* UserRO password */
   76:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_UserRO);
0025C8 751701            MOV      vCfgPwdLevel,#01H
   77:             }
0025CB 22                RET      
   78:             else
   79:             {
0025CC         ?C0027?CFG_PWD:
   80:                 PWD_LEVEL_SET(CFG_PWD_LEVEL_NORMAL);
0025CC E4                CLR      A
0025CD F517              MOV      vCfgPwdLevel,A
   81:             }
   82:             break;
   83:     }
   84: }
0025CF 22                RET      
----- FUNCTION CFG_PWD_RefreshLevel (END) -------


----- FUNCTION PKT_I2CM_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_i2cm.c'
  339: UINT16 PKT_I2CM_Inspect(void)
  340: {
  341:     _pkt_i2cm_Init();
  342: 
0025D0 1232CF            LCALL    ?L?COM000D
0025D3 D282              SETB     IO_DUT_I2CM_SCL
0025D5 753301            MOV      _loop,#01H
0025D8 7534F4            MOV      _loop+01H,#0F4H
0025DB         ?C0351?PKT_I2CM:
0025DB 208212            JB       IO_DUT_I2CM_SCL,?C0355?PKT_I2CM
0025DE E534              MOV      A,_loop+01H
0025E0 1534              DEC      _loop+01H
0025E2 AE33              MOV      R6,_loop
0025E4 7002              JNZ      ?C0394?PKT_I2CM
0025E6 1533              DEC      _loop
0025E8         ?C0394?PKT_I2CM:
0025E8 4E                ORL      A,R6
0025E9 6005              JZ       ?C0355?PKT_I2CM
0025EB 121C22            LCALL    ?L?COM0008
0025EE 80EB              SJMP     ?C0351?PKT_I2CM
0025F0         ?C0355?PKT_I2CM:
0025F0 D292              SETB     IO_DUT_I2CM_SDA
  343:     PKT_SetPayloadSize(0x00);
0025F2 123456            LCALL    ?L?COM0030
  344:     return PKT_REPLY_Done_ExecNoError;
0025F5 7E01              MOV      R6,#01H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 59


0025F7 7F40              MOV      R7,#040H
  345: }
0025F9 22                RET      
----- FUNCTION PKT_I2CM_Inspect (END) -------


----- FUNCTION CFG_PWD_Init (BEGIN) -----
 FILE: '..\cfg\cfg_pwd.c'
  101: void CFG_PWD_Init(void)
  102: {
  103:     /* set default password */
  104:     CFG_SET(Vendor_PWD_Entry, CFG_PWD_DEFAULT);
0025FA         ?C0045?CFG_PWD:
0025FA E4                CLR      A
0025FB F531              MOV      ?_CFG_RAM_SET32?BYTE+05H,A
0025FD F530              MOV      ?_CFG_RAM_SET32?BYTE+04H,A
0025FF F52F              MOV      ?_CFG_RAM_SET32?BYTE+03H,A
002601 F52E              MOV      ?_CFG_RAM_SET32?BYTE+02H,A
002603 7F1B              MOV      R7,#01BH
002605 FE                MOV      R6,A
002606 F1E2              ACALL    _CFG_RAM_SET32
002608         ?C0030?CFG_PWD:
  105: 
  106:     /* refresh password level */
  107:     CFG_PWD_RefreshLevel();
002608 A183              AJMP     CFG_PWD_RefreshLevel
----- FUNCTION CFG_PWD_Init (END) -------


----- FUNCTION _CFG_DB_ReadByte (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
  106: UINT8 CFG_DB_ReadByte(IN UINT8 vOffset)
  107: {
;---- Variable 'vOffset' assigned to Register 'R5' ----
00260A AD07              MOV      R5,AR7
  108:     SINT8   vPID = cfg_db_GetPID(vOffset);
  109:     UINT8   vPageSize;
00260C D1BF              ACALL    _cfg_db_GetPID
;---- Variable 'vPID' assigned to Register 'R6' ----
00260E AE07              MOV      R6,AR7
  110: 
  111:     if (vPID == MEMPAGE_PID_INVALID)
002610 BEFF03            CJNE     R6,#0FFH,?C0020?CFG_DB
  112:     {
  113:         /* invalid page */
  114:         return (UINT8)I2CS_INVALID_DATA;
002613 7FAA              MOV      R7,#0AAH
002615 22                RET      
  115:     }
002616         ?C0020?CFG_DB:
  116: 
  117:     vPageSize = (MEMPAGE_IsRAM(vPID)? CFG_RAM_PAGE_SIZE : CFG_ROM_PAGE_SIZE);
002616 C3                CLR      C
002617 EE                MOV      A,R6
002618 6480              XRL      A,#080H
00261A 9481              SUBB     A,#081H
00261C 400C              JC       ?C0022?CFG_DB
00261E D3                SETB     C
00261F EE                MOV      A,R6
002620 6480              XRL      A,#080H
002622 9482              SUBB     A,#082H
002624 5004              JNC      ?C0022?CFG_DB
002626 7F20              MOV      R7,#020H
002628 8002              SJMP     ?C0023?CFG_DB
00262A         ?C0022?CFG_DB:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 60


00262A 7F80              MOV      R7,#080H
00262C         ?C0023?CFG_DB:
;---- Variable 'vPageSize' assigned to Register 'R7' ----
  118:     vOffset  &= (vPageSize - 1);
00262C EF                MOV      A,R7
00262D 14                DEC      A
00262E 5205              ANL      AR5,A
  119: 
  120:     /* check password level, to make sure it's readable */
  121:     if (CFG_PWD_GetLevel() >= aPagePwdReadTable[vPID])
002630 EE                MOV      A,R6
002631 FB                MOV      R3,A
002632 33                RLC      A
002633 95E0              SUBB     A,ACC
002635 FA                MOV      R2,A
002636 742E              MOV      A,#LOW aPagePwdReadTable
002638 2B                ADD      A,R3
002639 F582              MOV      DPL,A
00263B 7416              MOV      A,#HIGH aPagePwdReadTable
00263D 3A                ADDC     A,R2
00263E 12356B            LCALL    ?L?COM005B
002641 9F                SUBB     A,R7
002642 4078              JC       ?C0024?CFG_DB
  122:     {
  123:         /* password check pass */
  124:         switch (vPID)
002644 EE                MOV      A,R6
002645 6014              JZ       ?C0033?CFG_DB
002647 14                DEC      A
002648 7027              JNZ      ?C0025?CFG_DB
  125:         {
  126:             case MEMPAGE_PID_DIRECT_FE_60:
00264A         ?C0026?CFG_DB:
  127:                 switch (vOffset)
00264A ED                MOV      A,R5
00264B 24E5              ADD      A,#0E5H
00264D 24FD              ADD      A,#0FDH
00264F 5004              JNC      ?C0030?CFG_DB
002651 6005              JZ       ?C0031?CFG_DB
002653 801C              SJMP     ?C0025?CFG_DB
  128:                 {
  129:                     /* for security reason,
  130:                      *  the password entry is write-only field.
  131:                      */
  132:                     case CFG(Vendor_PWD_Entry)+0:
  133:                     case CFG(Vendor_PWD_Entry)+1:
  134:                     case CFG(Vendor_PWD_Entry)+2: return 0x00;
002655         ?C0030?CFG_DB:
002655 7F00              MOV      R7,#00H
002657 22                RET      
  135:                     case CFG(Vendor_PWD_Entry)+3: return CFG_PWD_GetLevel();
002658         ?C0031?CFG_DB:
002658 AF17              MOV      R7,vCfgPwdLevel
00265A 22                RET      
  136: 
  137:                     default:
  138:                         break;
  139:                 }
  140:                 break;
  141: 
  142:             case MEMPAGE_PID_EXTEND_FE_FF:
00265B         ?C0033?CFG_DB:
  143:                 return (((vOffset >= CFG_HEAD(Vendor_FwVersion))
  144:                             && (vOffset <= CFG_TAIL(Vendor_FwVersion)))?
  145:                         FW_VERSION(vOffset-CFG_HEAD(Vendor_FwVersion)):
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 61


  146:                         (UINT8)I2CS_INVALID_DATA);
00265B ED                MOV      A,R5
00265C C3                CLR      C
00265D 9478              SUBB     A,#078H
00265F 400D              JC       ?C0034?CFG_DB
002661 ED                MOV      A,R5
002662 D3                SETB     C
002663 947F              SUBB     A,#07FH
002665 5007              JNC      ?C0034?CFG_DB
002667 ED                MOV      A,R5
002668 900170            MOV      DPTR,#__sig-070H
00266B 93                MOVC     A,@A+DPTR
00266C FF                MOV      R7,A
00266D 22                RET      
00266E         ?C0034?CFG_DB:
00266E 7FAA              MOV      R7,#0AAH
002670 22                RET      
  147: 
  148:             default:
  149:                 break;
  150:         }
002671         ?C0025?CFG_DB:
  151: 
  152:         return CFG_GETV8(vPID, vOffset);
002671 C3                CLR      C
002672 EE                MOV      A,R6
002673 6480              XRL      A,#080H
002675 9481              SUBB     A,#081H
002677 4014              JC       ?C0037?CFG_DB
002679 D3                SETB     C
00267A EE                MOV      A,R6
00267B 6480              XRL      A,#080H
00267D 9482              SUBB     A,#082H
00267F 500C              JNC      ?C0037?CFG_DB
002681 EE                MOV      A,R6
002682 14                DEC      A
002683 C4                SWAP     A
002684 33                RLC      A
002685 54E0              ANL      A,#0E0H
002687 2D                ADD      A,R5
002688 F8                MOV      R0,A
002689 E2                MOVX     A,@R0
00268A FF                MOV      R7,A
00268B 802E              SJMP     ?C0038?CFG_DB
00268D         ?C0037?CFG_DB:
00268D C3                CLR      C
00268E EE                MOV      A,R6
00268F 6480              XRL      A,#080H
002691 9483              SUBB     A,#083H
002693 4024              JC       ?C0039?CFG_DB
002695 D3                SETB     C
002696 EE                MOV      A,R6
002697 6480              XRL      A,#080H
002699 9486              SUBB     A,#086H
00269B 501C              JNC      ?C0039?CFG_DB
00269D AF06              MOV      R7,AR6
00269F 123562            LCALL    ?L?COM005A
0026A2         ?C0091?CFG_DB:
0026A2 C3                CLR      C
0026A3 33                RLC      A
0026A4 CE                XCH      A,R6
0026A5 33                RLC      A
0026A6 CE                XCH      A,R6
0026A7 D8F9              DJNZ     R0,?C0091?CFG_DB
0026A9 12353B            LCALL    ?L?COM004A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 62


0026AC 2D                ADD      A,R5
0026AD FF                MOV      R7,A
0026AE EC                MOV      A,R4
0026AF 3E                ADDC     A,R6
0026B0 8F82              MOV      DPL,R7
0026B2 F583              MOV      DPH,A
0026B4 E4                CLR      A
0026B5 93                MOVC     A,@A+DPTR
0026B6 FF                MOV      R7,A
0026B7 8002              SJMP     ?C0040?CFG_DB
0026B9         ?C0039?CFG_DB:
0026B9 7FAA              MOV      R7,#0AAH
0026BB         ?C0040?CFG_DB:
0026BB         ?C0038?CFG_DB:
0026BB 22                RET      
  153:     }
0026BC         ?C0024?CFG_DB:
  154:     else
  155:     {
  156:         /* password check fail */
  157:         return (UINT8)I2CS_INVALID_DATA;
0026BC 7FAA              MOV      R7,#0AAH
  158:     }
  159: }
0026BE 22                RET      
----- FUNCTION _CFG_DB_ReadByte (END) -------


----- FUNCTION _cfg_db_GetPID (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   53: static SINT8 cfg_db_GetPID(IN UINT8 vOffset)
   54: {
;---- Variable 'vOffset' assigned to Register 'R7' ----
   55:     if (vOffset < MEMMAP_REAL_OFFSET(DDM_EVB_TEMP))
   56:     {
0026BF EF                MOV      A,R7
0026C0 C3                CLR      C
0026C1 9460              SUBB     A,#060H
0026C3 5003              JNC      ?C0007?CFG_DB
   57:         return MEMPAGE_PID_DIRECT_FE_00;
   58:     }
0026C5 7F06              MOV      R7,#06H
0026C7 22                RET      
   59:     else if (vOffset < I2CS_PAGE_SIZE)
0026C8         ?C0007?CFG_DB:
   60:     {
0026C8 EF                MOV      A,R7
0026C9 C3                CLR      C
0026CA 9480              SUBB     A,#080H
0026CC 5003              JNC      ?C0010?CFG_DB
   61:         return MEMPAGE_PID_DIRECT_FE_60;
   62:     }
0026CE 7F01              MOV      R7,#01H
0026D0 22                RET      
   63:     else
0026D1         ?C0010?CFG_DB:
   64:     {
   65:         switch (CFG_GET8(Vendor_Page_Select))
0026D1 781F              MOV      R0,#01FH
0026D3 E2                MOVX     A,@R0
0026D4 2480              ADD      A,#080H
0026D6 6017              JZ       ?C0015?CFG_DB
0026D8 14                DEC      A
0026D9 6017              JZ       ?C0016?CFG_DB
0026DB 14                DEC      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 63


0026DC 6017              JZ       ?C0017?CFG_DB
0026DE 2483              ADD      A,#083H
0026E0 6016              JZ       ?C0018?CFG_DB
0026E2 243F              ADD      A,#03FH
0026E4 7015              JNZ      ?C0009?CFG_DB
   66:         {
   67:             /* RAM pages */
   68:             case 0xC0:
0026E6         ?C0013?CFG_DB:
   69:                 if (vOffset < I2CS_PAGE_SIZE+CFG_RAM_PAGE_SIZE)
0026E6 EF                MOV      A,R7
0026E7 C3                CLR      C
0026E8 94A0              SUBB     A,#0A0H
0026EA 500F              JNC      ?C0009?CFG_DB
   70:                 {
   71:                     return MEMPAGE_PID_EXTEND_FE_C0;
0026EC 7F02              MOV      R7,#02H
0026EE 22                RET      
   72:                 }
   73:                 break;
   74: 
   75:             /* ROM pages */
   76:             case 0x80: return MEMPAGE_PID_EXTEND_FE_80;
0026EF         ?C0015?CFG_DB:
0026EF 7F03              MOV      R7,#03H
0026F1 22                RET      
   77:             case 0x81: return MEMPAGE_PID_EXTEND_FE_81;
0026F2         ?C0016?CFG_DB:
0026F2 7F04              MOV      R7,#04H
0026F4 22                RET      
   78:             case 0x82: return MEMPAGE_PID_EXTEND_FE_82;
0026F5         ?C0017?CFG_DB:
0026F5 7F05              MOV      R7,#05H
0026F7 22                RET      
   79: 
   80:             /* virtual pages */
   81:             case 0xFF: return MEMPAGE_PID_EXTEND_FE_FF;
0026F8         ?C0018?CFG_DB:
0026F8 7F00              MOV      R7,#00H
0026FA 22                RET      
   82: 
   83:             default:
   84:                 break;
   85:         }
   86:     }
0026FB         ?C0009?CFG_DB:
   87: 
   88:     return MEMPAGE_PID_INVALID;
0026FB 7FFF              MOV      R7,#0FFH
   89: }
0026FD 22                RET      
----- FUNCTION _cfg_db_GetPID (END) -------


----- FUNCTION PKT_MDIOM_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   44: UINT16 PKT_MDIOM_Probe(void)
   45: {
   46:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   47:     UINT16      SEG_XDATA  vData;
;---- Variable 'pPayload' assigned to Register 'DPTR' ----
0026FE 90004C            MOV      DPTR,#vFrame+0CH
   48: 
   49:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
002701 E0                MOVX     A,@DPTR
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 64


002702 FF                MOV      R7,A
002703 A3                INC      DPTR
002704 E0                MOVX     A,@DPTR
002705 FD                MOV      R5,A
002706 7A04              MOV      R2,#HIGH vData
002708 7BEA              MOV      R3,#LOW vData
00270A F115              ACALL    _DRV_MDIOM_FrameRead
00270C 7E01              MOV      R6,#01H
00270E 4002              JC       ?C0005?PKT_MDIOM
   50:                              pPayload->vDevAddr,
   51:                              &vData))
   52:     {
   53:         return PKT_REPLY_Fail_MdioNoAck;
002710 7E03              MOV      R6,#03H
   54:     }
002712         ?C0005?PKT_MDIOM:
   55: 
   56:     return PKT_REPLY_Done_ExecNoError;
002712 7F40              MOV      R7,#040H
   57: }
002714 22                RET      
----- FUNCTION PKT_MDIOM_Probe (END) -------


----- FUNCTION _DRV_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  527: BOOL DRV_MDIOM_FrameRead
  528: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
002715 8B82              MOV      DPL,R3
002717 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  529:     IN  UINT8               vPortAddr,
  530:     IN  UINT8               vDevAddr,
  531:     OUT UINT16 SEG_XDATA   *pData
  532: )
  533: {
  534:     BOOL    bIntState;
  535: 
  536:     /* create MDIO frame: Read */
  537:     drv_mdiom_CreateReadFrame(vPortAddr, vDevAddr);
002719 F19F              ACALL    _drv_mdiom_CreateReadFrame
  538: 
  539:     /* lock globally interrupt */
  540:     bIntState = DRV_INT_LockGlobalInterrupt();
00271B 30AF05            JNB      EA,?C2483?DRV_MDIOM
00271E C2AF              CLR      EA
002720 D3                SETB     C
002721 8001              SJMP     ?C2484?DRV_MDIOM
002723         ?C2483?DRV_MDIOM:
002723 C3                CLR      C
002724         ?C2484?DRV_MDIOM:
002724 123445            LCALL    ?L?COM002D
  541: 
  542:     /* transmit frame: Read */
  543:     drv_mdiom_RxDataFrame();
  544: 
  545:     /* unlock globally interrupt */
  546:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  547: 
  548:     /* check read status */
  549:     *pData = vMdioData;
  550:     return drv_mdiom_IsReadSuccess();
002727 A200              MOV      C,bMdioTurnAround0
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 65


002729 4003              JC       ?C2488?DRV_MDIOM
00272B D3                SETB     C
00272C 8001              SJMP     ?C2489?DRV_MDIOM
00272E         ?C2488?DRV_MDIOM:
00272E C3                CLR      C
00272F         ?C2489?DRV_MDIOM:
  551: }
00272F 22                RET      
----- FUNCTION _DRV_MDIOM_FrameRead (END) -------


----- FUNCTION drv_mdiom_RxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  343: static void drv_mdiom_RxDataFrame(void)
  344: {
  345:     drv_mdiom_StartFrame();
  346:     drv_mdiom_TxPreamble();
002730 12309F            LCALL    ?L?COM0001
002733 1230ED            LCALL    ?L?COM0002
002736 1231EB            LCALL    ?L?COM0003
  347:     drv_mdiom_TxStartFrame();
  348:     drv_mdiom_TxOperationCode();
  349:     drv_mdiom_TxPortAddress();
  350:     drv_mdiom_TxDeviceAddress();
  351:     drv_mdiom_RxTurnAround();
002739 00                NOP      
00273A 00                NOP      
00273B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00273D D294              SETB     IO_DUT_MDIOM_SDA_OUT
00273F C296              CLR      IO_DUT_MDIOM_SCL_OUT
002741 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
002743 D296              SETB     IO_DUT_MDIOM_SCL_OUT
002745 00                NOP      
002746 00                NOP      
002747 12331E            LCALL    ?L?COM0011
00274A 9200              MOV      bMdioTurnAround0,C
  352:     drv_mdiom_RxData();
00274C 12331E            LCALL    ?L?COM0011
00274F 9227              MOV      bMdioData15,C
002751 12331E            LCALL    ?L?COM0011
002754 9226              MOV      bMdioData14,C
002756 12331E            LCALL    ?L?COM0011
002759 9225              MOV      bMdioData13,C
00275B 12331E            LCALL    ?L?COM0011
00275E 9224              MOV      bMdioData12,C
002760 12331E            LCALL    ?L?COM0011
002763 9223              MOV      bMdioData11,C
002765 12331E            LCALL    ?L?COM0011
002768 9222              MOV      bMdioData10,C
00276A 12331E            LCALL    ?L?COM0011
00276D 9221              MOV      bMdioData9,C
00276F 12331E            LCALL    ?L?COM0011
002772 9220              MOV      bMdioData8,C
002774 12331E            LCALL    ?L?COM0011
002777 922F              MOV      bMdioData7,C
002779 12331E            LCALL    ?L?COM0011
00277C 922E              MOV      bMdioData6,C
00277E 12331E            LCALL    ?L?COM0011
002781 922D              MOV      bMdioData5,C
002783 12331E            LCALL    ?L?COM0011
002786 922C              MOV      bMdioData4,C
002788 12331E            LCALL    ?L?COM0011
00278B 922B              MOV      bMdioData3,C
00278D 12331E            LCALL    ?L?COM0011
002790 922A              MOV      bMdioData2,C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 66


002792 12331E            LCALL    ?L?COM0011
002795 9229              MOV      bMdioData1,C
002797 12331E            LCALL    ?L?COM0011
00279A 9228              MOV      bMdioData0,C
  353:     drv_mdiom_StopFrame();
00279C 02346E            LJMP     ?L?COM0033
  354: }
----- FUNCTION drv_mdiom_RxDataFrame (END) -------


----- FUNCTION _drv_mdiom_CreateReadFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  389: static void drv_mdiom_CreateReadFrame
  390: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  391:     IN UINT8    vPortAddr,
  392:     IN UINT8    vDevAddr
  393: )
  394: {
  395:     drv_mdiom_SetStartFrame(0, 0);
00279F C20F              CLR      bMdioStartFrame1
0027A1 C20E              CLR      bMdioStartFrame0
  396:     drv_mdiom_SetOperationCode(1, 1);
0027A3 D20D              SETB     bMdioOperationCode1
0027A5 D20C              SETB     bMdioOperationCode0
  397:     drv_mdiom_SetPortAddress(vPortAddr);
0027A7 123264            LCALL    ?L?COM0006
0027AA 023559            LJMP     ?L?COM004E
  398:     drv_mdiom_SetDeviceAddress(vDevAddr);
  399:     drv_mdiom_SetTurnAround(1, 1);
  400:     drv_mdiom_SetData(0xFFFF);
----- FUNCTION _drv_mdiom_CreateReadFrame (END) -------


----- FUNCTION _DRV_MDIOM_FramePRIA (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  571: BOOL DRV_MDIOM_FramePRIA
  572: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'pData' assigned to Register 'DPTR' ----
0027AD 8B82              MOV      DPL,R3
0027AF 8A83              MOV      DPH,R2
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  573:     IN  UINT8               vPortAddr,
  574:     IN  UINT8               vDevAddr,
  575:     OUT UINT16 SEG_XDATA   *pData
  576: )
  577: {
  578:     BOOL    bIntState;
  579: 
  580:     /* create MDIO frame: Post-Read-Inc-Address */
  581:     drv_mdiom_CreatePRIAFrame(vPortAddr, vDevAddr);
0027B1 F1C8              ACALL    _drv_mdiom_CreatePRIAFrame
  582: 
  583:     /* lock globally interrupt */
  584:     bIntState = DRV_INT_LockGlobalInterrupt();
0027B3 30AF05            JNB      EA,?C2491?DRV_MDIOM
0027B6 C2AF              CLR      EA
0027B8 D3                SETB     C
0027B9 8001              SJMP     ?C2492?DRV_MDIOM
0027BB         ?C2491?DRV_MDIOM:
0027BB C3                CLR      C
0027BC         ?C2492?DRV_MDIOM:
0027BC 123445            LCALL    ?L?COM002D
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 67


  585: 
  586:     /* transmit frame: Read */
  587:     drv_mdiom_RxDataFrame();
  588: 
  589:     /* unlock globally interrupt */
  590:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  591: 
  592:     /* check read status */
  593:     *pData = vMdioData;
  594:     return drv_mdiom_IsReadSuccess();
0027BF A200              MOV      C,bMdioTurnAround0
0027C1 4003              JC       ?C2496?DRV_MDIOM
0027C3 D3                SETB     C
0027C4 8001              SJMP     ?C2497?DRV_MDIOM
0027C6         ?C2496?DRV_MDIOM:
0027C6 C3                CLR      C
0027C7         ?C2497?DRV_MDIOM:
  595: }
0027C7 22                RET      
----- FUNCTION _DRV_MDIOM_FramePRIA (END) -------


----- FUNCTION _drv_mdiom_CreatePRIAFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  404: static void drv_mdiom_CreatePRIAFrame
  405: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
  406:     IN UINT8    vPortAddr,
  407:     IN UINT8    vDevAddr
  408: )
  409: {
  410:     drv_mdiom_SetStartFrame(0, 0);
0027C8 C20F              CLR      bMdioStartFrame1
0027CA C20E              CLR      bMdioStartFrame0
  411:     drv_mdiom_SetOperationCode(1, 0);
0027CC D20D              SETB     bMdioOperationCode1
0027CE 123262            LCALL    ?L?COM0005
0027D1 023559            LJMP     ?L?COM004E
  412:     drv_mdiom_SetPortAddress(vPortAddr);
  413:     drv_mdiom_SetDeviceAddress(vDevAddr);
  414:     drv_mdiom_SetTurnAround(1, 1);
  415:     drv_mdiom_SetData(0xFFFF);
----- FUNCTION _drv_mdiom_CreatePRIAFrame (END) -------


----- FUNCTION _CFG_RAM_GET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   87: 
   88:     return MEMPAGE_PID_INVALID;
;---- Variable 'vAddr' assigned to Register 'R6/R7' ----
0027D4 A807              MOV      R0,AR7
0027D6 E2                MOVX     A,@R0
0027D7 FC                MOV      R4,A
0027D8 08                INC      R0
0027D9 E2                MOVX     A,@R0
0027DA FD                MOV      R5,A
0027DB 08                INC      R0
0027DC E2                MOVX     A,@R0
0027DD FE                MOV      R6,A
0027DE 08                INC      R0
0027DF E2                MOVX     A,@R0
0027E0 FF                MOV      R7,A
0027E1 22                RET      
----- FUNCTION _CFG_RAM_GET32 (END) -------
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 68




----- FUNCTION _CFG_RAM_SET32 (BEGIN) -----
 FILE: '..\cfg\cfg_db.c'
   89: }
   90: 
;---- Variable 'vAddr' assigned to Register 'R2/R3' ----
0027E2 AB07              MOV      R3,AR7
0027E4 AF31              MOV      R7,vData+03H
0027E6 AE30              MOV      R6,vData+02H
0027E8 AD2F              MOV      R5,vData+01H
0027EA AC2E              MOV      R4,vData
0027EC A803              MOV      R0,AR3
0027EE 020691            LJMP     ?C?LSTPDATA
----- FUNCTION _CFG_RAM_SET32 (END) -------


----- FUNCTION PKT_MDIOM_Read (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   59: UINT16 PKT_MDIOM_Read(void)
   60: {
   61:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   62: 
0027F1 1232E2            LCALL    ?L?COM0010
0027F4 122945            LCALL    _DRV_MDIOM_Read
0027F7 7E01              MOV      R6,#01H
0027F9 4002              JC       ?C0007?PKT_MDIOM
   63:     if (!DRV_MDIOM_Read(pPayload->vPortAddr,
   64:                         pPayload->vDevAddr,
   65:                         pPayload->vOffset,
   66:                         pPayload->vDataCount,
   67:                         pPayload->aData))
   68:     {
   69:         return PKT_REPLY_Fail_MdioNoAck;
0027FB 7E03              MOV      R6,#03H
   70:     }
0027FD         ?C0007?PKT_MDIOM:
   71: 
   72:     return PKT_REPLY_Done_ExecNoError;
0027FD 7F40              MOV      R7,#040H
   73: }
0027FF 22                RET      
----- FUNCTION PKT_MDIOM_Read (END) -------


----- FUNCTION PKT_MDIOM_Write (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   75: UINT16 PKT_MDIOM_Write(void)
   76: {
   77:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   78: 
002800 1232E2            LCALL    ?L?COM0010
002803 110E              ACALL    _DRV_MDIOM_Write
002805 7E01              MOV      R6,#01H
002807 4002              JC       ?C0009?PKT_MDIOM
   79:     if (!DRV_MDIOM_Write(pPayload->vPortAddr,
   80:                          pPayload->vDevAddr,
   81:                          pPayload->vOffset,
   82:                          pPayload->vDataCount,
   83:                          pPayload->aData))
   84:     {
   85:         return PKT_REPLY_Fail_MdioNoAck;
002809 7E03              MOV      R6,#03H
   86:     }
00280B         ?C0009?PKT_MDIOM:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 69


   87: 
   88:     return PKT_REPLY_Done_ExecNoError;
00280B 7F40              MOV      R7,#040H
   89: }
00280D 22                RET      
----- FUNCTION PKT_MDIOM_Write (END) -------


----- FUNCTION _DRV_MDIOM_Write (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  686: BOOL DRV_MDIOM_Write
  687: (
00280E 8A37              MOV      vRegAddr,R2
002810 8B38              MOV      vRegAddr+01H,R3
;---- Variable 'vDevAddr' assigned to Register 'R6' ----
002812 AE05              MOV      R6,AR5
;---- Variable 'vPortAddr' assigned to Register 'R4' ----
002814 AC07              MOV      R4,AR7
  688:     IN       UINT8              vPortAddr,
  689:     IN       UINT8              vDevAddr,
  690:     IN       UINT16             vRegAddr,
  691:     IN       UINT16             vDataLen,
  692:     IN const UINT16 SEG_XDATA  *pDataBuf
  693: )
  694: {
  695:     BOOL    bIntState;
  696: 
  697:     for (; vDataLen-- != 0; vRegAddr++, pDataBuf++)
002816         ?C2513?DRV_MDIOM:
002816 E53A              MOV      A,vDataLen+01H
002818 153A              DEC      vDataLen+01H
00281A AA39              MOV      R2,vDataLen
00281C 7002              JNZ      ?C2545?DRV_MDIOM
00281E 1539              DEC      vDataLen
002820         ?C2545?DRV_MDIOM:
002820 4A                ORL      A,R2
002821 6040              JZ       ?C2514?DRV_MDIOM
  698:     {
  699:         /* prepare MDIO data */
  700:         drv_mdiom_SetData(*pDataBuf);
002823 853C82            MOV      DPL,pDataBuf+01H
002826 853B83            MOV      DPH,pDataBuf
002829 E0                MOVX     A,@DPTR
00282A F524              MOV      vMdioData,A
00282C A3                INC      DPTR
00282D E0                MOVX     A,@DPTR
00282E F525              MOV      vMdioData+01H,A
  701: 
  702:         /* create MDIO frame: Address */
  703:         drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002830 AF04              MOV      R7,AR4
002832 AD06              MOV      R5,AR6
002834 AB38              MOV      R3,vRegAddr+01H
002836 AA37              MOV      R2,vRegAddr
002838 3135              ACALL    _drv_mdiom_CreateAddrFrame
  704: 
  705:         /* lock globally interrupt */
  706:         bIntState = DRV_INT_LockGlobalInterrupt();
00283A 30AF05            JNB      EA,?C2519?DRV_MDIOM
00283D C2AF              CLR      EA
00283F D3                SETB     C
002840 8001              SJMP     ?C2520?DRV_MDIOM
002842         ?C2519?DRV_MDIOM:
002842 C3                CLR      C
002843         ?C2520?DRV_MDIOM:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 70


002843 9238              MOV      bIntState,C
  707: 
  708:         /* transmit frame: Address */
  709:         drv_mdiom_TxAddrFrame();
002845 1165              ACALL    drv_mdiom_TxAddrFrame
  710: 
  711:         /* create MDIO frame: Write */
  712:         drv_mdiom_SetOperationCode(0, 1);
002847 C20D              CLR      bMdioOperationCode1
002849 D20C              SETB     bMdioOperationCode0
  713: 
  714:         /* transmit frame: Write */
  715:         drv_mdiom_TxDataFrame();
00284B 12358E            LCALL    ?L?COM005F
  716: 
  717:         /* unlock globally interrupt */
  718:         DRV_INT_UnlockGlobalInterrupt(bIntState);
  719:     }
00284E 0538              INC      vRegAddr+01H
002850 E538              MOV      A,vRegAddr+01H
002852 7002              JNZ      ?C2546?DRV_MDIOM
002854 0537              INC      vRegAddr
002856         ?C2546?DRV_MDIOM:
002856 7402              MOV      A,#02H
002858 253C              ADD      A,pDataBuf+01H
00285A F53C              MOV      pDataBuf+01H,A
00285C E4                CLR      A
00285D 353B              ADDC     A,pDataBuf
00285F F53B              MOV      pDataBuf,A
002861 80B3              SJMP     ?C2513?DRV_MDIOM
002863         ?C2514?DRV_MDIOM:
  720: 
  721:     return TRUE;
002863 D3                SETB     C
  722: }
002864 22                RET      
----- FUNCTION _DRV_MDIOM_Write (END) -------


----- FUNCTION drv_mdiom_TxAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  317: static void drv_mdiom_TxAddrFrame(void)
  318: {
  319:     drv_mdiom_StartFrame();
  320:     drv_mdiom_TxPreamble();
002865 12309F            LCALL    ?L?COM0001
002868 1230ED            LCALL    ?L?COM0002
00286B 1231EB            LCALL    ?L?COM0003
  321:     drv_mdiom_TxStartFrame();
  322:     drv_mdiom_TxOperationCode();
  323:     drv_mdiom_TxPortAddress();
  324:     drv_mdiom_TxDeviceAddress();
  325:     drv_mdiom_TxTurnAround();
00286E A201              MOV      C,bMdioTurnAround1
002870 12325B            LCALL    ?L?COM0004
002873 A200              MOV      C,bMdioTurnAround0
002875 12325B            LCALL    ?L?COM0004
  326:     drv_mdiom_TxAddr();
002878 A217              MOV      C,bMdioAddr15
00287A 12325B            LCALL    ?L?COM0004
00287D A216              MOV      C,bMdioAddr14
00287F 12325B            LCALL    ?L?COM0004
002882 A215              MOV      C,bMdioAddr13
002884 12325B            LCALL    ?L?COM0004
002887 A214              MOV      C,bMdioAddr12
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 71


002889 12325B            LCALL    ?L?COM0004
00288C A213              MOV      C,bMdioAddr11
00288E 12325B            LCALL    ?L?COM0004
002891 A212              MOV      C,bMdioAddr10
002893 12325B            LCALL    ?L?COM0004
002896 A211              MOV      C,bMdioAddr9
002898 12325B            LCALL    ?L?COM0004
00289B A210              MOV      C,bMdioAddr8
00289D 12325B            LCALL    ?L?COM0004
0028A0 A21F              MOV      C,bMdioAddr7
0028A2 12325B            LCALL    ?L?COM0004
0028A5 A21E              MOV      C,bMdioAddr6
0028A7 12325B            LCALL    ?L?COM0004
0028AA A21D              MOV      C,bMdioAddr5
0028AC 12325B            LCALL    ?L?COM0004
0028AF A21C              MOV      C,bMdioAddr4
0028B1 12325B            LCALL    ?L?COM0004
0028B4 A21B              MOV      C,bMdioAddr3
0028B6 12325B            LCALL    ?L?COM0004
0028B9 A21A              MOV      C,bMdioAddr2
0028BB 12325B            LCALL    ?L?COM0004
0028BE A219              MOV      C,bMdioAddr1
0028C0 12325B            LCALL    ?L?COM0004
0028C3 A218              MOV      C,bMdioAddr0
0028C5 12325B            LCALL    ?L?COM0004
0028C8 00                NOP      
0028C9 00                NOP      
  327:     drv_mdiom_StopFrame();
0028CA 02346E            LJMP     ?L?COM0033
  328: }
----- FUNCTION drv_mdiom_TxAddrFrame (END) -------


----- FUNCTION drv_mdiom_TxDataFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  330: static void drv_mdiom_TxDataFrame(void)
  331: {
  332:     drv_mdiom_StartFrame();
  333:     drv_mdiom_TxPreamble();
0028CD 12309F            LCALL    ?L?COM0001
0028D0 1230ED            LCALL    ?L?COM0002
0028D3 1231EB            LCALL    ?L?COM0003
  334:     drv_mdiom_TxStartFrame();
  335:     drv_mdiom_TxOperationCode();
  336:     drv_mdiom_TxPortAddress();
  337:     drv_mdiom_TxDeviceAddress();
  338:     drv_mdiom_TxTurnAround();
0028D6 A201              MOV      C,bMdioTurnAround1
0028D8 12325B            LCALL    ?L?COM0004
0028DB A200              MOV      C,bMdioTurnAround0
0028DD 12325B            LCALL    ?L?COM0004
  339:     drv_mdiom_TxData();
0028E0 A227              MOV      C,bMdioData15
0028E2 12325B            LCALL    ?L?COM0004
0028E5 A226              MOV      C,bMdioData14
0028E7 12325B            LCALL    ?L?COM0004
0028EA A225              MOV      C,bMdioData13
0028EC 12325B            LCALL    ?L?COM0004
0028EF A224              MOV      C,bMdioData12
0028F1 12325B            LCALL    ?L?COM0004
0028F4 A223              MOV      C,bMdioData11
0028F6 12325B            LCALL    ?L?COM0004
0028F9 A222              MOV      C,bMdioData10
0028FB 12325B            LCALL    ?L?COM0004
0028FE A221              MOV      C,bMdioData9
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 72


002900 12325B            LCALL    ?L?COM0004
002903 A220              MOV      C,bMdioData8
002905 12325B            LCALL    ?L?COM0004
002908 A22F              MOV      C,bMdioData7
00290A 12325B            LCALL    ?L?COM0004
00290D A22E              MOV      C,bMdioData6
00290F 12325B            LCALL    ?L?COM0004
002912 A22D              MOV      C,bMdioData5
002914 12325B            LCALL    ?L?COM0004
002917 A22C              MOV      C,bMdioData4
002919 12325B            LCALL    ?L?COM0004
00291C A22B              MOV      C,bMdioData3
00291E 12325B            LCALL    ?L?COM0004
002921 A22A              MOV      C,bMdioData2
002923 12325B            LCALL    ?L?COM0004
002926 A229              MOV      C,bMdioData1
002928 12325B            LCALL    ?L?COM0004
00292B A228              MOV      C,bMdioData0
00292D 12325B            LCALL    ?L?COM0004
002930 00                NOP      
002931 00                NOP      
  340:     drv_mdiom_StopFrame();
002932 02346E            LJMP     ?L?COM0033
  341: }
----- FUNCTION drv_mdiom_TxDataFrame (END) -------


----- FUNCTION _drv_mdiom_CreateAddrFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  357: static void drv_mdiom_CreateAddrFrame
  358: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
  359:     IN UINT8    vPortAddr,
  360:     IN UINT8    vDevAddr,
  361:     IN UINT16   vRegAddr
  362: )
  363: {
  364:     drv_mdiom_SetStartFrame(0, 0);
002935 C20F              CLR      bMdioStartFrame1
002937 C20E              CLR      bMdioStartFrame0
  365:     drv_mdiom_SetOperationCode(0, 0);
002939 C20D              CLR      bMdioOperationCode1
00293B 123262            LCALL    ?L?COM0005
00293E C200              CLR      bMdioTurnAround0
  366:     drv_mdiom_SetPortAddress(vPortAddr);
  367:     drv_mdiom_SetDeviceAddress(vDevAddr);
  368:     drv_mdiom_SetTurnAround(1, 0);
  369:     drv_mdiom_SetAddr(vRegAddr);
002940 8A22              MOV      vMdioAddr,R2
002942 8B23              MOV      vMdioAddr+01H,R3
  370: }
002944 22                RET      
----- FUNCTION _drv_mdiom_CreateAddrFrame (END) -------


----- FUNCTION _DRV_MDIOM_Read (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  622: BOOL DRV_MDIOM_Read
  623: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  624:     IN  UINT8               vPortAddr,
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 73


  625:     IN  UINT8               vDevAddr,
  626:     IN  UINT16              vRegAddr,
  627:     IN  UINT16              vDataLen,
  628:     OUT UINT16 SEG_XDATA   *pDataBuf
  629: )
  630: {
  631:     BOOL    bResult = TRUE;
002945 D238              SETB     bResult
  632:     BOOL    bIntState;
  633: 
  634:     /* create MDIO frame: Address */
  635:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
002947 3135              ACALL    _drv_mdiom_CreateAddrFrame
  636: 
  637:     /* lock globally interrupt */
  638:     bIntState = DRV_INT_LockGlobalInterrupt();
002949 30AF05            JNB      EA,?C2499?DRV_MDIOM
00294C C2AF              CLR      EA
00294E D3                SETB     C
00294F 8001              SJMP     ?C2500?DRV_MDIOM
002951         ?C2499?DRV_MDIOM:
002951 C3                CLR      C
002952         ?C2500?DRV_MDIOM:
002952 9239              MOV      bIntState,C
  639: 
  640:     /* transmit frame: Address */
  641:     drv_mdiom_TxAddrFrame();
002954 1165              ACALL    drv_mdiom_TxAddrFrame
  642: 
  643:     /* create MDIO frame: Post-Read-Increment-Address */
  644:     drv_mdiom_SetOperationCode(1, 0);
002956 D20D              SETB     bMdioOperationCode1
002958 C20C              CLR      bMdioOperationCode0
00295A         ?C2504?DRV_MDIOM:
  645: 
  646:     /* transmit frame: Post-Read-Increment-Address */
  647:     while (vDataLen-- != 0)
00295A E53A              MOV      A,vDataLen+01H
00295C 153A              DEC      vDataLen+01H
00295E AE39              MOV      R6,vDataLen
002960 7002              JNZ      ?C2544?DRV_MDIOM
002962 1539              DEC      vDataLen
002964         ?C2544?DRV_MDIOM:
002964 4E                ORL      A,R6
002965 6024              JZ       ?C2511?DRV_MDIOM
  648:     {
  649:         drv_mdiom_RxDataFrame();
002967 122730            LCALL    drv_mdiom_RxDataFrame
  650: 
  651:         /* check read status */
  652:         *pDataBuf++ = vMdioData;
00296A E53C              MOV      A,pDataBuf+01H
00296C FF                MOV      R7,A
00296D 2402              ADD      A,#02H
00296F F53C              MOV      pDataBuf+01H,A
002971 E53B              MOV      A,pDataBuf
002973 FE                MOV      R6,A
002974 3400              ADDC     A,#00H
002976 F53B              MOV      pDataBuf,A
002978 8F82              MOV      DPL,R7
00297A 8E83              MOV      DPH,R6
00297C 12344E            LCALL    ?L?COM002E
  653:         if (!drv_mdiom_IsReadSuccess())
00297F A200              MOV      C,bMdioTurnAround0
002981 4003              JC       ?C2507?DRV_MDIOM
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 74


002983 D3                SETB     C
002984 8001              SJMP     ?C2508?DRV_MDIOM
002986         ?C2507?DRV_MDIOM:
002986 C3                CLR      C
002987         ?C2508?DRV_MDIOM:
002987 40D1              JC       ?C2504?DRV_MDIOM
  654:         {
  655:             bResult = FALSE;
002989 C238              CLR      bResult
  656:             break;
  657:         }
  658:     }
00298B         ?C2511?DRV_MDIOM:
  659: 
  660:     /* unlock globally interrupt */
  661:     DRV_INT_UnlockGlobalInterrupt(bIntState);
00298B A239              MOV      C,bIntState
00298D 92AF              MOV      EA,C
  662: 
  663:     return bResult;
00298F A238              MOV      C,bResult
  664: }
002991 22                RET      
----- FUNCTION _DRV_MDIOM_Read (END) -------


----- FUNCTION _DRV_MDIOM_FrameWrite (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  484: BOOL DRV_MDIOM_FrameWrite
  485: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vData' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  486:     IN  UINT8           vPortAddr,
  487:     IN  UINT8           vDevAddr,
  488:     IN  UINT16          vData
  489: )
  490: {
  491:     BOOL    bIntState;
  492: 
  493:     /* create MDIO frame: Write */
  494:     drv_mdiom_CreateWriteFrame(vPortAddr, vDevAddr, vData);
002992 31A4              ACALL    _drv_mdiom_CreateWriteFrame
  495: 
  496:     /* lock globally interrupt */
  497:     bIntState = DRV_INT_LockGlobalInterrupt();
002994 30AF05            JNB      EA,?C2477?DRV_MDIOM
002997 C2AF              CLR      EA
002999 D3                SETB     C
00299A 8001              SJMP     ?C2478?DRV_MDIOM
00299C         ?C2477?DRV_MDIOM:
00299C C3                CLR      C
00299D         ?C2478?DRV_MDIOM:
00299D 9238              MOV      bIntState,C
  498: 
  499:     /* transmit frame: Write */
  500:     drv_mdiom_TxDataFrame();
00299F 12358E            LCALL    ?L?COM005F
  501: 
  502:     /* unlock globally interrupt */
  503:     DRV_INT_UnlockGlobalInterrupt(bIntState);
  504: 
  505:     /* check frame result */
  506:     return TRUE;
0029A2 D3                SETB     C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 75


  507: }
0029A3 22                RET      
----- FUNCTION _DRV_MDIOM_FrameWrite (END) -------


----- FUNCTION _drv_mdiom_CreateWriteFrame (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  373: static void drv_mdiom_CreateWriteFrame
  374: (
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegData' assigned to Register 'R2/R3' ----
  375:     IN UINT8    vPortAddr,
  376:     IN UINT8    vDevAddr,
  377:     IN UINT16   vRegData
  378: )
  379: {
  380:     drv_mdiom_SetStartFrame(0, 0);
0029A4 C20F              CLR      bMdioStartFrame1
0029A6 C20E              CLR      bMdioStartFrame0
  381:     drv_mdiom_SetOperationCode(0, 1);
0029A8 C20D              CLR      bMdioOperationCode1
0029AA D20C              SETB     bMdioOperationCode0
  382:     drv_mdiom_SetPortAddress(vPortAddr);
0029AC 123264            LCALL    ?L?COM0006
0029AF C200              CLR      bMdioTurnAround0
  383:     drv_mdiom_SetDeviceAddress(vDevAddr);
  384:     drv_mdiom_SetTurnAround(1, 0);
  385:     drv_mdiom_SetData(vRegData);
0029B1 8A24              MOV      vMdioData,R2
0029B3 8B25              MOV      vMdioData+01H,R3
  386: }
0029B5 22                RET      
----- FUNCTION _drv_mdiom_CreateWriteFrame (END) -------


----- FUNCTION _DRV_MDIOM_FrameAddr (BEGIN) -----
 FILE: '..\drv\drv_mdiom.c'
  441: BOOL DRV_MDIOM_FrameAddr
  442: (
;---- Variable 'vPortAddr' assigned to Register 'R7' ----
;---- Variable 'vRegAddr' assigned to Register 'R2/R3' ----
;---- Variable 'vDevAddr' assigned to Register 'R5' ----
  443:     IN  UINT8           vPortAddr,
  444:     IN  UINT8           vDevAddr,
  445:     IN  UINT16          vRegAddr
  446: )
  447: {
  448:     BOOL    bIntState;
  449: 
  450:     /* create MDIO frame: Address */
  451:     drv_mdiom_CreateAddrFrame(vPortAddr, vDevAddr, vRegAddr);
0029B6 3135              ACALL    _drv_mdiom_CreateAddrFrame
  452: 
  453:     /* lock globally interrupt */
  454:     bIntState = DRV_INT_LockGlobalInterrupt();
0029B8 30AF05            JNB      EA,?C2471?DRV_MDIOM
0029BB C2AF              CLR      EA
0029BD D3                SETB     C
0029BE 8001              SJMP     ?C2472?DRV_MDIOM
0029C0         ?C2471?DRV_MDIOM:
0029C0 C3                CLR      C
0029C1         ?C2472?DRV_MDIOM:
0029C1 9238              MOV      bIntState,C
  455: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 76


  456:     /* transmit frame: Address */
  457:     drv_mdiom_TxAddrFrame();
0029C3 1165              ACALL    drv_mdiom_TxAddrFrame
  458: 
  459:     /* unlock globally interrupt */
  460:     DRV_INT_UnlockGlobalInterrupt(bIntState);
0029C5 A238              MOV      C,bIntState
0029C7 92AF              MOV      EA,C
  461: 
  462:     /* check frame result */
  463:     return TRUE;
0029C9 D3                SETB     C
  464: }
0029CA 22                RET      
----- FUNCTION _DRV_MDIOM_FrameAddr (END) -------


----- FUNCTION PKT_MDIOM_FrameAddr (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
   91: UINT16 PKT_MDIOM_FrameAddr(void)
   92: {
   93:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
   94: 
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
0029CB 1233B1            LCALL    ?L?COM001B
0029CE 1582              DEC      DPL
0029D0 8A83              MOV      DPH,R2
0029D2 A3                INC      DPTR
0029D3 A3                INC      DPTR
0029D4 E0                MOVX     A,@DPTR
0029D5 FA                MOV      R2,A
0029D6 A3                INC      DPTR
0029D7 E0                MOVX     A,@DPTR
0029D8 FB                MOV      R3,A
0029D9 31B6              ACALL    _DRV_MDIOM_FrameAddr
0029DB 7E01              MOV      R6,#01H
0029DD 4002              JC       ?C0011?PKT_MDIOM
   95:     if (!DRV_MDIOM_FrameAddr(pPayload->vPortAddr,
   96:                              pPayload->vDevAddr,
   97:                              pPayload->vOffset))
   98:     {
   99:         return PKT_REPLY_Fail_MdioNoAck;
0029DF 7E03              MOV      R6,#03H
  100:     }
0029E1         ?C0011?PKT_MDIOM:
  101: 
  102:     return PKT_REPLY_Done_ExecNoError;
0029E1 7F40              MOV      R7,#040H
  103: }
0029E3 22                RET      
----- FUNCTION PKT_MDIOM_FrameAddr (END) -------


----- FUNCTION PKT_MDIOM_FrameWrite (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
  105: UINT16 PKT_MDIOM_FrameWrite(void)
  106: {
  107:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
  108: 
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
0029E4 1233B1            LCALL    ?L?COM001B
0029E7 1582              DEC      DPL
0029E9 E582              MOV      A,DPL
0029EB 2406              ADD      A,#06H
0029ED F582              MOV      DPL,A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 77


0029EF E4                CLR      A
0029F0 3A                ADDC     A,R2
0029F1 F583              MOV      DPH,A
0029F3 E0                MOVX     A,@DPTR
0029F4 FA                MOV      R2,A
0029F5 A3                INC      DPTR
0029F6 E0                MOVX     A,@DPTR
0029F7 FB                MOV      R3,A
0029F8 3192              ACALL    _DRV_MDIOM_FrameWrite
0029FA 7E01              MOV      R6,#01H
0029FC 4002              JC       ?C0013?PKT_MDIOM
  109:     if (!DRV_MDIOM_FrameWrite(pPayload->vPortAddr,
  110:                               pPayload->vDevAddr,
  111:                               pPayload->aData[0]))
  112:     {
  113:         return PKT_REPLY_Fail_MdioNoAck;
0029FE 7E03              MOV      R6,#03H
  114:     }
002A00         ?C0013?PKT_MDIOM:
  115: 
  116:     return PKT_REPLY_Done_ExecNoError;
002A00 7F40              MOV      R7,#040H
  117: }
002A02 22                RET      
----- FUNCTION PKT_MDIOM_FrameWrite (END) -------


----- FUNCTION PKT_MDIOM_FrameRead (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
  119: UINT16 PKT_MDIOM_FrameRead(void)
  120: {
  121:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
  122: 
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002A03 1233B1            LCALL    ?L?COM001B
002A06 123586            LCALL    ?L?COM005E
002A09 122715            LCALL    _DRV_MDIOM_FrameRead
002A0C 7E01              MOV      R6,#01H
002A0E 4002              JC       ?C0015?PKT_MDIOM
  123:     if (!DRV_MDIOM_FrameRead(pPayload->vPortAddr,
  124:                              pPayload->vDevAddr,
  125:                              pPayload->aData))
  126:     {
  127:         return PKT_REPLY_Fail_MdioNoAck;
002A10 7E03              MOV      R6,#03H
  128:     }
002A12         ?C0015?PKT_MDIOM:
  129: 
  130:     return PKT_REPLY_Done_ExecNoError;
002A12 7F40              MOV      R7,#040H
  131: }
002A14 22                RET      
----- FUNCTION PKT_MDIOM_FrameRead (END) -------


----- FUNCTION PKT_MDIOM_FramePRIA (BEGIN) -----
 FILE: '..\pkt\pkt_mdiom.c'
  133: UINT16 PKT_MDIOM_FramePRIA(void)
  134: {
  135:     PKT_MDIOM_T SEG_XDATA *pPayload = (PKT_MDIOM_T SEG_XDATA *)PKT_GetPayload();
  136: 
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002A15 1233B1            LCALL    ?L?COM001B
002A18 123586            LCALL    ?L?COM005E
002A1B 1227AD            LCALL    _DRV_MDIOM_FramePRIA
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 78


002A1E 7E01              MOV      R6,#01H
002A20 4002              JC       ?C0017?PKT_MDIOM
  137:     if (!DRV_MDIOM_FramePRIA(pPayload->vPortAddr,
  138:                              pPayload->vDevAddr,
  139:                              pPayload->aData))
  140:     {
  141:         return PKT_REPLY_Fail_MdioNoAck;
002A22 7E03              MOV      R6,#03H
  142:     }
002A24         ?C0017?PKT_MDIOM:
  143: 
  144:     return PKT_REPLY_Done_ExecNoError;
002A24 7F40              MOV      R7,#040H
  145: }
002A26 22                RET      
----- FUNCTION PKT_MDIOM_FramePRIA (END) -------


----- FUNCTION PKT_C2M_Inspect (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   38: UINT16 PKT_C2M_Inspect(void)
   39: {
   40:     PKT_SetPayloadSize(0x00);
   41:     return PKT_REPLY_Done_ExecNoError;
002A27 123456            LCALL    ?L?COM0030
   42: }
002A2A 7E01              MOV      R6,#01H
002A2C 7F40              MOV      R7,#040H
   43: 
002A2E 22                RET      
----- FUNCTION PKT_C2M_Inspect (END) -------


----- FUNCTION PKT_C2M_Reset (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   44: UINT16 PKT_C2M_Reset(void)
   45: {
   46:     PKT_SetPayloadSize(0x00);
   47:     return (DRV_C2M_Reset() ?
002A2F 123456            LCALL    ?L?COM0030
   48:             PKT_REPLY_Done_ExecNoError :
   49:             PKT_REPLY_Fail_ExecErrorCode0);
002A32 513D              ACALL    DRV_C2M_Reset
002A34 7E03              MOV      R6,#03H
002A36 5002              JNC      ?C0008?PKT_C2M
002A38 7E01              MOV      R6,#01H
002A3A         ?C0008?PKT_C2M:
002A3A 7F40              MOV      R7,#040H
   50: }
002A3C 22                RET      
----- FUNCTION PKT_C2M_Reset (END) -------


----- FUNCTION DRV_C2M_Reset (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  427: BOOL DRV_C2M_Reset(void)
  428: {
  429:     if (!drv_c2m_IsReady())
  430:     {
002A3D 309703            JNB      IO_DUT_C2M_SCL,?C0824?DRV_C2M
002A40 20A002            JB       IO_DUT_C2M_SDA,?C0831?DRV_C2M
002A43         ?C0824?DRV_C2M:
  431:         /* C2 bus is not ready */
  432:         return FALSE;
002A43 C3                CLR      C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 79


002A44 22                RET      
  433:     }
  434: 
  435:     c2m_Reset();
002A45         ?C0831?DRV_C2M:
002A45 12341B            LCALL    ?L?COM002B
002A48 53A57F            ANL      P1MDOUT,#07FH
  436:     return TRUE;
002A4B D3                SETB     C
  437: }
002A4C 22                RET      
----- FUNCTION DRV_C2M_Reset (END) -------


----- FUNCTION PKT_C2M_Probe (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   52: UINT16 PKT_C2M_Probe(void)
   53: {
   54:     XDATA_U32(PKT_GetPayload()) = DRV_C2M_Probe();
   55:     PKT_SetPayloadSize(sizeof(UINT32));
002A4D 121E66            LCALL    DRV_C2M_Probe
002A50 90004C            MOV      DPTR,#vFrame+0CH
002A53 120685            LCALL    ?C?LSTXDATA
   56:     return PKT_REPLY_Done_ExecNoError;
002A56 90004A            MOV      DPTR,#vFrame+0AH
002A59 E4                CLR      A
002A5A F0                MOVX     @DPTR,A
002A5B A3                INC      DPTR
002A5C 7404              MOV      A,#04H
002A5E F0                MOVX     @DPTR,A
   57: }
002A5F 7E01              MOV      R6,#01H
002A61 7F40              MOV      R7,#040H
   58: 
002A63 22                RET      
----- FUNCTION PKT_C2M_Probe (END) -------


----- FUNCTION PKT_C2M_FlashChipErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   59: UINT16 PKT_C2M_FlashChipErase(void)
   60: {
   61:     PKT_SetPayloadSize(0x00);
   62:     return (DRV_C2M_ChipErase() ?
002A64 123456            LCALL    ?L?COM0030
   63:             PKT_REPLY_Done_ExecNoError :
   64:             PKT_REPLY_Fail_ExecErrorCode0);
002A67 121F7A            LCALL    DRV_C2M_ChipErase
002A6A 7E03              MOV      R6,#03H
002A6C 5002              JNC      ?C0018?PKT_C2M
002A6E 7E01              MOV      R6,#01H
002A70         ?C0018?PKT_C2M:
002A70 7F40              MOV      R7,#040H
   65: }
002A72 22                RET      
----- FUNCTION PKT_C2M_FlashChipErase (END) -------


----- FUNCTION PKT_C2M_FlashPageErase (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
   67: UINT16 PKT_C2M_FlashPageErase(void)
   68: {
   69:     if (PKT_GetPayloadSize() != 1)
   70:     {
002A73 90004A            MOV      DPTR,#vFrame+0AH
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 80


002A76 E0                MOVX     A,@DPTR
002A77 7004              JNZ      ?C0043?PKT_C2M
002A79 A3                INC      DPTR
002A7A E0                MOVX     A,@DPTR
002A7B 6401              XRL      A,#01H
002A7D         ?C0043?PKT_C2M:
002A7D 6005              JZ       ?C0021?PKT_C2M
   71:         return PKT_REPLY_Fail_InvalidLen;
   72:     }
002A7F 7E03              MOV      R6,#03H
002A81 7F04              MOV      R7,#04H
002A83 22                RET      
   73: 
002A84         ?C0021?PKT_C2M:
   74:     return (DRV_C2M_PageErase(XDATA_U8(PKT_GetPayload())) ?
   75:             PKT_REPLY_Done_ExecNoError :
   76:             PKT_REPLY_Fail_ExecErrorCode0);
002A84 90004C            MOV      DPTR,#vFrame+0CH
002A87 E0                MOVX     A,@DPTR
002A88 FF                MOV      R7,A
002A89 121D6D            LCALL    _DRV_C2M_PageErase
002A8C 7E03              MOV      R6,#03H
002A8E 5002              JNC      ?C0023?PKT_C2M
002A90 7E01              MOV      R6,#01H
002A92         ?C0023?PKT_C2M:
002A92 7F40              MOV      R7,#040H
   77: }
002A94 22                RET      
----- FUNCTION PKT_C2M_FlashPageErase (END) -------


----- FUNCTION PKT_C2M_FlashWrite (BEGIN) -----
 FILE: '..\pkt\pkt_c2m.c'
  115: UINT16 PKT_C2M_FlashWrite(void)
  116: {
  117:     PKT_C2M_RW_T SEG_XDATA *pPayload = (PKT_C2M_RW_T SEG_XDATA *)PKT_GetPayload();
  118:     UINT8 SEG_XDATA *pBuf  = pPayload->aBuf;
;---- Variable 'pPayload' assigned to Register 'R2/R3' ----
002A95 123325            LCALL    ?L?COM0012
  119:     UINT16           vAddr = (UINT16)pPayload->vAddr;
  120:     UINT16           vLen  = pPayload->vDataLen;
  121: 
  122:     if (PKT_GetPayloadSize() != (PKT_C2M_RW_HEADER_LEN+vLen))
002A98 2406              ADD      A,#06H
002A9A FF                MOV      R7,A
002A9B E4                CLR      A
002A9C 3537              ADDC     A,vLen
002A9E FE                MOV      R6,A
002A9F 90004A            MOV      DPTR,#vFrame+0AH
002AA2 E0                MOVX     A,@DPTR
002AA3 6E                XRL      A,R6
002AA4 7003              JNZ      ?C0045?PKT_C2M
002AA6 A3                INC      DPTR
002AA7 E0                MOVX     A,@DPTR
002AA8 6F                XRL      A,R7
002AA9         ?C0045?PKT_C2M:
002AA9 6005              JZ       ?C0038?PKT_C2M
  123:     {
  124:         return PKT_REPLY_Fail_InvalidLen;
002AAB 7E03              MOV      R6,#03H
002AAD 7F04              MOV      R7,#04H
002AAF 22                RET      
  125:     }
002AB0         ?C0038?PKT_C2M:
  126: 
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 81


  127:     /* split too long write data buffer into pieces to write */
  128:     while (vLen != 0)
002AB0 E538              MOV      A,vLen+01H
002AB2 4537              ORL      A,vLen
002AB4 602E              JZ       ?C0039?PKT_C2M
  129:     {
  130:         UINT16 vWriteLen = ((vLen<0x100)?vLen:0x100);
002AB6 C3                CLR      C
002AB7 E537              MOV      A,vLen
002AB9 9401              SUBB     A,#01H
002ABB 5006              JNC      ?C0040?PKT_C2M
002ABD AE37              MOV      R6,vLen
002ABF AF38              MOV      R7,vLen+01H
002AC1 8004              SJMP     ?C0041?PKT_C2M
002AC3         ?C0040?PKT_C2M:
002AC3 7E01              MOV      R6,#01H
002AC5 7F00              MOV      R7,#00H
002AC7         ?C0041?PKT_C2M:
002AC7 8E39              MOV      vWriteLen,R6
002AC9 8F3A              MOV      vWriteLen+01H,R7
  131: 
  132:       #if DRV_WATCHDOG_SUPPORT
  133:         DRV_WATCHDOG_Kick();
  134:       #endif
  135: 
  136:         if (!DRV_C2M_FlashWrite(vAddr, pBuf, (UINT8)vWriteLen))
002ACB AB3A              MOV      R3,vWriteLen+01H
002ACD AD34              MOV      R5,pBuf+01H
002ACF AC33              MOV      R4,pBuf
002AD1 AF36              MOV      R7,vAddr+01H
002AD3 AE35              MOV      R6,vAddr
002AD5 121CBB            LCALL    _DRV_C2M_FlashWrite
002AD8 4005              JC       ?C0042?PKT_C2M
  137:         {
  138:             return PKT_REPLY_Fail_ExecErrorCode0;
002ADA 7E03              MOV      R6,#03H
002ADC 7F40              MOV      R7,#040H
002ADE 22                RET      
  139:         }
002ADF         ?C0042?PKT_C2M:
  140: 
  141:         pBuf  += vWriteLen;
002ADF 123365            LCALL    ?L?COM0019
  142:         vAddr += vWriteLen;
  143:         vLen  -= vWriteLen;
  144:     }
002AE2 80CC              SJMP     ?C0038?PKT_C2M
002AE4         ?C0039?PKT_C2M:
  145: 
  146:     return PKT_REPLY_Done_ExecNoError;
002AE4 7E01              MOV      R6,#01H
002AE6 7F40              MOV      R7,#040H
  147: }
002AE8 22                RET      
----- FUNCTION PKT_C2M_FlashWrite (END) -------


----- FUNCTION thread_IDLE_Entry (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   49: OS_HANDLE thread_IDLE_Entry(void)
   50: {
   51:     PT_BEGIN(&vTCB_Idle);
   52: 
002AE9 752B01            MOV      PT_YIELD_FLAG,#01H
002AEC         ?C0001?THREAD_IDLE:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 82


002AEC E512              MOV      A,vTCB_Idle
002AEE 7038              JNZ      ?C0002?THREAD_IDLE
002AF0 E513              MOV      A,vTCB_Idle+01H
002AF2 24C4              ADD      A,#0C4H
002AF4 601F              JZ       ?C0012?THREAD_IDLE
002AF6 243C              ADD      A,#03CH
002AF8 702E              JNZ      ?C0002?THREAD_IDLE
   53:     for (;;)
002AFA         ?C0004?THREAD_IDLE:
   54:     {
   55:     	/* system entry */
   56:         CFG_Entry();
   57:         DRV_Entry();
   58:         APL_Entry();
002AFA 1218D9            LCALL    APL_Entry
   59: 
   60:         OS_SLEEP_MS(&vTCB_Idle, 50);
002AFD E511              MOV      A,vTickCount+03H
002AFF 2432              ADD      A,#032H
002B01 FF                MOV      R7,A
002B02 E4                CLR      A
002B03 3510              ADDC     A,vTickCount+02H
002B05 123574            LCALL    ?L?COM005C
002B08 FC                MOV      R4,A
002B09 9004FC            MOV      DPTR,#vEndTick
002B0C 120685            LCALL    ?C?LSTXDATA
002B0F 751200            MOV      vTCB_Idle,#00H
002B12 75133C            MOV      vTCB_Idle+01H,#03CH
002B15         ?C0012?THREAD_IDLE:
002B15 00                NOP      
002B16 9004FC            MOV      DPTR,#vEndTick
002B19 1233BF            LCALL    ?L?COM001C
002B1C 7F00              MOV      R7,#00H
002B1E 5002              JNC      ?C0014?THREAD_IDLE
002B20 7F01              MOV      R7,#01H
002B22         ?C0014?THREAD_IDLE:
002B22         ?C0015?THREAD_IDLE:
002B22 EF                MOV      A,R7
002B23 60D5              JZ       ?C0004?THREAD_IDLE
002B25 7F00              MOV      R7,#00H
002B27 22                RET      
   61:     }
   62: 
   63:     PT_END(&vTCB_Idle);
002B28         ?C0002?THREAD_IDLE:
002B28 E4                CLR      A
002B29 F52B              MOV      PT_YIELD_FLAG,A
002B2B F512              MOV      vTCB_Idle,A
002B2D F513              MOV      vTCB_Idle+01H,A
002B2F 7F03              MOV      R7,#03H
   64: }
002B31 22                RET      
----- FUNCTION thread_IDLE_Entry (END) -------


----- FUNCTION thread_IDLE_Init (BEGIN) -----
 FILE: '..\plf\thread_idle.c'
   81: void thread_IDLE_Init(void)
   82: {
   83:     PT_INIT(&vTCB_Idle);
   84: 
002B32 E4                CLR      A
002B33 F512              MOV      vTCB_Idle,A
002B35 F513              MOV      vTCB_Idle+01H,A
   85: 	/* system init */
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 83


   86:     CFG_Init();
002B37 1201DD            LCALL    CFG_Init
   87:     DRV_Init();
002B3A 7156              ACALL    DRV_Init
;----                  JMP      APL_Init
   88:     APL_Init();
----- FUNCTION thread_IDLE_Init (END) -------


----- FUNCTION APL_Init (BEGIN) -----
 FILE: '..\apl\apl.c'
  194: void APL_Init(void)
  195: {
  196:     /* copy initial setting */
  197:     CFG_SET(RT_EVB_CTRL, CFG_GET(INIT_RT_EVB_CTRL));
002B3C         ?C0598?APL:
002B3C 903860            MOV      DPTR,#03860H
002B3F E4                CLR      A
002B40 93                MOVC     A,@A+DPTR
002B41 FF                MOV      R7,A
002B42 7818              MOV      R0,#018H
002B44 EF                MOV      A,R7
002B45 F2                MOVX     @R0,A
002B46         ?C0619?APL:
  198: 
  199:     /* enable PWM_VBUF output */
  200:     DRV_PCA_Write(PCA(PWM_VBUF), CFG_GET(RT_EVB_CTRL_PWM_VBUF));
002B46 7818              MOV      R0,#018H
002B48 E2                MOVX     A,@R0
002B49 FF                MOV      R7,A
002B4A E4                CLR      A
002B4B 8FFC              MOV      PCA0CPH0,R7
002B4D         ?C0618?APL:
  201:     DRV_CPU_DelayMs(10);
002B4D 7F0A              MOV      R7,#0AH
002B4F 7E00              MOV      R6,#00H
002B51 919D              ACALL    _DRV_CPU_DelayMs
  202:     DRV_IO_Write(IO(IO_VBUF_OEn), LOW);
002B53 C291              CLR      IO_VBUF_OEn
  203: }
002B55 22                RET      
----- FUNCTION APL_Init (END) -------


----- FUNCTION DRV_Init (BEGIN) -----
 FILE: '..\drv\drv.c'
   47: void DRV_Init(void)
   48: {
   49: 	DRV_VECTOR_Init();
   50: 
   51:   #if DRV_FLASH_SUPPORT
   52: 	DRV_FLASH_Init();
   53:   #endif
   54: 
   55:   #if DRV_RESET_SUPPORT
   56: 	DRV_RESET_Init();
   57:   #endif
   58: 
   59:   #if DRV_TIMER_SUPPORT
   60: 	DRV_TIMER_Init();
002B56 438E10            ORL      CKCON,#010H
002B59 E4                CLR      A
002B5A F5C8              MOV      TMR2CN,A
002B5C 75CA40            MOV      TMR2RLL,#040H
002B5F 75CC40            MOV      TMR2L,#040H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 84


002B62 75CBA2            MOV      TMR2RLH,#0A2H
002B65 75CDA2            MOV      TMR2H,#0A2H
002B68 C2CF              CLR      TF2H
002B6A D2CA              SETB     TR2
002B6C C2BD              CLR      PT2
002B6E D2AD              SETB     ET2
002B70 F511              MOV      vTickCount+03H,A
002B72 F510              MOV      vTickCount+02H,A
002B74 F50F              MOV      vTickCount+01H,A
002B76 F50E              MOV      vTickCount,A
   61:   #endif
   62: 
   63:   #if DRV_USB_SUPPORT
   64: 	DRV_USB_Init();
002B78 7191              ACALL    DRV_USB_Init
   65:   #endif
   66: 
   67:   #if DRV_VREF_SUPPORT
   68: 	DRV_VREF_Init();
002B7A 75D107            MOV      REF0CN,#07H
002B7D 7FD0              MOV      R7,#0D0H
002B7F 7E07              MOV      R6,#07H
002B81 121C26            LCALL    _DRV_CPU_DelayUs
   69:   #endif
   70: 
   71:   #if DRV_ADC_SUPPORT
   72: 	DRV_ADC_Init();
002B84 91DE              ACALL    DRV_ADC_Init
;----                  JMP      DRV_C2M_Init
   73:   #endif
   74: 
   75:   #if DRV_I2CM_SUPPORT
   76: 	DRV_I2CM_Init();
   77:   #endif
   78: 
   79:   #if DRV_C2M_SUPPORT
----- FUNCTION DRV_Init (END) -------


----- FUNCTION DRV_C2M_Init (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  700: void DRV_C2M_Init(void)
  701: {
  702:     c2m_Init();
  703: }
002B86 53A57F            ANL      P1MDOUT,#07FH
002B89 53A6FE            ANL      P2MDOUT,#0FEH
002B8C D297              SETB     IO_DUT_C2M_SCL
002B8E D2A0              SETB     IO_DUT_C2M_SDA
  704: 
002B90 22                RET      
----- FUNCTION DRV_C2M_Init (END) -------


----- FUNCTION DRV_USB_Init (BEGIN) -----
 FILE: '..\drv\drv_usb.c'
   54: void DRV_USB_Init(void)
   55: {
   56:     UINT8   vData;
   57:     UINT8   vLoop;
   58: 
   59:     /* init USB manufacture string */
   60:     aManufacturerStr[1] = 0x03;
002B91 900485            MOV      DPTR,#aManufacturerStr+01H
002B94 7403              MOV      A,#03H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 85


002B96 F0                MOVX     @DPTR,A
   61:     for (vLoop=2; vLoop<sizeof(aManufacturerStr); vLoop+=2)
;---- Variable 'vLoop' assigned to Register 'R7' ----
002B97 7F02              MOV      R7,#02H
002B99         ?C0001?DRV_USB:
002B99 EF                MOV      A,R7
002B9A C3                CLR      C
002B9B 9422              SUBB     A,#022H
002B9D 5030              JNC      ?C0002?DRV_USB
   62:     {
   63:         vData = CFG_GETO8(EE_Vendor_Name, (vLoop>>1)-1);
002B9F EF                MOV      A,R7
002BA0 C3                CLR      C
002BA1 13                RRC      A
002BA2 C3                CLR      C
002BA3 9401              SUBB     A,#01H
002BA5 2490              ADD      A,#090H
002BA7 1233EB            LCALL    ?L?COM0026
002BAA 4023              JC       ?C0002?DRV_USB
002BAC E52B              MOV      A,vData
002BAE 947F              SUBB     A,#07FH
002BB0 501D              JNC      ?C0002?DRV_USB
   64: 
   65:         if ((vData < 0x20) || (vData >= 0x7F))
   66:         {
   67:             break;
   68:         }
002BB2         ?C0004?DRV_USB:
   69: 
   70:         aManufacturerStr[vLoop+0] = vData;
002BB2 7484              MOV      A,#LOW aManufacturerStr
002BB4 2F                ADD      A,R7
002BB5 F582              MOV      DPL,A
002BB7 E4                CLR      A
002BB8 3404              ADDC     A,#HIGH aManufacturerStr
002BBA F583              MOV      DPH,A
002BBC E52B              MOV      A,vData
002BBE F0                MOVX     @DPTR,A
   71:         aManufacturerStr[vLoop+1] = 0;
002BBF 7485              MOV      A,#LOW aManufacturerStr+01H
002BC1 2F                ADD      A,R7
002BC2 F582              MOV      DPL,A
002BC4 E4                CLR      A
002BC5 3404              ADDC     A,#HIGH aManufacturerStr+01H
002BC7 F583              MOV      DPH,A
002BC9 E4                CLR      A
002BCA F0                MOVX     @DPTR,A
   72:     }
002BCB 0F                INC      R7
002BCC 0F                INC      R7
002BCD 80CA              SJMP     ?C0001?DRV_USB
002BCF         ?C0002?DRV_USB:
   73:     aManufacturerStr[0] = vLoop;
002BCF 900484            MOV      DPTR,#aManufacturerStr
002BD2 EF                MOV      A,R7
002BD3 F0                MOVX     @DPTR,A
   74: 
   75:     /* init USB product string */
   76:     aProductStr[1] = 0x03;
002BD4 9004A7            MOV      DPTR,#aProductStr+01H
002BD7 7403              MOV      A,#03H
002BD9 F0                MOVX     @DPTR,A
   77:     for (vLoop=2; vLoop<sizeof(aProductStr); vLoop+=2)
002BDA 7F02              MOV      R7,#02H
002BDC         ?C0006?DRV_USB:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 86


002BDC EF                MOV      A,R7
002BDD C3                CLR      C
002BDE 9422              SUBB     A,#022H
002BE0 5030              JNC      ?C0007?DRV_USB
   78:     {
   79:         vData = CFG_GETO8(EE_Vendor_PN, (vLoop>>1)-1);
002BE2 EF                MOV      A,R7
002BE3 C3                CLR      C
002BE4 13                RRC      A
002BE5 C3                CLR      C
002BE6 9401              SUBB     A,#01H
002BE8 24A0              ADD      A,#0A0H
002BEA 1233EB            LCALL    ?L?COM0026
002BED 4023              JC       ?C0007?DRV_USB
002BEF E52B              MOV      A,vData
002BF1 947F              SUBB     A,#07FH
002BF3 501D              JNC      ?C0007?DRV_USB
   80: 
   81:         if ((vData < 0x20) || (vData >= 0x7F))
   82:         {
   83:             break;
   84:         }
002BF5         ?C0009?DRV_USB:
   85: 
   86:         aProductStr[vLoop+0] = vData;
002BF5 74A6              MOV      A,#LOW aProductStr
002BF7 2F                ADD      A,R7
002BF8 F582              MOV      DPL,A
002BFA E4                CLR      A
002BFB 3404              ADDC     A,#HIGH aProductStr
002BFD F583              MOV      DPH,A
002BFF E52B              MOV      A,vData
002C01 F0                MOVX     @DPTR,A
   87:         aProductStr[vLoop+1] = 0;
002C02 74A7              MOV      A,#LOW aProductStr+01H
002C04 2F                ADD      A,R7
002C05 F582              MOV      DPL,A
002C07 E4                CLR      A
002C08 3404              ADDC     A,#HIGH aProductStr+01H
002C0A F583              MOV      DPH,A
002C0C E4                CLR      A
002C0D F0                MOVX     @DPTR,A
   88:     }
002C0E 0F                INC      R7
002C0F 0F                INC      R7
002C10 80CA              SJMP     ?C0006?DRV_USB
002C12         ?C0007?DRV_USB:
   89:     aProductStr[0] = vLoop;
002C12 9004A6            MOV      DPTR,#aProductStr
002C15 EF                MOV      A,R7
002C16 F0                MOVX     @DPTR,A
   90: 
   91:     /* init USB serial number string */
   92:     aSerialNumberStr[1] = 0x03;
002C17 9004C9            MOV      DPTR,#aSerialNumberStr+01H
002C1A 7403              MOV      A,#03H
002C1C F0                MOVX     @DPTR,A
   93:     for (vLoop=2; vLoop<sizeof(aSerialNumberStr); vLoop+=2)
002C1D 7F02              MOV      R7,#02H
002C1F         ?C0011?DRV_USB:
002C1F EF                MOV      A,R7
002C20 C3                CLR      C
002C21 9422              SUBB     A,#022H
002C23 5030              JNC      ?C0012?DRV_USB
   94:     {
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 87


   95:         vData = CFG_GETO8(EE_Vendor_SN, (vLoop>>1)-1);
002C25 EF                MOV      A,R7
002C26 C3                CLR      C
002C27 13                RRC      A
002C28 C3                CLR      C
002C29 9401              SUBB     A,#01H
002C2B 24B0              ADD      A,#0B0H
002C2D 1233EB            LCALL    ?L?COM0026
002C30 4023              JC       ?C0012?DRV_USB
002C32 E52B              MOV      A,vData
002C34 947F              SUBB     A,#07FH
002C36 501D              JNC      ?C0012?DRV_USB
   96: 
   97:         if ((vData < 0x20) || (vData >= 0x7F))
   98:         {
   99:             break;
  100:         }
002C38         ?C0014?DRV_USB:
  101: 
  102:         aSerialNumberStr[vLoop+0] = vData;
002C38 74C8              MOV      A,#LOW aSerialNumberStr
002C3A 2F                ADD      A,R7
002C3B F582              MOV      DPL,A
002C3D E4                CLR      A
002C3E 3404              ADDC     A,#HIGH aSerialNumberStr
002C40 F583              MOV      DPH,A
002C42 E52B              MOV      A,vData
002C44 F0                MOVX     @DPTR,A
  103:         aSerialNumberStr[vLoop+1] = 0;
002C45 74C9              MOV      A,#LOW aSerialNumberStr+01H
002C47 2F                ADD      A,R7
002C48 F582              MOV      DPL,A
002C4A E4                CLR      A
002C4B 3404              ADDC     A,#HIGH aSerialNumberStr+01H
002C4D F583              MOV      DPH,A
002C4F E4                CLR      A
002C50 F0                MOVX     @DPTR,A
  104:     }
002C51 0F                INC      R7
002C52 0F                INC      R7
002C53 80CA              SJMP     ?C0011?DRV_USB
002C55         ?C0012?DRV_USB:
  105:     aSerialNumberStr[0] = vLoop;
002C55 9004C8            MOV      DPTR,#aSerialNumberStr
002C58 EF                MOV      A,R7
002C59 F0                MOVX     @DPTR,A
  106: 
  107:     /* set USB0 to the high priority level interrupt */
  108:     EIP1 |= (1<<1);
002C5A 43F602            ORL      EIP1,#02H
  109: 
  110:     /* init USB device */
  111:     USB_Clock_Start();
002C5D 120046            LCALL    USB_Clock_Start
  112:     USB_Init(DRV_USB_VID,
002C60 9004F1            MOV      DPTR,#?_USB_Init?BYTE+07H
002C63 7401              MOV      A,#01H
002C65 F0                MOVX     @DPTR,A
002C66 A3                INC      DPTR
002C67 7404              MOV      A,#HIGH aProductStr
002C69 F0                MOVX     @DPTR,A
002C6A A3                INC      DPTR
002C6B 74A6              MOV      A,#LOW aProductStr
002C6D F0                MOVX     @DPTR,A
002C6E A3                INC      DPTR
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 88


002C6F 7401              MOV      A,#01H
002C71 F0                MOVX     @DPTR,A
002C72 A3                INC      DPTR
002C73 7404              MOV      A,#HIGH aSerialNumberStr
002C75 F0                MOVX     @DPTR,A
002C76 A3                INC      DPTR
002C77 74C8              MOV      A,#LOW aSerialNumberStr
002C79 F0                MOVX     @DPTR,A
002C7A A3                INC      DPTR
002C7B 74FA              MOV      A,#0FAH
002C7D F0                MOVX     @DPTR,A
002C7E A3                INC      DPTR
002C7F 7480              MOV      A,#080H
002C81 F0                MOVX     @DPTR,A
002C82 A3                INC      DPTR
002C83 7401              MOV      A,#01H
002C85 F0                MOVX     @DPTR,A
002C86 A3                INC      DPTR
002C87 E4                CLR      A
002C88 F0                MOVX     @DPTR,A
002C89 7B01              MOV      R3,#01H
002C8B 7A04              MOV      R2,#HIGH aManufacturerStr
002C8D 7984              MOV      R1,#LOW aManufacturerStr
002C8F 7D61              MOV      R5,#061H
002C91 7CEA              MOV      R4,#0EAH
002C93 7FC4              MOV      R7,#0C4H
002C95 7E10              MOV      R6,#010H
002C97 120BCD            LCALL    _USB_Init
  113:              DRV_USB_PID,
  114:              aManufacturerStr,
  115:              aProductStr,
  116:              aSerialNumberStr,
  117:              0xFA,      /* maximum current: 500mA */
  118:              0x80,      /* bus-powered, remote wakeup is unsupported */
  119:              0x100);    /* device release number 1.00 */
  120: 
  121:     /* the USB_Init() API will auto-enable global interrupt,
  122:      * disable it here, and will be enabled later.
  123:      */
  124:     DRV_INT_GlobalDisableInterrupt();
002C9A C2AF              CLR      EA
  125: }
002C9C 22                RET      
----- FUNCTION DRV_USB_Init (END) -------


----- FUNCTION _DRV_CPU_DelayMs (BEGIN) -----
 FILE: '..\drv\drv_cpu.c'
   78: void DRV_CPU_DelayMs(UINT16 vMsec)
   79: {
;---- Variable 'vMsec' assigned to Register 'DPTR' ----
002C9D 8F82              MOV      DPL,R7
002C9F 8E83              MOV      DPH,R6
   80:   #if DRV_TIMER_SUPPORT
   81:     if (DRV_INT_IsGlobalInterruptEnable())
002CA1 30AF23            JNB      EA,?C0008?DRV_CPU
   82:     {
   83:         UINT64  vStopTick = DRV_TIMER_GetTick() + vMsec/DRV_TIMER_INTERVAL;
002CA4 EF                MOV      A,R7
002CA5 2511              ADD      A,vTickCount+03H
002CA7 F53E              MOV      vStopTick+03H,A
002CA9 EE                MOV      A,R6
002CAA 3510              ADDC     A,vTickCount+02H
002CAC F53D              MOV      vStopTick+02H,A
002CAE E4                CLR      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 89


002CAF 350F              ADDC     A,vTickCount+01H
002CB1 F53C              MOV      vStopTick+01H,A
002CB3 E4                CLR      A
002CB4 350E              ADDC     A,vTickCount
002CB6 F53B              MOV      vStopTick,A
002CB8         ?C0005?DRV_CPU:
   84: 
   85:         while (DRV_TIMER_GetTick() < vStopTick)
002CB8 AF3E              MOV      R7,vStopTick+03H
002CBA AE3D              MOV      R6,vStopTick+02H
002CBC AD3C              MOV      R5,vStopTick+01H
002CBE AC3B              MOV      R4,vStopTick
002CC0 1233CA            LCALL    ?L?COM001D
002CC3 5018              JNC      ?C0010?DRV_CPU
   86:         {
   87:           #if DRV_WATCHDOG_SUPPORT
   88:             DRV_WATCHDOG_Kick();
   89:           #endif
   90:         }
002CC5 80F1              SJMP     ?C0005?DRV_CPU
   91:     }
   92:     else
   93:   #endif
   94:     {
002CC7         ?C0008?DRV_CPU:
   95:     	while (vMsec--)
002CC7 E582              MOV      A,DPL
002CC9 1582              DEC      DPL
002CCB AE83              MOV      R6,DPH
002CCD 7002              JNZ      ?C0012?DRV_CPU
002CCF 1583              DEC      DPH
002CD1         ?C0012?DRV_CPU:
002CD1 4E                ORL      A,R6
002CD2 6009              JZ       ?C0010?DRV_CPU
   96:     	{
   97:           #if DRV_WATCHDOG_SUPPORT
   98:     		DRV_WATCHDOG_Kick();
   99:           #endif
  100: 
  101:     		DRV_CPU_DelayUs(1000);
002CD4 7FE8              MOV      R7,#0E8H
002CD6 7E03              MOV      R6,#03H
002CD8 121C26            LCALL    _DRV_CPU_DelayUs
  102:     	}
002CDB 80EA              SJMP     ?C0008?DRV_CPU
  103:     }
  104: }
002CDD         ?C0010?DRV_CPU:
002CDD 22                RET      
----- FUNCTION _DRV_CPU_DelayMs (END) -------


----- FUNCTION DRV_ADC_Init (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   99: void DRV_ADC_Init(void)
  100: {
  101:   /* AD0SC value */
  102:   #define AD0SC_VAL (((CORE_CLOCK*10/DRV_ADC_SAR_RATE/1000/ADC_SAR_ConvClock+5)/10-1)&0x1F)
  103: 
  104:     /* default:
  105:      *  positive channel: temperature sensor;
  106:      *  negative channel: GND;
  107:      */
  108:     AMX0P = ADC_CHP_TEMP;
002CDE 75BB1E            MOV      AMX0P,#01EH
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 90


  109:     AMX0N = ADC_CHN_GND;
002CE1 75BA1F            MOV      AMX0N,#01FH
  110: 
  111:     /* ADC control:
  112:      *  right justify;
  113:      *  ADC start-of-conversion source is write of '1' to ADC0BUSY;
  114:      *  clear ADC flag;
  115:      *  enable ADC;
  116:      */
  117:     ADC0CF = (AD0SC_VAL<<3) | (0<<2);
002CE4 75BCB8            MOV      ADC0CF,#0B8H
  118:     ADC0CN = 0x80;
002CE7 75E880            MOV      ADC0CN,#080H
  119: }
002CEA 22                RET      
----- FUNCTION DRV_ADC_Init (END) -------


----- FUNCTION thread_LED_Entry (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   48: OS_HANDLE thread_LED_Entry(void)
   49: {
   50:     PT_BEGIN(&vTCB_LED);
   51: 
002CEB 752B01            MOV      PT_YIELD_FLAG,#01H
002CEE         ?C0001?THREAD_LED:
002CEE E514              MOV      A,vTCB_LED
002CF0 7054              JNZ      ?C0002?THREAD_LED
002CF2 E515              MOV      A,vTCB_LED+01H
002CF4 24BA              ADD      A,#0BAH
002CF6 603B              JZ       ?C0029?THREAD_LED
002CF8 2446              ADD      A,#046H
002CFA 704A              JNZ      ?C0002?THREAD_LED
   52:     for (;;)
002CFC         ?C0004?THREAD_LED:
   53:     {
   54:       #if CFG_SUPPORT
   55:         if (CFG_GET(RT_EVB_STAT_Global_Ready) == HIGH)
002CFC 7819              MOV      R0,#019H
002CFE E2                MOVX     A,@R0
002CFF C4                SWAP     A
002D00 13                RRC      A
002D01 13                RRC      A
002D02 13                RRC      A
002D03 5401              ANL      A,#01H
002D05 1233D9            LCALL    ?L?COM001F
002D08 1234E0            LCALL    ?L?COM003F
002D0B 7006              JNZ      ?C0016?THREAD_LED
   56:         {
   57:             /* system running OK */
   58:             DRV_IO_Write(IO(IO_LED_1_OUT), HIGH);
002D0D D293              SETB     IO_LED_1_OUT
   59:             DRV_IO_Write(IO(IO_LED_2_OUT), LOW);
002D0F C286              CLR      IO_LED_2_OUT
   60:         }
002D11 8004              SJMP     ?C0022?THREAD_LED
   61:         else
   62:       #endif
   63:         {
002D13         ?C0016?THREAD_LED:
   64:             /* system running abnormally */
   65:             DRV_IO_Write(IO(IO_LED_1_OUT), LOW);
002D13 C293              CLR      IO_LED_1_OUT
   66:             DRV_IO_Write(IO(IO_LED_2_OUT), HIGH);
002D15 D286              SETB     IO_LED_2_OUT
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 91


   67:         }
002D17         ?C0022?THREAD_LED:
   68: 
   69:         DRV_IO_Toggle(IO(IO_LED_STATUS_OUT));
002D17 63A008            XRL      P2,#08H
   70:         OS_SLEEP_MS(&vTCB_LED, 500);
002D1A E511              MOV      A,vTickCount+03H
002D1C 24F4              ADD      A,#0F4H
002D1E FF                MOV      R7,A
002D1F E510              MOV      A,vTickCount+02H
002D21 3401              ADDC     A,#01H
002D23 123574            LCALL    ?L?COM005C
002D26 FC                MOV      R4,A
002D27 900500            MOV      DPTR,#vEndTick
002D2A 120685            LCALL    ?C?LSTXDATA
002D2D 751400            MOV      vTCB_LED,#00H
002D30 751546            MOV      vTCB_LED+01H,#046H
002D33         ?C0029?THREAD_LED:
002D33 00                NOP      
002D34 900500            MOV      DPTR,#vEndTick
002D37 1233BF            LCALL    ?L?COM001C
002D3A 7F00              MOV      R7,#00H
002D3C 5002              JNC      ?C0031?THREAD_LED
002D3E 7F01              MOV      R7,#01H
002D40         ?C0031?THREAD_LED:
002D40         ?C0032?THREAD_LED:
002D40 EF                MOV      A,R7
002D41 60B9              JZ       ?C0004?THREAD_LED
002D43 7F00              MOV      R7,#00H
002D45 22                RET      
   71:     }
   72: 
   73:     PT_END(&vTCB_LED);
002D46         ?C0002?THREAD_LED:
002D46 E4                CLR      A
002D47 F52B              MOV      PT_YIELD_FLAG,A
002D49 F514              MOV      vTCB_LED,A
002D4B F515              MOV      vTCB_LED+01H,A
002D4D 7F03              MOV      R7,#03H
   74: }
002D4F 22                RET      
----- FUNCTION thread_LED_Entry (END) -------


----- FUNCTION thread_LED_Init (BEGIN) -----
 FILE: '..\plf\thread_led.c'
   91: void thread_LED_Init(void)
   92: {
   93:     PT_INIT(&vTCB_LED);
   94: }
002D50 E4                CLR      A
002D51 F514              MOV      vTCB_LED,A
002D53 F515              MOV      vTCB_LED+01H,A
   95: 
002D55 22                RET      
----- FUNCTION thread_LED_Init (END) -------


----- FUNCTION _fixupInit (BEGIN) -----
 FILE: '..\plf\main.c'
   46: static void _fixupInit(void)
   47: {
   48:     /* Globally enable Interrupt */
   49:     DRV_INT_GlobalEnableInterrupt();
002D56 D2AF              SETB     EA
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 92


   50: 
   51:   #if DRV_USB_SUPPORT
   52: 	/* enable USB interface */
   53: 	DRV_USB_Enable();
002D58 021303            LJMP     USB_Int_Enable
----- FUNCTION _fixupInit (END) -------


----- FUNCTION main (BEGIN) -----
 FILE: '..\plf\main.c'
   72: void main(void)
   73: {
   74: 	/* previous init */
   75: 	DRV_PreInit();
002D5B B18E              ACALL    DRV_PreInit
   76: 
   77:     /* init protothread */
   78:     OS_Init();
002D5D B178              ACALL    OS_Init
   79: 
   80:     /* fixup init */
   81:     _fixupInit();
002D5F B156              ACALL    _fixupInit
;----                  JMP      OS_Start
   82: 
   83:     /* start protothread (never return) */
----- FUNCTION main (END) -------


----- FUNCTION OS_Start (BEGIN) -----
 FILE: '..\os\os.c'
   59: void OS_Start(void)
   60: {
   61:     for (;;)
   62:     {
002D61         ?C0001?OS:
   63:         UINT8   i;
   64: 
   65:         for (i = 0; i < COUNT_OF(aThreadList); i++)
002D61 E4                CLR      A
002D62 F52A              MOV      i,A
002D64         ?C0003?OS:
   66:         {
   67:             aThreadList[i].pEntry();
002D64 E52A              MOV      A,i
002D66 75F006            MOV      B,#06H
002D69 A4                MUL      AB
002D6A 241C              ADD      A,#LOW aThreadList
002D6C F582              MOV      DPL,A
002D6E E4                CLR      A
002D6F 3416              ADDC     A,#HIGH aThreadList
002D71 123430            LCALL    ?L?COM002C
002D74 40EE              JC       ?C0003?OS
002D76 80E9              SJMP     ?C0001?OS
   68:         }
----- FUNCTION OS_Start (END) -------


----- FUNCTION OS_Init (BEGIN) -----
 FILE: '..\os\os.c'
   87: void OS_Init(void)
   88: {
   89:     UINT8   i;
   90: 
   91:     for (i = 0; i < COUNT_OF(aThreadList); i++)
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 93


002D78 E4                CLR      A
002D79 F52A              MOV      i,A
002D7B         ?C0007?OS:
   92:     {
   93:         aThreadList[i].pInit();
002D7B E52A              MOV      A,i
002D7D 75F006            MOV      B,#06H
002D80 A4                MUL      AB
002D81 241F              ADD      A,#LOW aThreadList+03H
002D83 F582              MOV      DPL,A
002D85 E4                CLR      A
002D86 3416              ADDC     A,#HIGH aThreadList+03H
002D88 123430            LCALL    ?L?COM002C
002D8B 40EE              JC       ?C0007?OS
   94:     }
   95: }
002D8D 22                RET      
----- FUNCTION OS_Init (END) -------


----- FUNCTION DRV_PreInit (BEGIN) -----
 FILE: '..\drv\drv.c'
   99: void DRV_PreInit(void)
  100: {
  101:     /* disable all interrupt */
  102:     DRV_INT_DisableAllInterrupt();
002D8E E4                CLR      A
002D8F F5A8              MOV      IE,A
002D91 F5E6              MOV      EIE1,A
  103: 
  104:   #if DRV_CLOCK_SUPPORT
  105:     DRV_CLOCK_Init();
002D93 75B283            MOV      OSCICN,#083H
002D96         ?C0026?DRV:
002D96 E5B2              MOV      A,OSCICN
002D98 C4                SWAP     A
002D99 13                RRC      A
002D9A 13                RRC      A
002D9B 5403              ANL      A,#03H
002D9D 13                RRC      A
002D9E 50F6              JNC      ?C0026?DRV
002DA0         ?C0027?DRV:
002DA0 75B980            MOV      CLKMUL,#080H
002DA3 7F05              MOV      R7,#05H
002DA5 7E00              MOV      R6,#00H
002DA7 121C26            LCALL    _DRV_CPU_DelayUs
002DAA 43B9C0            ORL      CLKMUL,#0C0H
002DAD         ?C0028?DRV:
002DAD E5B9              MOV      A,CLKMUL
002DAF C4                SWAP     A
002DB0 13                RRC      A
002DB1 5407              ANL      A,#07H
002DB3 13                RRC      A
002DB4 50F7              JNC      ?C0028?DRV
002DB6         ?C0029?DRV:
002DB6 75A902            MOV      CLKSEL,#02H
002DB9 75B680            MOV      FLSCL,#080H
  106:   #endif
  107: 
  108:   #if DRV_IO_SUPPORT
  109: 	DRV_IO_Init();
002DBC D11F              ACALL    DRV_IO_Init
  110:   #endif
  111: 
  112:   #if DRV_UART_SUPPORT
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 94


  113:     DRV_UART_Init();
002DBE 438E08            ORL      CKCON,#08H
002DC1 E589              MOV      A,TMOD
002DC3 540F              ANL      A,#0FH
002DC5 4420              ORL      A,#020H
002DC7 F589              MOV      TMOD,A
002DC9 758D98            MOV      TH1,#098H
002DCC D28E              SETB     TR1
002DCE AFD4              MOV      R7,P0SKIP
002DD0 EF                MOV      A,R7
002DD1 54EF              ANL      A,#0EFH
002DD3 FF                MOV      R7,A
002DD4 8FD4              MOV      P0SKIP,R7
002DD6 AFD4              MOV      R7,P0SKIP
002DD8 EF                MOV      A,R7
002DD9 54DF              ANL      A,#0DFH
002DDB FF                MOV      R7,A
002DDC E4                CLR      A
002DDD 8FD4              MOV      P0SKIP,R7
002DDF 43E101            ORL      XBR0,#01H
002DE2 759802            MOV      SCON0,#02H
;----                  JMP      DRV_PCA_Init
  114:   #endif
  115: 
  116:   #if DRV_PCA_SUPPORT
----- FUNCTION DRV_PreInit (END) -------


----- FUNCTION DRV_PCA_Init (BEGIN) -----
 FILE: '..\drv\drv_pca.c'
   48: void DRV_PCA_Init(void)
   49: {
   50:     UINT8   vPCA0ME = 0x00;
   51: 
;---- Variable 'vPCA0ME' assigned to Register 'R3' ----
002DE5 E4                CLR      A
002DE6 FB                MOV      R3,A
   52:     /* PCA channel init */
   53:   #define DECLARE_PCA(_name,_ch,_io,_mode,_init,_desc)                      \
   54:     do {                                                                    \
   55:         DRV_PCA_Write(_name, _init);                                        \
   56:         DRV_PCA_SetMode(_name, _mode);                                      \
   57:                                                                             \
   58:         if (_mode != PCA_MODE_DISABLE)                                      \
   59:         {                                                                   \
   60:             /* force no-skip this PCA channel for GPIO */                   \
   61:             drv_io_SetSkip(_PCA_IO(_name), DISABLE);                        \
   62:             vPCA0ME++;                                                      \
   63:         }                                                                   \
   64:     } while (0);
   65:   #include "cfg_hw_def.h"
   66:   #undef DECLARE_PCA
   67: 
   68:     /* init PCA0:
   69:      *  reset PCA counter;
   70:      *  PCA clock source: defined by DRV_PCA_SOURCE_CLOCK;
   71:      *  enable PCA;
   72:      */
   73:     PCA0H  = 0x00;
   74:     PCA0L  = 0x00;
   75:     PCA0MD = (DRV_PCA_SOURCE_CLOCK<<1);
   76:     PCA0CN = 0x40;
   77: 
   78:     /* enable CEXn at cross-bar */
   79:     XBR1 |= (vPCA0ME&0x7);
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 95


   80: }
   81: 
   82: #endif
   83: 
   83: 
002DE7 75FCFF            MOV      PCA0CPH0,#0FFH
002DEA         ?C0011?DRV_PCA:
002DEA 75DA42            MOV      PCA0CPM0,#042H
002DED AFD4              MOV      R7,P0SKIP
002DEF EF                MOV      A,R7
002DF0 54FD              ANL      A,#0FDH
002DF2 FF                MOV      R7,A
002DF3 8FD4              MOV      P0SKIP,R7
002DF5 0B                INC      R3
   83: 
002DF6         ?C0022?DRV_PCA:
002DF6 E4                CLR      A
002DF7 F5E9              MOV      PCA0CPL1,A
002DF9 F5EA              MOV      PCA0CPH1,A
002DFB         ?C0026?DRV_PCA:
002DFB E4                CLR      A
002DFC F5DB              MOV      PCA0CPM1,A
002DFE         ?C0037?DRV_PCA:
002DFE E4                CLR      A
002DFF F5EB              MOV      PCA0CPL2,A
002E01 F5EC              MOV      PCA0CPH2,A
002E03         ?C0041?DRV_PCA:
002E03 E4                CLR      A
002E04 F5DC              MOV      PCA0CPM2,A
002E06         ?C0052?DRV_PCA:
002E06 E4                CLR      A
002E07 F5ED              MOV      PCA0CPL3,A
002E09 F5EE              MOV      PCA0CPH3,A
002E0B         ?C0056?DRV_PCA:
002E0B E4                CLR      A
002E0C F5DD              MOV      PCA0CPM3,A
002E0E         ?C0047?DRV_PCA:
002E0E E4                CLR      A
002E0F F5FA              MOV      PCA0H,A
002E11 F5F9              MOV      PCA0L,A
002E13 75D908            MOV      PCA0MD,#08H
002E16 75D840            MOV      PCA0CN,#040H
002E19 EB                MOV      A,R3
002E1A 5407              ANL      A,#07H
002E1C 42E2              ORL      XBR1,A
002E1E 22                RET      
----- FUNCTION DRV_PCA_Init (END) -------


----- FUNCTION DRV_IO_Init (BEGIN) -----
 FILE: '..\drv\drv_io.c'
   48: void DRV_IO_Init(void)
   49: {
   50:     /* io internal init */
   51:     P0      = _PORT_INIT(P0);
002E1F 7580BF            MOV      P0,#0BFH
   52:     P1      = _PORT_INIT(P1);
002E22 7590F7            MOV      P1,#0F7H
   53:     P2      = _PORT_INIT(P2);
002E25 75A0FF            MOV      P2,#0FFH
   54:     P3      = _PORT_INIT(P3);
002E28 75B0FF            MOV      P3,#0FFH
   55:     P0MDIN  = _PORT_MDIN(P0);
002E2B 75F17F            MOV      P0MDIN,#07FH
   56:     P1MDIN  = _PORT_MDIN(P1);
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 96


002E2E 75F2FE            MOV      P1MDIN,#0FEH
   57:     P2MDIN  = _PORT_MDIN(P2);
002E31 75F3FB            MOV      P2MDIN,#0FBH
   58:     P3MDIN  = _PORT_MDIN(P3);
002E34 75F4FE            MOV      P3MDIN,#0FEH
   59:     P0MDOUT = _PORT_MDOUT(P0);
002E37 75A44A            MOV      P0MDOUT,#04AH
   60:     P1MDOUT = _PORT_MDOUT(P1);
002E3A 75A558            MOV      P1MDOUT,#058H
   61:     P2MDOUT = _PORT_MDOUT(P2);
002E3D 75A60A            MOV      P2MDOUT,#0AH
   62:     P3MDOUT = _PORT_MDOUT(P3);
002E40 E4                CLR      A
002E41 F5A7              MOV      P3MDOUT,A
   63: 
   64:     /* default, all pins are skipped for cross-bar */
   65:     P0SKIP = 0xFF;
002E43 75D4FF            MOV      P0SKIP,#0FFH
   66:     P1SKIP = 0xFF;
002E46 75D5FF            MOV      P1SKIP,#0FFH
   67:     P2SKIP = 0xFF;
002E49 75D6FF            MOV      P2SKIP,#0FFH
   68: 
   69:     /* enable cross-bar */
   70:     XBR0 = 0x00;
002E4C F5E1              MOV      XBR0,A
   71:     XBR1 = 0x40;
002E4E 75E240            MOV      XBR1,#040H
   72: }
002E51 22                RET      
----- FUNCTION DRV_IO_Init (END) -------


----- FUNCTION DRV_VECTOR_Timer2 (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   49: void DRV_VECTOR_Timer2(void) __interrupt(INTERRUPT_TIMER2)
002E52 C0E0              PUSH     ACC
002E54 C0D0              PUSH     PSW
002E56 75D000            MOV      PSW,#00H
002E59 C004              PUSH     AR4
002E5B C005              PUSH     AR5
002E5D C006              PUSH     AR6
002E5F C007              PUSH     AR7
   50: {
   51:     /* clear timeout flag */
   52:     DRV_TIMER_ClearTimeoutFlag();
002E61 C2CF              CLR      TF2H
   53: 
   54:     /* update tick counter */
   55: 	DRV_TIMER_UpdateTick();
002E63 AF11              MOV      R7,vTickCount+03H
002E65 AE10              MOV      R6,vTickCount+02H
002E67 AD0F              MOV      R5,vTickCount+01H
002E69 AC0E              MOV      R4,vTickCount
002E6B EF                MOV      A,R7
002E6C 2401              ADD      A,#01H
002E6E F511              MOV      vTickCount+03H,A
002E70 E4                CLR      A
002E71 3E                ADDC     A,R6
002E72 F510              MOV      vTickCount+02H,A
002E74 E4                CLR      A
002E75 3D                ADDC     A,R5
002E76 F50F              MOV      vTickCount+01H,A
002E78 E4                CLR      A
002E79 3C                ADDC     A,R4
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 97


002E7A F50E              MOV      vTickCount,A
   56: }
002E7C D007              POP      AR7
002E7E D006              POP      AR6
002E80 D005              POP      AR5
002E82 D004              POP      AR4
002E84 D0D0              POP      PSW
002E86 D0E0              POP      ACC
002E88 32                RETI     
----- FUNCTION DRV_VECTOR_Timer2 (END) -------


----- FUNCTION DRV_VECTOR_UserUSB (BEGIN) -----
 FILE: '..\drv\drv_vector.c'
   76: void DRV_VECTOR_UserUSB(void) __interrupt(INTERRUPT_UserUSB)
002E89 C0E0              PUSH     ACC
002E8B C0F0              PUSH     B
002E8D C083              PUSH     DPH
002E8F C082              PUSH     DPL
002E91 C0D0              PUSH     PSW
002E93 75D000            MOV      PSW,#00H
002E96 C000              PUSH     AR0
002E98 C001              PUSH     AR1
002E9A C002              PUSH     AR2
002E9C C003              PUSH     AR3
002E9E C004              PUSH     AR4
002EA0 C005              PUSH     AR5
002EA2 C006              PUSH     AR6
002EA4 C007              PUSH     AR7
   77: {
   78:   #if PKT_SUPPORT
   79: 	thread_Pkt_Notify(DRV_USB_GetInterruptSource());
002EA6 12133E            LCALL    Get_Interrupt_Source
002EA9 1217DB            LCALL    _thread_Pkt_Notify
   80:   #endif
   81: }
002EAC D007              POP      AR7
002EAE D006              POP      AR6
002EB0 D005              POP      AR5
002EB2 D004              POP      AR4
002EB4 D003              POP      AR3
002EB6 D002              POP      AR2
002EB8 D001              POP      AR1
002EBA D000              POP      AR0
002EBC D0D0              POP      PSW
002EBE D082              POP      DPL
002EC0 D083              POP      DPH
002EC2 D0F0              POP      B
002EC4 D0E0              POP      ACC
002EC6 32                RETI     
----- FUNCTION DRV_VECTOR_UserUSB (END) -------


----- FUNCTION _DRV_ADC_Sample (BEGIN) -----
 FILE: '..\drv\drv_adc.c'
   50: SINT16 DRV_ADC_Sample(UINT8 vPositive, UINT8 vNegative, UINT8 vAvgNum)
   51: {
002EC7 8B30              MOV      vAvgNum,R3
;---- Variable 'vNegative' assigned to Register 'R5' ----
;---- Variable 'vPositive' assigned to Register 'R7' ----
   52:     SINT16  vAdcSum;
   53:     UINT8   vLoop;
   54: 
   55:     /* select positive/negative channel */
   56:     AMX0P = vPositive;
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 98


002EC9 8FBB              MOV      AMX0P,R7
   57:     AMX0N = vNegative;
002ECB 8DBA              MOV      AMX0N,R5
   58: 
   59:     /* wait for ADC input stable */
   60:     DRV_CPU_DelayUs(ADC_SettlingTime);
002ECD 7FC8              MOV      R7,#0C8H
002ECF 7E00              MOV      R6,#00H
002ED1 121C26            LCALL    _DRV_CPU_DelayUs
   61: 
   62:     /* sampling */
   63:     vAdcSum = 0;
;---- Variable 'vAdcSum' assigned to Register 'R4/R5' ----
002ED4 E4                CLR      A
002ED5 FD                MOV      R5,A
002ED6 FC                MOV      R4,A
   64:     for (vLoop = (1<<vAvgNum); vLoop > 0; vLoop--)
002ED7 AF30              MOV      R7,vAvgNum
002ED9 04                INC      A
002EDA A807              MOV      R0,AR7
002EDC 08                INC      R0
002EDD 8002              SJMP     ?C0009?DRV_ADC
002EDF         ?C0008?DRV_ADC:
002EDF C3                CLR      C
002EE0 33                RLC      A
002EE1         ?C0009?DRV_ADC:
002EE1 D8FC              DJNZ     R0,?C0008?DRV_ADC
;---- Variable 'vLoop' assigned to Register 'R3' ----
002EE3 FB                MOV      R3,A
002EE4         ?C0001?DRV_ADC:
002EE4 EB                MOV      A,R3
002EE5 D3                SETB     C
002EE6 9400              SUBB     A,#00H
002EE8 401A              JC       ?C0002?DRV_ADC
   65:     {
   66:         /* clear the ADC last converted flag */
   67:         AD0INT = 0;
002EEA C2ED              CLR      AD0INT
   68: 
   69:         /* start a new ADC converting */
   70:         AD0BUSY = 1;
002EEC D2EC              SETB     AD0BUSY
002EEE         ?C0004?DRV_ADC:
   71: 
   72:         /* waiting for ADC converted */
   73:         while (!AD0INT)
002EEE 30EDFD            JNB      AD0INT,?C0004?DRV_ADC
   74:         {}
002EF1         ?C0005?DRV_ADC:
   75: 
   76:         /* sum the ADC result */
   77:         vAdcSum += (SINT16)(((UINT16)ADC0H<<8)|ADC0L);
002EF1 AFBE              MOV      R7,ADC0H
002EF3 EF                MOV      A,R7
002EF4 FE                MOV      R6,A
002EF5 AABD              MOV      R2,ADC0L
002EF7 EA                MOV      A,R2
002EF8 F582              MOV      DPL,A
002EFA E582              MOV      A,DPL
002EFC 2D                ADD      A,R5
002EFD FD                MOV      R5,A
002EFE EE                MOV      A,R6
002EFF 3C                ADDC     A,R4
002F00 FC                MOV      R4,A
   78:     }
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 99


002F01 1B                DEC      R3
002F02 80E0              SJMP     ?C0001?DRV_ADC
002F04         ?C0002?DRV_ADC:
   79: 
   80:     /* calculate the averaged value */
   81:     return (vAdcSum>>vAvgNum);
002F04 ED                MOV      A,R5
002F05 AE04              MOV      R6,AR4
002F07 A830              MOV      R0,vAvgNum
002F09 08                INC      R0
002F0A 8006              SJMP     ?C0011?DRV_ADC
002F0C         ?C0010?DRV_ADC:
002F0C CE                XCH      A,R6
002F0D A2E7              MOV      C,ACC.7
002F0F 13                RRC      A
002F10 CE                XCH      A,R6
002F11 13                RRC      A
002F12         ?C0011?DRV_ADC:
002F12 D8F8              DJNZ     R0,?C0010?DRV_ADC
002F14 FF                MOV      R7,A
   82: }
002F15 22                RET      
----- FUNCTION _DRV_ADC_Sample (END) -------


----- FUNCTION apl_ddm_GetEVBTemp (BEGIN) -----
 FILE: '..\apl\apl.c'
   61: static UINT16 apl_ddm_GetEVBTemp(void)
   62: {
   63:     UINT16  vRawADC;
   64: 
   65:     /* get raw ADC value, and record it */
   66:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_TEMP));
002F16 7B03              MOV      R3,#03H
002F18 7D1F              MOV      R5,#01FH
002F1A 7F1E              MOV      R7,#01EH
002F1C 1231CE            LCALL    ?L?COM002F
002F1F 7F20              MOV      R7,#020H
002F21 7E00              MOV      R6,#00H
002F23 121FEF            LCALL    _CFG_RAM_SET16
002F26         ?C0013?APL:
   67:     CFG_SET(DDM_ADC_EVB_TEMP, vRawADC);
   68: 
   69:     /* calibration */
   70:     return apl_ddm_Calibrate(vRawADC,
   71:                              GET_SLOPE_DELTA(DDM_EVB_TEMP_Slope),
   72:                              TRUE);
002F26 D238              SETB     ?_apl_ddm_Calibrate?BIT
002F28 E4                CLR      A
002F29 FD                MOV      R5,A
;----                  JMP      ?L?COM0046
   73: }
----- FUNCTION apl_ddm_GetEVBTemp (END) -------


----- FUNCTION ?L?COM0046 (BEGIN) -----
002F2A AF2E              MOV      R7,vRawADC+01H
002F2C AE2D              MOV      R6,vRawADC
----- FUNCTION _apl_ddm_Calibrate (BEGIN) -----
 FILE: '..\apl\apl.c'
   39: static UINT16 apl_ddm_Calibrate
   40: (
002F2E 8E30              MOV      vRawADC,R6
002F30 8F31              MOV      vRawADC+01H,R7
002F32 8D32              MOV      vSlopeDelta,R5
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 100


   41:     IN UINT16   vRawADC,
   42:     IN UINT8    vSlopeDelta,
   43:     IN BOOL     bSignDDM
   44: )
   45: {
   46:     SINT64  vTmpData;
   47:     SINT32  vTmpSlope, vTmpOffset;
   48: 
   49:     vTmpSlope  = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Slope,  vSlopeDelta);
002F34 E4                CLR      A
002F35 2532              ADD      A,vSlopeDelta
002F37 121FE3            LCALL    ?L?COM004F
002F3A 8F3A              MOV      vTmpSlope+03H,R7
002F3C 8E39              MOV      vTmpSlope+02H,R6
002F3E 8D38              MOV      vTmpSlope+01H,R5
002F40 8C37              MOV      vTmpSlope,R4
   50:     vTmpOffset = (SINT32)CFG_GETO32(DDM_EVB_TEMP_Offset, vSlopeDelta);
002F42 E532              MOV      A,vSlopeDelta
002F44 2404              ADD      A,#04H
002F46 121FE3            LCALL    ?L?COM004F
002F49 8F3E              MOV      vTmpOffset+03H,R7
002F4B 8E3D              MOV      vTmpOffset+02H,R6
002F4D 8D3C              MOV      vTmpOffset+01H,R5
002F4F 8C3B              MOV      vTmpOffset,R4
   51: 
   52:     vTmpData = (((SINT64)vTmpSlope * vRawADC) >> Slope_ZoomIn_ShiftBits)
002F51 AE30              MOV      R6,vRawADC
002F53 AF31              MOV      R7,vRawADC+01H
002F55 E4                CLR      A
002F56 FC                MOV      R4,A
002F57 FD                MOV      R5,A
002F58 AB3A              MOV      R3,vTmpSlope+03H
002F5A AA39              MOV      R2,vTmpSlope+02H
002F5C A938              MOV      R1,vTmpSlope+01H
002F5E A837              MOV      R0,vTmpSlope
002F60 1205B8            LCALL    ?C?LMUL
002F63 7808              MOV      R0,#08H
002F65 12062E            LCALL    ?C?SLSHR
002F68 EF                MOV      A,R7
002F69 253E              ADD      A,vTmpOffset+03H
002F6B F536              MOV      vTmpData+03H,A
002F6D EE                MOV      A,R6
002F6E 353D              ADDC     A,vTmpOffset+02H
002F70 F535              MOV      vTmpData+02H,A
002F72 ED                MOV      A,R5
002F73 353C              ADDC     A,vTmpOffset+01H
002F75 F534              MOV      vTmpData+01H,A
002F77 EC                MOV      A,R4
002F78 353B              ADDC     A,vTmpOffset
002F7A F533              MOV      vTmpData,A
   53:                 + vTmpOffset;
   54: 
   55:     /* limit the calibrated value to 16-bit formatting,
   56:      *  to strictly follow MSA Standard.
   57:      */
   58:     return (UINT16)(bSignDDM? LIMIT_S16(vTmpData): LIMIT_U16(vTmpData));
002F7C 303831            JNB      bSignDDM,?C0001?APL
002F7F E4                CLR      A
002F80 7FFF              MOV      R7,#0FFH
002F82 7E7F              MOV      R6,#07FH
002F84 123409            LCALL    ?L?COM0028
002F87 C3                CLR      C
002F88 120607            LCALL    ?C?SLCMP
002F8B 4006              JC       ?C0003?APL
002F8D 7E7F              MOV      R6,#07FH
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 101


002F8F 7FFF              MOV      R7,#0FFH
002F91 8047              SJMP     ?C0002?APL
002F93         ?C0003?APL:
002F93 7F00              MOV      R7,#00H
002F95 7E80              MOV      R6,#080H
002F97 7DFF              MOV      R5,#0FFH
002F99 7CFF              MOV      R4,#0FFH
002F9B 12340B            LCALL    ?L?COM0029
002F9E D3                SETB     C
002F9F 120607            LCALL    ?C?SLCMP
002FA2 5006              JNC      ?C0005?APL
002FA4 7E80              MOV      R6,#080H
002FA6 7F00              MOV      R7,#00H
002FA8 8004              SJMP     ?C0006?APL
002FAA         ?C0005?APL:
002FAA AE35              MOV      R6,vTmpData+02H
002FAC AF36              MOV      R7,vTmpData+03H
002FAE         ?C0006?APL:
002FAE         ?C0004?APL:
002FAE 802A              SJMP     ?C0002?APL
002FB0         ?C0001?APL:
002FB0 E4                CLR      A
002FB1 7FFF              MOV      R7,#0FFH
002FB3 7EFF              MOV      R6,#0FFH
002FB5 123409            LCALL    ?L?COM0028
002FB8 C3                CLR      C
002FB9 120607            LCALL    ?C?SLCMP
002FBC 4006              JC       ?C0007?APL
002FBE 7EFF              MOV      R6,#0FFH
002FC0 7FFF              MOV      R7,#0FFH
002FC2 8016              SJMP     ?C0008?APL
002FC4         ?C0007?APL:
002FC4 E4                CLR      A
002FC5 FF                MOV      R7,A
002FC6 FE                MOV      R6,A
002FC7 123409            LCALL    ?L?COM0028
002FCA D3                SETB     C
002FCB 120607            LCALL    ?C?SLCMP
002FCE 5006              JNC      ?C0009?APL
002FD0 7E00              MOV      R6,#00H
002FD2 7F00              MOV      R7,#00H
002FD4 8004              SJMP     ?C0010?APL
002FD6         ?C0009?APL:
002FD6 AE35              MOV      R6,vTmpData+02H
002FD8 AF36              MOV      R7,vTmpData+03H
002FDA         ?C0010?APL:
002FDA         ?C0008?APL:
002FDA         ?C0002?APL:
   59: }
002FDA 22                RET      
----- FUNCTION _apl_ddm_Calibrate (END) -------


----- FUNCTION apl_ddm_GetEVBVCC (BEGIN) -----
 FILE: '..\apl\apl.c'
   75: static UINT16 apl_ddm_GetEVBVCC(void)
   76: {
   77:     UINT16  vRawADC;
   78: 
   79:     /* get raw ADC value, and record it */
   80:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VCC));
002FDB 7B03              MOV      R3,#03H
002FDD 7D1E              MOV      R5,#01EH
002FDF 7F1F              MOV      R7,#01FH
002FE1 1231CE            LCALL    ?L?COM002F
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 102


002FE4 7F22              MOV      R7,#022H
002FE6 7E00              MOV      R6,#00H
002FE8 121FEF            LCALL    _CFG_RAM_SET16
002FEB         ?C0061?APL:
   81:     CFG_SET(DDM_ADC_EVB_VCC, vRawADC);
   82: 
   83:     /* calibration */
   84:     return apl_ddm_Calibrate(vRawADC,
   85:                              GET_SLOPE_DELTA(DDM_EVB_VCC_Slope),
   86:                              FALSE);
002FEB C238              CLR      ?_apl_ddm_Calibrate?BIT
002FED 7D08              MOV      R5,#08H
002FEF E12A              AJMP     ?L?COM0046
   87: }
----- FUNCTION apl_ddm_GetEVBVCC (END) -------


----- FUNCTION _c2m_WriteDR (BEGIN) -----
 FILE: '..\drv\drv_c2m.c'
  237: static void c2m_WriteDR(UINT8 vData)
  238: {
;---- Variable 'vData' assigned to Register 'R7' ----
  239:     BOOL    bIntState;
  240: 
  241:     c2m_SetIns(0x1);    /* instruction: write data */
003000 D243              SETB     bIns0
003002 C244              CLR      bIns1
  242:     c2m_SetLength(0x1); /* length: 1 byte */
003004 C245              CLR      bLength0
003006 C246              CLR      bLength1
  243:     c2m_SetData(vData);
003008 8F26              MOV      vC2Data,R7
  244: 
  245:     /* lock globally interrupt */
  246:     bIntState = DRV_INT_LockGlobalInterrupt();
00300A 30AF05            JNB      EA,?C0355?DRV_C2M
00300D C2AF              CLR      EA
00300F D3                SETB     C
003010 8001              SJMP     ?C0356?DRV_C2M
003012         ?C0355?DRV_C2M:
003012 C3                CLR      C
003013         ?C0356?DRV_C2M:
003013 3146              ACALL    ?L?COM0017
003015 00                NOP      
003016 00                NOP      
003017 00                NOP      
003018 00                NOP      
003019 31C2              ACALL    ?L?COM0025
00301B 00                NOP      
00301C 00                NOP      
00301D 00                NOP      
00301E 00                NOP      
00301F 3155              ACALL    ?L?COM0034
003021 00                NOP      
003022 00                NOP      
003023 00                NOP      
003024 00                NOP      
003025 3167              ACALL    ?L?COM0051
003027 00                NOP      
003028 00                NOP      
003029 00                NOP      
00302A 00                NOP      
00302B 315E              ACALL    ?L?COM0050
00302D 00                NOP      
00302E 00                NOP      
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 103


00302F 00                NOP      
003030 00                NOP      
003031 31AF              ACALL    ?L?COM0059
003033 00                NOP      
003034 00                NOP      
003035 00                NOP      
003036 00                NOP      
003037 31A6              ACALL    ?L?COM0058
003039 00                NOP      
00303A 00                NOP      
00303B 00                NOP      
00303C 00                NOP      
00303D 319D              ACALL    ?L?COM0057
00303F 00                NOP      
003040 00                NOP      
003041 00                NOP      
003042 00                NOP      
003043 3194              ACALL    ?L?COM0056
003045 00                NOP      
003046 00                NOP      
003047 00                NOP      
003048 00                NOP      
003049 318B              ACALL    ?L?COM0055
00304B 00                NOP      
00304C 00                NOP      
00304D 00                NOP      
00304E 00                NOP      
00304F 3182              ACALL    ?L?COM0054
003051 00                NOP      
003052 00                NOP      
003053 00                NOP      
003054 00                NOP      
003055 3179              ACALL    ?L?COM0053
003057 00                NOP      
003058 00                NOP      
003059 00                NOP      
00305A 00                NOP      
00305B 3170              ACALL    ?L?COM0052
00305D 00                NOP      
00305E 00                NOP      
00305F 00                NOP      
003060 00                NOP      
003061 31B8              ACALL    ?L?COM003A
003063 00                NOP      
003064 D297              SETB     IO_DUT_C2M_SCL
003066 00                NOP      
003067 00                NOP      
  247: 
  248:     c2m_TxStart();      /* tx frame start */
  249:     c2m_TxIns();        /* tx instruction */
  250:     c2m_TxLength();     /* tx length */
  251:     c2m_TxByte();       /* tx address */
  252:     c2m_TxTurnAround(); /* tx turn-around */
  253:     c2m_Wait();         /* wait for target device ready */
003068 754827            MOV      _timeout,#027H
00306B 754910            MOV      _timeout+01H,#010H
00306E         ?C0557?DRV_C2M:
00306E 00                NOP      
00306F 00                NOP      
003070 C297              CLR      IO_DUT_C2M_SCL
003072 00                NOP      
003073 00                NOP      
003074 121C1C            LCALL    ?L?COM0007
003077 20300D            JB       bC2Bit0,?C0570?DRV_C2M
00307A E549              MOV      A,_timeout+01H
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 104


00307C 1549              DEC      _timeout+01H
00307E AE48              MOV      R6,_timeout
003080 7002              JNZ      ?C1013?DRV_C2M
003082 1548              DEC      _timeout
003084         ?C1013?DRV_C2M:
003084 4E                ORL      A,R6
003085 70E7              JNZ      ?C0557?DRV_C2M
  254:     c2m_RxStop();       /* rx frame stop */
003087         ?C0570?DRV_C2M:
003087 21E0              AJMP     ?L?COM0023
  255: 
  256:     /* unlock globally interrupt */
  257:     DRV_INT_UnlockGlobalInterrupt(bIntState);
----- FUNCTION _c2m_WriteDR (END) -------


----- FUNCTION apl_ddm_GetEVBVBUF (BEGIN) -----
 FILE: '..\apl\apl.c'
   89: static UINT16 apl_ddm_GetEVBVBUF(void)
   90: {
   91:     UINT16  vRawADC;
   92: 
   93:     /* get raw ADC value, and record it */
   94:     vRawADC = (UINT16)DRV_ADC_Sample(ADC(ADC_EVB_VBUF));
003089 7B03              MOV      R3,#03H
00308B 7D1F              MOV      R5,#01FH
00308D 7F0A              MOV      R7,#0AH
00308F 31CE              ACALL    ?L?COM002F
003091 7F24              MOV      R7,#024H
003093 7E00              MOV      R6,#00H
003095 121FEF            LCALL    _CFG_RAM_SET16
003098         ?C0109?APL:
   95:     CFG_SET(DDM_ADC_EVB_VBUF, vRawADC);
   96: 
   97:     /* calibration */
   98:     return apl_ddm_Calibrate(vRawADC,
   99:                              GET_SLOPE_DELTA(DDM_EVB_VBUF_Slope),
  100:                              FALSE);
003098 C238              CLR      ?_apl_ddm_Calibrate?BIT
00309A 7D10              MOV      R5,#010H
00309C 022F2A            LJMP     ?L?COM0046
  101: }
----- FUNCTION apl_ddm_GetEVBVBUF (END) -------


----- FUNCTION ?L?COM0001 (BEGIN) -----
00309F C283              CLR      IO_DUT_MDIOM_SCL_OEn
0030A1 C2A1              CLR      IO_DUT_MDIOM_SDA_OEn
0030A3 A248              MOV      C,bMdioPreamble
0030A5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030A7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030A9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030AB A248              MOV      C,bMdioPreamble
0030AD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030AF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030B1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030B3 A248              MOV      C,bMdioPreamble
0030B5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030B7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030B9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030BB A248              MOV      C,bMdioPreamble
0030BD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030BF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030C1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030C3 A248              MOV      C,bMdioPreamble
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 105


0030C5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030C7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030C9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030CB A248              MOV      C,bMdioPreamble
0030CD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030CF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030D1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030D3 A248              MOV      C,bMdioPreamble
0030D5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030D7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030D9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030DB A248              MOV      C,bMdioPreamble
0030DD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030DF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030E1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030E3 A248              MOV      C,bMdioPreamble
0030E5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030E7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030E9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030EB A248              MOV      C,bMdioPreamble
0030ED         ?L?COM0002:
0030ED D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030EF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030F1 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030F3 A248              MOV      C,bMdioPreamble
0030F5 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030F7 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0030F9 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0030FB A248              MOV      C,bMdioPreamble
0030FD D296              SETB     IO_DUT_MDIOM_SCL_OUT
0030FF 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003101 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003103 A248              MOV      C,bMdioPreamble
003105 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003107 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003109 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00310B A248              MOV      C,bMdioPreamble
00310D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00310F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003111 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003113 A248              MOV      C,bMdioPreamble
003115 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003117 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003119 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00311B A248              MOV      C,bMdioPreamble
00311D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00311F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003121 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003123 A248              MOV      C,bMdioPreamble
003125 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003127 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003129 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00312B A248              MOV      C,bMdioPreamble
00312D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00312F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003131 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003133 A248              MOV      C,bMdioPreamble
003135 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003137 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003139 C296              CLR      IO_DUT_MDIOM_SCL_OUT
00313B A248              MOV      C,bMdioPreamble
00313D D296              SETB     IO_DUT_MDIOM_SCL_OUT
00313F 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003141 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003143 A248              MOV      C,bMdioPreamble
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 106


003145 22                RET      
----- FUNCTION ?L?COM0001 (END) -------


----- FUNCTION ?L?COM0017 (BEGIN) -----
003146 9239              MOV      bIntState,C
003148 53A6FE            ANL      P2MDOUT,#0FEH
00314B 43A580            ORL      P1MDOUT,#080H
00314E         ?L?COM0018:
00314E A241              MOV      C,bHigh
003150 92A0              MOV      IO_DUT_C2M_SDA,C
003152 C297              CLR      IO_DUT_C2M_SCL
003154 22                RET      
----- FUNCTION ?L?COM0017 (END) -------


----- FUNCTION ?L?COM0034 (BEGIN) -----
003155 D297              SETB     IO_DUT_C2M_SCL
003157 A244              MOV      C,bIns1
003159 92A0              MOV      IO_DUT_C2M_SDA,C
00315B C297              CLR      IO_DUT_C2M_SCL
00315D 22                RET      
----- FUNCTION ?L?COM0034 (END) -------


----- FUNCTION ?L?COM0050 (BEGIN) -----
00315E D297              SETB     IO_DUT_C2M_SCL
003160 A246              MOV      C,bLength1
003162 92A0              MOV      IO_DUT_C2M_SDA,C
003164 C297              CLR      IO_DUT_C2M_SCL
003166 22                RET      
----- FUNCTION ?L?COM0050 (END) -------


----- FUNCTION ?L?COM0051 (BEGIN) -----
003167 D297              SETB     IO_DUT_C2M_SCL
003169 A245              MOV      C,bLength0
00316B 92A0              MOV      IO_DUT_C2M_SDA,C
00316D C297              CLR      IO_DUT_C2M_SCL
00316F 22                RET      
----- FUNCTION ?L?COM0051 (END) -------


----- FUNCTION ?L?COM0052 (BEGIN) -----
003170 D297              SETB     IO_DUT_C2M_SCL
003172 A237              MOV      C,bC2Bit7
003174 92A0              MOV      IO_DUT_C2M_SDA,C
003176 C297              CLR      IO_DUT_C2M_SCL
003178 22                RET      
----- FUNCTION ?L?COM0052 (END) -------


----- FUNCTION ?L?COM0053 (BEGIN) -----
003179 D297              SETB     IO_DUT_C2M_SCL
00317B A236              MOV      C,bC2Bit6
00317D 92A0              MOV      IO_DUT_C2M_SDA,C
00317F C297              CLR      IO_DUT_C2M_SCL
003181 22                RET      
----- FUNCTION ?L?COM0053 (END) -------


----- FUNCTION ?L?COM0054 (BEGIN) -----
003182 D297              SETB     IO_DUT_C2M_SCL
003184 A235              MOV      C,bC2Bit5
003186 92A0              MOV      IO_DUT_C2M_SDA,C
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 107


003188 C297              CLR      IO_DUT_C2M_SCL
00318A 22                RET      
----- FUNCTION ?L?COM0054 (END) -------


----- FUNCTION ?L?COM0055 (BEGIN) -----
00318B D297              SETB     IO_DUT_C2M_SCL
00318D A234              MOV      C,bC2Bit4
00318F 92A0              MOV      IO_DUT_C2M_SDA,C
003191 C297              CLR      IO_DUT_C2M_SCL
003193 22                RET      
----- FUNCTION ?L?COM0055 (END) -------


----- FUNCTION ?L?COM0056 (BEGIN) -----
003194 D297              SETB     IO_DUT_C2M_SCL
003196 A233              MOV      C,bC2Bit3
003198 92A0              MOV      IO_DUT_C2M_SDA,C
00319A C297              CLR      IO_DUT_C2M_SCL
00319C 22                RET      
----- FUNCTION ?L?COM0056 (END) -------


----- FUNCTION ?L?COM0057 (BEGIN) -----
00319D D297              SETB     IO_DUT_C2M_SCL
00319F A232              MOV      C,bC2Bit2
0031A1 92A0              MOV      IO_DUT_C2M_SDA,C
0031A3 C297              CLR      IO_DUT_C2M_SCL
0031A5 22                RET      
----- FUNCTION ?L?COM0057 (END) -------


----- FUNCTION ?L?COM0058 (BEGIN) -----
0031A6 D297              SETB     IO_DUT_C2M_SCL
0031A8 A231              MOV      C,bC2Bit1
0031AA 92A0              MOV      IO_DUT_C2M_SDA,C
0031AC C297              CLR      IO_DUT_C2M_SCL
0031AE 22                RET      
----- FUNCTION ?L?COM0058 (END) -------


----- FUNCTION ?L?COM0059 (BEGIN) -----
0031AF D297              SETB     IO_DUT_C2M_SCL
0031B1 A230              MOV      C,bC2Bit0
0031B3 92A0              MOV      IO_DUT_C2M_SDA,C
0031B5 C297              CLR      IO_DUT_C2M_SCL
0031B7 22                RET      
----- FUNCTION ?L?COM0059 (END) -------


----- FUNCTION ?L?COM003A (BEGIN) -----
0031B8 D297              SETB     IO_DUT_C2M_SCL
0031BA 53A6FE            ANL      P2MDOUT,#0FEH
0031BD D2A0              SETB     IO_DUT_C2M_SDA
0031BF C297              CLR      IO_DUT_C2M_SCL
0031C1 22                RET      
----- FUNCTION ?L?COM003A (END) -------


----- FUNCTION ?L?COM0025 (BEGIN) -----
0031C2 D297              SETB     IO_DUT_C2M_SCL
0031C4 43A601            ORL      P2MDOUT,#01H
0031C7 A243              MOV      C,bIns0
0031C9 92A0              MOV      IO_DUT_C2M_SDA,C
0031CB C297              CLR      IO_DUT_C2M_SCL
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 108


0031CD 22                RET      
----- FUNCTION ?L?COM0025 (END) -------


----- FUNCTION ?L?COM002F (BEGIN) -----
0031CE 122EC7            LCALL    _DRV_ADC_Sample
0031D1 8E2D              MOV      vRawADC,R6
0031D3 8F2E              MOV      vRawADC+01H,R7
0031D5 AD2E              MOV      R5,vRawADC+01H
0031D7 AC2D              MOV      R4,vRawADC
0031D9 22                RET      
----- FUNCTION ?L?COM002F (END) -------


----- FUNCTION ?L?COM0022 (BEGIN) -----
0031DA A2A0              MOV      C,IO_DUT_C2M_SDA
0031DC D297              SETB     IO_DUT_C2M_SCL
0031DE 9237              MOV      bC2Bit7,C
0031E0         ?L?COM0023:
0031E0 53A6FE            ANL      P2MDOUT,#0FEH
0031E3         ?L?COM0024:
0031E3 53A57F            ANL      P1MDOUT,#07FH
0031E6 A239              MOV      C,bIntState
0031E8 92AF              MOV      EA,C
0031EA 22                RET      
----- FUNCTION ?L?COM0022 (END) -------


----- FUNCTION ?L?COM0003 (BEGIN) -----
0031EB D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031ED 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031EF C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031F1 A20F              MOV      C,bMdioStartFrame1
0031F3 D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031F5 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031F7 C296              CLR      IO_DUT_MDIOM_SCL_OUT
0031F9 A20E              MOV      C,bMdioStartFrame0
0031FB D296              SETB     IO_DUT_MDIOM_SCL_OUT
0031FD 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
0031FF C296              CLR      IO_DUT_MDIOM_SCL_OUT
003201 A20D              MOV      C,bMdioOperationCode1
003203 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003205 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003207 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003209 A20C              MOV      C,bMdioOperationCode0
00320B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00320D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00320F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003211 A20B              MOV      C,bMdioPortAddr4
003213 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003215 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003217 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003219 A20A              MOV      C,bMdioPortAddr3
00321B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00321D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00321F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003221 A209              MOV      C,bMdioPortAddr2
003223 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003225 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003227 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003229 A208              MOV      C,bMdioPortAddr1
00322B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00322D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00322F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003231 A207              MOV      C,bMdioPortAddr0
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 109


003233 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003235 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003237 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003239 A206              MOV      C,bMdioDeviceAddr4
00323B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00323D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00323F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003241 A205              MOV      C,bMdioDeviceAddr3
003243 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003245 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003247 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003249 A204              MOV      C,bMdioDeviceAddr2
00324B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00324D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00324F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003251 A203              MOV      C,bMdioDeviceAddr1
003253 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003255 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
003257 C296              CLR      IO_DUT_MDIOM_SCL_OUT
003259 A202              MOV      C,bMdioDeviceAddr0
00325B         ?L?COM0004:
00325B D296              SETB     IO_DUT_MDIOM_SCL_OUT
00325D 9294              MOV      IO_DUT_MDIOM_SDA_OUT,C
00325F C296              CLR      IO_DUT_MDIOM_SCL_OUT
003261 22                RET      
----- FUNCTION ?L?COM0003 (END) -------


----- FUNCTION ?L?COM0005 (BEGIN) -----
003262 C20C              CLR      bMdioOperationCode0
003264         ?L?COM0006:
003264 EF                MOV      A,R7
003265 C4                SWAP     A
003266 540F              ANL      A,#0FH
003268 13                RRC      A
003269 920B              MOV      bMdioPortAddr4,C
00326B EF                MOV      A,R7
00326C 13                RRC      A
00326D 13                RRC      A
00326E 13                RRC      A
00326F 541F              ANL      A,#01FH
003271 13                RRC      A
003272 920A              MOV      bMdioPortAddr3,C
003274 EF                MOV      A,R7
003275 13                RRC      A
003276 13                RRC      A
003277 543F              ANL      A,#03FH
003279 13                RRC      A
00327A 9209              MOV      bMdioPortAddr2,C
00327C EF                MOV      A,R7
00327D C3                CLR      C
00327E 13                RRC      A
00327F 13                RRC      A
003280 9208              MOV      bMdioPortAddr1,C
003282 EF                MOV      A,R7
003283 13                RRC      A
003284 9207              MOV      bMdioPortAddr0,C
003286 ED                MOV      A,R5
003287 C4                SWAP     A
003288 540F              ANL      A,#0FH
00328A 13                RRC      A
00328B 9206              MOV      bMdioDeviceAddr4,C
00328D ED                MOV      A,R5
00328E 13                RRC      A
00328F 13                RRC      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 110


003290 13                RRC      A
003291 541F              ANL      A,#01FH
003293 13                RRC      A
003294 9205              MOV      bMdioDeviceAddr3,C
003296 ED                MOV      A,R5
003297 13                RRC      A
003298 13                RRC      A
003299 543F              ANL      A,#03FH
00329B 13                RRC      A
00329C 9204              MOV      bMdioDeviceAddr2,C
00329E ED                MOV      A,R5
00329F C3                CLR      C
0032A0 13                RRC      A
0032A1 13                RRC      A
0032A2 9203              MOV      bMdioDeviceAddr1,C
0032A4 ED                MOV      A,R5
0032A5 13                RRC      A
0032A6 9202              MOV      bMdioDeviceAddr0,C
0032A8 D201              SETB     bMdioTurnAround1
0032AA 22                RET      
----- FUNCTION ?L?COM0005 (END) -------


----- FUNCTION ?L?COM0009 (BEGIN) -----
0032AB 7819              MOV      R0,#019H
0032AD E2                MOVX     A,@R0
0032AE C4                SWAP     A
0032AF 13                RRC      A
0032B0 13                RRC      A
0032B1 13                RRC      A
0032B2 5401              ANL      A,#01H
0032B4         ?L?COM000A:
0032B4 FF                MOV      R7,A
0032B5 EF                MOV      A,R7
0032B6 5401              ANL      A,#01H
0032B8 FB                MOV      R3,A
0032B9 E4                CLR      A
0032BA FA                MOV      R2,A
0032BB F9                MOV      R1,A
0032BC F8                MOV      R0,A
0032BD AF2C              MOV      R7,_v
0032BF FC                MOV      R4,A
0032C0 FD                MOV      R5,A
0032C1 FE                MOV      R6,A
0032C2 C3                CLR      C
0032C3 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0009 (END) -------


----- FUNCTION ?L?COM000B (BEGIN) -----
0032C6 7F03              MOV      R7,#03H
0032C8 7E00              MOV      R6,#00H
0032CA 121C26            LCALL    _DRV_CPU_DelayUs
0032CD         ?L?COM000C:
0032CD C292              CLR      IO_DUT_I2CM_SDA
0032CF         ?L?COM000D:
0032CF 7F03              MOV      R7,#03H
0032D1 7E00              MOV      R6,#00H
0032D3 021C26            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM000B (END) -------


----- FUNCTION ?L?COM000E (BEGIN) -----
0032D6 7842              MOV      R0,#LOW _timeout
0032D8         ?L?COM000F:
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 111


0032D8 74FF              MOV      A,#0FFH
0032DA 120667            LCALL    ?C?LLDIIDATA8
0032DD EC                MOV      A,R4
0032DE 4D                ORL      A,R5
0032DF 4E                ORL      A,R6
0032E0 4F                ORL      A,R7
0032E1 22                RET      
----- FUNCTION ?L?COM000E (END) -------


----- FUNCTION ?L?COM0010 (BEGIN) -----
0032E2 753300            MOV      pPayload,#HIGH vFrame+0CH
0032E5 75344C            MOV      pPayload+01H,#LOW vFrame+0CH
0032E8 853482            MOV      DPL,pPayload+01H
0032EB 853383            MOV      DPH,pPayload
0032EE E0                MOVX     A,@DPTR
0032EF FF                MOV      R7,A
0032F0 A3                INC      DPTR
0032F1 E0                MOVX     A,@DPTR
0032F2 FD                MOV      R5,A
0032F3 853482            MOV      DPL,pPayload+01H
0032F6 853383            MOV      DPH,pPayload
0032F9 A3                INC      DPTR
0032FA A3                INC      DPTR
0032FB E0                MOVX     A,@DPTR
0032FC FA                MOV      R2,A
0032FD A3                INC      DPTR
0032FE E0                MOVX     A,@DPTR
0032FF FB                MOV      R3,A
003300 E534              MOV      A,pPayload+01H
003302 2404              ADD      A,#04H
003304 F582              MOV      DPL,A
003306 E4                CLR      A
003307 3533              ADDC     A,pPayload
003309 F583              MOV      DPH,A
00330B E0                MOVX     A,@DPTR
00330C F539              MOV      ?_DRV_MDIOM_Write?BYTE+04H,A
00330E A3                INC      DPTR
00330F E0                MOVX     A,@DPTR
003310 F53A              MOV      ?_DRV_MDIOM_Write?BYTE+05H,A
003312 E534              MOV      A,pPayload+01H
003314 2406              ADD      A,#06H
003316 F53C              MOV      ?_DRV_MDIOM_Write?BYTE+07H,A
003318 E4                CLR      A
003319 3533              ADDC     A,pPayload
00331B F53B              MOV      ?_DRV_MDIOM_Write?BYTE+06H,A
00331D 22                RET      
----- FUNCTION ?L?COM0010 (END) -------


----- FUNCTION ?L?COM0011 (BEGIN) -----
00331E C296              CLR      IO_DUT_MDIOM_SCL_OUT
003320 A280              MOV      C,IO_DUT_MDIOM_SDA_IN
003322 D296              SETB     IO_DUT_MDIOM_SCL_OUT
003324 22                RET      
----- FUNCTION ?L?COM0011 (END) -------


----- FUNCTION ?L?COM0012 (BEGIN) -----
003325 7B4C              MOV      R3,#LOW vFrame+0CH
003327 7A00              MOV      R2,#HIGH vFrame+0CH
003329 EB                MOV      A,R3
00332A 2406              ADD      A,#06H
00332C F534              MOV      pBuf+01H,A
00332E E4                CLR      A
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 112


00332F 3A                ADDC     A,R2
003330 F533              MOV      pBuf,A
003332 8B82              MOV      DPL,R3
003334 8A83              MOV      DPH,R2
003336 A3                INC      DPTR
003337 A3                INC      DPTR
003338 E0                MOVX     A,@DPTR
003339 FE                MOV      R6,A
00333A A3                INC      DPTR
00333B E0                MOVX     A,@DPTR
00333C 8E35              MOV      vAddr,R6
00333E F536              MOV      vAddr+01H,A
003340 EB                MOV      A,R3
003341 2404              ADD      A,#04H
003343 F582              MOV      DPL,A
003345 E4                CLR      A
003346 3A                ADDC     A,R2
003347 F583              MOV      DPH,A
003349         ?L?COM0013:
003349 E0                MOVX     A,@DPTR
00334A F537              MOV      vLen,A
00334C A3                INC      DPTR
00334D E0                MOVX     A,@DPTR
00334E F538              MOV      vLen+01H,A
003350 22                RET      
----- FUNCTION ?L?COM0012 (END) -------


----- FUNCTION ?L?COM0014 (BEGIN) -----
003351 121D4C            LCALL    _drv_c2m_WriteData
003354 AF3F              MOV      R7,vCount
003356         ?L?COM0015:
003356 121D4C            LCALL    _drv_c2m_WriteData
003359         ?L?COM0016:
003359 E4                CLR      A
00335A 754510            MOV      _timeout+03H,#010H
00335D 754427            MOV      _timeout+02H,#027H
003360 F543              MOV      _timeout+01H,A
003362 F542              MOV      _timeout,A
003364 22                RET      
----- FUNCTION ?L?COM0014 (END) -------


----- FUNCTION ?L?COM0019 (BEGIN) -----
003365 E53A              MOV      A,vWriteLen+01H
003367 2534              ADD      A,pBuf+01H
003369 F534              MOV      pBuf+01H,A
00336B E539              MOV      A,vWriteLen
00336D 3533              ADDC     A,pBuf
00336F F533              MOV      pBuf,A
003371 E53A              MOV      A,vWriteLen+01H
003373 2536              ADD      A,vAddr+01H
003375 F536              MOV      vAddr+01H,A
003377 E539              MOV      A,vWriteLen
003379 3535              ADDC     A,vAddr
00337B F535              MOV      vAddr,A
00337D C3                CLR      C
00337E E538              MOV      A,vLen+01H
003380 953A              SUBB     A,vWriteLen+01H
003382 F538              MOV      vLen+01H,A
003384 E537              MOV      A,vLen
003386 9539              SUBB     A,vWriteLen
003388 F537              MOV      vLen,A
00338A 22                RET      
----- FUNCTION ?L?COM0019 (END) -------
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 113




----- FUNCTION ?L?COM001A (BEGIN) -----
00338B E538              MOV      A,vWriteLen+01H
00338D 253C              ADD      A,vLoop+01H
00338F FD                MOV      R5,A
003390 E537              MOV      A,vWriteLen
003392 353B              ADDC     A,vLoop
003394 FC                MOV      R4,A
003395 E536              MOV      A,pPayload+01H
003397 2405              ADD      A,#05H
003399 F582              MOV      DPL,A
00339B E4                CLR      A
00339C 3535              ADDC     A,pPayload
00339E F583              MOV      DPH,A
0033A0 E582              MOV      A,DPL
0033A2 2D                ADD      A,R5
0033A3 F582              MOV      DPL,A
0033A5 E583              MOV      A,DPH
0033A7 3C                ADDC     A,R4
0033A8 F583              MOV      DPH,A
0033AA EF                MOV      A,R7
0033AB F0                MOVX     @DPTR,A
0033AC 053C              INC      vLoop+01H
0033AE E53C              MOV      A,vLoop+01H
0033B0 22                RET      
----- FUNCTION ?L?COM001A (END) -------


----- FUNCTION ?L?COM001B (BEGIN) -----
0033B1 7B4C              MOV      R3,#LOW vFrame+0CH
0033B3 7A00              MOV      R2,#HIGH vFrame+0CH
0033B5 8B82              MOV      DPL,R3
0033B7 8A83              MOV      DPH,R2
0033B9 E0                MOVX     A,@DPTR
0033BA FF                MOV      R7,A
0033BB A3                INC      DPTR
0033BC E0                MOVX     A,@DPTR
0033BD FD                MOV      R5,A
0033BE 22                RET      
----- FUNCTION ?L?COM001B (END) -------


----- FUNCTION ?L?COM001C (BEGIN) -----
0033BF E0                MOVX     A,@DPTR
0033C0 FC                MOV      R4,A
0033C1 A3                INC      DPTR
0033C2 E0                MOVX     A,@DPTR
0033C3 FD                MOV      R5,A
0033C4 A3                INC      DPTR
0033C5 E0                MOVX     A,@DPTR
0033C6 FE                MOV      R6,A
0033C7 A3                INC      DPTR
0033C8 E0                MOVX     A,@DPTR
0033C9 FF                MOV      R7,A
0033CA         ?L?COM001D:
0033CA AB11              MOV      R3,vTickCount+03H
0033CC AA10              MOV      R2,vTickCount+02H
0033CE A90F              MOV      R1,vTickCount+01H
0033D0 A80E              MOV      R0,vTickCount
0033D2 C3                CLR      C
0033D3 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM001C (END) -------


LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 114


----- FUNCTION ?L?COM001E (BEGIN) -----
0033D6 7819              MOV      R0,#019H
0033D8 E2                MOVX     A,@R0
0033D9         ?L?COM001F:
0033D9 FF                MOV      R7,A
0033DA E4                CLR      A
0033DB FC                MOV      R4,A
0033DC FD                MOV      R5,A
0033DD FE                MOV      R6,A
0033DE EF                MOV      A,R7
0033DF 22                RET      
----- FUNCTION ?L?COM001E (END) -------


----- FUNCTION ?L?COM0020 (BEGIN) -----
0033E0 7F04              MOV      R7,#04H
0033E2         ?L?COM0021:
0033E2 FE                MOV      R6,A
0033E3 1217F6            LCALL    _CFG_RAM_GET16
0033E6 AD07              MOV      R5,AR7
0033E8 AC06              MOV      R4,AR6
0033EA 22                RET      
----- FUNCTION ?L?COM0020 (END) -------


----- FUNCTION ?L?COM0026 (BEGIN) -----
0033EB FD                MOV      R5,A
0033EC E4                CLR      A
0033ED 3439              ADDC     A,#039H
0033EF 8D82              MOV      DPL,R5
0033F1 F583              MOV      DPH,A
0033F3 E4                CLR      A
0033F4 93                MOVC     A,@A+DPTR
0033F5 F52B              MOV      vData,A
0033F7 C3                CLR      C
0033F8 9420              SUBB     A,#020H
0033FA 22                RET      
----- FUNCTION ?L?COM0026 (END) -------


----- FUNCTION ?L?COM0027 (BEGIN) -----
0033FB EF                MOV      A,R7
0033FC 4B                ORL      A,R3
0033FD FF                MOV      R7,A
0033FE EE                MOV      A,R6
0033FF 4A                ORL      A,R2
003400 ED                MOV      A,R5
003401 49                ORL      A,R1
003402 EC                MOV      A,R4
003403 48                ORL      A,R0
003404 7819              MOV      R0,#019H
003406 EF                MOV      A,R7
003407 F2                MOVX     @R0,A
003408 22                RET      
----- FUNCTION ?L?COM0027 (END) -------


----- FUNCTION ?L?COM0028 (BEGIN) -----
003409 FD                MOV      R5,A
00340A FC                MOV      R4,A
00340B         ?L?COM0029:
00340B AB36              MOV      R3,vTmpData+03H
00340D AA35              MOV      R2,vTmpData+02H
00340F A934              MOV      R1,vTmpData+01H
003411 A833              MOV      R0,vTmpData
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 115


003413 22                RET      
----- FUNCTION ?L?COM0028 (END) -------


----- FUNCTION ?L?COM002A (BEGIN) -----
003414 122000            LCALL    c2m_ReadDR
003417 EF                MOV      A,R7
003418 640D              XRL      A,#0DH
00341A 22                RET      
----- FUNCTION ?L?COM002A (END) -------


----- FUNCTION ?L?COM002B (BEGIN) -----
00341B 43A580            ORL      P1MDOUT,#080H
00341E C297              CLR      IO_DUT_C2M_SCL
003420 7F14              MOV      R7,#014H
003422 7E00              MOV      R6,#00H
003424 121C26            LCALL    _DRV_CPU_DelayUs
003427 D297              SETB     IO_DUT_C2M_SCL
003429 7F02              MOV      R7,#02H
00342B 7E00              MOV      R6,#00H
00342D 021C26            LJMP     _DRV_CPU_DelayUs
----- FUNCTION ?L?COM002B (END) -------


----- FUNCTION ?L?COM002C (BEGIN) -----
003430 F583              MOV      DPH,A
003432 7401              MOV      A,#01H
003434 93                MOVC     A,@A+DPTR
003435 FA                MOV      R2,A
003436 7402              MOV      A,#02H
003438 93                MOVC     A,@A+DPTR
003439 F9                MOV      R1,A
00343A 120704            LCALL    ?C?ICALL
00343D 052A              INC      i
00343F E52A              MOV      A,i
003441 C3                CLR      C
003442 9403              SUBB     A,#03H
003444 22                RET      
----- FUNCTION ?L?COM002C (END) -------


----- FUNCTION ?L?COM002D (BEGIN) -----
003445 9238              MOV      bIntState,C
003447 122730            LCALL    drv_mdiom_RxDataFrame
00344A A238              MOV      C,bIntState
00344C 92AF              MOV      EA,C
00344E         ?L?COM002E:
00344E E524              MOV      A,vMdioData
003450 F0                MOVX     @DPTR,A
003451 A3                INC      DPTR
003452 E525              MOV      A,vMdioData+01H
003454 F0                MOVX     @DPTR,A
003455 22                RET      
----- FUNCTION ?L?COM002D (END) -------


----- FUNCTION ?L?COM0030 (BEGIN) -----
003456 E4                CLR      A
003457 90004A            MOV      DPTR,#vFrame+0AH
00345A F0                MOVX     @DPTR,A
00345B A3                INC      DPTR
00345C F0                MOVX     @DPTR,A
00345D 22                RET      
----- FUNCTION ?L?COM0030 (END) -------
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 116




----- FUNCTION ?L?COM0031 (BEGIN) -----
00345E D282              SETB     IO_DUT_I2CM_SCL
003460 754101            MOV      _loop,#01H
003463 7542F4            MOV      _loop+01H,#0F4H
003466 22                RET      
----- FUNCTION ?L?COM0031 (END) -------


----- FUNCTION ?L?COM0032 (BEGIN) -----
003467 7E38              MOV      R6,#038H
003469 1218CD            LCALL    _CFG_ROM_GET16
00346C E4                CLR      A
00346D 22                RET      
----- FUNCTION ?L?COM0032 (END) -------


----- FUNCTION ?L?COM0033 (BEGIN) -----
00346E D296              SETB     IO_DUT_MDIOM_SCL_OUT
003470 D294              SETB     IO_DUT_MDIOM_SDA_OUT
003472 D283              SETB     IO_DUT_MDIOM_SCL_OEn
003474 D2A1              SETB     IO_DUT_MDIOM_SDA_OEn
003476 22                RET      
----- FUNCTION ?L?COM0033 (END) -------


----- FUNCTION ?L?COM0035 (BEGIN) -----
003477 7E04              MOV      R6,#04H
003479 7F44              MOV      R7,#044H
00347B 7D00              MOV      R5,#00H
00347D         ?L?COM0036:
00347D 7B01              MOV      R3,#01H
00347F 7A00              MOV      R2,#HIGH vFrame
003481 7940              MOV      R1,#LOW vFrame
003483 22                RET      
----- FUNCTION ?L?COM0035 (END) -------


----- FUNCTION ?L?COM0037 (BEGIN) -----
003484 7E38              MOV      R6,#038H
003486 121FE8            LCALL    _CFG_ROM_GET32
003489 AB47              MOV      R3,vPasswd+03H
00348B AA46              MOV      R2,vPasswd+02H
00348D A945              MOV      R1,vPasswd+01H
00348F A844              MOV      R0,vPasswd
003491 C3                CLR      C
003492 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM0037 (END) -------


----- FUNCTION ?L?COM0038 (BEGIN) -----
003495 853482            MOV      DPL,pPayload+01H
003498 853383            MOV      DPH,pPayload
00349B A3                INC      DPTR
00349C 22                RET      
----- FUNCTION ?L?COM0038 (END) -------


----- FUNCTION ?L?COM0039 (BEGIN) -----
00349D E541              MOV      A,vLen+01H
00349F 1541              DEC      vLen+01H
0034A1 AE40              MOV      R6,vLen
0034A3 22                RET      
----- FUNCTION ?L?COM0039 (END) -------
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 117




----- FUNCTION ?L?COM003B (BEGIN) -----
0034A4 8F82              MOV      DPL,R7
0034A6 8E83              MOV      DPH,R6
0034A8 A3                INC      DPTR
0034A9 A3                INC      DPTR
0034AA A3                INC      DPTR
0034AB E0                MOVX     A,@DPTR
0034AC F539              MOV      vReadLen,A
0034AE A3                INC      DPTR
0034AF E0                MOVX     A,@DPTR
0034B0 F53A              MOV      vReadLen+01H,A
0034B2 22                RET      
----- FUNCTION ?L?COM003B (END) -------


----- FUNCTION ?L?COM003C (BEGIN) -----
0034B3 121D4C            LCALL    _drv_c2m_WriteData
0034B6 E4                CLR      A
0034B7 753710            MOV      _timeout+03H,#010H
0034BA 753627            MOV      _timeout+02H,#027H
0034BD F535              MOV      _timeout+01H,A
0034BF F534              MOV      _timeout,A
0034C1 22                RET      
----- FUNCTION ?L?COM003C (END) -------


----- FUNCTION ?L?COM003D (BEGIN) -----
0034C2 121D4C            LCALL    _drv_c2m_WriteData
0034C5 E4                CLR      A
0034C6 753A10            MOV      _timeout+03H,#010H
0034C9 753927            MOV      _timeout+02H,#027H
0034CC F538              MOV      _timeout+01H,A
0034CE F537              MOV      _timeout,A
0034D0 22                RET      
----- FUNCTION ?L?COM003D (END) -------


----- FUNCTION ?L?COM003E (BEGIN) -----
0034D1 AE46              MOV      R6,pSrcAddr
0034D3 AF47              MOV      R7,pSrcAddr+01H
0034D5 AD07              MOV      R5,AR7
0034D7 AC06              MOV      R4,AR6
0034D9 E9                MOV      A,R1
0034DA FB                MOV      R3,A
0034DB 7A00              MOV      R2,#00H
0034DD C23A              CLR      ?_drv_flash_WriteBytes?BIT
0034DF 22                RET      
----- FUNCTION ?L?COM003E (END) -------


----- FUNCTION ?L?COM003F (BEGIN) -----
0034E0 5401              ANL      A,#01H
0034E2 FF                MOV      R7,A
0034E3 E4                CLR      A
0034E4 7B01              MOV      R3,#01H
0034E6 FA                MOV      R2,A
0034E7 F9                MOV      R1,A
0034E8 F8                MOV      R0,A
0034E9 C3                CLR      C
0034EA 02061D            LJMP     ?C?ULCMP
----- FUNCTION ?L?COM003F (END) -------


LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 118


----- FUNCTION ?L?COM0040 (BEGIN) -----
0034ED D282              SETB     IO_DUT_I2CM_SCL
0034EF 754001            MOV      _loop,#01H
0034F2 7541F4            MOV      _loop+01H,#0F4H
0034F5 22                RET      
----- FUNCTION ?L?COM0040 (END) -------


----- FUNCTION ?L?COM0041 (BEGIN) -----
0034F6 D282              SETB     IO_DUT_I2CM_SCL
0034F8 753D01            MOV      _loop,#01H
0034FB 753EF4            MOV      _loop+01H,#0F4H
0034FE 22                RET      
----- FUNCTION ?L?COM0041 (END) -------


----- FUNCTION ?L?COM0042 (BEGIN) -----
0034FF 8E3B              MOV      vAddr,R6
003501 8F3C              MOV      vAddr+01H,R7
003503 8C3D              MOV      pBuf,R4
003505 8D3E              MOV      pBuf+01H,R5
003507 8B3F              MOV      vCount,R3
003509 E53F              MOV      A,vCount
00350B 22                RET      
----- FUNCTION ?L?COM0042 (END) -------


----- FUNCTION ?L?COM0043 (BEGIN) -----
00350C E540              MOV      A,pBuf+01H
00350E 2542              ADD      A,vLoop
003510 F582              MOV      DPL,A
003512 E4                CLR      A
003513 353F              ADDC     A,pBuf
003515 F583              MOV      DPH,A
003517 E0                MOVX     A,@DPTR
003518 22                RET      
----- FUNCTION ?L?COM0043 (END) -------


----- FUNCTION ?L?COM0044 (BEGIN) -----
003519 E542              MOV      A,_loop+01H
00351B 1542              DEC      _loop+01H
00351D AE41              MOV      R6,_loop
00351F 22                RET      
----- FUNCTION ?L?COM0044 (END) -------


----- FUNCTION ?L?COM0045 (BEGIN) -----
003520 7819              MOV      R0,#019H
003522 E2                MOVX     A,@R0
003523 13                RRC      A
003524 13                RRC      A
003525 543F              ANL      A,#03FH
003527 22                RET      
----- FUNCTION ?L?COM0045 (END) -------


----- FUNCTION ?L?COM0048 (BEGIN) -----
003528 D3                SETB     C
003529 E541              MOV      A,vPID
00352B 6480              XRL      A,#080H
00352D 9482              SUBB     A,#082H
00352F 22                RET      
----- FUNCTION ?L?COM0048 (END) -------

LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 119



----- FUNCTION ?L?COM0049 (BEGIN) -----
003530 ED                MOV      A,R5
003531 9F                SUBB     A,R7
003532 EE                MOV      A,R6
003533 6480              XRL      A,#080H
003535 F8                MOV      R0,A
003536 EC                MOV      A,R4
003537 6480              XRL      A,#080H
003539 98                SUBB     A,R0
00353A 22                RET      
----- FUNCTION ?L?COM0049 (END) -------


----- FUNCTION ?L?COM004A (BEGIN) -----
00353B 2480              ADD      A,#080H
00353D FF                MOV      R7,A
00353E EE                MOV      A,R6
00353F 3436              ADDC     A,#036H
003541 FE                MOV      R6,A
003542 7C00              MOV      R4,#00H
003544 EF                MOV      A,R7
003545 22                RET      
----- FUNCTION ?L?COM004A (END) -------


----- FUNCTION ?L?COM004B (BEGIN) -----
003546 C3                CLR      C
003547         ?L?COM004C:
003547 E541              MOV      A,vPID
003549 6480              XRL      A,#080H
00354B 9481              SUBB     A,#081H
00354D 22                RET      
----- FUNCTION ?L?COM004B (END) -------


----- FUNCTION ?L?COM004D (BEGIN) -----
00354E 120262            LCALL    _printf
003551 900048            MOV      DPTR,#vFrame+08H
003554 7403              MOV      A,#03H
003556 F0                MOVX     @DPTR,A
003557 A3                INC      DPTR
003558 22                RET      
----- FUNCTION ?L?COM004D (END) -------


----- FUNCTION ?L?COM004E (BEGIN) -----
003559 D200              SETB     bMdioTurnAround0
00355B 74FF              MOV      A,#0FFH
00355D F524              MOV      vMdioData,A
00355F F525              MOV      vMdioData+01H,A
003561 22                RET      
----- FUNCTION ?L?COM004E (END) -------


----- FUNCTION ?L?COM005A (BEGIN) -----
003562 EF                MOV      A,R7
003563 33                RLC      A
003564 95E0              SUBB     A,ACC
003566 FE                MOV      R6,A
003567 EF                MOV      A,R7
003568 7807              MOV      R0,#07H
00356A 22                RET      
----- FUNCTION ?L?COM005A (END) -------

LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 120



----- FUNCTION ?L?COM005B (BEGIN) -----
00356B F583              MOV      DPH,A
00356D E4                CLR      A
00356E 93                MOVC     A,@A+DPTR
00356F FF                MOV      R7,A
003570 E517              MOV      A,vCfgPwdLevel
003572 C3                CLR      C
003573 22                RET      
----- FUNCTION ?L?COM005B (END) -------


----- FUNCTION ?L?COM005C (BEGIN) -----
003574 FE                MOV      R6,A
003575 E4                CLR      A
003576 350F              ADDC     A,vTickCount+01H
003578 FD                MOV      R5,A
003579 E4                CLR      A
00357A 350E              ADDC     A,vTickCount
00357C 22                RET      
----- FUNCTION ?L?COM005C (END) -------


----- FUNCTION ?L?COM005D (BEGIN) -----
00357D 8E35              MOV      pPayload,R6
00357F 8F36              MOV      pPayload+01H,R7
003581 8F82              MOV      DPL,R7
003583 8E83              MOV      DPH,R6
003585 22                RET      
----- FUNCTION ?L?COM005D (END) -------


----- FUNCTION ?L?COM005E (BEGIN) -----
003586 EB                MOV      A,R3
003587 2406              ADD      A,#06H
003589 FB                MOV      R3,A
00358A E4                CLR      A
00358B 3A                ADDC     A,R2
00358C FA                MOV      R2,A
00358D 22                RET      
----- FUNCTION ?L?COM005E (END) -------


----- FUNCTION ?L?COM005F (BEGIN) -----
00358E 1228CD            LCALL    drv_mdiom_TxDataFrame
003591 A238              MOV      C,bIntState
003593 92AF              MOV      EA,C
003595 22                RET      
----- FUNCTION ?L?COM005F (END) -------


----- FUNCTION ?L?COM0060 (BEGIN) -----
003596 AF18              MOV      R7,vFPDAT
003598 121F0B            LCALL    _c2m_WriteAR
00359B 7F02              MOV      R7,#02H
00359D 22                RET      
----- FUNCTION ?L?COM0060 (END) -------


----- FUNCTION ?L?COM0061 (BEGIN) -----
00359E C3                CLR      C
00359F E53C              MOV      A,vLoop+01H
0035A1 953A              SUBB     A,vReadLen+01H
0035A3 E53B              MOV      A,vLoop
0035A5 22                RET      
LX51 LINKER/LOCATER V4.66.66.0                                                        10/30/2016  22:31:39  PAGE 121


----- FUNCTION ?L?COM0061 (END) -------


----- FUNCTION ?L?COM0062 (BEGIN) -----
0035A6 853682            MOV      DPL,pPayload+01H
0035A9 853583            MOV      DPH,pPayload
0035AC E0                MOVX     A,@DPTR
0035AD 22                RET      
----- FUNCTION ?L?COM0062 (END) -------


----- FUNCTION ?L?COM0063 (BEGIN) -----
0035AE 7D40              MOV      R5,#040H
0035B0 120E12            LCALL    _Block_Read
0035B3 8F2E              MOV      vBlockLen,R7
0035B5 22                RET      
----- FUNCTION ?L?COM0063 (END) -------


